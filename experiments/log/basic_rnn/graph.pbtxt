node {
  name: "Train/TrainInput/raw_data"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 81000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 81000
          }
          dim {
            size: 1
          }
        }
        tensor_content: "\315\314\314=\354Q\270>\372\355k?\235\371\223>\234jR?\037\336\025?9\207x?h\036\350=\204\317\315>\006)v?xb\027>$\001\001?\367\373\177?x\"\2019S\032\201:\306\371\200;\320w\200< \350|=\203Jm>\300M6?n\354Q? \"\027?f\243w?\347j\001>Y\037\342>U\203|?\216 \\=\016LP>#\355%?a\206i?\356\003\244>\323\362^?7F\346>0j}?P\310#=\304;\035>-\027\005?Y\230\177?\367\372\316;E\254\315<Z\202\310=\334\340\264>\275\364i?\226*\241>\225\336\\?\036z\362>!I\177?`\\6<\303T4=Nd,>\222^\017? O|?&\320h=\207\224[>\252~,?\334\020a?\304\221\331>\027;z?\030t\264=\251\215\244>\203U_?`\373\343>\375\356|?\377\346A=\035\2718>uf\027?\270qw?HQ\004>\233p\346>\256r}?\266\263!=}Q\033>\213\302\003?t\307\177?\317\377a;L8a<\274\037^=\013\024R>\322\372&?PBh?qP\254>\261\244d?^w\303>\253\257q?&7X>\337\217*?\350\261c?Wg\311>>[t?\370\3221>\236\361\022?\207dz?\371\200\257=\306v\240>\336X\\?\017\200\365>\301\221\177?\236\036\334;\025\244\332<6\316\324=p\261\276>\003Wo?\3376y>\355\217<?\341\260F?,\3531?\205\020Y?\n\016\004?<\276\177?\315f\203;\350\337\202<\247\310\200=\374^q>\376y8?\234)N?z\212 ?[to?H\236w>\224\275;?F<H?*x.?aB^?zY\352>B+~?\373\261\350<\342\025\342=\216 \311>\371<t?\002\2133>\026\020\024?\356\265y?lP\304=\004\177\261>%\355g?\201z\256>@\nf?\243\236\272>_2m?\214`\213>\034\337J?\006i(?\014|f?S\307\267>\022\240k?f\006\226>L!T?\206h\021?\316C{?\303\270\224=\376\353\211>\215\211I?\020\201+?\217mb?\200?\321>Avw?\213\r\004>\032\014\346>u^}?\313\247&=\353\337\037>\360\351\006?\314@\177?\\\245><tm<=e\3023>\n4\024?O\237y?x\000\307=@\252\263>\372<i?f\347\245>\262J`?(?\336>\267\214{?U\357\213=\235_\202>\372YB?\3555;?f8I?&;,?una?\340X\327>Y\213y?B_\311=k\222\265>w\\j?bz\236>y\331Z?\364\022\376>J\374\177?\250bm9\346Tm:\344\035m;DBl<\033\332h=Z\235[>\264\203,?\332\ta?E\274\331>\323Gz?\343\356\262=\300L\243>\255n^?JT\351>\n\376}?M\367\376<\320\007\367=\316;\331>+!z?\341\213\267=\270\030\247>. a?\3134\331>\013\037z?\267\314\267=\355M\247>\027Ea?\220T\330>Q\332y?\245\374\277=F\375\255>A\272e?\n\234\274>\206Bn?\033\026\204>h\005D?\202\2647?\303\203O?\2475\035?4\253r?71J>\312D\"?\240\246m?}E\210>\022\001H?\227\375.?\212\177]?\257\320\356>\256\330~?n\376\222<4[\220=].\206>(\010F?\'^3?h\305V?\031[\n?\007S~?G\025\325<c\212\317=@\202\272>\371\"m?\232\311\213>\250>K?\351\210\'?\377\223g?\231\274\260>Uug?\000\203\261>\227\357g?\242j\256>#\000f? \337\272>CUm?Cr\212>#\005J?\037d*?\373\353c?\025\375\307>\271\276s?w\261:>\340\247\030?`\200v?uV\022>\215\331\372>z\345\177?\017\034\324:0\304\323;\326e\322<|\376\314=\252y\270>6\004l?\226c\223>\247\353Q?\036$\027?\366\241w?q\200\001>\210?\342>\324\212|?\311MZ=@\253N>=\365$?p\250j?\242\200\234>>TY?EQ\003?\372\323\177?x\370/;\202\177/<D\236-=OB&>\313C\013?j\004~?\234\323\373<\327\025\364=\243\376\326>\220ny?\201\311\314=HO\270>\200\354k?\224\003\224>\005sR?u\310\025?\377\225x? a\346=\313v\314>\013\240u?\034E\037>a\177\006? W\177?Vp(<\007\265&=\023\354\037>M\362\006?\374>\177?/r@<\201/>=\330Z5>s<\025?\034\364x?\256G\333=7\315\303>(\330q?e\367U>\376A)?/ge?]\253\276>\351So?\004by>\020\246<?\364\206F?\256G2?\261\177X?\334\237\005?v\201\177?-\226\374;\275\243\372<\233\370\362=<%\326>2(y?A\037\325=\240\361\276>\263wo?\264ow>\204\245;?(iH?\271\022.?\021\325^?\263\366\346>/\215}?\2454\033=\030S\025>F\031\377>0\377\177?\300\362O8\035\360O9\216\345O:Y\273O;\311\022O<\313tL=&@B>\323f\035?+~r?4\266L>{\311#?\'\375k?5\223\223>\007\024R?\250\274\026? \354w?\005T\372=\376\272\333>\205\334z?j\"\241=\341t\224>h\322R?!\322\024?\3719y?\252\004\323=\224F\275>\336\233n?t\255\201>\243\252A?\236\237<?*\223F?\301,2?\363\251X?\341*\005?0\225\177?\227F\325;:\343\323<7h\316=\273\232\271>v\244l?\226&\217>\013AN?4Q ?e\256o?\323tt>\031\031:?xBK?\361\177\'?\022\237g?\343t\260>\330Hg?j\242\262>\221\236h?>\366\251>q\025c?G3\315>d\353u?\344\357\032>\204~\003?)\317\177?\3154C;\363\237B<\030P@=\224H7>^z\026?\365\032x?\342\326\364=\227\221\327>P\235y?@=\307=7\333\263>#Zi?z\'\245>\013\303_?Mm\341>JY|?RXf=%dY>i=+?@\311b?i\n\317>\374\242v?\201U\020>\333\372\367>\256\277\177?v\204\200;m\003\200<\243\006|=\322\204l>\210\3435?\376\237R?vT\025?#\344x?t*\335=)H\305>/\210r?\337&L>`s#?\377\\l?<\013\221>\275\350O?\036:\034?\361\214s?!\201=>&o\032?\360\024u?\260=\'>M\355\013?\376\306}?o\004\r=\221)\010>\t\035\354>\206t~?|\213\304<M\324\277=}\334\255>;\245e?\244!\275>\230\210n?\2462\202>\322-B?_\221;?\257\216H?\267\275-?\004O_?\025\"\344>p\367|?\021\327?=\347\3326>\3503\026?&Lx?\257\020\357=\252(\323>E%x?5\241\363=\307\245\326>\372Qy?\357,\320=\316\003\273>\rim?\377\352\211>\242\210I?,\203+?\261jb?\"Q\321>\261|w?m\255\003>`}\345>5A}?u\320-=?p&>\316b\013?q\371}?<\235\000=\305&\371=7\327\332>/\233z?\033\367\250=s\006\233>\027,X?\243\206\006?\246U\177?\203\350)<p%(=]>!>}\332\007?K\t\177?\211\307u<\253\027r=\237\310c>E\0351?!OZ?\022\221\000?\267\376\177?\375i\2448\261f\2449~Y\244:\275$\244;?R\243<\260\020\240=\024\216\223>\256\017R?\315\307\026?3\344w?\243A\373=jn\334>\336\016{?\263\026\233=$X\217>\261lN?X\346\037?\236\031p?5\231n>\347\0007?t\272P?\300+\032?VLu?\'\022$>V\310\t?5\201~?\177G\276<\r\334\271=\024\376\250>\262mb?\247>\321>\362uw?,\022\004>\370\022\346>\331_}?\215P&=\304\217\037>\312\262\006?\207L\177?\213\3732<\000\0071=U`)>@\\\r?\0016}?\346\2150=\260\361(>)\022\r?\232T}?]\021)=\337\026\">\242n\010?\230\343~?\326\225\215<c#\213=u\257\201>\236\254A?\216\233<?\334\232F?\311\0332?\213\304X?\'\341\004?\303\240\177?!3\276;\201\030\275<\027\273\270=h\021\250>\366\313a?g\036\325>3\321x?\255f\337=+\010\307>\243Rs?m\312@>\\~\034?vPs?\313\351@>\351\221\034?\007?s?\002\345A><.\035?\370\261r?0\320I>\013\n\"?S\345m?O\227\206>\336kF?T\2032?\277!X?!\243\006?\312O\177?\276\274/<0\332-=&y&>\320h\013?M\367}?\006$\001=b#\372=>\226\333>\026\322z?\333b\242=\262\202\225>\376\263S?*\207\022?\333\242z?\363\013\250=\375A\232>\205\220W?\3201\010?e\363~?\202\300\205<u\221\203=^;v>\324\005;?@\221I?\\o+?\233\205b?}\253\320>\334?w?\0319\007>\217\273\352>\263;~?\325\226\340<\223n\332=\203\"\303>n\207q?\231rZ>\301\330+?\336\365a?\013\036\324>Pzx?E\243\351=\362\373\316>r\235v?\232\247\020>\266p\370>\332\306\177?\350ed;\"\232c<\267p`=`$T>O1(?7\302f?E\005\266>\014\237j?<\277\234>\330\204Y?t\311\002?\357\340\177?zl\370:\361\363\367;\240\023\366<R\257\356=\003\336\322>\t\013x?\355\264\366=\346\374\330>\016\016z?7\323\271=\331\366\250>\307hb?\346\\\321>\373\200w?]m\003>,\036\345>Z-}?\222\2532=b\340*>\260\\\016?\355\306|?\010\254K=c\213A>\205\366\034?\226\344r?\351\371F>\007P ?\225\257o?Idt>t\020:?)RK?\006[\'?\217\314g?\rN\257>M\220f?\214E\267>\227Vk?\004\364\227>C\266U?\3305\r?\363E}?i\247,=S`%>\377\252\n?\3078~?\211\007\342<\377\312\333=a4\304>\203\010r?\267FS>N\257\'?ydg?\372\357\261>;2h?/\271\254>\001\351d?\034\311\301>^\341p?z\240c>\372\0061?PqZ?\2070\000?\333\377\177?h0\0237\0230\0238\300.\0239v)\023:P\024\023;\320\277\022<So\021=^E\014>\303\034\362>\"?\177?\233L@<\317\n>=\21695>\362&\025?Y\002y?\356\230\331=Zz\302>\t7q?\342\345^>\002a.?\373c^?f\223\351>\'\t~?f~\371<-\345\361=\004S\325>\310\342x?iS\335=Eh\305>\345\226r?-TK>\206\364\"?\213\350l?\275W\215>\265\245L?\3044$?x\204k?\373\277\226>l\272T?\205\324\017?\240\025|?\310\302v=\031\345g>Ia3?_\300V?\275h\n?\231N~?hD\327<H\234\321=6(\274>W\005n?L\273\205>r\232E?\206M4?\250AU?Vm\016?p\277|?\"\177M=\324/C>[\373\035?[\364q?\354eT>\256W(?\356\221f?\027;\267>\245Pk?\343\033\230>\245\326U?\t\337\014?Ti}?E\376#=im\035>\2209\005?\316\222\177?~\007\332;\034\224\330<J\332\322=\357$\275>P\212n?\307&\202>&\"B?\177\251;?\276aH?\200#.?\345\274^?\345\205\347>\341\250}?Hi\024=\251\010\017>\374\033\366>-\236\177?\000\\\303;\3251\302<Y\227\275=>\n\254>\271vd?F\230\304>\0067r?(\257P>\342\'&?\213@i?\354\317\245>):`?\240\242\336>\313\246{?\201\311\210=TM\177>\213\246??n\262@?3\231>?\275\305B?\306U:?\026\324J?\317\202(?r[f?\003\230\270>\'\025l?)\361\222>\\\212Q?\234\034\030?~\352v?\314/\014>p\375\361>\270;\177?I\261C<\352ZA=G:8>R\025\027?\246\254w?\226\340\000>\177P\341>eR|?\322\004h=F\340Z>\227\027,?\210\237a?\276-\326>\372*y?\r\313\324=\357\256\276>\274Uo?\247Hy>\r\231<?\232\237F?Q\0212?\355\324X?\260\263\004?\222\247\177?\325\237\260;\035\254\257<\267\347\253=\313y\235>\371\024Z?\3764\001?,\372\177?Su\2729Yd\272:~ \272;\327\021\271<\201\343\264=j\351\244>\357\226_?\013u\342>9\227|?\337IW=\r\371K>\322W#?z{l?\252<\220>\0065O?\355\370\035?\241\366q?\206ET>\270D(?\321\251f?\350\241\266>4\371j?se\232>\260\254W?\261\344\007?\310\006\177?:Ex<!\202t=\234\351e>\253J2?\376zX?\330\254\005?+\177\177?\307\223\000<\355\"\377<\2700\367=\327Z\331>\215*z?Lm\266=Y-\246>\333{`?\001\027\335>H={?\276\201\225=\265\227\212>\201\'J?\216\024*?\377Td?\347k\305>\217\230r?]<K>+\346\"?7\370l?\010\355\214>\364EL?\221\031%?f~j?\251\230\235>\267,Z?\035\362\000?l\374\177?\207\367d9\272\352d:\216\267d;6\353c<\212\277`=\216jT>dZ(?\203\216f?\002Q\267>\031]k?X\310\227>\274\222U?\355\224\r?%\036}?\021c6=\001D.>\340\233\020?\224\260{?\364\232\207=\266@}>x\236>?p\273B?Ek:?\337\254J?i\336(?\367\346e?\204\177\273>~\253m?!$\210>\332\341G?\307C/?,\030]?k+\361>\017$\177?\3333[<\024EX=\311\331L>\325\336#??\345k?~4\224>?\234R? ^\025?\261\335x?N\355\335=\334\340\305>\340\315r?\363?H>\364\026!?L\344n?-p\177>\003\270??\252\217@?j\337>?\027<B?\327s;?\231\305H?\005A-?O\000`?$\376\337>\211\377{?\326\034|=I\230l>\001\3565?Z\216R?\376\201\025?\252\305x?\014\303\340=O\030\310>\240\312s?;\005:>U:\030?\013\324v?^}\r>\021\341\363>\026m\177?\330\225\022<\033F\021=\023\037\014>&\345\361>\r9\177?\027XF<f\361C=\313\221:>\300\223\030?\333\217v?\022q\021>\200\221\371>\242\326\177?\020\\%;@\361$<(H#=\331\305\034>k\305\004?\362\244\177?\310\333\265;g\331\264<S\333\260=\211\225\241>\245-]?r\256\360>W\025\177?|\321i<@{f=%\203Y>?O+?!\261b??\237\317>\223\333v?\201\r\r>\022?\363>X]\177?a@\"<\n\245 =\037X\032>\226\024\003?\013\332\177?<\274\027;Lb\027<8\374\025=?~\020>[5\370>K\303\177?\020\234r;$\266q<B%n=\256L`>\034+/?\222<]?}W\360>\322\n\177?wCt<4\237p=\206|b>\177d0?\243h[?\213\343\372>\340\345\177?\212\350\320:M\223\320;m?\317<0\001\312=t\024\266>\322\247j?\303\204\234>tWY?OH\003?\347\324\177?GG,;W\323+<\007\006*=G\367\">\316\007\t?\315\271~?\237I\242<\225\022\237=\222\267\222>>YQ?\236\231\030?X\213v?\352\263\021>.\361\371>M\333\177?\327\265\022;\303a\022<\364\022\021=\214\357\013>\027\240\361>_1\177?\225\372M<\247cK=4JA>\366\315\034?2\ts?\317\353D>T\r\037?\024\357p?\361\336b>X\2330?\203\025[?\232\275\374>`\365\177?\321\362):\234\326);\357e)<\220\245\'=\371\310 >\004\212\007?\246\034\177?\216\220b<\200n_=e>S>j\252\'?\211jg?\316\310\261>Q\032h?\332T\255>\351Me?tK\277>:\245o?\312\364t>\347[:?\351\310J?\360\234(?T:f?\300k\271>\227\212l?*\326\217>^\333N?[\326\036?<$q?\330\357_>\351\366.?X\211]?c\227\356>\360\320~?r\324\226<\205\r\224=\220Y\211>%\002I?\034\267,?.\302`?Rn\333>\264\306z?A\300\243=u\250\226>\022\247T?\275\007\020? \374{?%\360|=\213Qm>\205Q6?\007\346Q?\2042\027?\212\227w?G\034\002>0(\343>\025\300|?\372VM=\264\013C>\377\344\035?F\tr?\327;S>\352\250\'?elg?\311\274\261>\371\022h?\243\204\255>\275le?&\210\276>\353Ao?O\\z>4&=?\026\223E?\207]4?}\'U?\005\263\016?\271\237|?=8U=\323\036J>\2519\"?\211\262m?\330\363\207>\232\264G?L\251/?\231\201\\?\305\224\364>\234}\177?\215!\002<\365\030\001=\245\016\372=\221\206\333>\237\315z?\341\353\242=\365\365\225>\256\023T?P\214\021?B0{?\373\022\227=\016\356\213>\274_K?\021;\'?\315\363g?DO\256>\257\356e?YN\273>$\221m?\251\330\210>g\212H?m\307-?!A_?\312t\344>W\t}?4x;=\247\3432>O\243\023?h\371y?\020I\274=\243\371\252>\306\302c?4\376\310>:.t?-a4>\372\232\024?\254]y?\033\312\316=\336\350\271>X\317l?2\003\216>\330>M?\212\304\"?\322\034m?\220\363\213>\272dK?N/\'?6\002h?\242\361\255>\313\262e?y\313\274>v[n?-j\203>\204^C?\220\0259?\220\025M?\027(#?\016\260l?\334\327\216>\212\373M?\340\372 ?I\001o?-\336}>\364\355>?\203\037B?\361\256;?\225WH?z:.?\274\233^?\034J\350>\320\315}?hW\013=\350\231\006>\022\321\351>\346\023~?\3133\364<5\354\354=\251\203\321>\024\217w?\261\232\002>\245\344\343>\001\352|?@\036C=\316\3229>7\032\030?L\354v?\377\024\014>\202\326\361>o7\177?e\363G<\264\202E=\215\374;>\321y\031?\355\333u?\314\323\033>B\035\004?J\274\177?WG\207;^\270\206<2\201\204=\005\335w>\365\335;?\302\377G?\214\000/?2{]?\022\352\356>\025\334~?GO\221<o\273\216=\340\310\204>\374\261D?\332C6?8\375Q?!\367\026?_\302w?\0137\377=5i\337>\364\331{?\265\232\202=\013\215t>\300%:?}+K?\366\265\'?7\\g?T%\262>\272Rh?t\345\253>\221^d?\334/\305>\006}r?\226\306L>P\323#?\'\362k?q\335\223>\323RR?Y\033\026?\']x?2\021\355=\027\240\321>d\231w?\213\000\002>\317\376\342>\273\266|?\037\236O=\016\030E>\214(\037?\237\324p?GTd>\270j1?\344\327Y?\266\340\001?\345\361\177?\002\236a:Lla;\315\245`<C\221]=\001\225Q>\330\257&?L\235h?\214\376\251>\006\033c?\263\020\315>\246\335u?`\272\033>\222\013\004?\214\276\177?8\307\202;\232A\202<e/\200=\356Rp>\010\3547?\354\"O?\265%\036?\220\314q?\\\234V>\351\241)?\363\352d?\323\274\301>d\333p?\302\364c>\30351?\200)Z?.\373\000?&\374\177?hpv9\225av:M&v;\2379u<\002\216q=7Oc>\322\3310?`\266Z?\025\332\376>\257\376\177?\324\270\2508Z\265\2509t\247\250:\346o\250;@\222\247<\277$\244=\334\374\226>l\354T?\373O\017?\037V|?\\\035g=\374\022Z>\347\241+?\331@b?NR\322>y\331w?\014\203\374=\304`\335>QQ{?L\030\223=\256\207\210>\354>H?0r.?\017K^?V&\352>\221\"~?A\372\354<O\037\346=\306C\314>v\213u?\234s >nO\007?=*\177?/\020U<\337JR=\360~G>J\241 ?\037]o?\316\341x><d<?r\003G?[41?\251+Z?\026\365\000?U\374\177?Y\240j9\350\222j:,]j;\235\206i<\2042f=\227BY>\032*+?R\343b?]i\316>\375dv?\356\353\023>v\033\375>\242\367\177?c\336\005:\343\314\005;\365\206\005<_p\004=\035(\000>)<\340>\374\016|?\271^x=?Oi>\351&4?\256\200U?.\305\r?\206\t}?\274l;=<\3312>\210\234\023?\221\375y?G\312\273=\"\222\252>\334}c?R\253\312>\324\343t?\323\013*>\346\316\r?V\005}?\205r<=\376\3063>\0067\024?m\235y?\3029\307=g\330\263>wXi?\2002\245>\335\312_?z>\341>\022N|?\244\021i=\222\316[>\315\237,?\267\342`?o\251\332>\335\215z?]\217\252=\006[\234>\3746Y?\344\242\003?\034\313\177?\005dS;w\265R<\276\377O=\305oE>w^\037?\361\237p?\224:g>\343\0033?\317UW?D\322\010?\274\310~?\234\344\232<\335\366\227=8\260\214>:\017L?\323\233%?X\346i?\343\211\241>\014%]?\200\340\360>K\033\177?\213\350c<\362\274`=?hT>\nY(?7\220f?\025F\267>\345Vk?\372\361\227>\232\264U?I:\r?\035D}?X\032-=\216\311%>2\362\n?\274 ~?x\341\355<\036\371\346=\213\354\314>>\317u?\231\216\034>\023\237\004?\222\252\177?_\242\252;\347\276\251<z:\246=}\274\230>\233XV?d\201\013?\200\356}?9N\003=N1\376=\222\244\336>M\247{?\327\271\210=02\177>\357\230??}\315@?rb>?\2530C?\365u9?\niL?\334\305$?\005\337j?k\024\233>\0337X?Gh\006?\311[\177?\345\315#<\246*\"=\006\277\033>\316\016\004?#\276\177?i\230\203;\036\021\203<J\370\200=E\262q>\374\2458?\330\333M?\016H!?a\261n?\260\030\201>|\027A?D\314=?\023TD?\351\0147?\314\245P?\323_\032?\225!u?\230\204&>\212p\013?\213\364}?\270\321\001=\317h\373=\371\213\334>\022\027{?c\032\232=\352\201\216>s\257M?\363\263!?t@n?b$\204>9\023D? \2277?\333\266O?\210\266\034?A\036s?\347\274C>\222R\036?-\242q?\340\366X>~\376*?\007\036c?\031\376\314>>\326u?\203\'\034>wW\004?\232\264\177?|\240\226;;\357\225<\2700\223=\230\234\210>oRH?\034F.?\353\212^?~\255\350>\022\340}?\220\332\006=\370i\002>\n\234\343>\373\331|?\311\006G=\020[=>*W\032?\267(u?&\034&>\005*\013?s\r~?3a\367<\315\350\357==\316\323>\333^x?\353\335\354=\256x\321>\027\213w?Q\326\002>s=\344>b\375|?tc>=\367\2115>\337Z\025?\335\337x?\247\253\335=m\255\305>{\266r?\214\217I>\335\342!?\350\016n?\177y\205>\207[E?#\3264?;aT?0\300\020?\247\235{?\025\344\211=X\233\200>\371\232@?\226\310>?\351hB?\364\026;?\245qI?\365\267+?\276\"b?\017\013\323>\343\032x?\020\331\364=@\223\327>\326\235y?T-\307=d\316\263>\202Ri?\271Y\245>\252\346_?\361\227\340>\242%|?b\341r=szd>\335\1771?6\267Y?f<\002?\001\354\177?\300\356\237:\313\274\237;s\365\236<\324\337\233=\272\002\220>c\002O?\034v\036?l\200q?\t\326Z>\273\021,?\233\247a?y\374\325>\330\032y?\256\263\326=\2211\300>\277\030p?i\245n>j\0077?@\257P?\377G\032?05u?ue%>y\256\n?\2377~?\340\231\342<@U\334=\354\240\304>\t;r?\341uP>\360\005&?\362hi?\362\305\244>\255}_?\340\013\343>\260\271|?\254\345N=ErD>z\302\036?_7q?#\341^>S^.?\335g^?{|\351>\"\005~?ey\373<+\301\363=\"\276\326>\326Yy?\214>\317=\305E\272>\025\002m?\323\251\214>v\tL?\206\251%?<\326i?{\364\241>\212s]?\317\026\357>\005\342~?\216]\216<.\344\213=\374U\202>\207PB?\204I;? \024I?\022\216,?l\373`?\277\023\332>\333az?\263\322\257={\272\240>U\213\\?{\\\364>\212x\177?/.\007<\250\020\006=Q\255\001>\222\202\342>X\232|?\211\207V=\033KK>\016\357\"?\204\356l?\025/\215>D\201L?\371\213$?V!k?\356X\231>p\326V?\344,\n?\331a~?M\304\315<-\231\310=7\363\264>\201\377i?G\343\240>\253\251\\?\342\254\363>\032h\177?\240\213\027<\310$\026=\326\243\020>Pk\370>\210\306\177?l\254e;^\336d<\352\253a=\360<U>S\325(?\222\362e?\2315\273>\331\203m?\2513\211>\374\336H?@\007-?\316Q`?\\\024\336>g\201{?\270L\215=\005\215\203>i\200C?#\3168?\253\224M?\352\364!?\305\373m?\023\375\205>6\331E?\301\3043?\017 V?\310\031\014?K\266}?N\036\021=\031\372\013>l\257\361>\0263\177?\222EL<\226\271I=G\312?>i\336\033?R\335s?\216\3668>\270\215\027?\352Tw?$\377\005>\274\354\350>\210\353}?\r\t\004=\360\216\377=-\253\337>\257\352{?\216\224\200=\343\003q>\317I8?\201~N?\253\272\037?\nEp?E8l>R\2725?J\345R?=\241\024?\243Yy?\203D\317=\207J\272>\254\004m?)\230\214>\213\371K?V\317%?\245\251i?1\033\243>\277J^?/(\352>\342\"~?|\322\354<\326\371\345=\270&\314>\265\177u?M !>\344\305\007?R\016\177?\202\311p<\230?m=\253\201_>\341\270.?\'\344]?\203\203\354>I\204~?\370\301\274<\214h\270=\275\315\247>h\235a?\261:\326>5/y?\360J\324=jI\276>\306!o?$\033|>\307\t>?\014\335C?3\n8?%\356N?\020\250\036?\270Pq?Gz]>1\223-?\261\213_?2\270\342>\247\246|?a\210S=\277\233H>\321N!?X\252n?[I\201>\263GA?\014j=?(\021E?\374v5?\021VS?P|\023??\021z?\321q\271=\033\247\250>u2b?\241\252\322>\340\370w?\267\325\370=\336\231\332>Q\211z?\227\032\253=\006\317\234>\025\221Y?5\247\002?\330\343\177?R(\341:O\305\340;\233:\337<b%\331=U\037\302>)\013q?QRa>\336\275/?\357b\\?\357E\365>\357\214\177?\260\271\345;e\035\344<B\303\335=\353\277\305>\347\276r?\305\026I>\224\231!?.\\n?7e\203>\260YC?\273\0379?l\003M?\304S#?\364\177l?U\036\220>\206\032O?y:\036?\371\270q?\346\262W>gC*?A\027d?\226\356\306>>Gs?\256nA>\252\344\034?\273\364r?\376\021F>\010\302\037?\274=p?\317\236l>\203\3615?p\210R?>\221\025?f\273x?\356\370\341=\375\t\311>J3t?\245\0274>Uk\024?7|y?\363*\313=O\003\267>\3430k?\311\360\230>\301\202V?\217\017\013?\243\026~?\250\332\362<\227\247\353=\364\211\320>q3w?)\362\007>\254\313\353>\310g~?n\326\312<\266\320\305=Y\265\262>\002\252h?l\253\251>\020\343b?\361j\316>\231ev?\343\342\023>\231\016\375>W\367\177?4\217\n:t|\n;\2121\n<$\007\t=\232q\004>\207\240\346>7|}?\223]\037==*\031>\\A\002?\250\353\177?\017\267\242:Y\203\242;\004\265\241<\332\203\236=\371>\222>\017\362P?G\237\031?\004\276u?7\214\035>\345N\005?K\217\177?\325\006\341;;{\337<{b\331=xO\302>e\"q?\336\t`>\215\005/?\331s]?\377\024\357>\310\341~?\346{\216<y\001\214=Eo\202>XiB?\016\026;?OsI?#\264+?\366\'b?\014\353\322>\240\017x?\026+\366=<\224\330>\375\355y?9\245\275=\215\025\254>#~d?\267i\304>b!r?\004\344Q>}\336&?\306dh?\276o\253>\003\021d?\243\025\307>\241Xs?\021t@>~H\034?@\200s?d8>>s\342\032?\341\264t?F\271,>\347\226\017?\3403|?#mo=Sna>\214\315/?\207K\\?\010\315\365>\372\227\177?\210\266\317;ve\316<;2\311==n\265>hGj?L\006\237>\306C[?\373\265\373>\232\355\177?\303!\223:{\367\222;\275N\222<\315\261\217=\312\234\205>J}E?\344\2144?\330\331T?E\201\017?c>|?F\340l=b-_>\\\211.?e)^?\227\354\352>\317C~?\007\227\334<g\246\326=\023\'\300>\204\023p?\265\356n>\207.7?\346kP?\214\361\032?.\250t?xr->~\021\020?<\367{?O\037~=-[n>\303\3376?Y\363P?\005\234\031?\240\300u?\321e\035>O4\005?\251\223\177?^R\330;\307\344\326<\255A\321=#\340\273>\017\337m?X\302\206>\250\224F?v)2?\034\257X?\224\034\005?|\227\177?H\262\320;\004^\317<:\036\312=\303+\266>F\265j?\021+\234>\236\021Y?\374\n\004?\237\276\177?|\241\202;+\034\202<&\013\200=\202\023p>]\3127?\261]O?+\224\035?bTr?\320\013O>\311.%?\305ej?\201<\236>D\252Z?\266\036\377>:\377\177?\376AF8\230?F9\0006F:\242\017F;fvE<(\025C=\224\3129>\372\024\030?>\360v?X\332\013>E\201\361>\345-\177?\305nQ<m\301N=\257QD>c\256\036?\250Jq?%\320]>\343\303-?2F_?\240V\344>\326\002}?\327\016==\350T4>\010\223\024?\312by?\354.\316=\373l\271>E\213l?\223\321\217>X\327N?D\340\036?\256\032q?\367v`>\335B/?\206\031]?\223#\361>&#\177?6\033\\<;&Y=\036\243M>tW$?&]k?\006\310\227>y\222U?\241\225\r?\331\035}?\250u6=\360T.>\013\247\020?\306\252{?qN\210=\005x~>m;??\313\206A?\030\351<?\242\007F?L_3?\221\303V?\025`\n?iQ~?G\341\325<\301K\320=[\034\273>Fvm?\215\220\211>\0225I?\303B,?\356ca?\365\230\327>\243\237y?\212\366\306=@\242\263>48i?\311\006\246>\305``?>\272\335>ei{?\2431\220=\247\n\206>\'\346E?\201\2503?\267MV?\306\236\013?\342\343}?\232\352\005=\301\211\001>rM\342>\017\216|?\224\204Y=t\367M>\344\211$?\266#k?\004I\231>\255\311V?\205O\n?\304V~?\361<\323<\205\312\315=\306\034\271>\362^l?\002\376\220>F\335O?\276V\034?\244ss?h\356>>\270T\033?\025Tt?\031;2>\2125\023?\t<z?\'W\264=\321u\244>xD_?\345`\344>\r\005}?6\204<=\016\3273>rA\024?\326\226y?\032\002\310=\261y\264>\007\270i?.\274\242>\250\005^?\305\276\353>\276e~?-\330\313<\251\305\306=\335z\263>\256 i?g\241\246>\027\315`?T,\333>\311\263z?\320\004\246=\211\217\230>N4V?B\343\013?\272\312}?i\031\014=\255N\007>P\333\352>\366@~?\276\376\335<\257\372\327=\3163\301>u\230p?\354\243g>\235=3?\223\371V?y\315\t?\242\177~?;\016\277<\211\231\272=\032\231\251>\264\326b?Q\267\316>\030\203v?\'.\022>\367\237\372>\034\343\177?\344\010\347:\244\240\346;\032\001\345<B\232\336=Eh\306>\025\013s?\256\320D>\241\374\036?D\377p?\\\372a>\331\0330?.\326[?Ap\370>\323\306\177?\177\201d;\210\265c<Z\213`=\030<T>2?(?\303\260f?Vu\266>\240\337j?a\020\233>\3543X?\rq\006?\006Z\177?\231\216%<U\342#=\265S\035>\303\'\005?\261\225\177?\nF\324;\001\346\322<\020x\315=\340\332\270>c:l?{\365\221>\365\262P?\247>\032?\333<u?\027\365$>[b\n?\255P~?a>\326<\376\243\320=\242b\273>\005\234m?$\216\210>\363DH?\223d.?\317^^?\350\261\351>|\016~?\203\336\366<\000n\357=.p\323>?>x?\274\262\360=\310h\324>\332\223x?\311\241\346=\346\250\314>.\264u?\363\034\036>\003\263\005?\023~\177?L\253\001<\223\244\000=\2074\371=\240\341\332>5\236z?\204\232\250=\037\271\232>\377\356W?\277.\007?\2441\177?y\265M<I K=\205\rA>,\250\034?\037+s?\253\003C>\005\340\035?\353\rr?\235\371R>\377\201\'?\212\234g?L\205\260>\nSg?\231`\262>\271vh?\230\372\252>i\303c??\372\310>\207,t?\334y4>\366\252\024?]Sy?\324\002\320=A\342\272>\364Vm?\271f\212>\211\372I?\242|*?x\313c?\374\307\310>\342\026t?\024\2645>\013v\025?\257\315x?\326\320\337=&[\307>wws?:\267>>\0332\033?\222qt?\021\2160>(\035\022?\214\337z?_\305\240=u&\224>m\220R?\244|\025?B\311x?~V\340=\217\303\307>\200\245s?=\036<>!\217\031?\356\312u?\035\316\034>\'\313\004?\026\244\177?W\221\267;\025\212\266<\320x\262=I\353\242>\361\'^?%\365\352>8E~?M\345\333<<\376\325=\033\242\277>\353\320o?\236\222r><\0349?\250\tM?\302D#?\202\220l?\t\256\217>-\270N?\377,\037?I\320p?l\221d>\225\2141?\207\243Y?\220s\002?\366\347\177?D;\300:\030\363\277;>\323\276<Ma\272=\033k\251>\240\267b?/w\317>i\314v?\306\356\r>\032\205\364>5|\177?\346\206\003<\231x\002=[\241\374=\231w\335>|W{? Z\222=\303\344\207>t\246G?\376\310/?SR\\?\315\245\365>\324\224\177?\316\375\325;\r\230\324<\254\023\317=\222#\272>o\357l?\325(\215>\251{L?`\231$?\005\022k?v\277\231>\202(W?\306M\t?\302\245~?\3414\254<)\226\250={\265\232>\035\354W?\2516\007?\334/\177?}zO<\340\331L= \233B>B\237\035? Jr?\\\236O>\375\205%?\373\377i?$\340\240>W\247\\?a\272\363>fi\177?HA\026<\206\340\024=@w\017>H\273\366>\031\252\177?*\225\253;)\257\252<\300 \247=H}\231>\223\363V?\307\335\t?\240z~?\026\210\301<\242\365\274=l\206\253>\375\037d?\361\267\306>\325.s?>\316B>\357\276\035?\276,r?\366AQ>\305~&?{\330h?&{\250>o\024b?\314b\323>\2269x?\327>\361=\353\323\324>)\270x?\225Z\342=\023V\311>\337St?!>2>\2047\023?\331:z?h{\264=\257\223\244>\321Y_?\275\341\343>^\351|?\026FC=\330\3669>,1\030?\371\332v?l\026\r>\375K\363>\241^\177?(\371 <Gd\037=k0\031>\261E\002?Y\353\177?D*\245:\374\364\244;g \244<\232\326\240=\3744\224>\251\234R?\016]\025?g\336x?\301\327\335=\372\317\305>4\306r?\002\256H>\353Y!?\307\236n?U\231\201>\306\226A?Z\310<?\343EF?\322\3262?\207\235W?6\016\010?o\374~?\271D\201<\014u~=E\246n>\340\0077?w\256P?\374I\032?\2163u?a}%>\252\276\n?32~?\006F\345<T\333\336=/\233\306>\363!s?\255\207C>\2561\036?F\301q?\345<W>\017\377)?<qd?\272\272\304>\377Fr?\020\313O>\217\240%?\310\340i?\265\256\241>3@]?TB\360>9\010\177?\325\326v<\316\036s=\226\260d>\325\2351?\315\210Y?b\276\002?\344\341\177?\220\307\360:UV\360;\021\223\356<c\240\347=\010n\315>\250\002v?\325\230\031>\322\216\002?\324\345\177?\205I\321:\371\363\320;\336\236\317<\314[\312=,]\266>\273\321j?(m\233>\363|X?q\247\005? \200\177?\236?\377;\236B\375<8n\365=\264\004\330>x\301y?K\361\302=\370b\260>\265=g?O\352\262>\361\311h?d\332\250>jUb?\360\323\321>#\254w??\350\000>\366[\341>$U|?\031Zg=\335HZ>\322\300+?\241\026b?VU\323>\3444x?\357\313\361=\273?\325>Y\334x?\333\025\336=\236\000\306>G\334r?-qG>\344\230 ?\257eo?\235jx>\356&<?\352vG?L30?\345\262[?\244:\371>(\322\177?\033A7;\355\2756<#\2644=F\273,>:\230\017?;3|?9\225o=\271\221a>[\341/?\351-\\?\300w\366>#\245\177?\224y\265;Ix\264<~~\260=\271H\241>\345\364\\?\214\370\361>/;\177?\2319D<\370\337A=\301\2628>db\027?\261tw?\350$\004>\306.\346>xe}?:\360$=\360K\036>{\323\005?:x\177?\004~\007<+_\006=\257\366\001>\031\360\342>e\263|?.nP=\372\322E>b\233\037?\000dp?\214\205j>r\3174?GlT?\016\243\020?\331\254{?L\016\210=\313\010~>n\003???\365A?,\006<?m\264G?\263\251/?\000\201\\?9\230\364>\353}\177?\r\323\001<\263\313\000=\333}\371=\031\031\333>?\256z?\262\256\246=\321\035\231>\373\246V?\212\255\n?\3567~?\222r\342<\0360\334=\306\203\304>\201-r?\r7Q>Qx&?=\340h?OH\250>\242\361a?\3717\324>1\203x?\315\227\350=^-\316>\261Mv?\233D\025>\277\004\377>\t\377\177?o\230v8\271\224v9\341\205v:\207Jv;\224]u<\343\260q=\373mc>\354\3520??\234Z?!n\377>\255\377\177?\233<\2467\303;\2468d8\2469\346*\246:\370\364\245;\315\035\245<\321\311\241=\342\001\225>\223HS?p\237\023?\310\373y?\237\000\274=\202\276\252>q\233c?@\363\311>\236\226t?\177r.>\211\272\020?\234\240{?\263\210\211=@L\200>*L@?Rg??\357/A?~\232=?\n\264D?p?6?\263\004R?\364\343\026?\034\320w?\217\233\375=\3643\336>\302\211{?\244J\214=m\256\202><\247B?_\225:?\347_J?\252\221)?\023\000e?\2127\301>J\232p?)\212g>\201/3?\'\020W?\022\220\t?7\222~?L\337\265<\240\325\261=}d\242>\244\305]?p6\355>\t\237~?)\210\257<N\305\253=(]\235>\353\376Y?\013s\001?\231\367\177?\202m\006:\335[\006;X\025\006<o\374\004=\032\253\000>n\000\341>\033?|?\250\263l=\354\005_>\030s.?\277I^?\024.\352>\343#~?\260S\354<]\202\345=\r\312\313>\nZu?4I#>\240?\t?\334\251~?\217-\252<\213\244\246=Q\025\231>&\240V?\n\300\n?\2751~?_\200\345<h\022\337=F\306\306>>5s?\363qB>\271\205\035?\271ar?$MN>\025\275$?\032\351j?\020\321\232>\356\001X?\262\372\006?)=\177?\rCB<g\365?=e\3666>\224E\026?\337?x?\347\201\360=mC\324>\034\207x?\333!\350=/\322\315>\022*v?\010S\027>E\366\000?L\374\177?f\344l9\263\326l:\354\237l;5\305k<\246`h=\2611[>-F,?5_a?\266\265\327>\263\250y?\355\342\305=\014\304\262>\341\262h?aq\251>\336\273b?\004]\317>z\302v?@\202\016> Z\365>\237\216\177?\211]\342;7\315\340<\370\241\332=\360J\303>\241\232q?\016bY>6<+?\337\312b?b\000\317>%\237v?j\216\020>\221L\370>\262\304\177?T\000m;\352$l<\232\275h=\027\204[>Fu,?\351\035a?\217B\331>6#z?nM\267=u\345\246>\210\374`?\005\r\332>\335_z?\263\017\260=\000\355\240>\345\260\\?\013\203\363>\014d\177?\366\224\033<\277\032\032=|N\024>\214\247\375>\200\372\177?-\010\2609\013\371\257:\220\274\257;I\313\256<\202\020\253=\240\306\234>\223\212Y?l\271\002?P\342\177?\374c\355:\352\365\354;>?\353<\324}\344=\310\377\312>\351\006u?\356\n(>Xw\014?a\222}?~\356\031=\217%\024>em\375>b\371\177?\332\306\3239\364\260\323:nY\323;u\374\321<\203\232\314=\257)\270>l\327k?\265\221\224>\236\352R?p\223\024?\206by?\3416\316=Us\271>\305\216l?\320\271\217>\203\302N?\221\023\037?\005\351p?s4c>\357\3120?\026\315Z?BY\376>F\375\177?\257\203.9@|.:\204^.;\300\347-<3\017,=\355\324$>\215L\n?\271W~?&\304\322<\363W\315=4\301\270>\033,l?\013V\222>\325\005Q?=m\031?\356\345u?a@\033>\240\266\003?\330\310\177?\273p\\;\351\262[<\272\300X=^HM>\037!$?\254\232k?\267*\226>X?T?z\031\021?mn{?w\226\217=H\205\205>\316fE?\256\2754?\223\211T?\267U\020?\262\324{?\215=\203=\026\251u>\321\271:?\031\035J?\251,*?D5d?\3012\306>\365\362r?n+F>\240\321\037?>.p?\026xm>2f6?\351\302Q?R\214\027?\362Uw?\307\357\005>\014\326\350>o\347}?\014\013\005=\304\270\000>\344\024\341>\rD|?6\200k=\354\365]>J\331-?\216\'_?\367\014\345>\273)}?\017\2163=\020\257+>:\346\016?\n\210|?d\373Z=RFO>\237Q%?8=j?\367I\237>\370v[?\245\221\372>\201\342\177?\334\335\353:3q\353;!\300\351<\247\024\343=\362\346\311>l\221t?;\276.>r\354\020?^\206{?n\263\214=\326\010\203>\241\377B?\307\3349?\305\257K?)~&?7\331h?Wv\250>%\021b?\362v\323>\232@x?\356k\360=\2352\324>\\\201x?\020\317\350=\021X\316>H^v?(O\024>\201\250\375>\204\372\177?\331x\2579\321i\257:\270-\257;\371=\256<6\211\252=\346U\234>\3762Y?\004\256\003?\327\311\177?\016xX;\003\301W<\254\351T=n\330I>\t\017\"?\003\340m?\316\273\206>w\216F?\03772?\260\231X?\352W\005?\313\215\177?\264\004\344;\203n\342<I,\334=\304\200\304>\033,r?\002KQ>\036\204&?\013\322h?T\245\250>?1b?\023\262\322>\203\373w?\245\206\370=\000^\332>\306wz?\3643\255=\014\216\236>r\350Z?\345\275\375>\347\372\177?v,\2439v\037\243:}\353\242; \034\242<\343\346\236=\251\222\222>\2659Q?\272\351\030?_Mv?QI\025>k\013\377>\026\377\177?\356\253i8\231\250i9E\233i:\372ei;/\221h<\021De=\344nX>\020\260*?\007\207c?Ir\312>\004\314t?\240g+>\271\266\016?\005\236|?X\242U=\340}J>\'s\"?\327tm?Y\232\211>\">I?\006.,?\227\200a?h\352\326>\024hy?f\216\315=\272\354\270>NDl?a\262\221>4yP?\032\320\032?G\304t?\232\330+>\324\001\017?${|?c\036^=\327\022R>\035\372&?,Ch?\322J\254>\004\241d?~\216\303>\231\272q?\324\233W>\r6*?\341(d?K\200\306>\342\025s?S5D>\347\234\036?g[q?\345\342\\>5=-?\264\005`?\312\335\337>n\367{?N\023~=\251Pn>$\3326?\373\374P?\244\203\031?\031\324u?\024G\034>gm\004?\230\261\177?\327\237\234;0\340\233<\346\350\230=:~\215>)\310L?+\342#?\201\341k?\273M\224>~\261R?A\'\025?%\002y?\025\237\331=2\177\302>]9q?\360\304^>fN.?\356~^?U\364\350>\347\354}?\333\262\003=\245\355\376=\0272\337>\340\313{?\206N\204=\310\204w>h\260;?\331TH?\246@.?\320\222^?\331~\350>\212\327}?w\363\010=>_\004>N\205\346>\316v}?\326\260 =\375b\032>.\034\003?O\331\177?P\253\032;\335M\032<\326\331\030=\240%\023>\"\001\374>\t\360\177?\017_\177:_\037\177;\037!~<\t0z=\353\347j>\270\0045?/\024T?\377\212\021?\3730{?\262\374\226=\017\333\213>\200NK?\244c\'?\365\301g?\314\222\257>\221\273f?\370/\266>\263\267j?\343\032\234>\376\004Y?\034.\004?\033\272\177?d\243\213;\017\013\213<\347\256\210=:\037\177>l\217??c\340@?(<>?:{C?\022\3318?A\201M?\367#\"?\266\311m?\343T\207>#\037G?\334\3660?\375\211Z?{\325\377>\371\377\177?\010\371\3415\357\370\3416\214\370\3417\375\366\3418\301\360\3419\324\327\341:5t\341;\033\347\337<w\310\331=\310\237\302>\001Iq?\202\347]> \321-?@3_?b\307\344>\002\033}??\'7=\255\366.>\235\021\021?\240r{?\336\024\217=\323\025\205>\367\373D?\263\2445?\220\tS?0C\024?\273\225y?\254#\310=\264\224\264>\364\307i?\353R\242>\312\270]?\277\201\355>\001\252~?A\033\252<\377\222\246=\240\006\231>U\224V?\004\340\n?\356&~?\253\323\352<m\030\344=\375\260\312>0\346t?T\351)>\333\267\r??\017}?\347\006:=\007\2241>\205\310\022?\301|z?h\233\254=B\017\236>\255\207Z?\221\342\377>\375\377\177?\205\224X5y\224X6L\224X7\224\223X8\270\220X9D\205X:|WX;\250\240W<+\312T=4\274I>\357\375!?2\362m?\341>\206>\337\027F?\277;3?\220\374V?X\305\t?\037\202~?\326\323\275<\302m\271=\310\243\250>10b?\216\270\322>\316\375w?\335A\370=\347)\332>jhz?\024\n\257=;\024\240>+\017\\?\302(\367>\327\261\177?\371!\234;\206c\233<\370p\230=-\030\215>\266lL?\026\275$?\031\351j?\034\321\232>\367\001X?\230\372\006?.=\177?x=B<\363\357?=t\3616>gB\026?\024Bx?{?\360=\230\020\324>\263ux?:.\352=)g\317>T\306v?\017I\016>\215\007\365>\246\207\177?\037C\360;$\200\356<\220\216\347==`\315>4\375u?@\351\031>\027\307\002?#\341\177?\211\310\366:\226Q\366;\224w\364<\363+\355=\246\264\321>\325\240w?H\221\001>\261X\342>\253\220|?1\342X=IfM>\0133$?k\206k?\337\262\226>\243\257T?\021\361\017?t\007|?\3371z=\210\351j>\227\0055?\275\022T?\313\216\021?\346.{?\325<\227=\273\021\214>\020\200K?\331\356&?\343Ph?s\361\253>sfd?j\376\304>Efr?\033\014N><\226$?\234\025k?p\247\231>O\025W?\n\202\t?e\226~?(\316\263<\330\333\257=\017\302\240>\370\220\\?\336;\364>\217u\177?G&\n<\022\374\010=Eg\004>6\221\346>-y}?I\034 =\023\332\031>z\274\002?\r\342\177?-y\357:+\t\357;\307J\355<+k\346=\223~\314>-\243u?\014\027\037>\243_\006?\203]\177?U\026\"<\324{ =#2\032>\014\372\002?\216\334\177?8\263\r;\311d\r<i,\014=_`\007>Z\365\352>@E~?\374\340\333<&\372\325=\337\236\277>K\317o?W\251r>1(9?P\364L?\036x#?\276Wl?\313.\221>\214\007P?!\355\033?}\320s?\\\2609>D\004\030?\314\374v?\237\037\013>\221q\360>\000\016\177?\205\033q<2\217m=\013\310_>\203\340.?0\252]??\327\355>>\266~?x\014\244<x\303\240=\333$\224>\023\217R?\037\200\025?\353\306x?#\235\340=\267\372\307>\260\275s?s\300:>e\261\030?\010yv?2\303\022>\310t\373>[\353\177?u\036\245:4\351\244;\275\024\244<i\313\240=\214+\224>\267\224R?\222q\025?\257\320x?Fv\337=^\024\307>\020Xs?3|@>\221M\034?\303{s?,y>>&\013\033?\226\222t?F\255.>F\341\020?D\214{?2\375\213=\224k\202>\270eB?\222\035;?meI?\000\324+?b\374a?\'\366\323>\235lx?\333?\353=\022:\320>\271\025w?\274\254\t>NT\356>\277\307~?\374a\233<~o\230=\353\026\215>\225kL?\311\277$?\377\345j?\320\345\232>T\022X?\224\315\006?\340F\177?R\2328<\331\2056=\260c.>\305\260\020?\265\245{?\031\353\210=\211\207\177>\266\303??[x@?h\016??\240\337A?\2652<?\304`G?\273d0?Ih[?\216\345\372>\365\345\177?5D\320:}\357\317;\263\235\316<\242g\311=%\231\265>``j?b`\236>\246\305Z?s\203\376>\312\375\177?\242k\r9\300f\r:9S\r;4\005\r<z\316\013=\334\010\007>\213t\352>\323/~?\275q\346<8\366\337=\\x\307>`\204s?\317\374=>\376\274\032?C\324t?.\357*>\214f\016?~\302|?t\300L=?\204B>\022\221\035??Wr?\350\342N>k\026%?\r\202j?Z\200\235>\005\032Z?\307&\001?\262\372\177?0\263\2519!\245\251:\353l\251;\251\214\250<\342\024\245=d\306\227>$\221U?.\231\r?W\034}?\026\3246=\362\252.>\275\337\020?\023\215{?=\344\213=\tV\202>\224PB?jI;?P\024I?\242\215,?\007\374`?\023\020\332>\305`z?\374\363\257=\014\326\240>\326\237\\?\321\345\363>\211m\177?J#\022<\231\325\020=\211\266\013>5M\361>\365\'\177?\301TW<C\200T=\370yI>\310\325!?\300\034n??\032\205>6\000E?\213\2335?\350\030S?]\033\024?\332\256y?\322\'\305=\010-\262>iWh?\347\306\253>{Jd?\322\255\305>\251\266r?\364\214I>K\341!?\222\020n?\017n\205>\223PE?\336\3554?\003:T?\204\'\021?\351f{?M~\220=\203L\206>\326$F?W\0373?\376)W?\273I\t?\357\246~?+\240\253<\261\007\250=n>\232>\260\215W?\2209\010?h\361~?\327\274\206<\205\205\204=\214\344w>\327\341;?~\370G?\344\020/?-c]?Xv\357>\201\356~?m-\210<\353\351\205=\235Pz>: =?\201\236E?\260D4?\030PU?\334F\016?\261\320|?\216JI=+f?>\304\237\033?\244\023t?!\3435>c\224\025?G\271x?\3618\342=\336;\311>\254Ht?\377\3402>\225\241\023?x\372y?\266(\274=<\337\252>:\261c?\226k\311>\r]t?\244\2701>n\340\022?\257nz?,J\256=\017u\237>\200\227[?\214\327\371>\024\332\177?\341\230\027;\033?\027<\255\331\025=;^\020>d\007\370>v\300\177?\275\350};\347\354|<Z\005y=\244\341i>\203v4?\220\376T?\322\037\017?\006m|?\001\215a=o!U>E\305(?\n\007f? \263\272>x=m?\306\024\213>\373\231J?y\n)?\223\256e?H\346\274>\207in?\"\t\203>\353\377B?-\3349?\332\260K?\227{&?N\334h?\033b\250>M\003b?\312\313\323>\003^x?`\367\354=?\214\321>2\222w?\033l\002>9\237\343>\260\332|?\256\332F=>3=>\021>\032?V=u?\014\356$>\225]\n?9R~?\350z\325<\272\352\317=\014\317\272>\223Lm?\237\255\212>\231;J?\366\345)?\"\222d?\020\354\303>\246\346q?\032)U>\277\311(?U\001f?\202\327\272>&Qm?`\216\212>\361\036J?c(*?\345:d?|\017\306>\003\343r?{\020G>\323] ?\244\241o?\342&u>\005v:?=\231J?5\014)?Z\254e?h\364\274>\356pn?\016\326\202>\003\316B?\203D:?\212\363J?29(?N\270f?\352D\266>\304\303j?]\312\233>\r\306X?\366\334\004?f\241\177?s\355\274;\230\326\273<\376\207\267=\207\025\247>\366\035a??B\331>\036#z?VP\267=\327\347\246>1\376`?\365\002\332>\341\\z?\006k\260=\2338\241>\367\350\\?\326=\362>\264B\177?\215\277<<\345\222:=I\0232>\224\033\023?\224Kz?\016|\262=\366\355\242>\343)^?\262\351\352>UC~?,\323\334<O\337\326=\014T\300>\352)p?\304\264m>\267\2066?\217\213Q?\215\031\030?\314\354v?\215\r\014>\260\313\361>=6\177?_$I<6\254F=I\t=>\233#\032?\376Ru?\215\260#>\372\205\t?9\225~?Tb\264<\201i\260=Y7\241>\010\350\\?=C\362>IC\177?\341+<<\237\002:=\"\2201>\372\305\022??~z?\265m\254=B\351\235>\224jZ?\216C\000?\271\377\177?\245\233\2167\006\233\2168\213\230\2169\235\216\216:\354f\216;\177\310\215<KT\213=\267\331\201>J\326A?\354E<?\231<G?T\2650?\001\356Z?R\236\375>T\372\177?\257{\2659\232k\265:Q+\265;\345*\264<\2024\260=z\013\241>\204\307\\?\354\377\362>\376V\177?r\222(<p\326&=\303\n >f\007\007?a:\177?\236\006E<\022\250B=\337g9>\014\326\027?[\037w?V\035\t>w\202\355>\033\252~?\033\016\252<e\206\246=\023\374\230>\327\213V?\375\366\n?\030\037~?^\260\356<\372\273\347=a\203\315>\025\013v?}\034\031>\2717\002?T\354\177?VT\235:\376#\235;\023c\234<\314f\231=K\351\215>\305\'M?6\374\"?%\340l?\344\220\215>\333\330L?\032\272#?W\016l?/\037\223>\212\261Q?\256\270\027?.5w?=\330\007>\227\245\353>\300a~?\005\321\315<A\245\310=\355\374\264>3\005j?\216\275\240>\236\215\\?BO\364>Vw\177?ha\010<\311>\007=\225\307\002>\202\'\344>\236\370|?M\215?=\n\2306>\350\010\026?\337ix?_\222\353=\236y\320>a-w?xL\010>EP\354>r|~?\335\241\300<D\032\274=q\323\252>a\251c?v\234\311>\333qt?\353\2110>p\032\022?\026\341z?\034\226\240=\235\376\223>\324nR?@\323\025?\245\216x?\303>\347=y\"\315>\267\344u?AR\033>\024\303\003?d\307\177?\252?b;\265wa<g]^=\005KR>:\033\'?\305\032h?\347Q\255>\001Le?\202W\277>R\253o?\302\237t>\207/:?\270\031K?\255\337\'?W(g?\035t\263>\245\034i?\354\273\246>\230\337`?U\274\332>_\223z?\240\346\251=V\316\233>*\311X?U\324\004?\265\242\177?LR\272;\025C\271<\205\022\265=\037\020\245>u\262_?\207\320\341>\327p|?\210\237`=\017NT>\267I(?\206\243f?D\312\266>P\020k?\344\312\231>\2421W?\3504\t?\363\254~?\001\246\250<.-\245=\306\332\227>\273\241U?\316l\r?\023/}?\241?2=\330}*>\000\033\016?%\344|?N\214D=\334\035;>\263\354\030?\016Kv?\215k\025>\353;\377>j\377\177?x0\0268\027/\0269\226)\026:\220\023\026;\225\273\025<F]\024=\206\375\016>\356\013\366>\356\234\177?2\327\305;h\245\304<\373\354\277=\213\360\255>\030\262e?\347\317\274>\312]n?!Z\203>\345NC?p69?\333\332L?L\265#?\264\023l?\367\372\222>\266\222Q?R\007\030?\202\372v?\266A\013>6\243\360>\377\023\177?\261\'k<\251\307g=\n\252Z>\210\370+?E\312a?\302(\325>\253\324x?\350\375\336==\266\306>\022.s?;\331B>\275\305\035?i&r?E\234Q>#\264&?\033\230h?| \252>\3171c?\201\203\314>)\245u?\340\371\036>\207K\006?~a\177?H \036<\230\231\034=\337\234\026>\322u\000?\'\377\177?\035\345X8>\342X9\302\326X:\327\250X;z\361W<\334\030U=\266\002J>\244(\"?\270\304m?\"w\207>g?G?\025\2570?\201\367Z?Oh\375>G\371\177?=\017\3279\247\370\326:e\236\326;\2136\325<\354\251\317=e\233\272>\2350m?\213l\213>\t\352J?sO(?M\234f?\231\370\266>\307*k?\262\031\231>\253\243V?\202\266\n?\3574~?\004\355\343<\222\225\335= \234\305>\227\256r?\243\000J>b\'\"?\017\306m?\357m\207>\2746G?_\3020?#\332Z?,\017\376><\374\177?\017\nq9\337\373p:)\303p;\273\340o<\245]l=\330\271^>\"H.?\376\207^?\312\276\350>8\343}?\200\024\006=\350\260\001>\357\207\342>\224\233|?\224:V=4\006K>\177\305\"?\310\033m?\245\372\213>%kK?- \'?\271\024h?By\255>gee?\243\266\276>\252Yo?\367\021y>\372|<?\267\324F?\355\2331?\302\213Y?\034\266\002?\230\342\177?*$\353:,\270\352;\302\t\351<\254h\342=\014a\311>\217Xt?\003\3721>\030\013\023?hUz?\213O\261=\250\365\241>gt]?\300\021\357>Z\341~?[\262\216<\0106\214=\244\234\202>\321\225B?\241\271:?q\035J?\334+*?Q6d?*,\306>\374\357r?0VF>\324\353\037?%\024p?\335\345n>\320)7?\010tP?\033\335\032?_\271t?\301w,>xk\017?\353H|?\321Qj=6\352\\>]A-?\322\377_?\025\001\340>E\000|?;\357{=Lpl>|\3305?\226\262R?n$\025?\003\004y?\244f\331=\276R\302>\371#q?\214\363_>\377\370.?I\206]?E\251\356>^\323~?\230\240\225<\366\344\222=\267[\210>\333\025H?\315\316.?\036\304]?a?\355>Y\240~?\032\342\256<Y&\253=\321\330\234>\254\230Y?\367\221\002?\224\345\177?\231L\323:f\365\322;\266\231\321<\324<\314=\264\336\267>A\255k?\265\255\225>\277\327S?\220)\022?\204\330z?i\235\241=}\334\224>L)S?\311\360\023?\177\311y?\362\374\301=\006\235\257>\375\301f?\271\006\266>\343\237j?\243\271\234>\201\200Y?\230\325\002?\336\337\177?Ty\000;\3328\000<\355o\376<\333\210\366=q\333\330>\327\003z?\331\n\273=\276\365\251>\033\025c?Z5\315>7\354u?\277\343\032>\014v\003?\025\320\177?\214\207?;@\370><k\276<=\347\0134>\270c\024?\022\201y?\203\227\312=\024\215\266>B\355j?M\265\232>\371\353W?\0167\007?\306/\177?\026\221O<\346\357L=\363\256B>\213\253\035?\276>r?\363@P>\214\346%?0\216i?p\320\243>\310\315^?\337!\347>\231\225}?@$\031={j\023>;c\374>\363\362\177?{\277P:\356\224P;\373\352O<\204GM=\312\375B>b\334\035?Q\021r?/\311R>\203e\'?\247\277g?\300\241\257>\365\304f?\247\363\265>\334\224j?\033\003\235>g\271Y?@6\002?n\354\177?\374\203\234:$T\234;7\225\233<\306\240\230=\334@\215>5\221L?\330e$?\313Lk?\2675\230>\232\353U?\314\246\014?\301\177}?\206\177\036=k]\030>\247\261\001?\206\364\177?/\2357:C|7;\300\3706<\245\3554=\264\357,>\366\272\017?;\"|?\246\264s=\2374e>\323\3461?L\027Y?+\373\003?\232\300\177?QX};\232]|<xzx=\240gi>-44?\014kU?\365\376\r?u\360|?<\213A=\010f8>S1\027?f\230w?b\017\002>\364\024\343>\275\273|?\262eN=5\377C>\202{\036?G{q?\373\036[>y;,?\002na?\233[\327>7\214y?\352D\311=A}\265>\'Pj?6\314\236>\267\027[?\020\261\374>\016\365\177?\312\027/:\331\371.;A\202.<k\246,=k_%>b\252\n?\3748~?\271\355\341<\233\262\333=9!\304>\216\377q?S\306S>1\372\'?B\007g?GI\264>m\233i?\022y\243>\276\216^?\346\226\350>\362\333}?\037\336\007=_\\\003>\350\004\345>\t(}?B\3703=\360\017,>\225&\017?\323i|?\375Sb=w\322U>},)?\341\202e?\275\373\275>\315\371n?\373E~>?\"??\202\270A?$\203<?\020\311F?\265\2651?\277cY?\373%\003?Z\330\177?\225\177\036;s\035\036<\322\226\034=O\232\026>\003t\000?.\377\177?lIR8\271FR9\356;R:\304\020R;edQ<P\267N=\230HD>\311\250\036?\007Pq?\017\204]>\275\230-?\311\203_?f\347\342>k\261|?d\351P=\243AF>=\337\037?\263 p?\3675n>\336\3136?o\025Q?\267E\031?=\005v?\270r\031>#t\002?\353\347\177?o\225\300:\377L\300;\030,\277<\001\266\272=b\260\251>i\346b?CV\316>\225]v?\210Y\024>=\267\375>\310\372\177?\336\363\2469B\346\246:\332\257\246;\311\326\245<T{\242=J\227\225>\037\305S?ZZ\022?\256\274z?\344\363\244=\270\252\227>\231zU?o\325\r?\203\002}?\000#==5g4>\342\236\024?([y?l\026\317=\304%\272>\241\360l?\255 \215>WtL?\335\252$?\377\375j?eE\232>9\223W?i*\010?J\365~??\320\204<\003\251\202=\001\246t>\3122:?\312\023K?\227\355\'?\375\026g?\360\343\263>S_i?R\005\245>\310\252_?l\376\341>\241{|?\377\377]=\277\367Q>\"\352&?\237Vh?\n\314\253>\334Md?\243\230\305>\000\255r?q\027J>15\"?P\267m?\026\323\207>\335\225G?\037\356/?\315\032\\?\316\345\366>&\255\177?\301~\245;\310\250\244<\202Y\241=L\243\224>`\371R?/m\024?\010{y?\335N\313=\030 \267>JAk?\337\202\230>\022*V?\323\376\013?q\300}?E\240\016=\342\250\t>\253N\356>\370\306~?\247\304\233<j\316\230=\261g\215>\377\263L?\210\022$?\"\253k?\373\273\225>\232\343S?\200\n\022?\026\352z?\230\201\237=Q\025\223>%\251Q?\033\316\027?D%w?N\305\010>\177\001\355>9\227~?[e\263<\244w\257=\no\240>\030S\\?`\241\365>y\224\177?\213\264\326;fL\325<\245\276\317=\351\253\272>\2209m?s/\213>V\262J?\247\321(?@\367e?\304\027\273>\316sm?t\241\211>\264DI?\374\036,?W\225a?\347k\326>:?y?fe\322=\026\310\274>\257Yn?pv\203>rjC?o\3748?ZBM?\024\274\"?\002&m?\344\264\213>\330+K?\037\265\'?B]g?\227\036\262>\241Nh?+\000\254>\034pd?\310\301\304>CJr?l\234O>\327\204%?T\001j?3\327\240>\261\240\\?\335\340\363>\021m\177?\264\232\022<\340J\021=\202#\014>\226\353\361>\3039\177?\261\243E<\\AC=\221\3629>r.\030?\010\335v?\326\367\014>\253\037\363>3Z\177?5a%<\334\265#=\312*\035>i\013\005?6\232\177?\rD\313;C\001\312<\023\006\305=\310\021\262>\324Fh?\3772\254>m\221d?\201\360\303>\274\350q?k\013U>k\270(?g\027f?\275J\272>\312\004m?a\227\214>\327\370K?\001\321%?\254\247i?8(\243>2T^?|\360\351>T\031~?C\207\361<Ch\352=\353\223\317>J\327v?&M\r>C\233\363>gf\177?4=\031<K\316\027=\373-\022>\271\237\372>\031\343\177?\274\035\347:h\265\346;\224\025\345<\227\255\336=fw\306>\342\021s?\325nD>[\300\036?h9q?S\304^>\rN.?n\177^?`\361\350>^\354}?a\324\003=a,\377=3a\337>\352\327{?\335\331\202=;\373t>C_:?\310\302J?@\253(?%(f?\337\337\271>j\312l?\264$\216>\253\\M?~|\"?\310jm?(\337\211>\264}I?E\234+?\205Hb?,#\322>\237\310w?\344{\376=\241\334\336>\335\265{?\230\367\206=(%|>\335\016>?1\323C?\031\0378?\205\311N?P\002\037?\302\371p?&Hb>HG0?\304\224[?0\347\371>\324\332\177?\366\232\024;\262D\024<4\355\022=\376\247\r>\276\036\364>\336r\177?\036\324\014<;\236\013=\350\333\006>V2\352>\235$~?/\370\353<#,\345=#\207\313>\255>u?f\332$>CP\n?\206V~?6[\323<:\347\315=\2663\271>\244kl?\001\250\220>\222\222O?\327\020\035?\270\314r?\200PH>\010!!?\337\331n?V\000\200>V\000@?T\377??X\001@?P\375??`\005@?@\365??~\025@?\375\324??\352U@?\271S??\276VA?XK=?\010LE?\264\3674?\274)T?WR\021?\330O{?\267E\223=\223\256\210>3cH?4 .?\245\301^?\304i\347>}\243}?\376\273\025=\270B\020>\340\337\367>\372\275\177?\371\351\203;\006b\203<\232F\201=&;r>.\3568?\272[M?\305~\"?Shm?\364\357\211>4\215I?\251x+?\371xb?@\371\320>\205\\w?\254\215\005>\027E\350>\342\314}?\355\221\013=p\320\006>p!\352>\273!~?\304c\355<\265\202\346=\321\220\314>\203\252u?)\253\036>;\025\006?\376k\177?|\254\023<\276W\022=;\035\r>\332U\363>\233_\177?\035\000 <\035p\036=4O\030>\252\247\001?\013\365\177?mA/:n#/;\235\253.<\346\316,={\204%>x\303\n?\2250~?\324\021\346<\264\233\337=\2371\307>\017es?\305\300?>w\330\033?\177\342s?\223\2538>\315]\027?\013xw?\330\362\003>x\344\345>eV}?\365\240(=\272\257!>\032(\010?\340\365~?|\205\204<\254`\202=\304\'t>\317\3609?\205\213K?\317\323&?\275qh?\036\033\253>\377\330c?\226s\310>]\362s?\253\3057>\237\312\026?2\342w?\303}\373=\307\233\334>q\033{?\306\223\231=\207\017\216>\323IM?\007\252\"?\2259m?P/\213>6\262J?\362\321(?\340\366e?&\032\273>\026um?\256\230\211>\226<I?\2201,?\264{a?/\010\327>\237qy?\260l\314=\003\005\270>\322\302k?\203\034\225>\322^S?\203e\023?\031\037z?\002\313\267=\206L\247>\037Da?vZ\330>%\334y?\374\304\277=\013\320\255>>\235e?bT\275>\017\243n?\267{\201>\204yA?F\004=?\333\323E?s\3203?#\rV?\260L\014?\342\242}?\357\341\025=\342e\020>a\022\370>%\301\177?I/{;\3238z<\207fv=\364\223g>\33643?\223\007W?i\247\t?5\213~??V\271<\321$\265=.\037\245>\'\275_?\213\220\341>\260a|?\014Nd=Z\224W>\2711*?\227.d?\217\\\306>\317\005s?x\034E>C+\037?\372\321p?\225yd>b\1771?\364\267Y?Q:\002?&\354\177?s\305\236:7\224\236;\301\317\235<}\305\232=6\023\217>\365/N?\370z ?\034\204o?\271\302v>\005L;?}\017I?\250\230,?\255\354`?\035m\332>6|z?\010\254\254=\024\035\236>@\222Z?\273\246\377>\341\377\177?\221\t\3716\030\t\37173\007\3718\241\377\3709[\341\370:`h\370;L\206\366<\031\033\357=\2450\323>\021(x?>M\363=\306e\326>==y?\301\241\322=\010\370\274>\324rn?\362\310\202>0\301B?E_:?\304\302J?I\253(?\032(f?)\340\271>\222\312l?\242#\216>\267[M?\314~\"?Lhm?\'\360\211>c\215I?=x+?\214yb?\267\365\320>9[w?\r\241\005>\274a\350>.\322}?\246D\n=\304\231\005>\367V\350>1\320}?\277\301\n=g\016\006>D\003\351>\226\357}?\304\t\003=(\261\375=4D\336>\014\216{?A\306\213=%<\202>&7B?\022~;?\226\262H?;l-?\025\303_?\013m\341>:Y|?\033\\f=\201gY>X?+?\242\306b?\214\032\317>\'\251v?\010\372\017>kw\367>.\267\177?\337z\221;\206\325\220<\377E\216=\310c\204>\203PD?\205\0247?\264\230P?\321\200\032?S\006u?~\023(>\030}\014?#\220}?J{\032=\301\247\024>O&\376>\224\374\177?\206\034[9\315\020[:\360\341Z;\312&Z<2?W=~\357K>\022R#?\323\201l?\237\021\220>j\017O?\357U\036?\375\236q?!$Y>\220\030+?\365\372b?1\327\315>\t,v?\t6\027>\327\341\000?\343\374\177?\2448G9\363.G:5\010G;wmF<A\006D=\250\244:>\274\237\030?\244\206v?\240\371\021>\343T\372>\336\337\177?\355u\000;v5\000<Ai\376<\231\202\366=\261\326\330>c\002z?/7\273=\372\031\252>q-c?\224\236\314>\n\260u?\335Y\036>\032\335\005?xv\177?\372=\t<\254\027\010=\032\222\003>\307T\345>\3068}?\216\340/=AS(>\351\247\014?P\177}?\035\233\036=\340v\030>\207\303\001?\216\363\177?\377\017G:L\351F;\277NF<G\350C=\214\211:>\202\216\030?\341\223v?l5\021>\020<\371>;\322\177?\030\3646;Xq6<Ci4=\000w,>\370j\017?)I|?\335Bj=\370\334\\>\3269-?w\n`?1\301\337>=\360{?\t\321\177=\347\326o>)\2527?\305\225O?\344\010\035?\361\323r?\345\350G>\353\341 ?\370\032o?\246y|>\2709>?\370\177C?\021\3178?\004\223M?\356\370!?\203\367m?[\032\206>\034\365E?\321\2073?k\202V?x\020\013?S\026~?b\002\363<\366\314\353=\270\246\320>\030>w?eS\007>C\342\352>\034B~?\354m\335<\264q\327=\257\307\300><cp?X\220j>K\3254?\237bT?\207\274\020?\221\237{?\335\250\211=\030h\200>\355g@?|/??`\236A?\305\270<?ycF?\315\2252?\220\004X?s\363\006?\274>\177?\234\261@<pm>=\006\2235>\267`\025?\365\333x?\234!\336=\322\t\306>s\340r?M5G>St ?\332\212o?\301dv>N\033;?\234iI?f\312+?\207\tb?\240\245\323>\317Px?\220\204\356=8\275\322>t\377w?b\020\370=j\004\332>O]z?\310]\260=\245-\241>\331\340\\?\366l\362>\275G\177?\317\2767<F\2575=1\240->\267/\020?\001\350{?\240\347\200=#\225q>\233\2268?\017\367M?\312\005!?\007\366n?Sz~>\225<??\201\204A?\307\355<?\267\376E?\320r3?6\244V?\010\265\n?m5~?\232\256\343<\241Z\335=\356m\305>|\231r?\024/K>(\336\"?\363\000m?\211\261\214>i\020L?\001\231%?\251\351i?\363s\241>\332\024]?\300>\361>K&\177?\303\373X<\034\034V=\354\352J>\007\265\"?\251-m?\262\200\213>b\374J?z$(?S\322f?\313\235\265>\024cj?iN\236>\361\267Z?5\321\376>\232\376\177?Z\021\2638p\r\2639\311\375\262:6\277\262;\231\305\261<\002\352\255=>%\237>4[[?E0\373>\332\350\177?z\"\271:\211\337\270;\205\324\267<y\264\263=\275\357\243>O\344^?V\234\346>b{}?\273\221\037=UZ\031>\017c\002?6\351\177?\250A\266:\310\000\266;\375\375\264<L\376\260=w\262\241>\370B]?12\360><\006\177?\007\320x<\270\010u=\035`f>\347\2132?5\024X?g\310\006?\371G\177?\232\2027<jt5=\215j->A\014\020?\335\371{?p|}=}\314m>l\2236?\345uQ?\272P\030?\017\303v?\234y\016>\247M\365>\225\215\177?\026p\344;g\330\342<P\220\334=E\317\304>\200Pr?ECO>\316O%?V?j?\350;\237>Xl[?\\\316\372>\006\345\177?y\271\327:\224^\327;4\364\325<\262]\320=\245*\273>\366}m?\364[\211>[\004I?\017\262,?<\311`?\247C\333>|\272z?17\245=+\343\227>\220\250U?\207Z\r?\2716}?\325`0=\201\310(>\217\366\014?\324_}?\253Q&=\313\220\037>\200\263\006?aL\177?U!3<\367+1=\031\202)>\330r\r?\212,}?I\3362=\253\016+>\204{\016?\010\271|?\267\016O=*\227D>6\331\036?}!q?\272\026`>\310\014/?7i]?\025S\357>\356\351~?\016r\212<\025\033\210=\370\036~>\232\016??=\337A?\2003<?F_G?\017h0?@c[?S\002\373>\027\347\177?\3642\307:t\345\306;d\260\305<\035\353\300=\354\276\256>\3015f?\367\210\271>\260\232l?\360h\217>y{N?\032\302\037?\252=p?\313\237l>\013\3625?\213\207R?\215\223\025?\327\271x?\342\'\342=\224.\311>\373Bt?\25733>Z\327\023?N\331y?\204\033\300=[\026\256>P\312e?\3475\274>\227\014n?j\211\205>\303jE?\032\2654?\265\227T?^0\020?\254\347{?\333\361\200=\006\247q>\014\2408?Z\346M?z.!?\360\313n?\332`\200>\266`@?\003>??\257\201A?\216\363<?\267\363E?\335\2123?\202}V?\273\035\013?\272\021~?\364E\365<\374\355\355=\254I\322>d\326w?a\337\374=P\246\335>\016d{?t\326\220=5\230\206>\270lF?u\2012?\263$X?\376\232\006?yQ\177?\017\020.<\2476,=\020\371$>\014e\n?\315O~?\321\254\326<\246\014\321=\361\265\273>\222\310m?\261\\\207>~&G?\201\3460?\000\243Z?\343G\377>|\377\177?\252i\0048\230h\0049Pd\004:3S\004;\315\016\004<P\376\002=\267\233\375=\0224\336>\312\211{?\263I\214=\235\255\202>p\246B?\007\227:?\337\\J?\267\230)?\352\366d?[q\301>\231\266p?\201\373e>\206T2?\177kX?\256\327\005?vw\177?IA\010<3\037\007=\024\252\002>\222\373\343>\010\357|?R\344A=\261\2668>\351d\027?\331rw?f@\004>\217W\346>\253m}?\366\355\"=\326r\034>\314\213\004?U\255\177?9 \245;4K\244<\260\377\240=\235W\224>\316\271R?\304\021\025?S\020y?\033\362\327=\t-\301>#\225p?\256\322g>5W3?\214\320V?\340<\n?\300\\~?\225H\320<\344\374\312=b\336\266>\320\033k?\354}\231>\026\364V?b\334\t?\r{~?\312Q\301<\346\301\274=;\\\253>\036\004d?Ff\307>b|s?2p>>\203\005\033?Y\227t?\341g.>\211\263\020?D\244{?\252\027\211=\276\324\177>]\352??>+@?f\251??\277\254@?\260\244>?C\257B?\245\204:?\201~J?{J)?<\\e?\271\360\276>=wo?\027vw>\321\250;?\001cH?\246 .?\001\301^?\215m\347>7\244}?P\216\025=a\030\020>\n\243\367>\017\272\177?\006\274\213;z#\213<~\306\210=\034H\177>\355\243??\242\267@?\256\216>?Q\332B?\321*:?I\"K?\222\313\'?_Ag?\246\322\262>\260\273h?\2737\251>\325\224b?\265M\320>\014\035w?\266?\t>\313\264\355>V\261~?\007z\246<\363\027\243=\003\033\226>\\2T?\250;\021?\027\\{?\026\314\221=\374j\207>\3653G?\215\3100?\267\320Z?\250D\376>\000\375\177?w\360?9y\347?:\202\303?;\3353?<\243\370<=\301@4>\371\205\024?,ky?u0\315=\240\241\270>\204\032l?\357\314\222>ykQ?Ak\030?\333\256v?g\245\017>\264\375\366>\327\256\177?L\037\242;\365Q\241<\264$\236=\211\356\221>\375\254P?\265M\032?\1770u?-\252%>\371\334\n?\367\'~?;Q\352<v\235\343=bQ\312>;\276t?\3140,>e<\017?x_|?\035\330d=\003\017X>\255x*?\271\320c?7\247\310>\273\010t?h\2016>W\372\025?\343sx?\315d\352=?\221\317>H\326v?)\\\r>\377\260\363>\177h\177?\327&\027<\334\301\025=(H\020>\260\347\367>y\276\177?\037\355\202;3g\202<\314S\200=\235\222p>\317\r8?\323\347N?\245\267\036?\307Aq?\334M^>\024\013.?\021\340^?x\265\346>\\\200}?~Y\036=U:\030>\000\231\001?\312\365\177?\353U#:\335;#;\310\323\"<\2055!=?\335\032>\204q\003?\222\320\177?\212\223=;\'\007=<\331\330:=\334R2>\007E\023?\2722z?\241s\265=\n`\245>#\353_?\037}\340>\013\037|?zzt=\337\342e>\364F2?\324\200X?\264\234\005?\004\202\177?\312{\373;\262\215\371<\213\363\361=\374]\325>p\346x?\351\344\334=\241\021\305>\037or?\177\215M>\204J$?\324kk?xe\227>\025BU?5l\016?\362\277|?v_M=V\023C>\270\351\035?\333\004r?\310zS>\340\315\'?\201>g?&\345\262>\326\306h?\275\356\250>Dcb?\316~\321>Q\215w?\014\265\002>\350\013\344>\232\362|?\'\005A=\233\3547>\223\343\026?b\320w?l\223\375=\325-\336>$\210{?\226|\214=\206\331\202>g\321B?n=:?n\000K?\375\032(?8\336f?SQ\265>\2156j??v\237>e\230[?k\322\371>\325\331\177?\271\225\030;\307:\030<\257\320\026=\034C\021>\254O\371>C\323\177?B\3262;SY2<Rh0=X\317(>%\373\014?\371]}?2\306&=\330\373\037>$\375\006?\240<\177?\373\312B<\032z@=\244n7>\314\222\026?\303\tx?\"\333\366=\346\031\331>\342\026z?\340\305\270=?\032\250>\t\322a?J\371\324>\277\304x?\302\336\340=\360-\310>\021\324s?\227|9>C\343\027?\201\025w?\013\260\t>#Y\356>j\310~?m\r\233<#\036\230=\252\321\214>V-L?4T%?5:j?\365]\237>\021\206[?L;\372>\272\336\177?r\007\005;Q\302\004<\355\256\003=K\346\376=\221,\337>v\312{?Xz\204=\027\321w>\316\327;?E\013H?\242\346.?7\241]?\302\013\356>\247\275~?\252a\240<\330=\235=;+\221>v\004P?\332\364\033?\300\311s?\356\021:>jB\030?\354\315v?S\330\r>\245d\364>Hy\177?9q\006<\316V\005=\231\377\000>\346~\341>}]|??Se=^|X>\327\267*?\245|c?\335\262\312>\370\346t?\354\335)>;\260\r?\203\022}?\311:9=i\3320>&O\022?\031\303z?\371.\244=r\005\227>w\363T?H=\017?\013_|?h\362d=]&X>-\206*?\314\276c?\377\026\311>\3378t?\217\3063>\2756\024?\233\235y?R4\307=\006\324\263>\334Ui?\247C\245>\007\327_?\241\365\340>}<|?=Vm=\261\225_>(\304.?\255\323]?,\344\354>\333\222~?\334\215\265<\315\207\261=+$\242>\212\226]?8J\356>Z\306~?\256\022\234<x\031\231=\211\247\215>\030\355L?y\211#?|Dl?)\261\221>\'xP?\274\322\032?\021\302t?\324\370+>=\027\017?\023q|?\346\220`=\010AT>\026B(? \255f?\255\214\266>\007\355j?\330\266\232>1\355W?\2633\007?\2070\177?\310\320N<u4L=;\006B>\337B\035? \237r?D\336J>c\255\"?\3615m?,H\213>\344\310J?\373\234(?E:f?\035l\271>\312\212l?\321\324\217>0\332N?C\331\036?o!q?v\027`>2\r/?\234h]?\237V\357>d\352~?\2277\212<\227\342\207=\376\274}>7\335>?h@B?\351j;?0\326H?G\033-?\2315`?\021\276\336>\357\255{?\272\354\207=\221\316}>\025\346>?\374.B?\365\216;?-\223H?\210\263-?\221]_?d\313\343>s\344|?+yD=\217\014;>\271\341\030?\232Sv?3\355\024>\327\210\376>\332\375\177?fq\t9\311l\t:XZ\t;\246\020\t<\033\353\007=~h\003>\356\026\345>\324+}?\331\n3=V7+>\230\226\016?\273\254|?\207\rR=\344GG>\256\177 ?T\177o?a\005w>\211n;?u\317H?\230*-?\375\037`?\360?\337>l\317{?\310\340\203=\234\305v>\204M;?\267\014I?\374\236,?\332\343`?\213\242\332>\332\213z?\365\314\252=Z\216\234>\347^Y?\2013\003?\002\327\177?\017\334#;-s#<\276\321!=&m\033>\317\325\003?*\305\177?\335 k;\347Hj<B\357f=\025\352Y>j\212+?\327`b?\271\215\321>\274\222w?\031d\002>J\223\343>\n\330|?\002\200G=~\310=>\024\234\032?\263\357t?X^)>\353Z\r?\2176}?\037k0=\347\321(>\334\374\014?F]}?\325\361&=\354# >\261\030\007?\2206\177?\316\321H<\254[F=\215\300<>\265\365\031?[xu?C\214!>\324\017\010?\007\374~?\203x\201<\\\331~=\033\376n>\27567?\274]P?\"\025\033?%\212t?D(/>?2\021?\'a{?\364/\221=\t\345\206>\200\265F?\366\3401?q Y?\267\341\003?\273\303\177?\330\333p;;\371o<nul=\342\316^>\004T.?\314v^?[$\351>\203\365}?\230\224\001=M\366\372=\2165\334>\005\377z?2\376\234=Y\365\220>\303\325O?}i\034?\005cs?9\336?>\342\352\033?s\322s?\372\2239>-\362\027?[\nw?\353U\n>vK\357>\357\350~?\'\360\212<\351\224\210=/\362~>\320x??B\rA?\017\341=?\344+D?\236b7?\350\021P?8\323\033?\020\347s?si8>\2033\027?\321\226w?\024\'\002>M8\343>\265\303|?\300tL=\034@B>\315f\035?1~r?\343\265L>K\311#?]\375k?\311\221\223>\323\022R?\277\277\026?\356\351w?\332\225\372=\271\354\333>\223\352z?\250r\237=\264\010\223>i\236Q?~\351\027?\332\020w?G\365\t>V\276\356>7\326~?\2107\224<\006\211\221=u1\207>\270\375F?\021A1?\034\030Z?(,\001?\200\372\177?\263\362\2579\226\343\257:)\247\257;\035\266\256<=\374\252=\276\265\234>{}Y?\013\336\002?\035\337\177?u{\003;\3557\003<\344*\002=\325\017\374=\357\t\335>\2679{?\243\357\225=\210\365\212>n}J?\373L)?\001Ye?1\005\277>\243\201o?5\345v>\341];?_\356H?3\344,?\r\203`?\234\353\334>k1{?6\357\226=\220\317\213>\021DK?/|\'?\266\243g?\330V\260>)6g?\372\032\263>7\347h?\222\032\250>B\322a?\354\367\324>I\304x?\236\354\340=\3008\310>\310\330s?R89>\265\267\027?\3465w?\210\315\007>\333\225\353>>_~?\244\r\317<\354\321\311=\202\356\265>\342\221j?\357\026\235>\273\310Y?D\013\002?J\357\177?\375\250\205:\031\206\205;\320\372\204<3\322\202=\334\355t>JX:?\201\317J?\206\215(?\340Mf?\317\356\270>uEl?\220\252\221>xrP?\010\341\032?\022\266t?\345\247,>c\213\017?z9|?-\021n=\356:`>\"!/?EK]?\321\001\360>:\000\177?e\306~<,\320z=xtk>\266P5?\355\225S?\301\325\022?\371tz?\235\211\255=4\325\236>\212\036[?0\212\374>\007\364\177?\255\210?:\331d?;\302\325><\272\234<=Q\3553>\342O\024?\257\215y?C\030\311=_Y\265>?;j?\023W\237>\337\200[?\005Y\372>\r\340\177?\360u\377:z\366\376;\236\372\374<\253*\365=U\321\327>b\261y?\316\332\304=\325\356\261>\2111h?\273\275\254>\366\353d?s\266\301>K\330p?\200 d>\006N1?(\004Z?Od\001?@\370\177?\021\356\3679\r\320\367:\034X\367;%z\365<\r\037\356=Uo\322>\322\343w?\374L\373=\373v\334>?\021{?\205\315\232=\010\032\217>\3705N?Fl ?\003\223o?\361\362u>7\340:?\212\326I?\305\317*?\253\\c?\222y\313>\0359u?\360+%>\205\207\n?\207D~?$<\334<hP\326=\030\343\277>\210\361o?|\312p>j+8?\351\263N?~7\037?\016\306p?\247!e>Y\3341?\242\'Y?\256\315\003?#\306\177?\347@g;\000pf<K2c=\'\230V>x\237)?!\356d?\307\250\301>\243\321p?a~d>\n\2021?\330\263Y?\325E\002?V\353\177?\313>\245:v\t\245;\2534\244<\017\352\240=bE\224>x\252R?g9\025?!\366x?\216\n\333=,\235\303>\207\301q?N9W>\372\374)?\367sd?\223\251\304>\r?r?\221<P>\363\343%?C\221i?\"\274\243>&\277^?\211x\347>R\246}?\373\t\025=\261\235\017>\233\362\366>\016\256\177?\034\257\243;\313\335\242<\337\240\237=\270/\223>\232\277Q?\305\224\027?\271Ow?\231L\006>\017_\351>\361\377}?9\007\376<\246&\366=\335\220\330>\363\354y?\337\304\275=V/\254>\007\217d?\222\377\303>\315\357q?\314\246T>\241}(?\001bf?\020n\270>\272\375k?[\217\223>\303\020R?\010\305\026?,\346w?\221\006\373=\325A\334>s\002{?\263\224\234=\001\234\220>\"\210O?\313*\035?\033\265r?=\243I>\315\356!?A\002n?\177\320\205>\260\256E?w!4?\215\211U?{\255\r?\260\023}?0\3618=w\2270>P#\022?\020\334z?{0\241=\272\200\224>\\\334R?\\\270\024?\263Jy?\230\t\321=\203\263\273>G\307m?\225e\207>\336.G?\340\3230?r\277Z?\243\246\376>.\376\177?<\364\3508\234\355\3509\036\323\350:>i\350;A\303\346<%C\340=s\264\307>\334\236s?=~<>\323\313\031?:\232u?\244\232\037>G\272\006?\365J\177?_\2134<\016\2162=p\305*>\274J\016?\366\316|?{\266I=z\307?>\251\334\033?\330\336s?{\3408>\235\177\027?H_w?td\005>$\010\350>\207\301}?\023\\\016=ni\t>\333\361\355>\002\272~?t/\242<s\371\236=W\242\222>\034GQ?\262\307\030?\314gv?e\302\023>`\340\374>>\366\177?\264\024\034:\352\374\033;\336\235\033<{#\032=\220V\024>\006\263\375>\265\372\177?\003^\2519\002P\251:\004\030\251;\2438\250<P\304\244=\314\202\227>\tZU?Z,\016?z\334|?\006kF=j\316<>u\376\031?Aqu?\217\364!>-W\010?\276\351~?\325\211\212<\0162\210=\315F~>\251\"??\261\267A?\320\204<?\346\305F?\265\2741?\336XY?ZD\003?O\325\177?[\251*;\2267*<\337r(=o\205!>(\013\010?4\375~?3\343\200<%\270}=\315\000n>n\2576?\026FQ?M\312\030?\307ev?@\340\023>\331\n\375>A\367\177?3\361\013:\023\336\013;\250\221\013<Ja\n=z\264\005>p~\350>w\327}?5\370\010=\253c\004>\336\213\346>\035x}?\354^ =\177\027\032>n\347\002?D\336\177?\007\335\006;\373\225\006<\365z\005=e!\001>u\261\341>\177i|?Rhb=\214\344U>\0057)?Rue?\272Q\276>\n&o?\341\337{>\257\353=?V\027D?`\2167?\016\306O?\251\220\034?&@s?\342\324A>7$\035?\032\273r?DMI>\251\272!?a9n?\034U\204>VBD?\30427?\230dP?\347\003\033?\265\230t?\014T.>u\246\020?\025\253{?\371D\210=\233g~>+3??\033\227A?\255\307<?-GF?\377\3232?\003\242W?\356\001\010?\205\377~?~z\177<\251~{=\217\rl>O\2435?\344\013S?&=\024?\216\231y?y\257\307=07\264>\271\220i?\264\277\243>\271\301^?Ji\347>e\243}?\274\301\025=\nH\020>\205\347\367>v\276\177?\205\362\202;\216l\202<\373X\200=\257\233p>\235\0228?g\337N?i\314\036?\321-q?Sh_>\230\252.?\377\370]?&\t\354>nq~?\351\022\306<\337H\301=\001\013\257>\366ef?\274T\270>\215\357k?\375\356\223>\244aR?7\365\025?iwx?\312\372\351={?\317>=\267v?\004)\017>\234J\366>\276\241\177?\301=\274;\353(\273<E\342\266=t\215\246>(\277`?\234\200\333>\355\313z?\004 \243=\313!\226>\3707T?\345,\021?\007d{?H\327\220=\353\230\206>emF?\371\1772?\013\'X?\211\224\006?\316R\177?R\275,<\027\353*=F\311#>\312\226\t?4\220~?\341\335\266<\340\310\262=a-\243>\360W^?j\332\351>\205\025~?\313g\363<Y,\354= \360\320>+Yw?\265\277\005>\t\217\350>\202\332}?\2578\010=\353\260\003>\221\202\345>HB}?\'\215-=\2452&>79\013?\"\010~?7\377\371<#^\362=`\257\325>r\001y?G\264\331=\343\217\302>aAq?{S^>B\016.?~\333^?\232\320\346>\265\205}?\314\t\035=|\004\027>\351\276\000?\307\375\177?\026^\0169$Y\016:ZE\016;I\366\r<d\273\014=\214\345\007>$\271\353>\332d~?\321H\314<\2600\307=\030\321\263>\036Ti?\036O\245>\'\337_?\363\304\340>\2450|?\2545p=a\037b>\20600?\022\267[?\265\"\371>\341\320\177?\202X<;\360\315;<\326\2469=\255<1>p\217\022?\020\236z?\355\236\250=\316\274\232>\351\361W?\275&\007?o3\177?\\\355K<\223cI=\273|?>\344\255\033?o\007t?.\2246>l\006\026?\225kx?\347^\353=\373Q\320>\244\036w?\377\'\t>\024\222\355>\\\254~?\342\360\250<\372t\245=\372\026\230>\251\322U?\272\351\014?\005e}?m\014%=\334e\036>c\345\005?\362t\177?!\302\n<I\225\t=7\366\004>\003e\347>\223\242}?X\365\025=\340w\020>6,\370>\274\302\177?y\326t;P\354s<\246Jp=\3451b>\334:0?\177\247[?\360{\371>\213\325\177?O\267);\313F)<\021\207\'=\371\254 >\316v\007?&!\177?\226\027^<\342\024[=\026]O>+_%?h-j?\355\262\237>\032\306[?\201\314\370>%\314\177?LCO;~\233N<\204\000L=w\327A>\321%\035?\244\271r?4bI>]\307!?\373+n?e\261\204>_\233D?]t6?\317\252Q?\334\311\027?m(w?@\226\010>\202\274\354>\351\214~?R~\270<\243V\264=eu\244>+D_?\261b\344>q\005}?\367k<=\013\3013>)3\024?\335\237y?\243\357\306=\261\234\263>\3424i?\233\034\246>\032p`?\334]\335>\210P{?\2040\223=l\234\210>FRH?yF.?d\212^?\237\260\350>\244\340}?\260\266\006=tH\002>\022j\343>\334\316|?\340\274I=>\315?>D\340\033?\264\333s?\365\r9>\252\234\027?\346Iw?g\243\006>\022\337\351>S\026~?7\002\363<\316\314\353=\231\246\320>\r>w?\017T\007><\343\352>EB~?\256Y\335<\216^\327=\217\270\300>\303[p?M\371j> \0165?\230\004T?\361\263\021?n\032{?\361\262\231=\005*\216>eaM?\020q\"?\027wm?\365\212\211>\344/I?\233N,?\212Sa?\262\374\327>\370\276y?l=\303=\230\240\260>\372cg?.\363\261>/4h?x\254\254>\273\340d?F\375\301>\256\372p?$;b>\006@0?\267\237[?\177\250\371>\310\327\177?\202\306 ;\211a <\241\317\036=R\247\030>\212\345\001?\234\361\177?M,f:\220\370e;\372)e<i\365a=T~U>w\373(?\320\301e?\374k\274>0)n?\237\304\204>\343\255D?\246L6?M\356Q?W\035\027?\334\246w?&7\001>\374\321\341>/q|?-\212`=\014;T>\225>(?\210\261f?dp\266>\310\334j?]#\233>\343BX?\312G\006?:b\177?:e\035<$\342\033=j\363\025>4\374\377>\000\000\200?\236\255f2\236\255f3\235\255f4\232\255f5\215\255f6Y\255f7\211\254f8J\251f9M\234f:]hf;\376\230e<Qab=R\336U>e3)?\376ye?\0344\276>\324\026o?$\263|>\331V>?FGC?vF9?0\276L?\032\372#?\242\306k?\322\002\225>\\IS?f\235\023?\010\375y?\201\332\273=b\237\252>\263\206c?Vt\312>\337\314t?\033[+>e\256\016?\331\241|?\371\263T=P\250I>\341\361!?\376\376m?\356\346\205>\030\304E?\323\3623?f\325U?b\342\014?\372g}?\322R$=.\273\035>fo\005?\326\211\177?\267\346\353;\3643\352<\334\201\343=\352;\312>9\265t?B\264,>\224\223\017?~5|?\246\010o=\224\025a>\330\233/?\237\225\\?\360 \364>\022s\177? \240\014<\"k\013=J\254\006>+\354\351>\226\030~?\n\345\361<\202\300\352=\362\327\317>\364\360v?\276\317\013>\333q\361>%,\177?\250+S<\344rP=6\327E>\372\235\037?oap?\227\251j>\371\3424?\006LT?\025\370\020?4\200{?\275q\215=\355\254\203>k\237C?\253\2148?\240\010N?\372\332 ?\031\"o?\240\026|>}\007>?~\341C?\307\0008?\244\376N?[\177\036?\236wq?\357R[>/Y,?\343Da?\314U\330>\263\332y?\001\361\277=\321\363\255>1\264e?\223\302\274>\312Vn?f\212\203>\335}C?\201\3238?#\213M?\006\014\"?7\343m?\313\245\206>\233yF?\027e2?mQX?\256\037\006?\000j\177?W\250\025<aJ\024=\000\354\016>\253\362\365>\365\232\177?\362\306\311;\336\210\310<-\240\303=\200\360\260>n\225g?R\263\260>\225og?)\250\261>[\006h?\261\326\255>\203\241e?I9\275>\357\224n?^\335\201>\344\331A?\204><?\214JG?C\2260?;\035[?\246\221\374>:\364\177?\nR<:h/<;\022\245;<\350~9=]\0301>\260w\022?\315\253z?\255\371\246=\225\\\231>^\331V?\360$\n?`d~?M\205\314<(j\307=a\377\263>\242oi?\347\231\244>A^_?G\307\343>\213\343|?\307\261D=\274?;>1\002\031?J:v?lc\026>BM\000?\243\377\177?\231\205\2727\211\204\2728J\200\2729No\272:k+\272;\245\034\271<\321\355\264=\350\361\244>\372\234_?\361P\342>\337\216|?\033RY=W\312M>\353n$?xBk?\367z\230>\255#V?\n\020\014?\370\271}?!7\020=@#\013>\332v\360>\244\016\177?ixp<\341\360l=\021<_>\244\221.?Y\035^?}3\353>hO~?q\336\326<\253;\321=\\\333\273>\204\334m?\320\323\206>3\245F?\366\0042?@\350X?\006~\004?G\257\177?\001?\241;\340s\240<XO\235=\013:\221>H\021P?\307\324\033?\264\345s?\035}8>\027@\027?\257\215w?\212\257\002>\264\003\344>\317\360|?+uA=\rR8>\212$\027?\250\241w?\374\204\001>SF\342>h\214|?\210\353Y=vSN>\333\300$?\305\344j?\004\356\232>\316\030X?\277\273\006?\245J\177?\"\3324<\024\3332=\276\013+>\222y\016?\351\271|?\305\327N=\305eD>\306\272\036?\306>q?ax^>!#.?m\275^?\274\202\347>F\250}?D\217\024=\345+\017>\301N\366>\017\242\177?X\235\273;Z\212\272<\357J\266=\033\021\246>\006h`?\213\216\335>\253]{?z\233\221=JA\207>\250\014G?\352\0371?\022KZ?\205\234\000?\201\376\177?\347b\2778n^\2779\214L\277:\023\005\277;\001\350\275<\376\200\271=\210\263\250>\360:b?\227v\322>g\346w?\222\377\372=\215<\334>\371\000{?\014\302\234=i\302\220>\211\251O?\266\327\034?j\000s?\rjE>\364Z\037?c\243p?\027\ng>J\3512?+\200W?\213^\010?\322\347~?\352}\213<\332\035\211=v\337\177>\272\357??\210 @?\340\276??\376\201@?\374\372>?\340\005B?\341\343;?\256\364G?w\031/?\217V]?\364\277\357>\356\367~?\223\200\203<,d\201=\321nr>d\t9?D+M?\310\363\"?[\351l?3R\215>\300\240L?\245@$?\005wk?R\032\227>\224\004U?\326\017\017?\220t|?\350\267_=\311\177S>\320\320\'?\331:g?\274\374\262>\t\325h?\271\221\250>\334#b?1\004\323>y\030x?~!\365=Z\312\327>1\257y?{\035\305=\256$\262>URh?\003\350\253>@`d?O%\305>-xr?\366\013M>\354\374#?w\303k?.\030\225>4[S?\360n\023?a\031z?\226y\270=\266\333\247>\010\247a?\371\377\325>\376\033y?\345\220\326=\023\026\300>\010\013p?\216eo>\334m7?q\376O?\345\003\034?\227\274s?S\320:>z\273\030??qv?|6\023>)\031\374>\307\360\177?\236\204s:\265Js;~cr<}\315n=Q\341`>\214~/?(\301\\?\314$\363>\267Z\177?\336\335$<*5#=^\264\034>J\271\004?\276\246\177?\rE\262;\305L\261<kv\255=C\305\236>o\022[?\036\317\374>\321\365\177?\305\343\":\334\311\";Xb\"<U\306 =\315v\032>\004*\003?\364\327\177?\225\026 ;y\262\037<\374#\036=\365\010\030>Lv\001?s\367\177?\000\314\010:\272\271\010;\264p\010<\324M\007=\241\325\002>m<\344>*\375|?Qq>=\213\2265>\375b\025?q\332x?tO\336=\267-\306>\257\360r?\037LF>\252\345\037?L\032p?\263\217n>\322\3736?.\303P?\271\025\032?R^u?e\n#>\326\024\t?\035\266~?\354\034\244<D\323\240=+2\224>K\232R?-c\025?Q\332x?=S\336=\2560\306>\006\362r?\3438F>\340\331\037?\t&p?(\353m>\330\2436?\340YQ?\003\230\030?\225\214v?\231\241\021>\367\326\371>\r\332\177?v\265\027;\216[\027<\231\365\025=\034x\020>\215,\370>\301\302\177?>\301t;=\327s<36p=\331\037b>\31100?\255\266[?\364$\371>\000\321\177?\215\335;;\260S;<c/9=\n\3200>\\H\022?\372\306z?\334\267\243=h\241\226>D\241T?\027\027\020?l\364{?\255\315~=\340\363n>I17?%gP?~\375\032?\036\236t?4\005.>or\020?\374\305{?\340\004\205=<\302x>\002T<?\016\"G?`\3600?\351\223Z?S\235\377>\332\377\177?7#\0307\335\"\0308s!\0309\315\033\030:5\005\030;\356\252\027<\202C\026=O\300\020>*\224\370>\355\310\177?4\035\\;\362_[<\375oX=*\000M>\331\365#?j\313k?\236\342\224>m.S?u\343\023?\312\321y?X\000\301=(\320\256>\260@f?\032C\271>\'tl?Un\220>[`O?\217\215\035?}Zr?\210\264N>\305\372$?\013\242j?A\253\234>XuY?\313\364\002?\013\335\177?\017\301\013;\304t\013<\344D\n=\376\231\005>MW\350>A\320}?\336\275\n=\312\n\006>\355\375\350>\241\356}?,F\003=<\"\376==\231\336>Y\244{?.\025\211=p\320\177>6\350??\214/@?\305\240??\350\275@?\375\201>?\035\363B?\370\3669?^\200K?#\356&?\300Qh?\316\353\253>\275bd?\257\025\305>\375pr?\316rM>\212:$?\360}k?\336\353\226>z\336T?\371t\017?UD|?\311nk=\200\346]>\216\320-?\0214_?\207\302\344>\372\031}?\347g7=\2131/>Z8\021?\337]{?3\225\221=\350;\207>\223\007G?1+1?\3009Z?`\315\000?m\375\177?\372\301$9Y\273$:\331\240$;\3726$<\241\221\"=\326\035\034>\276P\004?\202\265\177?\357\317\224;\355\"\224<)u\221=l \207>\242\355F?\274d1?!\341Y?\303\306\001?a\363\177?Q\354I:\200\304I;y%I<J\255F=B\n=>8$\032?~Ru?\350\267#>\373\212\t?\274\223~?\006\037\265<\337\035\261=\225\314\241>3V]?\020\302\357>3\370~?\226^\203<FC\201=U5r>\035\3538?.aM?\227q\"?\206vm?\326\216\211>|3I?eF,?\350^a?\210\267\327>F\251y?|\321\305=\371\265\262>b\252h?\365\250\251>g\341b?7u\316>\224iv?\003\250\023>\326\272\374>N\365\177?\255\023+:\030\367*;\353\204*<\230\276(=\355\312!>\265:\010?\035\361~?=\342\206<\260\251\204=\204#x>O\002<?\254\273G?u\231/?-\231\\?b\014\364>)q\177?\277\207\016<TJ\r=\244j\010>\213|\354>9\203~?<H\275<\236\350\270=\2676\250>\222\345a?\314\201\324>\\\234x?B\241\345=\005\342\313>\317cu?\344\271\">\361\335\010?\202\305~?\301}\234<u\200\231=\034\377\215>5;M?R\315\"?F\023m?\2524\214>\257\237K?/\244&?c\253h?i\242\251>\374\334b?\201\220\316>!tv?\317\013\023>V\334\373>\336\356\177?\003\t\211:V\344\210;\357Q\210<6\r\206=\367\215z>\222?=?\223bE?\332\3064?tzT?\246}\020?6\300{?t\267\205=\337\370y>Z\363<?\032\364E?\006\2123?\335~V?\022\032\013?\377\022~?\241\245\364<@W\355=\353\325\321>\331\254w?\223\335\000>\375K\341>QQ|?\372Gh=\322\033[>\2539,?\201pa?dL\327>a\207y?\314\327\311=9\363\265>\235\224j?\301\004\235>\255\272Y?\2572\002?\255\354\177?\274\214\232:\025^\232;\353\243\231<@\302\226=9\251\213>>!K?\005\316\'?S>g?Q\346\262>\212\307h?\"\352\250>\"`b?\022\222\321>O\224w?\210L\002>(p\343>8\320|?#hI=\330\200?>w\260\033?5\005t?\177\2646>6\033\026??]x?T\016\355=\343\235\321>\230\230w?~\014\002>\244\020\343>\304\272|?x\242N=\3325D>:\235\036?\030[q?K\347\\>\264?-?+\002`?\377\362\337>\277\374{?\263\311|=\330/m>p?6?\264\004R?\363\343\026?\035\320w?z\233\375=\3443\336>\276\211{?&K\214=\335\256\202>\253\247B?y\224:?\214aJ?\327\215)?\n\005e?.\030\301>\344\212p?\317bh>\000\2463?\302QV?\336\223\013?\326\347}?\272\361\004=\027\241\000>p\361\340>x;|?d\225m=\205\315_>\230\343.?\254\245]?\256\361\355>\374\271~?\2142\242<l\374\236=\332\244\222>AIQ??\302\030?\003lv?\374\203\023>\214\207\374>\365\363\177?\024\255@:\323\210@;\006\370?<6\270==\236\3564>\203\366\024?9\"y?4\324\325=\332\200\277>.\300o?~|s>\031\2279?w-L?\346S%?\220:j?\234[\237>K\204[?qE\372>.\337\177?]5\003;\035\362\002<2\346\001=*\217\373=\350\250\334>\022\037{?!$\231=\233\260\215>1\365L?\000v#?\027Zl?\350\036\221>\311\371O?\210\017\034?e\262s?\310c;>\r\031\031?d(v?\326k\027>\275\007\001?\301\373\177?\320\330\2079\315\317\207:\307\253\207;\371\033\207<\205\341\204=\265\204x>\\4<?\251]G?\250k0?\316][?g!\373>J\350\177?\000\241\275:\304Z\275;\246B\274<\026\357\267= j\247>\236Xa?\313\335\327>K\265y?\334c\304=\272\216\261>\307\366g?\355;\256>V\342e?\001\235\273>B\273m?\004\270\207>p|G?\366&0?x\305[?%\320\370>Y\314\177?\376qN;\202\313M<\3045K=\337 A>:\264\034?R s?\'\237C>1@\036?\222\263q?\264\377W>\324o*?v\334c?\366]\310>\371\350s?\302M8>\313!\027?\244\243w?Hg\001>\357\031\342>\021\202|?Bo\\=L\222P>\310\026&?\352Ti?\334I\245>m\333_?F\333\340>\0266|?\353\343n=\"\365`>\251\211/?\250\260\\?h\204\363>.d\177?\ts\033<w\371\031=\264/\024>\320{\375>\253\371\177?\027\233\3129\014\207\312:\3606\312;z\367\310<]\t\304=\222E\261>\335\311g?\205_\257>O\233f?\371\376\266>j.k?Y\001\231>\026\220V?\201\353\n?\005#~?\r\301\354<i\351\345=\373\031\314>\214zu?\035l!>\322\371\007?\213\001\177?Kx}<o\214y=GXj>\347\2664?\276\224T?48\020?\265\343{?\267l\201=\277}r>@\0219?A\035M?\216\025#?f\304l?\235M\216>\t\201M?\177$\"?$\311m?\311X\207>\317\"G?\262\3560?{\226Z?\310\216\377>\316\377\177?DJH7\247IH85GH9j=H:B\026H;\337yG<$\014E=i\221;>\3715\031?\250\021v?z\273\030>\257\363\001?\303\360\177?\236\306s:\225\214s;\341\244r<\361\014o=^\031a>\370\235/?w\222\\?83\364>\303t\177?B\361\n<\236\303\t=o!\005>\375\244\347>\317\256}?\232\364\022=\334\256\r>\254(\364>\312s\177?\201\351\013<\243\267\n=\373\004\006>[\365\350>\026\355}?H\247\003=\374\327\376=\322!\337>\264\307{?\262\317\204=\256ex>d$<?\260{G?\242(0?\364\302[?\223\336\370>(\315\177?\3648K;\241\227J<R\026H=$P>>`\361\032?S\250t?]p->\031\020\020?\357\367{?\375\363}=:5n>y\3136?\034\026Q?\001D\031?\227\006v?\315^\031>0f\002?\372\350\177?\216 \270:V\336\267;7\326\266<\215\301\262=U\'\243>\216S^?C\364\351>\373\031~?\"5\361<\372\032\352=OX\317>\260\300v?\315\234\016>p\200\365>\311\221\177?\274\016\334;i\224\332<a\277\324=\260\245\276>\003Qo?W\212y>\275\272<?\275_F?\004\2362?\223\367W?*\027\007?\3466\177?\225{H<\220\007F=\225t<>\271\305\031?%\237u?YR\037>\200\210\006?EU\177?2I*<\034\204(=B\225!>\375\025\010?y\372~?\316=\202<\267+\200=~Lp>\235\3507?\344(O?\363\026\036?t\332q?\263\326U>\365.)?\264\177e?\342\017\276>/\004o?\356\265}>\247\331>?gGB?k\\;?\025\361H?\004\336,?\271\213`?H\267\334>\t#{?\r\252\230=\301H\215>I\230L?\350T$?\n`k?\236\264\227>\252\202U?\341\277\r?\315\013}?>\336:=\303W2>9H\023?\3150z?r\256\265=m\220\245>\\\r`?\322\257\337>\333\353{?=p\200=^\304p>,(8?\232\271N?\200)\037?\262\323p?Zad>\367q1?\264\314Y?\036\000\002?\376\357\177?\344\006\200:\301\315\177;%\316~<\256\327z=\017{k>ET5?\377\217S??\345\022?\330kz?!\241\256=3\275\237>\325\315[?*\240\370>\236\311\177?%XY;\237\237X<h\302U=\226\232J>\202\204\"?$bm??\032\212>0\264I?\370\036+?S\362b?\227\014\316>\352@v?z\001\026>\013\010\000?\377\377\177?\ta\2014\007a\2015\377`\2016\336`\2017[`\2018P^\2019$V\201:x5\201;\n\263\200<\334Z}=\021\257m>\251\2036?\303\220Q?J\014\030?\306\366v?<y\013>\010\364\360>\230\035\177?p\237a<\n\204^=umR>\204/\'?\363\001h?S\363\255>\340\263e?\225\304\274>\330Wn?\"\203\203>\314vC?i\3428?\250pM?%L\"?\276\236m?~{\210>\2133H?\337\213.?\276%^?\027\002\353>XG~?\324\330\332<$\000\325=\375\330\276>*ko?F\036x>\233\377;?\275\300G?\030\216/?\021\252\\?\226\252\363>\342g\177?\024\304\027<0\\\026=.\327\020>\367\264\370>\320\312\177?\264\225T;+\345S<\235\'Q=\202yF>v\001 ?\212\376o?v\024p>\336\3127?\317\\O?[\226\035?\\Rr?\271(O>\000@%?\300Qj?\232\301\236>\250\017[?\356\336\374>5\366\177?\367\244\034:\001\215\034;E-\034<(\260\032=\241\330\024>\252k\376>\201\375\177?\252\246\0379q\240\037:\216\207\037;%$\037<m\230\035=(\210\027>\256\033\001?\027\373\177?,*\2359\034\036\235:\345\355\234;\177-\234<D3\231=y\275\215>\257\000M?[Z#?\255xl?\253O\220>\235EO?\331\317\035?\000\035r?\207\"R>\\\003\'?\3477h?@\224\254>\364\320d?\267`\302>\264*q?^\224_>j\303.?\303\324]?\312\335\354>\347\221~?\205\006\266<\033\373\261=t\203\242>F\334]?\275\261\354>J\213~?\242K\271<\257\032\265=\327\026\245>;\267_?\372\263\341>\030j|?,Cb=\201\303U>\307#)?\026\216e?\240\264\275>\014\325n?\300!\200>\273!@?w\274??\312\206@?Q\361>?\346\030B?\234\274;?\025>H?\024t.?QH^?\2036\352>S%~?|\236\353<\231\327\344=\202E\313>\265#u?|e&>\213[\013?\005\374}?a\365\377<\013\366\367=t\360\331>bWz?$\023\261=\265\303\241>\253O]?*\350\357>\003\375~?\177\373\200<7\347}=\n*n>}\3056?[ Q?\n*\031?\r\033v?\3260\030>T\222\001?\037\366\177?\000\r\036:\233\364\035;%\223\035<.\017\034=\006\035\026>\204\033\000?\364\377\177?\227M=6tM=7\350L=8\270J=9\371A=:\376\036=;H\223<<\245g:=\371\3531>\357\001\023?\332Zz?\372\250\260=\341k\241>\344\016]?na\361>F*\177?\270\007U<\241BR=\213wG>\306\234 ?\272ao?\273\241x>KC<?\215AG?L\2520?\311\376Z?\346>\375>j\370\177?\231\272\3629\324\235\362:\334*\362;\262`\360<\007S\351=\377\275\316>\253\205v?\016\010\022>\205i\372>\307\340\177?\307\253\371:\0072\371;\342L\367<\267\325\357=\237\277\323>\316Yx?\337u\355=p\355\321>S\265w?\306^\000>\030\216\340>7#|?qws=\262\376d>\007\3111?\265EY?\323y\003?\254\317\177?U*A;\224\230@<\377T>=\333|5>hR\025?\201\345x?\035\001\335=\300\'\305>Lyr?\354\373L>N\363#?F\316k?\\\317\224>M\036S?Y\r\024?\246\267y?0\034\304=\313T\261>9\323g?\317\"\257>\002uf?h\364\267>z\271k?o[\225>N\223S?\233\334\022?\360pz? \005\256=\301;\237>:l[?\006\317\372>\r\345\177?E\202\327:\216\'\327;\350\275\325<;*\320=\246\001\273>\344gm?\360\362\211>\365\217I?Ur+?\221\201b?[\304\320>\014Iw?%\260\006>\333\361\351>\221\031~?ti\361<6L\352=I~\317>\032\317v?\314\306\r>LK\364>\371v\177?\245\275\010<}\231\007=I\034\003>\227\245\344>\316\023}?\323\3518=\304\2200>\354\036\022?\214\336z?\030\344\240=[@\224><\246R?UD\025?\337\356x?\001\346\333=\226I\304>i\022r?\217\271R>R\\\'?\367\312g?aX\257>\317\226f?\323\033\267>\333>k?+\223\230>>7V?Y\333\013?\252\315}?\310`\013=\244\242\006>\363\335\351>!\026~?\267\032\363<\331\343\353=V\270\320>\233Dw?S\362\006>\\S\352>9*~?\2434\351<\034\221\342=\213\200\311>\373et?\27161>\213\213\022?Q\240z?\301Y\250=\004\203\232>$\304W?e\244\007?d\026\177?G\307h<\237xe=\217\235X>\376\312*?\016cc?\346Q\313>\317(u?\306\032&>\027)\013?\306\r~?L8\367<_\302\357=\317\260\323>\257Tx?\013\020\356=\320c\322>\270\337w?\356\307\373=\271\323\334>\335*{?\022\271\227=\227{\214>\305\337K?|\014&?*ai?7\371\244>-\242_?\3401\342>\247\207|?\234\023[=\363[O>~^%?3.j?\255\255\237>\'\302[?\'\343\370>i\315\177?\2144J;\325\224I<\351\031G=Ul=>\014b\032?\300\037u?g\237&>\240\202\013?\017\356}?\032j\003={e\376=\312\313\336>\200\261{?\215~\207=l\017}>\215\205>?)\354B?\205\005:?\377eK?Q,\'?\337\005h?\326\331\255>\207\243e?w,\275>?\216n?\230\013\202>j\007B?\265\340;?\235\372G?\037\014/?0j]?jM\357>1\351~?\326\317\212<\260u\210=\017\274~>\241]??\"CA?]s=?F\377D?\221\2355?\204\025S?)$\024?R\251y?\024\320\305=\327\264\262>\263\251h?n\255\251>k\344b?\222b\316>[bv?\345\022\024>\335R\375>\326\370\177?4.\3459\216\024\345:\020\256\344;\203\025\343<\t\312\334=\215\374\304>ier?c\030N>\223\235$?7\rk?\232\337\231>+BW?\327\007\t?\313\271~?\343J\242<\314\023\237=\231\270\222>\036ZQ?d\227\030?\017\215v?\210\232\021>\332\314\371>\220\331\177?\355\250\031;\261L\031<~\335\027=\016<\022>\324\263\372>\360\343\177?Oj\340:\362\007\340;\326\177\336<\306t\330=\036\224\301>\221\307p?[\014e>\224\3201?\3669Y?\230\232\003?\014\314\177?\235\244O;2\374N<\306^L=S,B>\206Z\035?w\211r?\211\024L>Zh#?4il?\212\270\220>\364\240O?\021\355\034?#\355r?\030\177F>\342\004 ?\036\373o?^Dp>M\3447?l0O?P\004\036?\365\353q?\204\335T>\233\235(?z9f?/q\271>\226\215l?\330\301\217>\216\311N?<\002\037?\326\371p?\017Gb>\254F0?\260\225[?\356\341\371>\224\332\177?\260\233\025;BD\025< \350\023=\331\220\016>1o\365>^\220\177?\320\342\336;\264^\335<Oc\327=P\274\300>\236]p??\337j>\006\0005?\365\033T?\220v\021?(<{?j\244\225=P\265\212>\246BJ?\234\325)?\210\247d?\204e\303>9\247q?,\257X>(\325*?vUc?Q\246\313>rKu?>\037$>;\321\t?{~~?\032\240\277<\227$\273=\310\n\252>>#c?\312\335\314>Z\311u?V\345\034>B\333\004?\251\241\177?Qi\274;\373S\273<]\013\267=5\257\246>\271\326`?\007\362\332>\365\242z?\324\010\250=a?\232>q\216W?~7\010?\360\361~?my\206<RD\204=\002sw>:\247;?\371eH?\356\031.?\260\312^?24\347>\'\231}?\010E\030=\347\233\022>\265<\373>Q\351\177?\226j\265:N*\265;\345)\264<\2153\260=\260\n\241>\356\306\\?T\003\363>VW\177?p:(<=\200&=\224\273\037>\361\320\006?)F\177?\201P9<\35377=\333\005/>\233\033\021?Jm{?\212\271\217=p\243\205>\245\203E?\025\1774?\201\360T?%E\017?L[|?~\333e=W\365X>\234\375*?7\037c?\277\366\314>P\323u?\252R\034>tu\004?z\260\177?\241\332\236;{\025\236<\207\010\233=\035L\217>\033bN?I\000 ?\267\377o?\370\003p>\034\3027?\024lO?xp\035?Mur?\0245M>\221\025$?\266\247k?\001\323\225>\265\366S?d\330\021?/\006{?\320!\234=\250:\220>F3O?B\375\035?\222\362q?W\177T>\215f(?+\177f?S\263\267>\310\224k?UR\226>\024`T?<\303\020?\016\234{?a\025\212=\377\305\200>f\305@?\323r>?\271\020C?\371\2709?n\360K?\366\344%?\020\220i?\r\304\243>\333\304^?\276V\347>\324\237}?\330\241\026=\267\027\021>~\021\371>\364\317\177?!\r@;\r}?<\036@==\242\2014>\377\257\024?\035Py?xe\320=\3260\273>J\201m?,E\211><\357H?;\342,?\317\205`?\370\332\334>\332,{?\313{\227=bG\214>\235\260K?(|&?\240\333h?\216f\250>Y\006b? \271\323>\217Wx?s\271\355=V!\322>\367\307w?\221\217\376=k\353\336>\260\271{?J\201\206=\256W{>k\246=?\024\235D?\264p6?\n\261Q?\364\271\027?<4w?V\346\007>N\272\353>\te~?\2171\314<\227\032\307=L\277\263>\205Ii?\341\224\245>\201\020`?\361\234\337>\026\347{?\n\004\201=\320\306q>\324\2608?\244\310M?\301v!?\254\200n?[i\202>\212cB?\031\";?\020]I?-\347+?\031\342a?\016\227\324>\224\243x?\242\307\344=\0339\313>\231\036u?N\260&>\007\216\013?\363\351}?\323l\004=\315$\000>17\340>\300\r|??\253x={\222i>}K4?\373DU?zd\016?m\303|?O\206L=\352OB>\234p\035?,ur?\3576M>\255\026$?u\246k?n\333\225>\262\375S?\r\306\021?d\020{?\327\347\232=_0\217>\253IN?\033< ?\254\303o?\262Ks>\177}9?\177[L?0\346$?\316\271j?\322\014\234>\004\372X?\245L\004?\020\266\177?$\266\223;\257\013\223<\373g\220=W9\206>\232\022F?JG3?\022\352V?\230\367\t?\237r~?\331{\305<\032\271\300=U\226\256>\366\033f?\247-\272>\357\364l?^\003\215>\006ZL?\262\351$?\302\265j?\323\'\234>\027\017Y?\006\022\004?\272\275\177?@i\204;G\340\203<\315\300\201=\241\020s>}^9?\'\223L?2a$?\024Rk?E\022\230>\326\316U?\372\363\014?\340`}?\030\020&=\212T\037>\002\212\006?\366T\177?\275\227*<\005\321(=\325\333!>FF\010?!\356~?\307\\\210<\262\027\206=/\240z>\337H=?\304PE?t\3554?\262:T?\266%\021?\341g{?r`\220=\3352\206>q\014F?\307T3?r\324V?L2\n?!`~?\343\235\316<\317g\311=I\231\265>u`j?\326_\236><\305Z?\320\205\376>\321\375\177?\007\253\0139D\246\013:8\223\013;\037G\013<\006\030\n=\'p\005>r\031\350>\303\304}?\245\220\r=\032\254\010>\215\334\354>\270\221~?\372\035\266<\205\021\262=\372\225\242>\313\351]?fb\354>:\177~?\316A\277<\264\312\272=N\301\251>\321\361b?\273\017\316>$Bv?Z\357\025>u\366\377>\000\000\200??\026\2663>\026\2664:\026\2665*\026\2666\351\025\2667\346\024\2668\332\020\2669\253\000\266:\370\277\265;\346\275\264<\t\301\260=\312\177\241>\230\035]?\342\013\361>d \177?\265\330^<\303\320[=\325\004P>\337\302%?]\270i?\365\271\242>\t\004^?K\310\353>@g~?\345\031\313<\325\020\306=\023\351\262>4\311h??\337\250>\271Xb?\235\277\321>\314\244w?\376U\001>\031\000\342>\006||?\223\347]=\371\341Q>I\335&?<fh?2f\253>\264\nd?\025=\307>%js?lw?>\221\252\033?O\nt?\204j6>\234\353\025?\376}x?p4\351=`\246\316>\222|v?\323\216\022>\n*\373>\235\350\177?\354\002\273:\235\276\272;*\256\271<\301x\265=Ad\245>\037\356_?;k\340>\242\032|?#\214u=\313\323f>{\3132?\211\257W?\342\334\007?\264\010\177?\324\\v<z\250r=JHd>\024d1?%\342Y?\353\303\001?\211\363\177?\376gG:)AG;\022\246F<}=D=\232\326:>w\277\030?*nv?\036d\023>+Z\374>\262\362\177?b\333T:#\257T;q\376S<;@Q=\234\217F>\377\016 ?\376\360o?\020\322p>m/8?\336\254N?\321H\037?#\265p?\031\020f>\336_2?\246YX?\372\010\006?Pn\177?!]\021<\367\022\020=\241\001\013>\340E\360>\251\010\177?\030hv<g\263r=\354Qd>ki1?\347\331Y?\017\333\001?:\362\177?ZX\\:\360(\\;\232k[<U{X=O\nM>\356\373#?\224\304k?\256\020\225>\360TS?@\177\023?u\017z?o\250\271=\323\323\250>\362Pb?j\357\321>\t\266w?$T\000>(~\340>L\037|?\253jt=\363\324e>H?2?\341\214X?_{\005?\313\207\177?\204\370\357;\2406\356<SI\347=\246*\315>\367\347u?`\"\033>\267\241\003?>\313\177?m\333R;\300-R<\204{O=\364\370D>j\025\037?:\347p?\306Mc>\005\3310?\231\267Z?&\323\376>\236\376\177?\322\306\2608\001\303\2609\300\263\260:\304v\260;}\203\257<\325\300\253=oY\235>\r\374Y?\034{\001?:\367\177?jV\014:/C\014;U\366\013<?\304\n=\275\020\006>\266\006\351>5\360}?\325\342\002=Eh\375=\\\r\336>\214\177{?\002\206\215=f\276\203>b\260C?\316h8?\355GN?^@ ?a\277o?\257\207s>\367\2349?\347\"L?\tm%?3\035j?r\036\240>\322\026\\?\272\374\366>\305\256\177?XB\242;\247t\241<\010F\236=\267\n\222>5\305P?\234\020\032?}bu?9\315\">!\353\010?\330\301~?TN\236<-?\233={z\217>\346\212N?A\234\037?#cp?\252\221j>\003\3264?paT?\246\277\020?\357\235{?U\333\211=\305\223\200>p\223@?\315\327>?\014KB?\340T;?\023\377H?\034\276,?d\270`?\201\251\333>\217\327z?\305\272\241=7\365\224>\373=S?\000\273\023?\325\352y?^\005\276=\337c\254>d\261d?{\'\303>\312\211q?\023QZ>\207\305+?1\020b?\316|\323>\244Bx?\246.\360=\266\003\324>Gqx?y\263\352=\346\315\317>,\355v?\365\007\014>\220\303\361>U5\177?\025\nJ<E\214G=\217\323=>\013\243\032?\347\351t?\010\263)>\221\223\r?\271\036}?\351>6=\021#.>%\206\020?\324\273{?\006?\206=\211\344z>\277k=?\346\rE?\005~5?PJS?\352\232\023?\216\376y?\t\254\273=py\252>^mc?\327\021\313>b\016u?\240\235\'>\336-\014?\254\256}?9\375\022=\334\266\r>@4\364>\333t\177?\014\331\n<\321\253\t=;\013\005>!\204\347>\212\250}?\207~\024=^\034\017>b8\366>[\240\177?\003\002\277;\373\344\275<\034~\271=,\261\250>S9b?z\200\322>\353\351w?+\226\372=\367\354\333>\244\352z?\225p\237=\363\006\223>\353\234Q?L\355\027?\001\016w?\240\037\n>2\374\356>\177\336~?\000\035\220<\373\223\215=p\312\203>\022\274C?\023P8?{sN?\264\325\037?0*p?\352\260m>\247\2046?\023\217Q?\230\020\030?\212\363v?V\251\013>\002:\361>\277%\177?\341\206Y<\211\243V=,dK>+\376\"?\001\336l?t\237\215>\337\345L?\325\232#?01l?\2613\222>b\350P?\300\267\031?b\252u?\n\255\036>\207\026\006?\277k\177?W\353\023<w\225\022=\211V\r>\333\250\363>\267g\177?\226\356\027<\351\205\026=\326\375\020>e\354\370>\354\315\177?\264(H;4\214G<\007\036E=\224\241;>7@\031?\225\tv?\2502\031>BG\002?=\353\177?I\016\246:m\330\245;\214\001\245<\264\256\241=\r\353\224>{5S?\033\321\023?-\335y?\231\245\277=\211\266\255>\332\214e?q\274\275>\030\331n?\267\005\200>\267\005@?\222\364??\333\026@?B\322??[[@?\307H??elA?\033\037=?\245\240E?\n@4?\260WU?\2332\016?\264\331|?\036\030G=\266j=>\006a\032?\230 u?\023\223&>Nz\013?\013\361}?\001\256\002=\\\005\375=\351\302\335>\267k{?\017\352\217=%\315\205>}\253E?o(4?2~U?\323\313\r?\251\006}?\253\037<=\302{3>/\006\024?\"\274y?\261\223\303=g\346\260>1\217g?\265\333\260>\224\210g?}\006\261>\001\243g?j[\260>\0029g?\240\010\263>0\334h?\335b\250>\322\003b?\234\310\323>\351\\x?l\030\355=\245\245\321>g\233w?y\342\001>\357\321\342>\210\254|?\013\032R=\037SG>\212\206 ?[xo?\204fw>\305\240;?\001rH?\262\376-?\337\361^?\333K\346>Rk}?8\201#=[\372\034>\326\351\004?o\237\177?^\331\300;\321\266\277<>:\273=z\034\252>\037/c?-\224\314>\334\253u?R\227\036>\211\007\006?\225n\177?\020\030\021<\037\317\017=\217\302\n>\362\351\357><\375~?\005\337\200<\016\260}=\267\371m>\243\2536?\221LQ?\325\271\030?\205rv?\245#\023>P\376\373>\363\357\177?\354c\200:\272C\200;e\206\177<1\212{=\254\027l>\302\2505?\301\002S?\333T\024?\207\212y?<x\311={\246\265> hj?\331,\236>O\236Z?wb\377>\237\377\177?\277\341\3017\231\340\3018\003\334\3019\251\311\301:P\200\301;\313[\300<|\327\273=\354\234\252>\016\205c?\220~\312>&\321t?\252\034+>\326\204\016?\316\264|?\024\026P=\326\203E>\313j\037?\331\223p?\312\344g>\036a3?\245\300V?\001h\n?\327N~?\"&\327<\232\177\321=f\021\274>=\371m?y\016\206>\313\351E?\214\2403?\215ZV?$|\013?c\360}?h\327\002=\341R\375=C\375\335>F{{?\360\t\216=\0200\204>\206\036D?\025\1777?\230\340O?tN\034?\372zs?\202\204>>D\022\033?\221\214t?\365\004/>\003\033\021?\233m{?\305\257\217=\n\233\205>\236{E?\206\2204?\341\323T?\025\221\017?\2656|?)\275n=\345\322`>uv/?(\315\\?4\337\362>\247S\177?\334\344+<.\027*=\001\007#>\206\022\t?\305\266~?\334\311\243<\206\203\240=\361\356\223>\232aR?P\365\025?Wwx?\335\374\351=\025A\317>\331\267v?\370\037\017>\223=\366>\301\240\177?\3027\276;\024\035\275<u\277\270=\374\024\250>k\316a?a\017\325>*\314x?\304\376\337=\t\177\307>S\207s?@\322=>8\242\032?\227\352t?\377\250)>\333\214\r?\221!}?\375\2145=\362\200->\020\033\020?m\362{?\212I\177=P`o>\022k7?F\003P?\320\367\033?)\307s?d7:>BZ\030?\317\273v?1\345\016>\332\350\365>/\232\177?)Q\313;5\016\312<b\022\305=\270\033\262>\341Lh?\216\013\254>\225wd?\336\222\304>\2044r?\376\322P>\033=&?5\'i?\202v\246>\034\257`?\230\341\333>o\347z?\037\323\237=!Z\223>\241\343Q?\2508\027?\025\223w?\331^\002>v\213\343>M\326|?\215\354G=s*>>\261\331\032?<\274t?\364M,>\276O\017?;V|?U\026g=\300\014Z>R\236+?\272Eb?V4\322>\304\316w?\327\303\375=AR\336>\277\221{?\363S\213=j\331\201>\376\325A?\210F<?t;G?\337\2670?!\352Z?W\264\375>\273\372\177?a\234\2509\177\216\250:\001W\250;\235y\247<\035\r\244=\004\351\226>#\334T?/{\017?UA|?L)l=\212\213^>\366-.?\316\255^?9\337\347>\326\271}?l?\020=\366*\013>\024\202\360>\000\020\177?\213\036o<#\241k=\017\023^>\313\351-?\344\017_?\237\231\345>\013G}?\317b,=\200!%>s\200\n?\332F~?\307\026\333<\310:\325=l\007\277>\305\202o?l\325v>\265U;?\210\375H?\242\301,?x\263`?D\307\333>\376\337z?\256\267\240=\353\032\224>\263\206R?\271\225\025?`\270x?\'T\342=\021Q\311>\274Qt?@]2>\314K\023?\245.z?E\360\265=\221\306\245>\2213`?G\312\336>\033\261{?\260\212\207=}$}>4\220>?W\327B?\0101:?\374\026K?\032\346\'?U g?\273\247\263>y;i?J\361\245>\247Q`?E\025\336>\245\201{?GE\215=\233\206\203>,zC?J\3338?P}M?\203-\"?\204\277m?\320\232\207>\373`G?Ad0?\001i[?q\341\372>\313\345\177?\211\224\321:\300>\321;\261\350\317<\337\241\312=d\225\266>\007\362j?m\225\232>\274\322W?\\|\007?\332\037\177?ma_<\301U\\=\211{P>K\t&?\366di?2\340\244>`\220_?=\234\342>?\240|?\255\027U=\247\001J>\000(\"?g\305m?pr\207>\373:G?\355\2700?\207\350Z?q\275\375>\344\372\177?\347m\2439\335`\243:\273,\243;\267\\\242<\353$\237=\017\307\222>vfQ?\002x\030?\036\245v?\3425\020>o\315\367>\315\274\177?\332B\206;\006\266\205<Q\207\203=\261)v>\247\374:?,\242I?qH+?V\272b?vf\317>\020\306v?\000M\016>?\r\365>#\210\177?VJ\357;\377\212\355<\251\247\346=s\255\314>\001\266u?\027\002\036>r\240\005?\\\201\177?\333\312\374;\233\327\372<M)\363=_J\326>R4y?\006\260\323=\222\316\275>z\342n?r\211\177>\253\304??sv@?@\022??\016\330A?KB<?oCG?\032\2460?*\005[?\240\032\375>\235\367\177?\342+\006:M\032\006;\r\324\005<5\274\004=\013o\000>y\246\340>2)|?>\004r=}\267c>\302\0231?\270]Z?\341g\000?W\377\177?P\232(8\224\230(9\244\221(:\344u(;\t\007(<\344M&=R\215\037>\034\261\006?\341L\177?\367\2412<`\2570=G\020)>\247&\r?5L}?r\037+=A\371#>j\267\t?\\\206~?=\273\273<\345m\267=\033\000\247>\023\017a?\226\234\331>V>z?\334\020\264=\345;\244>\377\032_?\240W\345>^9}?_\273/=D1(>\027\221\014?N\210}?\274f\034=\346m\026>\250T\000?\220\377\177?\306\364\3377>\363\3378\037\355\3379\243\324\337:\311r\337;\266\354\335<\242\351\327=Z&\301>\332\221p?\336\000h>yp3?\371\247V?\332\252\n?\3248~?b\001\342<.\305\333=\320/\304>`\006r? eS>)\301\'?ONg?\'\177\262>=\211h?\251\201\252>\334rc?\261\357\312>>\000u?ol(>\317\270\014?\235x}?\207? =\217\372\031>2\323\002?\024\340\177?\232@\377:Y\301\376;Q\306\374<\230\371\364=\001\254\327>\245\245y?\346?\306=\t\017\263>\n\340h?\233I\250>\206\362a?\2102\324>U\201x?\343\317\350=\264X\316>\210^v?\177K\024>N\243\375>l\372\177?@\207\2629\260w\262:{9\262;SA\261<xk\255=*\274\236>\206\013[?s\366\374>\306\366\177?p\225\023:*\200\023;.+\023<\303\330\021=O\247\014>\350\252\362>?N\177?DE1<AZ/=y\330\'>pU\014?\204\237}?f\265\026=\325)\021>u+\371>Y\321\177?\376y:;)\3629<\351\3257=\261\225/>1z\021?-:{?}\341\225=u\351\212>crJ?\257f)?\3147e?i\327\277>\256\353o?_\034q>\304V8?\264gN?\221\362\037?l\rp?\nDo>\003\\7?W\035P?\230\266\033?\347\377s?r\0017>\255L\026?\355:x?\214\026\361=\035\265\324>\302\255x?\212\224\343=rJ\312>R\273t?E[,>\224X\017?\000R|?b\035h=\r\366Z>\017$,?X\216a?\223\226\326>\020My?\000\302\320=\206z\273>\322\250m?r6\210>\377\362G??\035/?\375P]?r\340\357>\n\374~?\320v\201<\021\326~=9\373n>457?b`P?y\016\033?\306\217t?7\326.>>\374\020?\377}{?\333\265\215=\241\347\203>b\330C?\030\0248?\317\334N?\315\322\036?\251\'q?e\277_>\245\333.?R\261]?\177\255\355>K\260~?:\376\246<\305\226\243=\232\205\226>^\212T?\237S\020?\303\325{?\177\034\203=sou>\322\233:?\030TJ?\033\255)?a\334d?\264\030\302>\365\007q?\232\177a>7\327/?\024=\\?Z \366>\203\236\177?\345\257\302;\307\207\301<W\365\274=.\206\253>\324\037d?\360\270\306>G/s?\324\307B>\366\272\035?o0r?=\rQ>\226_&?\360\375h?\214\205\247>\225ka?]j\327>\346\220y?\237\266\310=\344\n\265>a\rj?X\207\240>:e\\?\2608\365>\323\213\177?Z\361\347;\017M\346<\232\323\337=P]\307>kxs?n\251>>r)\033?\355xt?\001#0>\367\326\021?\372\006{?c\t\234=\365%\220>1!O?\376)\036?\206\310q?\306\325V>@\303)?\203\277d?\226\316\302>j_q?\017\252\\>\340\034-?X3`?\240\313\336>u\261{?\335\177\207=\262\021}>\263\206>?\351\351B?9\n:?w]K?h@\'?@\355g?\322y\256>\321\tf?k\241\272>\3413m?@V\213>\272\325J?\371~(?M`f?\363x\270>\317\003l?Gf\223>\360\355Q?E\036\027?0\246w?5A\001>\005\341\341>\272t|?\305\255_=\302vS>\203\313\'?qAg?2\322\262>j\273h?\2079\251>\r\226b?0F\320>?\032w?ni\t>\333\361\355>\002\272~?u/\242<u\371\236=Y\242\222>\035GQ?\257\307\030?\316gv?@\302\023>,\340\374>=\366\177?\323(\034:\003\021\034;\336\261\033<\0337\032=\265h\024>\314\314\375>)\373\177?\236\336\2329\350\322\232:\027\244\232;C\351\231<\376\004\227=\"\342\213>\353TK?\210T\'?\212\324g?C\032\257>\234of?\371\026\270>\352\314k?\205\330\224>\371%S?l\371\023?\034\304y?\362\240\302=\350!\260>,\025g?\244\357\263>Hfi?~\327\244>-\212_?>\301\342>\271\250|?\200\007S=*(H>x\010!?C\363n?\266\240~>\343O??V^A?\326;=?\270iE?]\2674?\374\223T?4:\020?\261\342{?*\214\201=\260\264r>).9?\245\351L?\302\221#?H;l?n\357\221>\302\255P?\304K\032?\0272u?\323\222%>-\315\n?P-~?\216\256\347<*!\341=\300a\310>\237\352s?\34558>\204\022\027?\254\256w?Q\302\000>0#\341>\201G|?\326\251j=\'8]>\247m-?\021\301_?\037y\341>\034\\|?\345\250e=k\310X>\267\343*?\366Ac?U\037\314>\267|u?AL!>\001\344\007?\363\006\177?=\032x<qXt=\346\304e>o62?\304\232X?\357T\005?J\216\177?.\007\343;\202t\341<\022@\333=<\307\303>X\325q?l\037V>IY)?\036Ie?\313i\277>\216\264o?\336\036t>\'\3549?\363\223K?\351\277&?\333\211h?\234}\252>\'pc?\204\000\313>7\007u?~\006(>]t\014?\212\223}?\243\245\031=,\342\023>\225\r\375>Q\367\177?\351\356\n:\017\334\n;\275\220\n<\274d\t=\354\310\004>\360!\347>\234\225}?w#\031=\300i\023>1b\374>\354\362\177?77Q:y\014Q;\303aP<G\273M=\360eC>\323\034\036?\355\324q?T%V>\270\\)?\255De?\346\205\277>\271\302o?\370Xs>w\2049?\372NL?\014\004%?R\227j?\267\362\234>\271\254Y?\313Y\002?\345\351\177? \306\260:\027\211\260;\236\225\257<.\322\253=\340g\235>-\007Z?\321[\001?\236\370\177?\225A\3549T&\354:h\271\353;M\007\352<\302W\343=*\033\312>s\247t?\'}->\216\030\020?\257\363{?\\\373~=\340\033o>\234F7?VBP?\344Y\033?\251Ot?a{2>n_\023?\311\"z?\200Z\267=0\360\246>\000\004a?\277\337\331>iRz?9\253\261=rA\242>\377\253]?\252\314\355>\276\264~?\344\312\244<@z\241=\340\276\224>\177\020S?31\024?\032\241y?\375\311\306=[~\263>\304\"i?\262\223\246>\204\303`?>f\333>e\304z?\034\007\244=\370\343\226>\377\327T?*\206\017?\003<|?\315sm=\323\257_>\340\322.?\'\276]?Ub\355>s\245~?\013\\\254<\255\273\250=\321\324\232>\346\004X?\210\362\006?\360>\177?\345~@<\352;>=\032f5>\270C\025?H\357x?\244\331\333=\341?\304>\342\rr?$\372R>N\202\'?(\234g?\306\207\260>\223Tg?\253V\262>\263ph?\350!\253>\200\335c?}W\310>)\346s?\205v8>\337;\027?\277\220w?\302\201\002>\177\277\343>\324\341|?\364\034E=\233\240;>\231?\031?\021\nv?\177+\031>>B\002?\230\353\177?56\243:.\002\243;\2262\242<v\374\236=\342\244\222>HIQ?-\302\030?\021lv?&\203\023>\\\206\374>\354\363\177?*1A:\267\014A;#{@<?8>=\307b5>\222A\025?\265\360x?|\256\333=\374\035\304>\013\376q?\350\333S>\331\006(?p\367f?\033\257\264>\200\327i?\033\354\241>bm]?\300:\357>\300\346~?\205\005\214<\324\240\211=#a\200>\376`@?p=??\320\202A?>\361<?\036\370E?>\2013?\001\215V?\330\363\n?, ~?\205(\356<\n<\347=] \315>\341\343u?\232^\033>\255\313\003?`\306\177?\351Mf;\271~e<\311Gb=\234\307U>+&)?\002\213e?$\310\275>\'\337n?\205\267\177>\275\333??qH@?\315n??\035!A?\254\270=?\344yD?\024\2746?u0Q?3\001\031?\020;v?\364W\026>(E\000?\265\377\177?>u\2257\220t\2258\326q\2259\356f\225:U;\225;Y\215\224<\273\333\221=fx\207>\230@G?m\2540?\214\373Z?TQ\375>\316\370\177?\0135\3469*\033\346:\300\263\345;\212\027\344<\272\275\335=\226\273\305>\356\274r?\0143I>\277\252!?#Jn?\241\341\203>\220\322C?m 8?0\307N?\017\010\037?1\364p?\305\226b>\"s0?~R[?\376a\373>\256\352\177?\221~\252:\312E\252;Ic\251<\247\342\245=\351r\230>)\035V?\224!\014?W\263}?\330\327\021=t\246\014>\253\251\362>\036N\177?(f1<nz/=\344\365\'>5i\014?\337\227}?\205\225\030=g\346\022>\377\246\373>\031\355\177?\233,\227:\371\377\226;\327M\226<\334\213\223=\237\352\210>\036\233H?\205\241-?Ew_?\0302\343>P\302|?\335\313L=\204\216B>p\227\035?\\Qr?\0047O>\203H%?\327Gj?p\003\237>\233A[?W\302\373>\004\356\177?\334\326\217:s\256\217;*\r\217<\255\215\214=D\350\202>\321\337B?S\037:?*7K?\206\232\'?7~g?\211I\261>N\314g?\264O\257>W\221f?\337>\267>\314Rk?x\r\230>\361\312U?n\376\014?\243\\}?\271\031\'=\220H >\3361\007?\3610\177?\340gN<2\316K=(\252A>\247\t\035??\323r?\334\362G>\376\347 ?\271\024o?^\320|>\245e>?n*C?\r\2039?\204QL?\000\376$?P\236j?\034\304\234>\237\210Y?\341\276\002?\331\341\177?L\036\361:\277\254\360;6\350\356<\221\360\347=\020\254\315>\033\033v?\0060\030>\302\221\001?&\366\177?&\232\035:\345\201\035;\374 \035<6\237\033=\223\265\025>\270\244\377>\337\377\177?\0242\0027\3221\0028\3110\0029\246,\002:\031\034\002;\371\331\001<\203\322\000=\240\212\371=\301\"\333>\007\261z?XY\246=Y\326\230>umV?\034I\013?\213\002~?\216\277\374<A\363\364=.\247\327>\037\244y?#n\306=Q4\263>n\366h?\312\266\247>\226\215a?2\233\326>\216Ny?\257\224\320=pV\273>{\225m?\355\272\210>\266nH?\'\006.?\'\347^?w\213\346>\010x}?\363c =\"\034\032>\253\352\002?\371\335\177?v\n\010;+\302\007<2\242\006=O5\002>\206M\343>y\310|?}KK=p4A>i\300\034?b\025s?\210<D>X\241\036?&Wq?&\037]>s_-?8\325_?y\000\341>\035?|?\377\262l=W\005_>\303r.?9J^?B+\352>h#~?R\220\354<~\273\345=_\366\313>\026lu?`@\">\375\212\010?\023\334~?%P\221<F\274\216=\231\311\204>\255\262D?\\B6?\277\377Q?\246\360\026?\005\307w?\330\253\376=\252\000\337>,\277{?\245\327\205=\3310z>\375\017=?\202\275E?.\0014?\025\276U?\343 \r?\223N}?\037\213*=Nq#>\357Z\t?\354\241~?\324\032\256<\220g\252=\3329\234>%\035Y?\344\352\003?\235\302\177?\345Ru;\315gt<u\302p=\242\233b>\330u0?cN[?my\373>\205\353\177?\233\315\243:3\231\243;\032\310\242<\013\214\237=#\036\223>\246\260Q?\364\272\027?~3w?a\361\007>\206\312\353>\232g~?^\355\312<\202\346\305=\360\306\262>\237\264h?\370e\251>&\264b?\242\214\317>\211\324v?\032v\r>\214\326\363>\026l\177?\036\224\023<\320?\022=\003\007\r>\2515\363>h\\\177?\212/#<t\217!=\0300\033>F\253\003?\'\312\177?\2156W;\240\201V<\254\262S=\254\301H>\340e!?O\222n?\207\357\201>\310\353A?\255\031<?\321\217G?\245\373/?\211\006\\?mZ\367><\265\177?\324\\\225;\212\256\224<\267\373\221=\324\223\207>iZG?\350r0?\326R[?\007`\373>\234\352\177?\311\017\253:\242\326\252;\236\362\251<\rl\246=\003\346\230>\024zV?\002\'\013?\177\016~?\341\334\366<wl\357=\000o\323>\326=x?\r\277\360=4r\324>\017\227x?\031A\346=\370]\314>\n\226u?+\330\037>\234\344\006?\362A\177?\321\200=<\263O;=\333\2762>]\213\023?\021\010z?\353\211\272=T\214\251>\024\316b?\223\354\316>\217\227v?\350\376\020>\357\355\370>\002\316\177?\313\321G;\3235G<\300\311D=gU;>\357\017\031?\211/v?H\002\027>\\\275\000?\320\375\177?4\017\0149i\n\014:C\367\013;\274\252\013<\361y\n=v\313\005>f\240\350>\257\335}?\334p\007=X\366\002>!m\344>\261\007}?M\337;=NA3>5\340\023?\317\323y?\333\302\300=@\236\256>\377 f?\204\r\272>d\343l?\320z\215>\034\305L?\177\351#?I\331k?$\205\224>\021\340R?\305\256\024?\350Py?jM\320=\255\035\273>\374vm?\262\213\211>\2230I?\014M,?\262Ua?\221\357\327>\334\272y?m\272\303=\274\005\261>\212\242g?n^\260>\342:g?\205\374\262>\350\324h?\225\222\250>s$b?\231\000\323>6\027x?oG\365=5\347\327>>\270y?\021\n\304=$F\261>7\312g?B]\257>\342\231f?\034\010\267>\2403k?o\336\230>\371sV?\2017\013?\274\010~?\220\263\371<\032\027\362=$y\325>y\357x?\331\323\333=T;\304>\302\013r?p\030S>\035\224\'?&\206g?:\026\261>\266\254g?\207\034\260>\321\021g?C\005\264> si?\342\202\244>\317M_?D)\344>\000\371|?ju?=d\2026>\372\372\025?tsx?\347q\352=Z\233\317>\032\332v?c#\r>\305^\363>}`\177?\247\037\037<\006\224\035=\027\204\027>\321\030\001?0\373\177?\216\002\2329\371\366\231:\255\310\231;\352\017\231<\3123\226=\262/\213>\220\262J? \321(?\354\367e?}\023\273>\200qm?5\261\211>ESI?\237\375+?E\303a?\203S\325>\363\342x?fN\335=Wd\305>\031\225r?\361mK>\016\004#?\220\327l?E\313\215>\377\014M?\271<#?\\\231l?\363q\217>f\203N?\252\256\037?\357Pp?V\221k>M`5?\360{S?\231\031\023?\303Lz?\350W\262=\035\320\242>,\024^?qi\353>!X~?\211\220\322<\375&\315=\016\232\270>K\026l?t\351\222>\313\203Q?W-\030?\336\335v?j\353\014>\251\r\363>bX\177?\306/\'<\t{%=\213\313\036>\223+\006?\267g\177?\234\356\027<\356\205\026=\333\375\020>l\354\370>\354\315\177?\022\'H;\225\212G<r\034E=&\240;>O?\031?L\nv?\033(\031>\336?\002?\302\353\177?\331\337\241:\253\254\241;v\340\240<\253\267\235=R\222\221>\217]P?\221\025\033?\306\211t?\240-/>\3065\021?B_{?nj\221=6\027\207>\357\344F?\002x1?\\\303Y?T\032\002?P\356\177?\313v\215:\265O\215;\263\263\214<\013I\212=\260\362\200>\312\361@?\332\030>?\317\277C?\'H8?j\201N?\211\263\037?\034Lp?\016\325k>\330\2045?\347>S?\233\270\023?P\354y?R\330\275=.?\254>g\231d?_\276\303>,\321q?\313ZV>\320{)?n\034e?o\204\300>\363Ap?\244cl>\255\3215?\013\276R?\317\006\025?\207\027y?\374\027\327=\323\200\300>(@p?\311|l>5\3375?F\247R?\250A\025?\247\360x?3\260\333=U\037\304>\254\376q?\357\322S>\226\001(?\004\376f?\305\204\264>\220\276i?\377\220\242>)\346]?\273w\354>}\202~? \245\275<6A\271=L\177\250>E\027b?hQ\323>\2053x?#\365\361=4_\325>\330\346x?\245\330\334=\003\010\305>\261jr?\334\314M>mp$?\300@k?{\206\230>\376,V?\367\366\013?b\303}?B\347\r=\271\374\010>\263R\355>,\243~?a|\255<\326\317\251=T\273\233>G\272X?\236\375\004?_\234\177?\017\364\306;\322\276\305<\330\370\300=\021\312\256>\323<f?\310[\271>\310\201l?\352\021\220>\253\017O?MU\036?\226\237q?\235\033Y>\250\023+?\220\001c?T\256\315>\377\033v?\337\"\030>\203\210\001?\231\366\177?\020o\026:\367X\026;\252\000\026<\027\241\024=m<\017>\222f\366>\332\243\177?\033\t\270;\201\000\267<\363\351\262=\256H\243>\271k^?\264e\351>\036\001~?Ds\375<\334\233\365=f\'\330>J\314y?\350\247\301=\025X\257>\237\226f?\007\035\267>\213?k?\223\216\230>\2103V?X\345\013?\364\311}?)J\014=\026|\007>\036\036\353>\355K~?\352\225\330<\000\334\322=J&\275>\005\213n?\341!\202>U\035B?s\263;?-OH?zM.?C\200^?s\354\350>{\353}?H\014\004=\373\224\377=\266\257\337>\324\353{?\024q\200=\326\305p>\364(8?<\270N?\334,\037?k\320p?\210\217d>\212\2131?%\245Y?\006o\002?O\350\177?rv\275:V0\275;\265\030\274<\022\307\267=LI\247>\342Aa?\021h\330>[\340y?\252D\277=\271g\255>\030Ze?M\376\276>#~o?\370\025w>\036w;?\203\277H?\335N-?\270\354_?\244s\340>\265\034|?c\013u=wbf>2\2152?+\022X?\006\316\006?\310F\177?F\2628<C\2356=\003y.>\325\276\020?]\236{?\037\316\211=W\210\200>\016\210@?\302\356>?\355\035B?:\262;?uQH?QH.?\272\207^?]\300\350>\201\343}?\201\002\006=\027\240\001>\320n\342>\311\225|?w\243W=7IL>\006\210#?\030Fl?B\246\221>\301nP?]\352\032?:\256t?P\032->+\327\017?P\024|?&\024w=\250,h>j\2103?t\201V?\022\023\013?l\025~?\320s\363<\2507\354=\323\370\320>]\\w?\001\220\005>\211H\350>\205\315}?\275i\013=\375\252\006>@\352\351>A\030~?\307\016\362<\307\347\352=6\366\317>T\374v?\240&\013>\304{\360>=\017\177?\354\340o<\325]l=\003\272^>:H.?\334\207^?\226\277\350>]\343}?f\013\006=g\250\001>:{\342>\246\230|?\365\360V=y\251K>\353\'#?>\260l?\225\326\216>i\372M?\237\375 ?t\376n?{\005~>\303\001??\210\370A?g\377;?\037\301G?;\215/?Y\253\\?+\243\363>*g\177?hz\030<\"\017\027=\364|\021>\204\242\371>|\327\177?0\366!;\270\217!<\340\367\037=\202\270\031>\376\244\002?\007\344\177?a\261\337:\245O\337;\016\312\335<\332\310\327=z\014\301>$\205p?\272\263h>*\3223?[\nV?*T\014?\001\240}?\243\226\026=U\r\021>\234\002\371>%\317\177?\244HC;\255\263B<Yc@=\007Z7>\221\205\026?\025\023x?T\303\365=eE\330>\235\325y?\360\213\300=\251q\256>\236\004f?\217\302\272>\323Em?\275\333\212>\326eJ?\340\203)?\371\021e?\177\306\300>\246bp?\220\230j>\300\3314?D[T?\354\317\020?g\225{?\005\343\212=\324w\201>\254uA?\"\014=?\335\304E?\'\3613?\036\330U?\027\333\014?\351j}?\341\232#=\370\021\035>5\372\004?\347\234\177?\342\344\305;\356\262\304<\332\371\277=\001\373\255>\315\270e?I\245\274>dGn?\221\364\203>\354\344C?\177\3717?a\013O?\350_\036?\207\225q?w\252Y>\333e+?\177\222b?\027\\\320>g\"w?\365\357\010>\377?\355>p\240~?\257\326\256<k\033\253=\266\317\234>\236\221Y?\266\245\002?\370\343\177?\304*\340:\236\310\337;`A\336<\2649\330=\207e\301>\320\260p?\375Lf>b\2012?\322$X?\251\232\006?\212Q\177?\241\376-<\230%,=p\351$>uZ\n?<S~?\032\373\324<\223q\317=wn\272>:\030m?\345\022\214>\036\201K?]\354&?\351Sh?\270\335\253>|Yd?\275O\305>\250\213r?!\365K>vU#?\025~l?\001+\220>\232%O?\027\037\036?\314\322q?\251CV>]n)?\333-e?K\026\300>#\013p?\010do>\rm7?\331\377O?b\000\034?\252\277s?\337\243:><\237\030?\006\207v?\355\363\021>\275L\372>\202\337\177?\032\350\001;.\246\001<\212\237\000=\027+\371=|\332\332>\"\234z?\003\332\250=\'\356\232>\352\030X?t\273\006?\265J\177?m\3124<\267\3132=\271\375*>;p\016?!\276|?\251\320M=,yC>\267(\036?\272\311q?\251\304V>Q\271)?x\314d?\366|\302>J8q? \324^>\372V.?\202r^?\254=\351>\006\372}?}x\000=\343\341\370=\025\243\332>\002\214z?&\310\252=X\212\234>\312[Y?3<\003?#\326\177?-Z\';\306\354&<f9%=6\217\036>\360\001\006?\243o\177?\251\013\020<t\307\016=V\315\t>\367\203\356>K\316~?\035$\230<\306P\225=\342m\212>\035\001J?mm*?\246\337c?\021J\310>R\340s?\032\3138>\364q\027?Niw?\351\316\004>\316*\347>U\227}?[\267\030=\267\005\023>\246\323\373>\226\356\177?rJ\213:\215$\213;L\215\212<g5\210=\233L~>\225%??\355\261A?\247\220<?\177\257F?8\3561?\304\013Y?F\033\004?\214\274\177?-\305\206;G7\206<X\004\204=\221\003w>\231m;?3\321H?\242&-?\225%`?T\036\337>\316\306{?s\353\204=\374\225x>@=<?\356LG?\364\2200?J%[?\301c\374>\367\362\177?\306\202P:QXP;\301\256O<\321\014M=\370\310B>\253\273\035?\307/r?\237\026Q>\"e&?G\367h?9\261\247>\277\211a?\232\262\326>\036Vy?[\257\317=\271\237\272>\3662m?\206\\\213>q\333J?\232q(?6qf?\270\014\270>\'\307k?U\377\224>qFS?\375\244\023?`\370y?\200h\274=K\023\253>\317\323c?\370\223\310>g\000t?+\3726>\001H\026?/>x?\245\264\360=?j\324>Y\224x?\306\222\346=D\235\314>\203\257u?\237a\036>v\342\005?|u\177?\3058\n<@\016\t=<x\004>]\252\346>*~}?Q\343\036={\271\030>I\362\001?\331\360\177?>ir:\333/r;\274Jq<\005\275m=\215\360_>O\367.?\303\210]?\313\232\356>g\321~?\257\231\226<\353\324\223=$)\211>9\325H?y\035-?\2012`?\255\320\336>\304\262{?bW\207=r\313|>\'c>?J/C?\331x9?\330cL?B\322$?\303\320j?\245s\233>\014\202X?X\231\005?\233\202\177?iO\372;\353e\370<\276\335\360=\255\211\324>\n\237x?\207P\345=a\243\313>>Ju?\3340$>3\335\t?\315z~?\237q\301<;\340\274=\370t\253>w\024d?\013\000\307>\005Os?\224\376@>\335\236\034?t3s?\262\213B>\260\225\035?\372Rr?\347\037O>\300:%?\334Wj?\375\230\236>\307\360Z?\217\216\375>\010\372\177?\265\374\2769\345\352\276:\265\243\276;\306\207\275<8%\271=^h\250>\226\007b?\210\261\323>\357Tx?}\010\356=\004^\322>\247\335w?\336\005\374=m\002\335>\2527{?\333.\226=}+\213>\270\256J?\030\332(?z\354e?i\\\273>\257\230m?\375\244\210>BZH?k4.?{\244^?a\026\350>0\304}?\247\264\r=\237\315\010>\257\r\355>\007\231~?\272\200\262<\000\235\256=\306\271\237>A\313[?\361\256\370>x\312\177?+\365U;YBU<\273{R=\307\252G>\n\274 ?\315Ao?\363]z>\013\'=?|\221E?\002a4?\311!U?0\302\016?\276\230|?N\353V=j\244K>\340$#?\226\263l?\332\277\216>N\346M?\227.!?\322\313n?\252a\200>\204a@?c<??\345\204A?\373\354<?<\000F?|o3?\221\251V?\212\246\n?C:~?2L\341<\371\031\333=K\251\303>>\307q?\006\350V>\327\315)?\256\261d?\244%\303>\353\210q?x]Z>\243\314+?w\006b?i\270\323>PWx?\347\300\355=\020\'\322>\004\312w?\'R\376=C\275\336>\272\255{?1\363\207=\310\331}>\275\353>?\336#B?\361\245;?]hH?\206\024.?y\322^?\016\006\347>/\220}?Px\032=\000\245\024>g\"\376>\205\374\177?\233\275^9~\261^:\020\201^;\254\277]<Z\277Z=\263\020O>\2621%?cbj?\000S\236>q\273Z?\\\275\376>i\376\177?[O\3138OJ\3139!6\313:z\345\312;\334\243\311<F\255\304=\r\312\261>\024\033h?\344O\255>\265Je?\274_\277>z\257o?\304et>:\021:?\301PK?U^\'?}\310g?ph\257>\355\240f?\363\332\266>\331\031k?\020\213\231>\233\376V?\311\277\t?\321\203~?^\375\274<6\241\270=1\374\247>b\275a?~w\325>\355\356x?c\344\333=RH\304>\322\021r?\376\301R>Ha\'?\334\304g?\373\177\257>\275\257f?\350{\266>f\343j?*\367\232>\007 X?\335\247\006?\316N\177?\007\2670<\026\317.=4Y\'>\323\377\013?\021\300}?\346\267\016=\335\276\t>\317n\356>e\313~?m\223\231<a\262\226=\260\233\213>\360\024K?\346\352\'?Y\032g?K\316\263>sRi?\032Z\245>\357\346_?U\226\340>=%|?\341\371r=\013\220d>\322\2131?\265\244Y?@p\002?7\350\177?J5\276:\241\356\275;\314\324\274<\202z\270=x\334\247>\215\247a?\312\374\325>\362\032y?\211\260\326=\025/\300>\202\027p?\304\266n>\256\0207?P\237P?,p\032?\030\024u?\010J\'>\235\365\013?\343\303}?\200\307\r=*\337\010>e\'\355>\323\234~?$\240\260<?\321\254=\004<\236>\345\251Z?\320 \377>=\377\177?C\223B8\364\220B9\266\207B:\301bB;\'\317A<?\204?=\326\2176>\241\003\026?\201mx?\373$\353=^%\320>\376\rw?\326\037\n>\201\374\356>\211\336~?\321\027\220<\373\216\215=!\306\203>\343\267C?\355X8?\346cN?\343\373\037?\034\004p?p\306o>i\2417?\375\244O?\005\343\034?6\366r?\261\374E>\370\264\037?\260Jp?\t\351k>\236\2175?\337,S?}\347\023?H\317y?\267L\301=\037\016\257>\357gf?\034H\270>{\350k?\256\036\224>\337\211R?\214\215\025?\343\275x?\307\255\341=i\317\310>\026\032t?\226\2055>\013X\025?\300\341x?\244r\335=\300\200\305>\030\242r?\303\263J>\270\223\"?\270Qm?z\212\212>^\033J?\2530*?\372/d?\335S\306>\345\001s?\306TE>\341M\037?0\260p?\322Uf>>\2062?&\035X?\312\257\006?\'M\177?\313[2<\274j0=\215\321(>\240\374\014?_]}?\323\353&=h\036 >\347\024\007?g7\177?\035\374G<6\213E==\004<>\257~\031?\r\330u?\336\014\034>\362D\004?\027\267\177?\205\247\221;\307\001\221<\257p\216=\210\210\204>\373sD?\270\3106?\324\032Q?\0148\031?\006\020v?\236\323\030>\240\004\002?\266\357\177?5J\202:\r)\202;\262\244\201<\355.\177=\005Io>\252^7?\300\030P?\027\302\033?\360\365s?\342\2217>i\251\026?\310\371w?\231\272\370=W\205\332>P\203z?\203\322\253=&h\235>c\007Z?9[\001?\244\370\177?\324r\3539\303W\353:\226\353\352;o<\351<v\230\342=E\206\311>kht?E\0231>[t\022?\271\255z?\264\276\246=8+\231>\300\261V?_\220\n?\235A~?|\254\335<\342\254\327=g\366\300>Fzp?\202Li>k%4?\034\203U?\261\276\r?P\014}?_\276:=\314:2>X5\023?\'<z?\214S\264=\331r\244>YB_?\210m\344>\307\007}?\341\331;=`<3>\001\335\023?\314\325y?P\206\300=\030m\256>\265\001f?\036\325\272>\333Om?4\227\212>\n\'J?\240\025*?\227Sd?\270t\305>\230\234r?\224\002K>N\303\"?)\036m?l\352\213>p\\K?\324B\'?G\352g?!\215\256>\034\026f?\001S\272>J\tm?\271x\214>.\335K?\237\022&?\336Yi?E)\245>P\304_?\256e\341>xW|?\210\311f=\234\310Y>.w+?\374zb?\342\354\320>\372Ww?z\321\005>J\251\350>N\337}?\314\n\007=\006\227\002>/\337\343>\316\350|?0iC=\231\026:>cE\030?\252\313v?\315\371\r>\n\225\364>\242}\177?n\033\002<\356\022\001=Z\003\372=\t~\333>0\313z?\2216\243=\3004\226>\244GT?\241\003\021?\022z{?\004/\216=\376O\204>e=D?O=7?fRP?\2301\033?\001rt?\277\2070>\003\031\022?\344\341z?b}\240=\303\351\223>;]R?\222\000\026?\234ox?\247\345\352=\222\364\317>\266\373v?\306/\013>\027\211\360>\331\020\177?+Gn<\n\320j=\372Y]>\334\200-?\310\245_?S\034\342>\240\202|?}L\\=DsP>c\004&?\312ji?\320\271\244>\006u_?\177?\343>S\305|?\344\017L=O\345A>k.\035?\315\261r?\236\322I>\204\013\"?\302\343m?\021\242\206>\022vF?\340l2?)EX?\205A\006?tc\177?1,\034<\031\257\032=\247\327\024>Fj\376>}\375\177?\217\277 9@\271 :\006\240 ;=; <\025\252\036=\257\204\030>:\315\001?\004\363\177?\250\263O:\207\211O;H\341N<\212DL=\265\024B>\334K\035?\347\226r?\034TK>|\364\"?\226\350l?oW\215>p\245L?j5$?\274\203k?\347\304\226>x\276T?\316\311\017?\353\032|?^zu=\'\304f>\344\3022?+\275W?\205\267\007?\315\021\177?\227Um<y\345i=A\212\\>\306\n-?\327L`?;2\336>N\211{?\261X\214=\215\272\202>\033\263B?\244|:?%\215J?d()?\'\210e?G\332\275>\207\350n?\2165\177>\237\232??!\312@?@i>?h#C?\313\2219?\0027L?,=%?\013Uj?\265\253\236>\003\377Z?\236=\375>c\370\177?+\235\36391\200\363:c\014\363;\342>\361<&$\352=c_\317>`\303v?\343t\016>\325F\365>\003\215\177?P\223\345;\216\367\343<\206\237\335=\354\243\305>&\262r?\244\315I>\200\010\"?\367\346m?\n\214\206>-aF?\332\2322?\224\374W?h\t\007?\3609\177?\343vE<\242\025C=\003\3139>@\025\030?\t\360v?l\335\013>\277\205\361>f.\177?\352\355P<\334CN=\307\340C>\272h\036?&\215q?h!Z>.\252+?\2165b?\242\227\322>$\362w?\246\237\371=\2472\333>\232\265z?\001\315\245=\304`\230>{\016V?\022I\014?F\244}?\234\212\025=\361\024\020>\032\236\367>\274\271\177?\004a\214;\020\307\213<\202d\211=\352,\200>\343,@?\033\246??K\263@?t\227>?*\311B?\242N:?\032\341J?]d(?\357\201f?\235\241\267>\306\212k?\235\225\226>\217\227T?\3030\020?y\347{?\002\370\200=\307\261q>\272\2458?N\334M?\356F!?\214\262n?\234\020\201>z\017A?\214\334=?\2354D?\007P7?\0202P?\262\202\033?\257,t?\232w4>\200\251\024?OTy?2\346\317=p\313\272>\237Jm?\364\272\212>\321GJ?\234\311)?4\267d?\337\002\303>^xq?BH[>\025S,?WMa?c\"\330>\272\312y?j\327\301=\232~\257>\337\256f?x\201\266>\230\346j?\325\341\232>/\017X?<\326\006?\010E\177?\350o:<\315P8=\211\0050>\242\303\021?\274\021{?\201\276\232=I\r\217>\271*N?\277\207 ?!wo?\244ww>\236\251;?\202aH?\006$.?#\274^?^\212\347>\274\251}?\2153\024=\323\326\016>#\324\365>\213\230\177?\362\225\316;\207H\315<\235#\310=\250\224\264>\355\307i?\032S\242>\354\270]?\367\200\355>\344\251~?\210)\252<\257\240\246=\026\022\231>\214\235V?\023\307\n?_/~?\353\252\346<.,\340=\203\242\307>\367\226s?M\360<>\331\023\032?\332_u?\360\363\">\207\005\t?r\272~?6\370\241<e\304\236=\204u\222>\310 Q?\365(\031?\346\033v?M$\030>\205\211\001?\214\366\177?\2604\027:\\\036\027;\'\305\026<\371a\025=F\357\017>\363g\367>%\266\177?\225\213\223;\202\341\222<R?\220=h\026\206>Y\361E?\t\2203?-uV?@4\013?\340\t~?\315#\371<\027\220\361=\004\022\325>\014\315x?\021\344\337=-j\307>\034~s?JW>>\336\365\032?\213\244t?\202\247->\2154\020?\216\345{?n3\201=\244\031r>\205\3348?\037{M?\3202\"?\333\271m?\245\301\207>{\205G?\300\0220?\333\343[?\277!\370>\027\302\177?9fw;#wv<\376\301r=\310^d>\212p1?\346\316Y?\363\371\001?`\360\177?\360\354y:\360\257y;i\274x<\262\365t=^Of>\261\2022?\301\"X?Y\240\006?]P\177?\006*/<\234J-=\275\365%>\021\020\013?v\026~?\320\360\362<n\274\353=\377\231\320>c9w?\223\231\007>|I\353>\371R~?\336\033\325<\243\220\317=<\207\272>\255%m?&\267\213>\346-K?L\260\'?>cg?\357\367\261>\0257h?\227\231\254>o\324d?\310J\302># q?\321)`>\204\027/?nY]?7\257\357>\315\365~?\350\216\204<\313i\202=\2567t>\"\3719?q|K?d\367&?}Fh?;5\254>\343\222d?Q\347\303>k\344q?\326HU>D\334(?\265\351e?\rn\273>$\242m?6d\210>\313\035H?\351\274.?D\336]?\014\246\354>\206\211~?\001+\272<\355\357\265=H\306\245>^3`?|\313\336>k\261{?\375\200\207=\247\023}>\261\207>?\372\347B?D\016:?!VK?\256Q\'?\013\330g?\205\003\257>:af?\007s\270>\200\000l?\240|\223>\343\000R?\272\355\026?\035\311w?\034m\376=\205\321\336>\374\262{?\230P\207=\251\277|>0]>?\354:C?m`9?\255\217L?\202i$?\240Hk?\253Q\230>A\002V?\361i\014?\226\227}?f\247\030=\362\366\022>\230\276\373>\344\355\177?\216\325\220:\226\254\220;\021\t\220<\277\200\215=\335\271\203>\373\253C?\035r8?\2027N?\204h ?\322\226o?\326\275u>\234\304:?I\tJ?\205Z*?\261\370c?\252\255\307>\340\233s?^\251<>\022\347\031?8\204u?\t\336 >v\230\007?;\031\177?\362\364e<\261\272b=\317-V>\247a)?M>e?B\256\277>\007\327o?5=r>C\3578?\314YM?o\203\"?Lcm?U\022\212>\345\254I?\303/+?\257\333b?\214\230\316><wv?\325\335\022>\306\232\373>\256\354\177?\007\203\232:fT\232;S\232\231<\004\271\226=Y\241\213>\026\032K?\322\336\'?i)g?8m\263>\205\030i?\003\327\246>z\362`?\371I\332>\341qz?j\350\255=\354#\237>4Z[?\3735\373>\020\351\177?7l\267:\201*\267;e$\266<\247\027\262=\n\233\242>}\355]?\264L\354>\345{~?=\347\300<_\\\274=f\t\253>=\315c?\361\274\310>\036\022t?9\3715>\242\242\025?\251\257x?-[\343=\322\035\312>\221\250t?\325l->\303\r\020?\033\371{?V\253}=\225\365m>l\2516?XPQ?;\260\030?\356yv?\344\265\022>\314a\373>\255\352\177?\363\214\252:$T\252;|q\251<D\360\245=Q~\230>c&V?\276\010\014?\267\274}?q\212\017=\262\202\n>\317\214\357>f\361~?\371\275\206<\235\206\204=t\346w>\323\342;?\247\366G?\010\025/?\026]]?\342\231\357>\024\363~?\366\350\205<\227\270\203=\222\177v>7);?\350OI?S\005,?\256\270a?8\224\325>u\370x?%\304\332=\320e\303>]\247q?-\255X>\001\324*?\001Wc?\276\234\313>\207Gu?\257X$>?\370\t?kr~?\227\225\305<\233\321\300=8\252\256>\233(f?\362\334\271>\317\310l?\234/\216>^fM?\ne\"?\006\204m?u2\211>\336\335H?\312\t-?:N`?\346)\336>\032\207{?\263\234\214=;\365\202>{\354B?\331\004:?7gK?q)\'?d\th?\363\302\255>\325\224e?\311\211\275>\325\276n?\226\273\200>\014\273@?\305\207>?\323\347B?\225\016:?\216UK?\tS\'?a\326g?R\016\257>\017hf?OG\270>\t\350k?\263!\224>k\214R?\373\206\025?O\302x?[(\341=\\g\310>\016\355s?\230\0228>\351\373\026?\360\276w?\311\235\377=R\266\337>\177\355{?j=\200=vkp>\014\3717?+\014O?\364]\036?b\227q?#\220Y>\270V+?\004\247b?\243\335\317>\030\363v?\353\257\013>\225C\361>\332&\177?-nX<D\222U=yoJ>rj\"?6~m??Z\211>\307\002I?\252\265,?3\304`?\032b\333>6\303z?z+\244=\203\002\227>\017\361T?\254C\017?\000\\|?\301\257e=\202\316X>:\347*?A=c?\211<\314>\211\210u?\231\236 >\361l\007?r#\177?\026\320[<\037\335X=\301aM>T0$?}\211k?<\236\226>\247\236T?\377\035\020?\362\360{?\020\245\177=l\260o>\263\2257?V\271O?\\\260\034?\311#s?@mC>Y!\036?\253\320q?\351aV>\363\177)?\020\027e?Y\246\300>\300Rp?\320wk>\204R5?\353\222S?\234\335\022?Ypz?B\027\256=\316J\237>\232w[?\003\216\372>Y\342\177?\313\031\355:\376\253\354;c\366\352<(9\344=m\312\312>\306\360t?\244N)>iP\r?\360:}?\350X/==\327\'>\233T\014?\326\237}?S\241\026=<\027\021>\315\020\371>\352\317\177?Z3@;\r\243?<:e==P\2434>\314\305\024?\375Ay?\266\021\322=\224\205\274>\2616n?\243g\204><TD?\222\0147?b\246P?Y^\032?\314\"u?\310r&>\204d\013?\325\370}?\235\303\000=\263n\371=\242\r\333>\360\252z?!\024\247=\270r\231>\035\353V?\303\364\t?\201s~?]\014\305<\375N\300=*@\256>\013\345e?\302\213\273>\013\262m?:\367\207>\306\267G?2\242/?,\214\\?\235W\364>\031x\177?#\237\007<\276\177\006=\036\025\002>\202\035\343>\254\275|?/\355M=\324\222C>\2238\036?\304\272q?h\231W>\2464*?\273*d?\267t\306>\256\020s?+\200D>\013\313\036?\"/q?\270U_>\033\240.?I\010^?T\257\353>Lc~?\204\r\315<\217\353\307=\215g\264>R\255i?\355\002\243> 9^?\374\217\352>n4~?T,\344<\\\321\335=\367\312\305>\355\303r?\256\316H>\310m!?\r\212n?\224(\202>\353#B?\330\245;?\215hH?\031\024.?\026\323^?m\002\347>y\217}?\312\244\032=\037\316\024>\301\\\376>Q\375\177?\317\243+9\236\234+:\333\177+;\367\014+<\316C)=$E\">?\216\010?4\333~?\206\276\221<\273&\217=1%\205>\270\nE?\342\2045?\326>S?\306\270\023?5\354y?\203\333\275=\307A\254>\032\233d?\256\263\303>#\314q?f\242V>l\245)?b\346d?\236\331\301>c\351p?O/c>\023\3100?r\321Z?\204@\376>\362\374\177?T\212C9\376\200C:\253[C;\226\306B<\320u@=\301j7>N\220\026?\205\013x?R\246\366=\320\361\330>\255\nz?a:\272=EK\251>\022\242b?\032\374\317>\212\376v?\300\005\013>\341K\360>f\t\177?\332\254u<\310\375q=\313\261c>\231\0201?\222bZ?/Z\000?\201\377\177?\273%\3767\302#\3768\340\033\3769Y\374\375:Z~\375;T\210\373</\317\363=\320\310\326>G]y?\'\326\316=|\362\271>\233\324l?f\337\215>\363\036M?x\021#?\340\310l?./\216>\374eM?\366e\"?\010\203m?B9\211>/\344H?i\373,?sb`?\035\260\335>\257f{?^\205\220=\224R\206>\233*F?\261\0223?1>W?\257\022\t?\271\266~?\243\317\243<\022\211\240=\236\363\223>\215eR?&\353\025?O~x?\353*\351=\006\237\316>\274yv?\322\270\022>\371e\373>\323\352\177?\026Y\251:\022!\251;\231A\250<\350\314\244=\002\212\227>\353_U?\247\034\016?j\343|?\314\271D=\373F;>\312\006\031?\2626v?\207\230\026>\301r\000?2\377\177?L\301M8\267\276M9a\264M:\017\213M;\007\346L<\tVJ=KW@>\2076\034?\033\220s?hS=>WR\032?\257,u?\003\342%>\273\002\013?\017\033~?\364\254\360<\316\232\351=i\365\316>\362\232v?\267\314\020>\365\245\370>\364\311\177?|\003X;6MW<\353xT=csI>\312\321!?\370 n?4\375\204>P\344D?\250\3275?\373\263R?\322 \025?e\006y?\206\036\331=\355\031\302>\214\010q?=wa>\211\322/?\022D\\?\006\370\365>`\233\177?w\360\310;\006\265\307<\256\326\302=lM\260>L0g?\316@\263>\354\375h?\246\205\247>\250ka?\355i\327>\302\220y?\322\272\310=D\016\265>[\017j??z\240>u[\\?\032q\365>\206\220\177?O\222\336;K\017\335<0\030\327=\374\200\300>=@p?\253{l>\233\3365?I\250R?\013?\025?b\362x?\311{\333=(\366\303>b\353q?\252\345T>^\242(?o3f?\314\227\271>\331\242l?\2101\217>\260JN?\2339 ?1\306o?}(s>\004k9?\256|L?\360\226$?\315\024k?\324\254\231>\236\031W?Ov\t?\337\231~?\007\026\262<\3626\256=\032e\237>v\213[?q\034\372>R\335\177?\242\244\n;\214Y\n<y.\t=M\226\004>\356\326\346>\364\206}?\255\273\034=Y\274\026>\010\214\000?\316\376\177?,1\2318O.\2319\332\"\231:\014\365\230;D>\230<\364i\225=d\203\212>\335\024J?\272?*?\034\034d?9\320\306>\2609s?\3501B>\375]\035?I\206r?\007BL>\264\203#?\344Jl?\315\205\221>\302RP?\2610\033?\306rt?\227|0>\264\021\022?\006\346z?u\376\237=\263~\223>\246\002R?8\351\026?X\314w?g\014\376=\323\210\336>\017\240{?\261\231\211=\366Z\200>\325Z@?\325I??PjA?\\#=?\205\230E?\266Q4?\320:U?\223\177\016?2\267|?:\201O=\027\376D>\223\030\037?(\344p?\027yc>\031\3610?\316\222Z?\225\243\377>\337\377\177?Mt\0057\007t\0058\361r\0059\230n\005:5]\005;\273\027\005<\364\002\004=\207\203\377=\236\242\337>\205\350{?\225\327\200=\030yq>\312\2078??\021N?\362\305 ?\2517o?\357\352z>\002o=?\243\007E?\207\2135?\2703S?\261\325\023?U\332y?!\374\277=\333\374\255>\374\271e?\277\235\274>lCn?\352\017\204>i\377C?@\3017?\223mO?\302l\035?\267xr?<\004M>J\370#?\254\310k?\027\365\224>\341=S?D\273\023?\254\352y?W\n\276=\354g\254>\t\264d?\325\026\303>\340\201q?k\301Z>\354\005,?\333\267a?>\231\325>\037\372x?\324\221\332=>>\303>\232\224q?\231\267Y>hm+?A\210b?,\233\320>\3229w?\025\223\007>\357?\353>mQ~?G\337\325<\335I\320=\331\032\273>vum?\032\226\211>4:I?\0037,?,ta?\0176\327>E\200y?\303\257\312=\210\240\266>j\370j?\271j\232>\337\260W?:\331\007?\232\t\177?\315xu<K\313q=E\205c>\336\3670?t\210Z?/\336\377>\374\377\177?\345\361\2165\333\361\2166\263\361\2167\023\361\2168\225\356\2169\233\344\216:\272\274\216;\216\035\216<h\246\213=\244 \202>\035\034B?\370\265;?yJH?\030X.?\344p^?5G\351>\270\373}?\304\r\000=\317\031\370=\217\013\332>n_z?\366\034\260=\373\367\240>\014\271\\?\314S\363>g_\177?\0024 <\376\242\036=%~\030>\242\310\001?F\363\177?l\226K:\362mK;J\314J<\256IH={~>>|\016\033?\304\217t?S\326.>P\374\020?\365}{?\t\267\215=\245\350\203>]\331C?\002\0228?w\340N?\312\311\036?V0q?\253D_>~\226.?I\026^?\003]\353>!V~?r\215\323<\336\026\316=\304Y\271>\253\200l?v\031\220>E\026O?\377D\036?\007\257q?F@X>$\225*?\345\252c?\007\223\311>\331mt?H\3040>\251@\022?_\313z?\3600\243=\0040\226>\273CT?\356\r\021?\226t{?K\330\216=\266\341\204>\341\311D?\204\0206?\034TR?\t\030\026?q_x?Y\314\354=,k\321>-\206w?\271\037\003>\264\252\344>\346\024}?\212\2458=\244R0>5\366\021?\201\365z?\271\"\236=\335\354\221>\214\253P?UQ\032?\203-u?\336\325%>\205\372\n?\342\035~?&I\357<\331K\350=\247\362\315>\3116v?6\227\026>\323q\000?6\377\177?\261oJ80mJ9/cJ:/;J;n\233I<X G=#r=>\264e\032?\274\034u?\221\313&>i\240\013?J\343}?\376\017\006=\263\254\001>\245\201\342>!\232|?\320\224V=\376VK>9\366\"?\260\346l?[d\215>\003\261L?\260\031$?\020\243k?I\362\225>\244\020T?M\224\021?\337+{?\000\232\227=\037a\214>\337\307K?\035E&?\243\035i?f\265\246>\013\333`?\343\327\332>a\233z?\034\361\250=q\001\233>#(X?\206\221\006?lS\177?\242\037,<\270P*=\303;#>y6\t?\200\254~?\017\337\250<\342c\245=\245\010\230>\006\307U?\355\010\r?^X}?T%(=C>!>k\332\007?O\t\177?5\303u<x\023r=\353\304c>7\0331?IRZ?*\210\000?\336\376\177?N\331\2208\277\326\2209\200\314\220:\215\243\220;\034\000\220<\033x\215=k\262\203>\300\244C?g\2018?\207\034N?k\252 ?\320So?hcy>\307\246<?\231\205F?\252J2?\377zX?\326\254\005?,\177\177?O\223\000<\001\"\377<\333/\367=/Z\331>[*z?Vs\266=P2\246>V\177`?\377\001\335>\2147{?r2\226=\215.\213>\205\261J?\221\323(?\317\364e?T\'\273>-|m?+h\211>\256\017I?8\230,?I\355`?ji\332> {z?D\315\254=\2658\236>^\247Z?$/\377>V\377\177?he*8\242c*9\213\\*:4@*;\372\316)<o\014(=j\'!>\303\312\007?#\r\177?\270\366q<\356cn=\017\204`>7J/?\251\016]?\304b\361>m*\177?\346\340T<\321\034R=\235UG>\017\210 ?\320vo?\014|w>\345\253;?D]H?\237-.?K\256^?Q\334\347>J\271}?\330a\020=\364J\013>\253\260\360>\233\025\177?\374\215i<\2559f=\362HY>\302-+?b\336b?\334\207\316>\312pv?D=\023>\323\"\374>\022\361\177?o\324n:\273\234n;S\276m<+Kj=S\344\\>\005>-?\215\004`?\257\344\337>)\371{?\017\250}=\266\362m>\343\2476?\370RQ?\220\251\030?\023\177v?\265i\022>\013\365\372>\222\346\177?#\\\313:]\013\313;G\311\311<\331\320\304=\312\346\261>\241,h?\254\335\254>\271\000e?q3\301>G\230p?o\246g>\375>3?_\367V?t\323\t?\315}~?b\366\277<\325v\273=\373M\252>MPc?[\306\313>\210Xu?S_#>\261N\t?}\245~?\306V\254<\240\266\250=\232\320\232>\220\001X?\263\373\006?\361<\177?\316zB<\324+@=\270\'7>De\026?\301)x?\215\032\363=\037?\326>\2470y?$\037\324=\261&\276>\355\017o?\363\022}>U\207>?\254\350B?\317\014:?\306XK?tK\'?\262\337g?\335\321\256>\305Af?/<\271>Tpl?>\210\220>\356vO?\211U\035?\n\216r?\007\323K>\360@#?\267\224l?w\221\217>\030\237N?\252j\037?\372\223p?\374\342g>!`3?;\302V?\263c\n?=P~?{u\326<6\330\320=4\214\273>G\262m?\231\365\207>?\266G?\234\245/?\026\207\\?\tu\364>\303z\177?F\367\004<\006\343\003=\311G\377=\306u\337>\'\335{?\2647\202=@\340s>`\3139?6\317K?\2723&?i2i?\341,\246>\206{`?\375\030\335>\323={?\026q\225={\211\212>t\032J?\3122*?/-d?[e\306>\305\ts?\210\343D>;\010\037?\005\364p?*\231b>xt0?xP[?\210m\373>\030\353\177?\253.\247:\024\370\246;F\036\246<\354\277\242=\375\320\225>\t\365S?\306\334\021?\275\003{?\006m\234=ez\220>\336jO?{s\035?\210rr?\264\\M>N-$?\351\214k?@\207\226>\271\213T?\tP\020?\227\327{?\334\343\202=\252\014u>Zh:?2\262J?\374\321(?\324\366e?x\032\273>Bum?\201\227\211>\200;I?\0144,?Fxa?\027\035\327>Nxy?\272\241\313=~b\267>\006gk?\276\205\227>p\\U?\361%\016?P\337|?\337\271E=e.<>Z\231\031?\302\302u?eF\035>\212\036\005?,\227\177?hR\321;\031\374\317<L\264\312=+\244\266>\177\372j?\313\\\232>\320\245W?\205\367\007?\036\002\177?\263\346|<W\377x=\\\334i>\244s4?D\003U?T\023\017?\353r|?:\036`=\354\332S>E\006(?)\370f?t\252\264>\303\324i?9\376\241>\262z]?\000\355\356>y\334~?\274\035\221<\246\213\216=\277\237\204>]\212D?\317\2306?\266lQ?\031h\030?D\261v?\257\201\017>M\312\366>.\253\177?~k\251;@\213\250<\207\023\245=B\305\227>8\220U?\247\233\r?J\033}?\312\0257=\307\346.>&\007\021?3x{?\314h\216=\276\201\204>omD?\272\3266?\326\002Q?\322t\031?\347\337u?6\231\033>}\364\003?n\301\177?\254\tz;u\025y<\nLu=`\233f>|\2542?\255\340W?\024V\007?\270(\177?)\223V<\277\303S=\373\320H>.o!?\227\210n?\2522\202>\325-B?W\221;?\276\216H?\227\275-?2O_?\003!\344>4\367|?\234\345?=\025\3506>a<\026?DFx?\227\301\357=6\260\323>zTx?D\026\356=\227h\322>l\341w?\361\224\373=D\255\334>F {?\033\377\230=\036\221\215>\016\331L?\236\271#?\341\016l?\212\033\223>q\256Q?\230\300\027?P/w?\265/\010>\016&\354>\355u~?l\332\303<\270+\277=pS\255>\377Le?;Q\277>&\250o?\007\314t>\243F:?\252\357J?EB(?\345\254f?&\216\266>\337\355j?3\261\232>\272\350W?\370?\007?\302-\177?\204\221Q<I\343N= pD>\'\301\036?\2448q?\'\317^>+T.?\223v^?\250%\351>\277\365}?\374\205\001=\357\332\372=\344 \334><\371z?\007\260\235=\333\213\221>\373WP?\223#\033?\350}t?y\332/>^\247\021?`!{?#\335\230=8t\215>5\277L?\246\367#?d\311k?=\360\224>\3229S?\322\305\023?(\344y?\346\320\276=\216\t\255>2\035e?\234\177\300>\216?p?;\205l>\300\3435?\237\237R?kU\025?\200\343x?\306=\335=OW\305>!\217r?k\303K>\2137#?\020\237l??K\217>XaN?&\002 ?\332\375o?\023\036p>\371\3177?\350SO?n\254\035?\354=r?\256LP>\201\355%?\361\205i?\323\006\244>\347\364^?\3379\346>\264g}?\372c$=\366\312\035>Qz\005?\372\207\177?\\\234\357;\322\333\355<\314\363\346=m\350\314>\231\315u?\320\246\034>\341\257\004?!\250\177?\241\202\257;\372\221\256<\243\331\252=\353\230\234>\034gY?\224\034\003?E\331\177?\032\323\032;xu\032<\262\000\031=\224I\023>^4\374>\230\361\177?lof:\220;f;\201le<\0246b=\334\267U>\376\034)?\316\226e?G}\275>V\270n?\214\350\200>\270\347@?H->?$\230C?\013\2348?q\355M?8\035!?\321\335n?\t\312\177>\002\345??\3615@?\360\223??i\327@?ZN>?\323WC?\247#9?l\374L?\235d#?Vml?\206\234\220>\225\210O?\254)\035?!\266r?\223\224I>\352\345!?\255\013n?\270\217\205>\312pE?\006\2504?>\255T?i\367\017?J\004|?\376\365z=\250\225k>\241b5?\rxS?\276#\023?\264Fz?,\021\263=\013i\243>\'\203^?`\333\350>f\350}?X\316\004=\001\200\000>\341\277\340>i/|?~\202p=/cb>^V0?\377}[?ui\372>\306\340\177?M\261\371:\2107\371;NR\367<\317\332\357=\205\303\323>([x?NM\355=G\316\321>\030\252w?\317\006\001>\260\211\341>\017`|?z\263d=w\356W>\334e*?\255\351c?z\013\310>\005\305s?cV:>\372m\030?\310\254v?2\304\017>\001*\367>\355\261\177?\021\366\233;\t8\233<\"G\230=\220\364\214>\271LL?l\t%?\032\221j?#\034\235>\300\314Y?\372\377\001?\000\360\177?x\352\177:\203\252\177;-\253~<\315\265z=T]k>5D5?\277\252S?Y\237\022?\321\224z?<\272\251=N\251\233>(\254X?\303$\005?,\226\177?\310O\323;\357\362\321<z\221\314=u\"\270>]\323k?\016\255\224>\217\001S?\365W\024?\216\210y?\035\264\311=\222\326\265>\006\204j?9s\235>\352\017Z?:C\001?\240\371\177?\333\010\3149\207\364\313:H\243\313;O_\312<{_\305=\370Y\262>\264rh?\326\024\253>\324\324c?\226\215\310>\243\375s?>\"7>\300a\026?7,x?\236\320\362=\274\006\326>5\036y?\277M\326=\374\340\277>z\360o?@\331p><38?.\246N??Y\037?\016\245p?\223\362f>b\3342?\260\224W?g&\010?O\366~?\210N\204<\200+\202=\362\312s>8\3009?[\343K?\374\003&?Eki?\244\266\244>\303r_?\374L\343>Z\310|?\006SK=:;A>\243\304\034?\225\021s?-sD>\t\303\036?\3256q?\275\350^>\236b.?\244a^?0\241\351>\221\013~?FN\370<\210\307\360=\261x\324>D\231x?\222\376\345=d*\314>2\201u?x\n!>\355\266\007?\361\021\177?R1m<A\302i=\016k\\>\003\371,?\323e`?\310\233\335>:a{?\253-\221=\022\343\206>\244\263F?\021\3451?\n\032Y?\212\363\003?\214\301\177?\324\221y;\207\236x<\271\330t=\3345f>\247t2?\3468X?Uc\006?\306\\\177?\371\321\"<\2773!=\235\333\032>`p\003?\262\320\177?&\026=;|\212<<\r_:=)\3441>\326\374\022?\341]z?jL\260=E\037\241>1\326\\?\312\252\362><N\177?nH1<Y]/=M\333\'>VW\014?\310\236}?o\343\026=zT\021>\215h\371>\215\324\177?i\256-;\2248-<\276c+=\3307$>\362\341\t?Vy~?\273*\302<\225\220\275=\273\004\254>\033sd?\374\256\304>\216Ar?\305\030P>\264\316%?d\252i?E\026\243>,G^??=\352>x&~?\363\r\353<^O\344=\257\333\312>\361\367t?\323\345(>6\n\r?\330W}?#F(=a\\!>\014\357\007?8\004\177?\364\317z<\t\371v=\320\024h>a{3?o\226V?S\332\n?\335(~?\327\337\351<\2152\343=7\376\311>?\233t?\t/.>\013\216\020?\277\267{?C\275\206=\333\277{>i\333=?\3206D?XK7?(:P?gn\033?\033>t?\211z3>c\005\024?\241\274y?\217\204\303=(\332\260>\237\207g?\260\014\261>\324\246g?\246B\260>\227)g?\020l\263>\324\027i?\215\333\246>\243\365`?\3216\332>:lz?V\225\256=k\263\237>z\306[?]\312\370>\006\314\177?M\276O;\270\025O<\247wL=\270BB>lh\035?\264|r?6\313L>\026\326#?\014\357k?f\362\223>\206dR?\314\355\025?\177|x?\223a\351=:\311\316>\375\211v?\014\310\021>\372\r\372>\247\334\177?\227P\r;\225\002\r<\346\313\013=u\006\007>\002q\352>:/~?\344\274\346<$=\340=\303\257\307>\314\234s?\013\234<>\247\336\031?\007\213u?\003z >\323S\007?<)\177?\334\017V<\342CS=R^H>r)!?(\321n?\266<\200>\247<@?x\206??)\362@?\032\030>?E\301C?\020E8?\331\206N?2\246\037?PYp?\253\033k>\267 5?\300\345S?\336\004\022?C\355z?\026 \237=\372\302\222>\372bQ?\336\200\030?V\236v?k\232\020>\314]\370>\272\305\177?\201\341h;\250\rh<E\304d=b\375W>|n*?>\336c?\332R\310>$\344s?\300\2238>\222N\027?\'\203w?\354L\003>\360\355\344>/#}?\267\'5=\244$->\002\336\017?\355\020|?G\346w=e\345h>@\3553?s\336U?\031\312\014?\270q}?\333\357!=\342\210\033>\037\351\003?\324\302\177?\320ut;`\214s<\220\355o=\271\337a>\370\0140?\212\354[?\332\357\367>\375\276\177?\273\345\201;\350a\201<\223\255~=\305\327n>K\"7?\375\200P?\203\274\032?\252\324t?U\351*>\247b\016??\304|?!SL=\330!B>\004T\035?n\217r?\030\277K>\3614#?\355\241l?\3147\217>6PN?\030, ?\312\323o?|jr>\034\0079?T/M?\372\351\"?\017\364l?T\t\215>a_L?\354\334$?|\304j?\226\305\233>P\302X?V\347\004?\321\237\177?\200\025\300;@\365\276<\270\201\272=\240\205\251>\215\311b?\214\010\317>E\242v?\027`\020>\017\n\370>\241\300\177?2?};\255D|<Obx=eRi>\240(4?\343}U?\246\314\r?N\006}?\3405<=\356\2173>H\023\024?\355\263y?g\215\304=M\260\261>V\013h?M\266\255>\264\214e?d\275\275>\226\331n?N\002\200>N\002@?c\373??9\t@?\215\355??\341$@?)\266??Y\223@?\373\327>?\262JB?\233U;?\270\375H?3\301,?\022\264`?\234\303\333>\366\336z?w\327\240=\2665\224>F\235R?z[\025?u\337x?\352\267\335=\010\267\305>\333\272r?\314PI>\316\274!?\0377n?\255d\204>`QD?\256\0227?\340\233P?\324x\032?\360\014u?\301\262\'>\024<\014?@\251}?\340Q\024=\364\362\016>\261\374\365>\276\233\177?\3455\310;\275\374\306<]\'\302=g\277\257>\220\327f?\034|\265>|Oj?\244\320\236>\024\033[?\350\235\374>\216\364\177?\016\0327:P\3716;\211v6<Vn4=\240{,>\tn\017?\256G|?\276\236j=U.]>\023h-?\374\310_?\272I\341>\306P|?\264ih=\2709[>\305J,?\332Xa?^\334\327>\330\264y?vq\304=\270\231\261>\203\375g?+\020\256>Z\306e?\030O\274>\354\031n?\263-\205>\342\022E?Ds5?H\\S?!l\023?\026\033z?\206E\270=\005\261\247>\233\211a?r\263\326>dVy?\023\247\317=\037\231\272>a/m?\363t\213>\260\361J?\207=(?\334\262f?\341g\266>\344\327j?\nD\233>\236\\X?\311\000\006?\332o\177?x\324\017<;\221\016=\344\232\t>6:\356>\"\304~?\372+\235<\002(\232=}\215\216>\265\271M?\n\233!?\246Zn?\310o\203>\370cC?\024\n9?\013*M?\273\366\"?\"\346l?#h\215>e\264L?\224\021$?4\254k?\303\264\225>\234\335S?5\032\022?7\341z? \222\240=@\373\223>\376kR?\217\332\025?\250\211x?\020\325\347=\312\226\315>\274\022v?\233\253\030>\214\350\001?o\361\177?\251\010i:\241\323h;\340\377g<\341\266d=}\361W>\234g*?[\347c?\362\031\310>W\313s?\342\3729>\2763\030?\010\331v?N3\r>\325u\363>\301b\177?\371\335\034<{]\033=\326x\025>\273N\377>\205\377\177?y\200\3657\242~\3658Fw\3659\333Y\365:H\344\364;\300\017\363<\211\331\353=f\260\320>\255Aw?\014\036\007>\275\223\352>\0175~?\374\334\343<o\206\335=C\220\305>-\251r?=NJ>YV\"?\315\223m?p\306\210>oyH?\337\355-?\n\n_?c\274\345>2N}?\275\242*=\365\206#>\254i\t?\231\235~?\032>\260<os\254=\005\356\235>:nZ?>9\000?\315\377\177?\275\314L7\031\314L8\211\311L9L\277L:\\\226L;\334\362K<\360hI=\221\201?>\353\260\033?\321\004t?*\2726>\333\036\026?\272Zx? Z\355= \330\321>\245\255w?\247\321\000>$:\341>\010M|?^Ri=\356\007\\>\206\300,?\005\265`?\341\275\333>V\335z?Q\t\241=\272_\224>\241\300R?\037\000\025?\353\033y?\r\223\326=\307\027\300>\341\013p?\244Yo>\204g7?m\tP?n\350\033?\227\324s?\371t9>h\336\027?!\031w?\023z\t>5\n\356>o\275~??}\240<YX\235=\251A\221>\340\027P?G\304\033?\n\364s?f\2557>\017\273\026?C\355w?\3651\372=B\241\333>7\325z?\263\002\242=\3061\225>\221pS?A7\023?\002;z?\223v\264=\265\217\244>\371V_?\255\362\343>\025\355|?\002^B=\330$9>G\253\027?\033?w?WD\007>\033\314\352>r>~?K<\337<\372&\331=\227 \302>\305\013q?\272Ia>\017\271/?\033j\\?\203\034\365>p\211\177?\365\261\354;D\374\352<\263>\344=\273\316\312>\220\362t?{4)>\346>\r?5B}?\324\221-=\3556&>\033<\013?\036\007~?\025\177\372<1\326\362=\374\n\326>\232\037y?\210#\326=\232\277\277>\275\337o?i\303q>\t\2578?\321\313M?\007o!?\300\210n?\2151\202>\275,B?\232\223;?\210\212H?#\307-?\213A_?Nr\344>\316\010}?\243\231;=\006\0023>\021\267\023?B\355y?p\273\275=\247\'\254>\377\211d?2\037\304>\233\376q?\331\323S>\037\002(?Y\375f?\022\211\264>\031\301i?<\200\242>\354\331]?\210\277\354>^\215~?\300D\270<\251\037\264=\027H\244>\275#_?\250#\345>\201.}?\200c2=\227\236*>\3270\016?}\332|?$\347F=~>=>)E\032?\2047u?PC%>Z\227\n?N?~?\336\317\336<u\300\330=\312\317\301>\235\344p?\251rc>\206\3550?E\230Z?\250\204\377>\305\377\177?o\270m7\222\267m8\037\264m9T\246m:-om;\365\222l<x(i=\315\342[>X\253,?\234\322`?\356\n\333>(\252z?\016,\247=\275\206\231>%\373V?2\311\t?\362\200~?\252h\276<\255\373\271=\366\027\251>G\177b?r\322\320>>Nw?\254b\006>\237\177\351>\257\005~?\3223\373<\335\177\363=]\214\326>\302Iy?9&\321=K\312\273>m\323m?6\022\207>6\340F?y\2021?,\263Y?\267G\002?4\353\177?\356P\246:\347\032\246;YC\245<\332\355\241=9 \225>\354aS?o]\023?\376#z?\2425\267=\353\321\246>\355\356`?{_\332>5xz?\245&\255=\375\202\236>\007\340Z?\272\355\375>\266\373\177?\205J\2119QA\211:\205\034\211;\246\211\210<\022C\206=\221\353z>Uo=?\004\007E?\337\2145?y1S?\210\333\023?\266\326y?wj\300={V\256>J\363e?\0061\273>d\201m?|D\211>\231\356H?\257\343,?\306\203`??\347\334>90{?\010\024\227=\363\356\213>\213`K?(9\'?%\366g?\017@\256>\372\344e?0\214\273>E\262m?\246\365\207>L\266G?\201\245/?>\207\\?\035t\364>\256z\177?~\014\005<\346\367\003=\327n\377=\027\223\337>\227\344{?KQ\201=\324Mr>\005\3708?6JM?\027\251\"?\231:m?c(\213>\344\253J?\264\340(?\n\344e?&\222\273>u\265m?\315\337\207>\314\241G?j\323/?\302B\\?\232\377\365>\370\233\177?\267\301\307;\372\211\306<,\272\301=\344f\257>\363\237f?2\341\266>k\035k?)s\231>w\353V?\315\363\t?\316s~?\236\346\304<\017+\300=\373\"\256>d\322e?\201\002\274>T\361m?\325D\206>\211\035F?W/3?k\020W?Z\217\t?n\222~?\035\304\265<\246\273\261=\005O\242>\357\265]?v\222\355>j\254~?\346\351\250<Gn\245=\\\021\230>\032\316U?\364\365\014?\023`}?;B&=\233\202\037>\273\251\006?kN\177?\030\0321<\0030/=\331\261\'>x;\014?|\251}?2C\024=V\345\016>\017\351\365>3\232\177?\301H\313;\350\005\312<}\n\305=Y\025\262>\000Ih?\330$\254>)\210d?\277*\304>\003\004r?\333\206S>\366\324\'?\2605g?\014\036\263>\020\351h?y\016\250>\362\311a?\270*\325>S\325x?\027\352\336=\274\246\306>!\'s?)=C>\232\003\036?\237\354q?\013\324T>\022\230(?\200@f?QD\271>\322tl?\311i\220>d\\O?c\227\035?hQr?U6O>\033H%?PHj?N\000\237>;?[?\344\317\373>v\356\177?\323E\214:d\037\214;\000\206\213<\251%\211=\375\354\177>~\366??\002\023@?\367\331??\374K@?\256g??:/A?\356\233=?F\261D?aE6?\241\372Q?\304\375\026?\233\275w?\244\305\377=:\324\337>\007\365{?4\250~=\021\323n>\311\0377?O\205P?\244\261\032?\276\335t?\274d*>@\n\016?\202\353|??\300B=\300}9>\001\344\027?\363\024w?D\270\t>)e\356>\022\312~?~;\232<!T\227=\226%\214>\n\222K?j\304&?g\204h??\241\252>\361\207c?\234l\312>\244\311t?N\212+>\312\315\016?b\223|?\0349X=\025\317L>i\330#?r\354k?\366\003\224>WsR?\240\307\025?\220\226x?\007P\346=\213i\314>\265\232u?\224\223\037>j\265\006?\372K\177?\201\2073<\346\2171=a\335)>\337\257\r?\252\022}?\03619=\236\3210>eI\022?c\306z?\364\311\243=\233\260\226>\306\255T?\000\366\017?\376\004|?Y\312z=\\ok>\363M5?\207\232S?\276\311\022?\t|z?`\261\254=\206!\236>\246\225Z?\177\223\377>\322\377\177?\253\36377\'\36378\026\36179\323\3507:\314\3077;\335C7<\02475=\2452->F\347\017?S\014|?\242\003y=!\340i>\261u4?\350\377T??\034\017?\266n|?\360#a=\355\303T>\247\216(?qLf?\371\367\270>\214Jl?$\210\221>\307TP?\237+\033?\024wt?\346=0>\233\350\021? \375z?h8\235=\240&\221>y\000P?\321\376\033?\t\301s?\n\220:>\242\222\030?\266\220v?ad\021>T\177\371>\267\325\177?\006\007);l\227(<P\333&==\017 >z\n\007?\2649\177?\312\262E<\027PC=\346\3779>\3576\030?\235\326v?/W\r>\312\251\363>\316g\177?\233\327\027<[o\026=\360\350\020>o\316\370>@\314\177?C\324N;)-N<\366\224K=\235vA>\231\351\034?F\360r?\tRF>I\351\037?\257\026p?O\302n>\330\0267?\265\224P?\341\212\032?\374\375t?\200\215(>\377\316\014?\303o}?\256j\"=\373\371\033>\3217\004?\325\270\177?\370-\216;\t\220\215<\312\035\213=\236\252\201>\327\247A?[\245<?J\210F?\273D2?R\204X?\016\223\005?\264\203\177?]\037\370;d>\366<\204\327\356=\326\374\322>\343\025x?\"o\365=e\005\330>\257\301y?\264\352\302=\242]\260>c:g?\267\377\262>\324\326h?\373\205\250>\327\033b?e5\323>\272)x?P\033\363=\265?\326>\3270y?`\031\324=\037\"\276>\224\ro?\2253}>\325\227>?j\310B?1P:?B\336J?\003k(?\211yf?h\327\267>$\251k?b\311\225>\271\356S?U\355\021?{\372z?\303\211\235={k\221>\007<P?\266i\033? Bt?\037@3>p\337\023?I\324y?W\264\300=w\222\256>\200\031f?Y=\272>~\375l?\026\311\214>\236%L?\222f%?\303$j?J\354\237>6\361[?\004\325\367>I\275\177?,K\205;^\300\204<\246\231\202=2\213t>\311$:?>-K?\326\261\'?Tag?H\004\262>\234>h?\220h\254>t\264d?2\024\303>\236\200q?9\323Z>\036\020,?\322\251a?\361\356\325>f\026y?::\327=\336\233\300>\220Mp?\243\300k>\324y5?QQS?\257\210\023?\264\tz?\000X\272=\200c\251>z\262b?\360\226\317>o\330v?-<\r>\257\202\363>\003d\177?\354\235\033<\212#\032=\235V\024>\031\263\375>\265\372\177?>S\2519>E\251:G\r\251;\002.\250<\037\272\244=?z\227>\rSU?\371>\016?5\324|?\034oH=@\240>>\257#\033?\320}t?\324\333/>B\250\021?\343 {?:\354\230=\016\201\215>\261\312L?\031\334#?P\350k?\325\037\224>\327\212R?\013\213\025?\223\277x?\340z\341=\271\247\310>\363\010t?8~6>K\370\025?Lux?j:\352=\217p\317>\345\311v?\025\024\016>\005\273\364>\000\201\177?P\202\375;:\214\373<\330\322\363=\231\313\326>,^y?\353\272\316=\300\334\271>\264\310l?U0\216>\003gM?|c\"?\262\205m?\007\'\211>C\323H?\360!-?4,`?\210\366\336>\217\274{?\177(\206=c\275z>\307W=?54E?C+5?<\324S?\3042\022?J\323z?\362=\242=\243c\225>$\232S?\300\312\022?r{z?\207\303\254=\2350\236>/\241Z?,R\377>\212\377\177?\364\020\3547A\017\3548s\010\3549?\355\353:\211\200\353;>\317\351<\347\"\343=\n\362\311>\033\226t?\364y.>s\277\020?\n\236{?(\330\211=\006\221\200>\264\220@?Q\335>?6@B?Qk;?o\325H?\376\034-?-3`?\237\314\336>\267\261{?\342w\207=\331\003}>\262\177>?\230\367B?\231\3559?U\221K?\030\306&?_\202h?\206\256\252>\313\220c?\2105\312>\212\262t?d\333,>\202\255\017?\325(|?\317\032r=d\313c>\317\0361?\305LZ?\273\227\000?\230\376\177?\323\332\2638\340\326\2639\026\307\263:\366\207\263;\'\214\262<\355\247\256=\327\302\237>\022\322[?\324\207\370>5\310\177?\224\372^;]8^<\3054[=\220yO>\034p%?\233\031j?G6\240>\251(\\?\376\225\366>`\247\177?\253\002\261;\341\r\260<HE\254=\243\307\235>\314PZ?[\214\000?\314\376\177?.\347\2318J\344\2319\272\330\231:\177\252\231;\005\362\230<\003\027\226=#\027\213>$\234J?o\005)?\t\265e?7\275\274>\371Sn?\323\235\203>\277\220C?\251\2538?\313\321M?\177`!?\354\227n?\271\310\201>\212\305A?]h<?\247\373F?\244E1?\020\021Z?\375?\001?\300\371\177?\224\367\3079\r\344\307:\003\226\307;\316^\306<\030\221\301=\225E\257>\365\212f?\311g\267>\007jk?\223q\227>\370KU?\332Q\016?\310\313|?\023}J=yz@>}L\034?\267|s?kk>>\203\002\033?\341\231t?\366B.>0\233\020?\360\260{?\353\217\207=\217-}>\312\224>?`\316B?\302C:?\352\364J?\3735(?Y\274f?\364*\266>\316\264j?/.\234>\014\024Y?8\004\004?y\277\177?\367\355\200;\031l\200<n\321|=\2376m>\023C6?\211\376Q?\300\363\026?\313\304w?w\356\376=\2642\337>\010\314{?\250I\204=M|w>\007\254;?\006]H?,..?\177\255^?\t\341\347>.\272}?\354)\020=\371\026\013>\370d\360>w\014\177?.\241r<Z\to=2\026a>1\234/?\033\225\\?\354#\364>Ys\177?\234Y\014<\323%\013=\262k\006>\356\214\351>\005\010~?W\r\372<gk\362=\177\271\325>\312\004y?\025O\331=/@\302>\007\033q?\021r`>\035@/?\225\035]?\361\013\361>f \177?\374\326^<\026\317[=V\003P>\373\301%?j\271i?\010\263\242>\375\376]?\363\345\353>\353k~?i\313\310<v\337\303=\260#\261>\001\265g?\307\346\257>:\360f?\202\335\264>\306\362i?\2357\241>;\350\\?\032B\362>*C\177?\361J<<\371 :=\272\2531>\377\327\022?\247sz?\007\262\255=\304\366\236>\0008[?\034\371\373>\311\357\177?-\262\201:R\221\201;+\016\201<a\013~=\270In>n\3266?X\003Q?\211s\031?\354\340u?*\212\033>\003\352\003?\270\302\177?>\345t;\370\372s<\337Xp=s>b>\336A0?\357\234[?p\270\371>\221\330\177?\257\242\035;\236A\035<8\277\033=&\323\025>\220\316\377>\366\377\177?{\301\0306e\301\0307\t\301\0308\235\277\0309\353\271\030:#\243\030;!H\030<\312\335\026=@O\021>\020a\371>*\324\177?\2579/;\277\301.<\220\344,=Q\230%>\344\320\n?\017,~?\334L\350<\200\266\341=6\326\310>\005\035t?\t[5>\222<\025?\007\364x?\'J\333=)\317\303>\022\331q?e\352U>m:)?\360pe?\212m\276>L4o?\266\031{>\332\206=?\323\331D?9\3565?\372\215R?\364\202\025?\004\305x?\223\326\340=\214\'\310>G\321s?\360\2449>\375\374\027?B\002w?d\316\n>2\373\357>f\377~?\227\230\177<\322\233{=#\'l>\030\2615?\307\364R?\032y\024?ksy?$6\314=Y\331\267><\252k?\003\302\225>\233\350S?_\375\021?z\361z?x\236\236=xU\222>W\005Q?|n\031?\361\344u?\363N\033>\307\300\003?\251\307\177?\202+a;te`<\255R]=0]Q>\335\216&?\032\305h?\027\372\250>\373jb?VO\321>\t|w?7\267\003>\354\213\345>7D}?\365\023-=\266\303%>>\356\n?\026\"~?\0137\355<\223X\346=*p\314>`\235u?Yl\037>h\232\006?\230Q\177?0\361-<q\030,=c\335$>JR\n?\337U~?\274\255\323<}5\316=9r\271>)\216l?\366\275\217>&\306N?\235\n\037?\266\361p?\314\271b>\247\2060?\3524[?\265\n\374>U\360\177?t\235z:\036`z;>ky<7\237u=\225\344f>\263\3242?\346\240W?\373\004\010?\301\376~?Z\036\200<\317:|=\221\262l>#\3745?\204vR?q\277\025?!\234x?:\250\345=m\347\313>\002fu?\230\231\">\350\307\010?\226\313~?p{\231<I\233\226=\376\207\213>\006\003K?\351\024(?\325\345f?\\ \265>\362\031j?\0104\240>\373&\\?\254\237\366>\026\250\177?\337\227\257;\375\246\256<\301\355\252=\255\251\234>\037tY?8\370\002?\272\334\177?R\005\r;\243\267\014<=\202\013=\322\301\006>\347\013\352>\013\036~?\2774\357<\2438\350=\314\343\315>\3710v?\025\355\026>i\256\000?%\376\177?\254\244\3558\310\235\35596\202\355:\t\024\355;\355\\\353<\317\231\344=\204\025\313>\347\017u?_\207\'>\346\036\014?[\264}?\010\230\021=/k\014>\252S\362>\013E\177?2l:<,M8=<\0020>w\301\021?\360\022{?\206\231\232=\344\355\216>\002\017N?h\313 ?\0222o?\2608{>\243\226=?w\273D?}/6?\271\037R?\246\236\026?e\001x?8\326\367=U\330\331>3Pz?\302\356\261=Ay\242>\322\324]?q\335\354>\332\221~?\021\r\266<]\001\262=\240\210\242>\r\340]?\226\233\354>\361\207~?Y\363\272<%\257\266=uc\246>\307\241`?\"2\334>\020\376z?\240\033\235=C\016\221>]\353O?\2203\034?\270\222s?\246-=>\212:\032?:@u?\251\303$>\330@\n?{[~?$\351\320<F\225\313=\204X\267>]ak?\274\253\227>m{U?7\323\r?x\003}?\024\347<=\32104>\245{\024?\312qy?\221g\314=\352\000\270>\203\300k?\013,\225>\312kS?\267C\023?\2043z?}[\265=-L\245>\021\335_?s\321\340>\2613|?vxo=Sxa>%\323/?*C\\?C\375\365>\311\233\177?#\037\310;A\346\306<\371\021\302=\021\256\257>\261\314f?\374\301\265>\027xj?\246\302\235>\370LZ?*\227\000?\233\376\177?\241\203\2628\276\177\2629/p\262:\3771\262;\3549\261<cd\255=H\266\236>\r\007[?\343\017\375>^\367\177?\024\026\n:u\003\n;\r\271\t<\257\220\010=\016\003\004>\211\374\345>L[}?\336m\'=\326\225 >\355f\007?\327$\177?\273mZ<?\204W=H-L><w#?\271Xl?+(\221>\317\001P?z\373\033?\365\303s?\275e:>\275w\030?R\245v?\3312\020>\022\311\367>\205\274\177?\272\321\206;\272C\206<b\020\204=\212\030w>sx;?\t\275H?}T-?\301\344_?b\243\340>p(|??3r=\360\340c>\304*1?g:Z?\211\313\000?y\375\177?\224\321!9/\313!:\237\261!;~K!<\376\264\037=\331z\031>\324y\002?{\347\177?\241\026\304:\207\313\303;\010\240\302<P\000\276=\302_\254>\263\256d?f8\303>\324\221q?\370\336Y>\007\204+?\206ib?OX\321>O\177w?Y\206\003>OC\345>!5}?\255\3040=\275#)>\2603\r?\327F}?\245o,=B-%>j\210\n?<D~?\\a\334<\240s\326=\360\376\277>x\377o?r\007p>\364\3037?\334hO?ux\035?\364mr??\236M>\212T$?u`k?\317\261\227>`\200U?\000\306\r?,\t}?\304\202;=?\3552>\215\251\023?\223\365y?\363\275\274=\002Y\253>\374\001d?\230s\307>F\202s?2\033>>\032\320\032?F\304t?\236\330+>\327\001\017?#{|?\273\036^=&\023R>K\372&?\364Bh?@L\254>\363\241d?\233\210\303>\321\267q?Y\303W>\354L*?\256\nd??=\307>8js?av?>\352\251\033?\340\nt?Pb6>T\346\025?\234\201x?\206\307\350=>R\316>\006\\v?\230p\024>\377\327\375>Z\373\177?\310\305\2249\371\272\224:\305\217\224;X\343\223<\3417\221=\326\353\206>\356\273F?\276\3221?\2266Y?\377\243\003?\374\312\177?\271\344S;V5S<R|P=\256\337E>-\243\037?M\\p?\271\361j>\006\n5?d\013T?\030\242\021?I${?\240\203\230=\016(\215>\366zL?\014\233$?\033\020k?B\314\231>\2722W?\3551\t?\316\255~?f9\250<\013\305\244=i\203\227>\211ZU?\004+\016?\021\335|?\026FF=\016\255<>f\351\031?U\202u?\273\371 >t\253\007?\263\024\177?_tj<{\031g=\213\017Z>\355\237+?\212Cb?\301A\322>\221\323w?\0274\375=\027\346\335>\033u{?C\310\216=\352\323\204>\233\274D?\n-6?\340#R?\377\223\026?\353\010x?y\364\366=!-\331>\270\034z?\256\023\270=$\210\247>ama?o_\327>n\215y?\377\037\311=\227_\265>\337>j?\002?\237>\260n[?\370\300\372>z\344\177?\035\027\334:\201\270\333;V?\332<\327n\324=\336e\276>^0o?SP{>\254\242=?K\244D?<a6?W\313Q?\305v\027?\306ew?\234\003\005>\330x\347>a\246}?E\006\025=@\232\017>\250\355\366>\265\255\177?\nb\244;\357\216\243<\364J\240=;\277\223>J9R?\000]\026?\211/x?\337l\362=\236\272\325>)\005y?\337C\331=[7\302>\304\026q?O\256`>\357a/?\223\353\\?\253.\362>\022A\177?d_><\036)<=W\2043>\301\013\024?\245\270y?\334\375\303=E<\261>$\304g?\243\204\257>\253\262f?\033i\266>\230\330j?U?\233>\351XX?\003\013\006?\356m\177?\006\277\021<\036s\020=\003[\013>\013\310\360>e\030\177?e\311f<+\211c=b\345V>O\314)?\257\263d?\t\031\303>\354\202q?\217\262Z>i\375+?\217\303a?\300Q\325>\\\342x?+`\335=Er\305>y\233r?\237\022K>\375\314\"?\243\023m?-2\214>o\235K?\200\251&?\367\244h?g\314\251>K\371b?\177\341\315>\0220v?i\372\026>\317\267\000?\360\375\177?\200\370\0039@\364\003:?\343\003;L\237\003<\233\220\002=P\316\374=u\231\335>\232`{?\360@\221=\234\363\206>I\303F?|\3021?\343OY?n]\003?\265\322\177?\266\n5;\256\2124<`\2152=\322\304*>RJ\016?&\317|?\372\252I=\033\275?>-\326\033?~\344s?\264\2168>XK\027?\200\205w?\321)\003>\270\271\344>\032\030}?3\3357=S\234/>\215~\021?\3137{?\332*\226=\022(\213>\232\253J?`\341(?/\343e?\233\227\273>`\270m?\315\313\207>\006\217G?l\375/?\336\003\\?\301i\367>D\266\177?\321M\223;L\244\222<N\004\220=\263\343\205>\003\301E?\213\3713?}\312U?\243\377\014?&\\}?\1778\'=\323d >GE\007?\216,\177?\326\303R<\277\rP=Z|E>2f\037?\\\230p?G\245g>[>3?b\370V?\264\320\t?\245~~?\235\213\277<\020\021\273=\322\372\251>\205\030c?6 \315>\322\343u?|_\033>K\314\003?M\306\177?\230\230f;\342\310e<\336\217b=\271\007V>~K)?\355Ze?\005\371\276>t{o?W;w>s\212;?\220\233H?\202\240-?\266x_?~)\343>`\300|?\243DM=3\373B>\307\332\035?\320\022r?\335\263R>\370X\'?\027\317g?\242=\257>\362\205f?\354\207\267><|k?K\367\226>\334\347T?\030\\\017?PP|?:\206h=\001S[>:Y,?\324Da?$V\330>\316\332y?\277\355\277=+\361\255>\177\262e?[\315\274>t\\n?Yc\203>\336WC?\216#9?\230\374L?3d#?\314ml?g\231\220>\336\205O?k0\035?\372\257r?\303\354I>Y\033\"?\345\322m?\330\025\207>\245\343F?\336z1?\360\276Y?\272&\002?}\355\177?\366\r\224:&\343\223;H8\223<\373\222\220=E^\206>\2675F?S\3722?\014eW?\250\250\010?\032\324~?\216C\225<P\213\222=\352\016\210>\372\315G?fp/?%\326\\?\017\253\362>CN\177?7A1<JV/=\331\324\'>\000S\014?t\240}?pz\026=4\363\020>(\335\370>\023\315\177?\317\211K;\373\347J<\257dH=\330\226>>\310\035\033?\322\202t?\360\222/>bx\021?);{?\017\303\225={\317\212>\235ZJ?\364\235)?\031\360d?Z\234\301>\225\313p?\277\323d>H\2611?\237jY?\305\022\003?8\332\177?\241\t\027;\204\260\026<\267M\025=~\334\017>\363L\367>R\264\177?]/\227;\313|\226<\027\271\223=T\021\211>\033\277H?\311O-?k\353_?s{\340>\241\036|?\005\224t=]\371e>XS2?YmX?\217\322\005?ex\177?RS\007<.5\006=r\317\001>\210\265\342>\013\246|?b\256S=\323\275H>\211c!?\300\224n?\247\336\201>(\333A?\350;<?uOG?Q\2130?\327-[?\0053\374>\216\361\177?\361\022g:\315\336f;\230\016f<\237\323b=\371CV>\214n)?\236-e?\311\027\300>\342\013p?\227Yo>}g7?y\tP?P\350\033?\261\324s?\177s9>w\335\027?\324\031w?\237o\t>\352\372\355>I\273~?\251\215\241<\r^\236=\005\037\222>\245\326P?\224\344\031?<\206u?i\300 >$\204\007?\007\036\177?O1a<\361\030^=\374\rR>@\367&?\251Fh?\0304\254>%\222d?\375\353\303>\235\346q?\235)U>\013\312(?\364\000f?\355\331\272>tRm?t\205\212>\301\026J?Y;*?\344!d?\013\254\306>\201)s?\363\032C>o\356\035?s\000r?\226\271S>\271\362\'?\226\020g?4\r\264>\326wi?\321c\244>\2277_?\216\255\344>\201\025}?p\1778=\371/0>y\337\021?;\002{?\\\233\234=\245\241\220>\013\215O?\227\036\035?9\300r?\323\003I>\023\216!?Ahn?\354\021\203>\177\010C?5\3129?R\321K?\272.&?a8i?\242\005\246>\366_`?\036\277\335>\263j{?b\t\220=\020\350\205>-\305E?w\3603?<\331U?\030\330\014?\035l}?uO#=\220\314\034>\024\312\004?@\244\177?8?\267;\3418\266<:+\262=5\253\242>I\371]?s\007\354>*q~?h4\306<\277h\301=\334$\257>Nvf?\032\354\267>\315\264k?\346z\225>\201\255S?#\230\022?\003\231z?\3019\251=\027>\233>\357WX?\265\r\006?km\177?\354@\022<\263\362\020=\224\321\013>\210t\361>s,\177?W\336R<\221\'P=\214\223E>qt\037?_\212p?(jh>\003\2523?HKV?V\245\013?\177\341}?\306\200\006=\025\026\002>\363\036\343>\377\275|?\355\330M=\233\200C>P-\036?e\305q?G\002W>\022\335)?\305\235d?\344\242\303>9\304q?\363\022W>\276\346)?\035\221d?y\362\303>\250\351q?H\376T>\277\260(?)!f?z\014\272>\322\342l?\257~\215>\222\310L?0\341#?\233\342k?QF\224>A\253R?_7\025?z\367x?\327\341\332=*}\303>i\262q?4\020X>^y*?\317\317c?\353\254\310>2\013t?\245]6>S\343\025?\252\203x?\232\211\350=d\"\316>jIv?\316\203\025>C^\377>\232\377\177?x^\31472]\3148\031X\3149\265C\314:7\362\313;C\255\312<\224\251\305=\306\225\262>\355\226h?2(\252>\3746c?mc\314>>\230u?\322\267\037>[\316\006?\266F\177?S\3048<\350\2566=\025\211.>m\311\020?\320\230{?\250y\212=\273\034\201>\177\033A?\033\304=?\324cD?B\3536?\240\337P?\343\315\031?\221\230u?\016\263\037>\024\313\006?hG\177?\365\0228<\210\0016=%\353->;a\020?\317\316{?\313\363\203=\273\346v>\253^;?\350\354H?\211\347,?^~`?\331\007\335>%9{?2\001\226=\206\004\213>\"\213J?\023-)? \202e?\205\000\276>E\374n?\307#~>\006\021??x\332A?S=<?\311LG?E\2210?\317$[?~f\374>\013\363\177?\373FO:\006\035O;vuN<q\333K=\025\266A>\022\021\035?\204\314r?wSH>\326\"!?\001\330n?J\r\200>I\r@?k\345??\0365@?\230\225?? \324@?\001U>?\335JC?\351>9?\263\313L?\255\331#?\006\353k?\212\r\224>l{R?\316\262\025?\265\244x?}\245\344=\227\036\313>\247\023u?\177P\'>\367\371\013?C\302}?\335-\016=n>\t>\354\262\355>\022\261~?\350\233\246<s8\243=U6\226>\363HT?/\000\021?\347{{?~\366\215=P\037\204>Q\016D?\220\2417?\271\244O?\257\343\034?\235\365r?E\005F><\272\037?xEp?=2l>\022\2675?\276\352R?\034\223\024?\275by?u0\316=4n\271>\361\213l?\376\314\217>T\323N?)\352\036?!\021q?\375\375`>\237\216/?H\251\\?\"\257\363>Rh\177?\200T\027<\255\356\025=\262q\020>V#\370>1\302\177?C\002w;\355\023v<\304ar=\364\td>\206A1?h\027Z?\".\001?n\372\177?\317E\2629J6\262:B\370\261;\320\000\261<\277-\255=\343\210\236>\205\344Z?4\324\375>I\373\177?\320\322\2269\265\307\226:M\233\226;\031\352\225<\306+\223=\\\230\210>|NH?\tO.?\002~^?\306\371\350>\341\355}?3u\003=Bz\376=g\333\336>\213\265{?k\001\207=76|>\205\027>?f\302C?\255B8?\014\213N?\344\233\037?\177cp?\243\214j>I\3234?\357eT?\311\263\020?\"\244{?\265\033\211=\277\333\177>\336\355??>$@?o\267??\317\220@?\033\335>?\240@B?tj;?\010\327H?[\031-?N8`?\313\255\336>\264\251{?\224o\210=y\261~>OX??\252MA?\340]=?\204(E?\213D5?1\252S?\314\240\022?\371\223z?\032\324\251=\343\276\233>\021\275X?\343\365\004?\223\235\177?\232\216\304;\305`\303<\341\267\276=2\365\254>\376\017e?\005\323\300>\325hp?\256Aj>\246\2524?\354\250T?\327\002\020?\225\376{?\004X|=.\314l>\350\t6?G_R?L\373\025?;sx?\227x\352=\201\240\317>\r\334v?o\006\r>\3234\363>S\\\177?\320D#<N\244!=LC\033>\250\270\003?\233\310\177?\\b];\351\242\\<G\252Y=%\031N>\007\236$?\262\014k?\022\343\231>\357DW?L\000\t?\353\273~?\223=\241<\037\021\236=\373\335\221>\277\236P?\231q\032?\352\022u?L[\'><\001\014?\211\277}?#\331\016=\312\335\t>\002\234\356>\221\321~?\273\204\226<\274\300\223=\337\027\211>/\305H?\366A-?\372\376_?%\006\340>\211\001|?\317\240{=\203+l>s\2635?\322\360R?[\203\024?\332ly?|\375\314=\335x\270>\303\003l?\232f\223>6\356Q?\220\035\027?\263\246w?\2249\001>\236\325\341>\nr|?\337T`=\225\013T>\311\"(?r\324f?(\220\265>&[j?\036\203\236> \340Z?+\355\375>\263\373\177?\210\224\2119J\213\211:Wf\211;\332\322\210<\324\211\206=\203f{>\370\255=?\207\216D?\343\2176?\355{Q?aA\030?\265\316v?\252\314\r>\310S\364>\277w\177?\034\370\007<=\327\006=\335f\002>i\227\343>\364\330|?\342FG=\356\224=>\236{\032?\240\nu?\216\324\'>\316R\014?\210\240}?\256u\026=\314\356\020>\326\326\370>\271\314\177?\227\362L;\204NL<O\302I=$\322?>T\343\033?\t\331s?\23049>T\265\027?\2527w?E\263\007>Bo\353>\020Y~?o\032\322<\364\266\314=q@\270>/\344k?\250;\224>H\242R?\214N\025?\023\350x?k\263\334=\317\352\304>:]r?j\215N>q\343$?\371\274j?\264\367\233>\204\351X?\200z\004?\305\257\177?\306B\240;\037z\237<W_\234=\315n\220>\303`O?\214\214\035?l[r?0\247N>\320\362$?<\253j?\374m\234>\275EY?\275y\003?\257\317\177?\275 A;\013\217@<\257K>=ht5>\364L\025?#\351x?U\223\334=\243\321\304>\231Qr?\2343O>|F%?3Jj?\301\363\236>\2705[? \006\374>1\360\177?\200\342|:\014\244|;\271\252{<\030\315w=A\317h>.\3413?\007\362U?\213\225\014?\217\206}?\205\324\034=J\323\026>8\234\000?\203\376\177?g\246\2768\367\241\27699\220\276:KI\276;j.\275<\375\317\270=\211\"\250>\271\327a?\177\326\324>\010\271x?[@\342=\245A\311>$Kt?\025\2752>6\212\023?\305\010z?ot\272=\302z\251>5\302b?\3375\317>\224\263v?W_\017>\332\230\366>\226\247\177?Y\227\260;\270\243\257<\256\337\253=\034s\235>\324\017Z?yC\001?\235\371\177?4X\3149\320C\314:R\362\313;]\255\312<\255\251\305=\332\225\262>\371\226h?\343\'\252>\3066c?\271d\314>\304\230u?!\260\037>\021\311\006?\325G\177?L\2467<O\2275=Z\212->H!\020?K\357{?\324\005\200=2\np>k\3057?PfO?\307~\035? hr?\215\361M>]\206$?\275\'k?\014.\231>\005\264V?8\212\n?\244C~?U\254\334<\220\272\326=\0027\300>u\033p?g\177n>\037\3636?!\322P?\374\357\031?\377|u?\030H!>\'\341\007?\247\007\177?\270gw<S\253s=h,e>I\3421?_\036Y?x\347\003?\010\303\177?\241\247s;\271\277r<\375&o=`0a>\333\252/?F\177\\?6\242\364>\316~\177?\216\360\000<\221\331\377<\370\333\367=\261\334\331>\200Qz?\013\307\261=pX\242>\324\274]?\026j\355>\223\246~?S\315\253<\3642\250=\227b\232>j\252W?\352\352\007??\005\177?\331\313y<\340\374u=\0007g>\355\0013?\357XW?\274\311\010?\025\313~?\007\273\231<\177\330\226=1\274\213>{2K?\211\245\'?\225pg?\265\241\261>h\002h?^\360\255>\373\261e?\237\320\274>+^n?\206W\203>[LC?\306;9?P\321L?5\314#?\032\372k?\320\247\223>y%R?\344\217\026?\317\013x?\236\235\366=4\353\330>\250\010z?\354w\272=\235}\251>#\304b?\370)\317>\n\257v?\261\242\017>\316\371\366>\220\256\177?\227\253\242;\334\334\241<\037\252\236=Q_\222>\306\rQ?\037Y\031?\344\365u?\026U\032>x\022\003??\332\177?\351\353\026;\360\222\026<\2560\025=\223\301\017>;&\367>\252\261\177?({\234;\333\273\233<\363\305\230=~`\215>\215\255L?\373!$?\263\231k??1\226>\277DT?A\013\021?\003v{?N\254\216=\332\273\204>r\245D?\303^6?\213\317Q?\007l\027?\244mw?%\216\004>\327\312\346>\223\204}?\363P\035=-F\027>6\355\000?\221\374\177?&\312[9Z\276[:3\217[;\344\322Z<\265\346W=`\205L>*\254#?\343\035l?*\266\222>\nXQ?\255\234\030?\377\210v?\300\326\021>\003#\372>\237\335\177?\np\t;A&\t<Y\000\010=S|\003>j4\345>\0042}?\261\2071=\343\325)>\335\252\r?\316\024}?:\2538=\321W0>\231\371\021?\231\363z?J]\236=a\036\222>\030\326P?\371\345\031?\033\205u?\373\320 >\202\217\007?Z\033\177?\354\331c<\273\256`=\230[T>\243Q(?\215\231f??\n\267>\3274k?I\326\230>hmV?>I\013?\177\002~?\226\305\374<\352\370\364=|\253\327>{\245y?\337D\306=\014\023\263>t\342h?\3169\250>\261\347a?\324t\324>\364\227x?-&\346=\031I\314>\235\215u?\376S >\2709\007?,/\177?\361)P<\341\204M=\3774C>\215\376\035?[\361q?\234\220T>\247p(?irf?\007\005\270>\324\302k?s\034\225>\305^S?\244e\023?\005\037z?e\315\267={N\247>zEa?7R\330>\227\331y?\315\022\300=F\017\256>\310\305e?\272R\274>\330\033n?y \205>0\006E?\251\2165?{.S?P\343\023?\341\321y?\233\375\300=\357\315\256>G?f?\034L\271>!yl?\226L\220>\354BO?\204\326\035?\312\026r?${R>\2237\'?\024\370g?|3\256>\361\334e?Z\277\273>\230\315m??:\207>\002\006G?\253.1?h4Z?p\334\000?\t\375\177?\325\316=9\n\306=:\336\242=;d\026=<\274\347:=c`2>\330M\023?i-z?\361\025\266=\212\345\245>cI`?\010G\336>\312\216{?9\257\213=A(\202>\232#B?\177\246;?TgH?\334\026.?\034\317^?\002\032\347>\022\224}?E\204\031=O\303\023>\255\341\374>F\366\177?\242\222\033:\377z\033;\221\034\033<\242\244\031=?\341\023>D\014\375>I\367\177?Ek\013:IX\013;p\014\013<V\336\t=[:\005>\336\311\347>\316\265}?\347<\021=\206\026\014>\272\330\361>\2567\177?\370\264G<\314EE=\204\305;>\372V\031?\226\367u?\024<\032>\376\000\003?\350\333\177?!K\020;\314\371\017<\350\265\016=\003\275\t>\032l\356>\006\313~?\221\302\231<\300\337\226=a\302\213>\0318K?T\230\'?\357\200g?\3657\261>}\301g?\333\225\257>}\275f?\244#\266>\226\260j?RJ\234>\373)Y?#\307\003?\351\306\177?\242(d;J]c<\2205`=\263\357S>s\022(?\353\350f?\205\014\265>U\016j?\004\201\240>\202`\\?\360S\365>\033\216\177?\202d\343;\214\320\341<\n\227\333=\221\013\304>l\365q?\275VT>\313N(?!\235f?J\363\266>\300\'k?\374-\231>\371\263V?Y\212\n?\231C~?\303\261\334<\263\277\326=\021;\300>{\035p?\022cn>\373\3436?\034\354P?S\256\031?\365\261u?\252=\036>\237\311\005?\004z\177?\323\265\005<y\236\004=<S\000>\315|\340>\366\036|?i\177t=7\347e>YI2?\021}X?\035\247\005?/\200\177?\374!\377;r%\375<\332R\365=\344\357\327>\366\272y?V\267\303=<\003\261>\377\240g?mh\260>\031Ag?h\324\262>\277\274h?\3160\251>#\220b?\243j\320>\321\'w?^\237\010>\340\311\354>\354\216~?\013\200\267<\310c\263=2\255\243>a\264^?L\270\347>z\262}?\026\016\022=\325\330\014>\272\362\362>\246U\177?z\350)<g%(=U>!>w\332\007?L\t\177?\031\306u<F\026r=d\307c>\226\0341?-PZ?\034\216\000?\304\376\177?7\306\2358-\303\2359\006\267\235:q\206\235;\225\304\234<\223\304\231=\0029\216>\271nM?\324P\"?\271\231m?\343\235\210>\244SH?bC.?\334\216^?7\226\350>\322\333}?\373\345\007=\266c\003>\322\017\345>U*}?mh3=\272\214+>g\317\016?\243\222|?\206gX=\231\370L>O\361#?\203\320k?C\300\224>\250\021S?..\024?\002\243y?\017\220\306=\252O\263>\324\006i?2K\247>3Ca?\016`\330>\340\335y?1\220\277=\"\245\255>\251\201e?u\003\276>\310\375n?\307\016~>r\006??O\357A?i\022<?v\235G?\036\335/?@4\\?8S\366>e\242\177?\350\360\272;\342\337\271<7\250\265=N\213\245>\275\t`?\215\305\337>V\361{?\003\215\177=`\233o>\201\2127?\307\314O?\347\177\034?\027Os?\223\375@>=\236\034?\0034s?\245\203B>\263\220\035?\227Wr?\374\335N>|\023%?s\205j?\270i\235>\231\010Z?\321W\001?\311\370\177?\322\332\3469\314\300\346:\314X\346;E\272\344<bW\336=\3553\306>}\363r?\324#F>\370\314\037?\3402p?%7m>[C6?\017\376Q?\372\364\026?\352\303w?\303\010\377=tF\337>\027\321{?1\255\203=\265kv>\352\036;?\362bI?\256\331+?\232\364a?\315%\324>\371|x?8S\351=%\276\316>\271\205v?8\007\022>Qh\372>\271\340\177?\364\026\372:\314\234\371;\007\266\367<\2018\360=A\013\324>\336sx?se\352=\277\221\317>x\326v?ZY\r>\355\254\363>\033h\177?\225\212\027<\302#\026=\343\242\020>\363i\370>s\306\177?\351\376e;G0e<\211\373a=\307\203U>\244\376(?\276\275e?\333\205\274>\3266n?\240f\204>BSD?\250\0167?\314\242P?cg\032?Y\033u?\341\337&>\032\256\013?M\336}?\323I\007=\344\321\002>\3356\344>\364\373|?\314\274>=\377\3325>%\217\025?\317\274x?K\316\341=\302\350\310>\001%t?\031\3474>\246\361\024?h%y?\313s\325=\2164\277>\245\231o?f\226u>\030\260:?\360.J?S\003*?\243kd?\335\335\304>?Wr?\333\342N>c\026%?\026\202j?\037\200\235>\327\031Z?H\'\001?\256\372\177?sG\2529J9\252:\262\000\252;\350\036\251<\032\241\245=\370;\230>\253\360U?0\231\014?\037\205}?\213.\035=i&\027>\324\326\000?/\375\177?\304D49\325<4:\033\0354;b\2363<G\2461=\321\361)>\207\275\r?\320\014}?\t\237:=Q\0362>\306\"\023?HGz?\177\377\262=vZ\243>\232x^?\262\031\351>\233\363}?\230\014\002=\027\327\373=(\337\334>\001.{?eX\227=9)\214>U\225K?\245\274&?\320\215h?\305c\252>\341^c?\325k\313>y3u?\225~%>{\277\n?\3551~?\225h\345<\363\373\336=\265\264\306>b-s?\030\343B>\331\313\035?\272 r?f\355Q>\007\344&?\013^h?\243\233\253>\374-d?X`\306>\204\007s?\370\003E>1\034\037?\244\340p?\266\252c>\252\0141?\231hZ?&I\000?\254\377\177?\2505\2477\3154\2478d1\2479\275#\247:.\355\246;}\023\246<\222\265\242=I\310\225>\320\355S?\271\357\021?$\371z?\350\262\235=K\216\221>\026ZP?K\036\033?b\202t?H\231/>\215|\021?\3438{?5\t\226=\\\013\213>a\221J?\205\036)?\327\224e?\275\211\275>\317\276n?\301\273\200>8\273@?m\207>?~\350B?/\r:?\027XK?\020M\'?\270\335g?\261\336\256>\350If?1\010\271>\213Sl?;K\221>\' P?\216\257\033?\377\005t?\r\2516>\331\023\026?Tbx?au\354=M(\321>\306mw?.\214\004>\356\307\346>\000\204}?\353t\035=ag\027>\231\004\001?\333\373\177?\262\241\2049\033\231\204:\304v\204;\257\355\203<\306\315\201=J\'s>cj9?\317}L?<\224$?\345\027k?\"\230\231>\021\tW?X\243\t?n\214~?\"\273\270<\266\220\264=<\245\244>Xf_?\014\227\343>\340\330|?\353KG=z\231=>{~\032?B\010u?7\367\'>\031j\014?\207\227}?.\253\030=r\372\022>\225\303\373>\016\356\177?\334\202\217:\242Z\217;\025\272\216<~=\214=\024\243\202>\037\234B?\202\254:?\2035J?\025\364)?\242\177d?O`\304>\001\035r?\202\"R>Z\003\'?\3537h?)\224\254>\345\320d?\025a\302>\341*q?\334\221_>\000\302.?\324\326]?\256\321\354>\027\220~?\343\353\266<A\326\262=l8\243>\362_^?2\253\351>P\r~?\017r\367<\245\370\357=^\332\323>\013cx?\362_\354=\321\027\321>\274gw?L\346\004>qM\347>\t\236}?~\022\027=\021\200\021>\370\246\371>\265\327\177?\370\023!;\235\256 <3\033\037=\006\355\030>q\026\002?\221\356\177?\023n\213:\032H\213;\214\260\212<uW\210=\250\207~>IC??AwA?\346\010=?\007\313E?\264\3433?\357\355U?\210\240\014?:\202}?;\344\035=\037\316\027>\353L\001?<\371\177?\375s\3309\034]\330:\256\001\330;(\225\326<:\366\320=\031\244\273>\014\277m?\010\236\207>\002dG?\177]0?9s[?\014\247\372>h\343\177?\332\251\344:\273C\344;\251\254\342<\377f\334=\331\256\304>~Ar?\255\031P>>\317%?\301\251i?w\032\243>8J^?N+\352>j#~?^\217\354<\231\272\345=\255\365\313>\316ku?\205D\">\322\215\010?Q\333~?\030\260\221<\321\030\217=9\031\205>;\377D?\252\2355?Z\025S?\227$\024?\r\251y?D\330\305=r\273\262>\260\255h?X\223\251>\321\322b?Q\317\316>T\214v?^\245\021>]\334\371>O\332\177?L\254\026;\236S\026<\205\362\024=\360\207\017>M\323\366>\324\253\177?^!\250;\206D\247<2\332\243=@\276\226>\377\270T?K\330\017?\302\023|?\2646w=\nKh>\004\2313?\264fV?Y[\013?\027\374}?\224\354\377<\312\355\367=3\352\331>\205Uz?\013L\261=\303\362\241>Fr]?/\036\357>\377\342~?\n\342\215<\364l\213=\004\357\201>G\353A?\270\032<?\335\215G?\004\0000?\372\377[?$\200\367>\302\267\177?|R\220;\303\257\217<\224*\215=\226o\203>\310cC?z\n9?U)M?p\370\"?E\344l?\322t\215>\300\277L?Z\366#?\331\312k?o\346\224>\2361S?(\333\023?\362\326y?\\c\300=\266P\256>\233\357e?zH\273>\375\215m?;\356\210>z\236H?\345\231-?$\202_?:\361\342>\246\263|?9^P=\245\304E>\226\222\037?\257lp?\214\013j>E\2154?8\331T?\352\202\017?\226=|?\345\021m=CY_>\032\242.?_\005^?o\300\353>\002f~?\357\266\313<\022\246\306=ha\263>t\021i?o\005\247>\307\022a?\035\206\331>\2277z?\013\337\264=\276\345\244>S\224_?\247\204\342>\322\232|?\247iV=Z0K>\354\336\"?\034\000m?>\267\214>\215\025L?\311\214%?\001\370i?\365\024\241>\214\316\\?\'\327\362>\323R\177?t\267,<W\345*=\001\304#>5\223\t?F\221~?\035V\266<)G\262=H\302\242>\031\n^?\250\244\353>\232a~?\310\343\315<\023\267\310=A\013\265>\227\rj?\357\205\240>-d\\?\303>\365>U\214\177?\321\354\346;5L\345<)\341\336=\300\237\306>\377#s?9jC>y\037\036?o\322q?\324HV>^q)?\366)e?\346.\300>j\027p?\013\270n>]\0217?$\236P? s\032?\247\021u?\302m\'>\251\r\014?\336\272}?\312\376\017=\337\356\n>\213*\360>J\005\177?.\300y<\221\361u=\014-g>w\3742?\242aW?\374\261\010?\222\321~?P\204\226<U\300\223=\207\027\211>\335\304H?\260B-?\362\375_?R\014\340>\024\003|?1A{=\243\327k><\2065?\223<S?\251\276\023?\223\350y?-J\276=\347\233\254>\360\325d?KA\302>\220\033q?\204j`>\337;/?\330#]?\201\347\360>\037\034\177?h\026c<\245\360_=S\262S>w\356\'?\347\025g?\364\352\263>\177ci?\327\351\244>=\227_?:s\342>\316\226|?\362cW=b\020L>\333e#?\367kl?\322\245\220>\255\220O?\217\025\035?o\310r?\377\215H>tF!?\013\263n?)\r\201>\016\014A?\202\343=?\'\'D?\265l7?p\000P?\350\376\033?\365\300s?#\221:>U\223\030?-\220v?Ol\021>\256\212\371>J\326\177?D\273&;\255N&<\204\236$=\315\000\036>\215\237\005?\204\201\177?\300z\374;\274\210\372<B\337\362=\346\021\326>\336!y?\354\336\325=U\211\277>s\304o?\322@s>\312w9?\300eL?\267\315$?\375\325j?\277P\233>\235fX?+\345\005?\375t\177?\331\267\n<.\213\t=\312\354\004>\016W\347>\343\237}?\024\236\026=:\024\021>~\014\371>\256\317\177?R\"A;\236\220@<9M>=\315u5>\333M\025?\212\350x?p\245\334=\330\337\304>)Xr?\314\325N>\232\016%?\033\213j?\023D\235>\225\353Y?g\251\001?\364\364\177?B\2620:\305\2230;\371\0310<j5.=\240\314&>\037\241\013?\010\343}?K \006=\355\273\001>c\230\342>]\237|?\310NU=\0053J>\341E\"?t\245m?\200M\210>\220\010H?\272\354.?I\230]?\001@\356>\360\304~?\020\306\234<\001\306\231=8:\216>\314oM?9N\"?\204\234m?\276\212\210>\307AH?\275k.?kT^?.\357\351>\033\031~?\224\243\361<\351\202\352=v\250\317>\016\337v?\307\331\014>\030\364\362>\312U\177?\366\304)<\240\002(=i\036!>\230\304\007?\243\016\177?\204yp<\364\361l=\004=_>-\222.?\221\034^?\0218\353>\'P~?\177\200\326<\246\342\320=\203\224\273>\271\266m?#\327\207>\253\231G?\234\345/?\213\'\\?q\234\366>\331\247\177?\325\020\260;\246\036\257<O`\253=\025\t\235>\006\276Y?K)\002?Q\355\177?\177o\225:\342C\225;\322\225\224<\345\343\221=g\177\207>0GG?\277\2350?\335\021[?`\322\374>\346\365\177?\307\227!:G~!;g\030!<\350\202\037=\252L\031>{Y\002?\353\351\177?d\227\260:|Z\260;\203g\257<\016\246\253=%C\235>\335\352Y?k\253\001?\332\364\177?\205_2:s@2;U\3041<\221\326/= J(>\310\241\014?\274\201}?\'\003\036=\251\352\027>\376`\001?e\370\177?\271V\3639\3179\363:D\306\362;\315\371\360<#\343\351=;-\317>H\260v?=\220\017>?\337\366>\256\254\177?Wm\246;\363\224\245<(<\242=\"b\225>\343\230S?\006\316\022?\205yz?g\376\254=\214a\236>\212\306Z?f~\376>\273\375\177?\2052\0219_-\021:\312\030\021;\215\306\020<\r\177\017=\032x\n>Z}\357>i\357~?\226\272\207<\343z\205=\213\217y>h\275<?\255ZF?&\2512?\366\345W?\222G\007?\010,\177?\201HS<\376\216P=t\360E>w\255\037?\037Rp?\252\200k>LW5?\363\212S?k\362\022?\016dz?\177\217\257=\317\202\240>\331a\\?7L\365>v\215\177?z\255\344;\357\024\343<~\311\334= \374\304>7er?3\033N>A\237$?K\013k?x\354\231>nLW?\330\353\010?\245\301~?\251g\236<\210W\233=$\217\217>\016\235N?\255o\037?\016\217p?A(h>\002\2063?T\205V?\230\010\013?\n\031~?\243\253\361<~\212\352=O\256\317>D\341v?\370\270\014>\206\304\362>\350P\177?x\240.<\375\303,=~z%>\266\274\n?\3332~?N\363\344<;\215\336=\023^\306>~\006s?\250\022E>:%\037?\332\327p?\257&d>tQ1?\337\376Y?,s\001?\227\367\177?\370\205\006:Kt\006;\255-\006<^\024\005={\301\000>\360!\341>4G|?\216\274j=\272H]>\021w-?\263\263_?\027\311\341>\026o|?\262\014a==\257T>\220\202(?\302[f?\003\226\270>\n\024l?\262\370\222>\307\220Q?A\014\030?\315\366v?\321x\013>l\363\360>\206\035\177?\215\261a<\247\225^=)}R>\3048\'?\237\366g?\363<\256>\375\342e?\330\230\273>\t\271m?C\307\207>\302\212G?\365\0060?\220\365[?\002\274\367>\256\273\177?]\177\210;\316\355\207<h\254\205=\252\345y>\205\351<?\322\006F?\024a3?\264\300V?\327g\n?\344N~?\202\037\327<Ry\321=h\014\274>\227\366m?\261 \206>%\373E?\240z3?\247\227V?\010\327\n?\373)~?\020S\351<\315\255\342=\343\226\311>}ot?i\2540>\0101\022?F\324z?\255\037\242=*J\225>\351\204S?.\002\023?\264Zz?}\255\260=\235o\241>\246\021]?bQ\361>p(\177?\321\332V<\207\tT=\213\017I>0\225!?\312`n?mE\203>\271:C?\326`9?\360\216L?Gk$?\235Fk?-_\230>2\rV?\210L\014?\361\242}?!\336\025=\\b\020>Q\r\370>\324\300\177?\027p|;*w{<\036\233w=S\243h>7\3113?\327\030V?4-\014?\354\256}?d\355\022=*\250\r>\376\036\364>\344r\177?\'\316\014<^\230\013=q\326\006>I*\352>>#~?D\245\354<;\317\345=\256\005\314>Oru?\020\345!>\226L\010?\177\354~?E,\211<A\340\206=\241\374{>J\372=?\021\373C?{\3127?{]O?\257\224\035?\350Sr?\237\022O>\3302%?\016aj?\333[\236>2\302Z?\n\227\376>\003\376\177?$x\3768=p\3769\240P\376:N\322\375;\374\332\373<\302\034\364=\350\003\327>@py?D\226\314=I&\270>\204\325k?\220\236\224>g\365R?{w\024?tty?\255\026\314=(\300\267>\007\234k?\232!\226>\3177T?P-\021?\316c{?1\336\220=\332\236\206>\005sF?\226s2?\225:X?\260^\006?\263]\177?\033\346!<\216L =\222\006\032>\230\333\002?U\337\177?\030\233\002;vX\002<\376N\001=\345s\372=\023\323\333>U\343z?\025Q\240=f\304\223>\251=R?\305Q\026?`7x?8\201\361=\246\006\325><\311x?<W\340=#\304\307>\302\245s?\215\032<>\315\214\031?\312\314u?\262\262\034>!\270\004?\352\246\177?\233\355\261;F\366\260<\252#\255=\203\200\236>$\336Z?r\370\375>\342\373\177?\025\314\2039\232\303\203:\261\241\203;S\032\203<3\001\201=\331\301q>6\2568?G\315M?zk!?v\214n?\353\027\202>\211\023B?\260\307;?e)H?\301\242.?l\004^?\003\306\353>\343f~?tG\313<!<\306=\377\013\263>7\336h?\225U\250>\272\372a?L\000\324>\032px?\315\326\352=!\351\317>j\367v?\260o\013>#\346\360>\365\033\177?k?c<\205\030`=\326\325S>J\003(?\344\373f?u\222\264>\241\306i?\253[\242>1\277]?=\\\355>\220\244~?W\314\254<=\'\251=\243.\233>\304KX?K/\006?\377f\177?\247\245\030<\2229\027=C\244\021>\307\332\371><\332\177?\027\372\026;\r\241\026<\210>\025=k\316\017>\2658\367>\360\262\177?R\361\231;.8\231<\214Z\226=\305P\213>\272\320J?\251\212(?\201Qf?\233\327\270>\2228l?\305\001\222>\205\275P?\002$\032?\252Ru?Z\265#>=\211\t?@\224~?_\335\264<\037\337\260=\255\230\241>\365/]?\365\240\360>\271\023\177?{lk<z\nh=J\345Z>v\032,?\223\233a?\342E\326>\3332y?Y\334\323=\272\361\275>\243\364n?\240\215~>JF??QqA?\n\025=?\336\263E?0\0264?\352\233U?_|\r?\210(}?7\3313=\240\363+>\310\023\017?\264r|?\200+`=\275\346S>2\r(?~\357f?:\342\264>\212\365i?I%\241>\246\332\\?\355\220\362>\210K\177?\345\3703<\315\3761=\250B*>\202\363\r?u\365|?\336R@=\030K7>\373{\026?\323\031x?\361\370\364=\201\253\327>|\245y?\253D\306=\342\022\263>[\342h?s:\250>!\350a?\"r\324>\t\227x?\327A\346=\213^\314>F\226u?\302\324\037>C\342\006?sB\177?,\000=<\007\322:=\251L2>\375@\023?(5z?^)\265=\355\"\245>\320\277_?\241\200\341>\346]|?\2279e=\226eX>\260\252*?1\216c?\270E\312>W\271t?6x,>\306k\017?\306H|?\356Zj=H\362\\>\364E-?T\371_?\004(\340>\373\t|?*\225y=\362_j>\017\2734?\344\215T?NJ\020?\203\332{?z\211\202=\371nt>\n\026:?\006HK?\342r\'?/\257g?\204\014\260>\322\007g?\250E\264>I\231i?5\207\243>\365\230^?\203Z\350>\331\320}?\210\230\n=\373\347\005>\210\312\350>Y\345}?Z\216\005=\2073\001>\222\314\341>\350o|?\242\331`=\311\201T>\373g(?]}f?\343\276\267>O\233k?l&\226>\314;T?\322\"\021?ni{?\2510\220=\320\t\206>Z\345E?@\2523?\344JV?c\246\013?\036\341}?\317\230\006=\211,\002>q@\343>\211\305|?\234\002L=Z\331A>\375&\035?\223\270r?\205qI>\250\320!?*\"n?\367\364\204>e\334D?\262\3505?K\227R?\351j\025?$\325x?\214\357\336=\001\253\306>\n)s?\241!C>\221\362\035?\225\374q?\263\360S>\t\023(?0\350f?;\021\265>\030\021j?\272n\240>\334R\\?\272\242\365>\225\224\177?\264|\326;K\025\325<g\212\317=C\202\272>\373\"m?\217\311\213>\236>K?\001\211\'?\341\223g?\\\275\260>\315ug?\365\177\261>\271\355g?\301v\256>\335\007f?\337\255\272>\240:m?5(\213>\272\253J?\025\341(?\216\343e??\225\273>\035\267m?t\324\207>%\227G?A\353/?\027\037\\?\033\315\366>b\253\177?\210\004\251;Z%\250<\322\261\244=Hs\227>]MU?#N\016?q\315|?Z\025J=\377\034@>\036\022\034? \260s?\236\204;>\335-\031?\n\030v?F]\030>\215\261\001?\207\364\177?\366\2067:\022f7;\256\3426<\022\3304=\t\334,>\357\255\017?\237(|?\311\'r=\325\326c>)%1?\004CZ?>\263\000?\n\376\177?\355\376\3728<\367\3729{\330\372:\226]\372;\340s\370<\332\352\360=\264\223\324>q\242x?\352\351\344=\272S\313>\220)u?\275\017&>\242!\013?^\020~?\367\360\365<\276\216\356=\007\305\322>7\002x?\220\275\367=\245\305\331>\240Jz?D\231\262=\025\006\243>k;^?~\202\352>+2~?\331I\345<\357\336\336=\002\236\306>7#s?uuC>k&\036?\344\313q?\341\245V>q\247)?\301\343d?5\352\301>p\361p?\251\275b>\317\2100?\2461[?T\035\374>\347\360\177?n}q:{Dq;\031ap<@\332l=\016(_>Z\206.?\304-^?\335\322\352>\220?~?\021\257\336<p\241\330=V\267\301>\271\330p?l\032d>\247J1?Y\tZ?\265U\001?\340\370\177?\377\006\3449\233\355\343:$\210\343;\256\363\341<<\270\333=\245%\304>\240\001r?\333\250S>\351\350\'?\324\034g?P\276\263>\356Hi?\275\230\245>;\023`?\222\214\337>\361\342{?w\204\201=<\247r>\026\'9?J\366L?]s#?\002]l?$\013\221>\250\350O?R:\034?\303\214s?\272\203=>\311p\032?\226\023u?sQ\'>\233\372\013?\005\302}?\362<\016=xL\t>x\307\355>\000\264~?\214(\245<\"\324\241=\221\n\225>\325OS?\214\214\023?X\007z?\360\237\272=V\236\251>=\332b?}\241\316>\257zv?\301\252\022>\347Q\373>\031\352\177?\220*\257:\242\356\256;\220\377\255<uM\252=\026$\234>,\014Y?#\032\004?\261\274\177?\313z\206;\201\355\205<\374\274\203=;\207v>0-;?\220HI?%\026,?\206\241a?\224!\326>\000\'y?~C\325=R\016\277>E\206o?\237\244v>l<;?_,I?\250V,?dHa?}@\330>\027\324y?T\272\300=T\227\256>\230\034f?\235)\272>\273\362l?`\022\215>\201gL?\206\311$?\317\332j?\2140\233>EMX?%+\006?\314g\177?\211\331\027<@q\026=\261\352\020>\363\320\370>e\314\177?\330CN;\247\235M<\017\tK=\231\370@>#\233\034?\3116s?\274[B>\362w\035?lnr?\177\227M>\200P$?\nek?\014\223\227>KgU?\371\010\016?\022\354|?B\235B=\026^9>\316\317\027?\001$w?\"\330\010>\027\035\355>N\233~?v`\261<A\211\255=\350\324\236>P\036[?y\213\374>\020\364\177?*\372>:\214\326>;IH><\214\022<=\330o3>r\376\023?\371\300y?g\000\303=3o\260>PEg?9\271\262>Y\254h? \234\251>\276\330b?\266\252\316>=~v?\027v\022>\272\006\373>C\347\177?>\324\305:\316\207\305;\371V\304<O\242\277=\334\263\255>\"\213e?\\\307\275>\277\336n?!\275\177>\214\336??\326B@?\016z??\313\nA?\021\346=?4\"D?>w7?/\356O?\206,\034?\353\230s?\023\324<>\010\002\032?Ynu?-\037\">Ot\010?\031\342~?\331S\216<\320\332\213=\345M\202>\226HB?\371Y;?\236\365H?\256\323,?4\232`?\336_\334>\323\n{?#\223\233=\263\301\217>n\311N?\213\002\037?\211\371p?KKb>\tI0?\037\222[?V\366\371>\214\333\177?\252\274\021;\262i\021<O\037\020=\033\r\013>\230V\360>\266\n\177??_t<(\272p=O\224b>\303q0?\222T[?$V\373>@\352\177?\361\355\255:\333\262\255;%\307\254<C\"\251={*\233>~HX?S8\006??e\177?\254c\032<<\357\030=l9\023>Y\035\374>\347\360\177?\031{q:&Bq;\311^p<\001\330l=\022&_><\205.?e/^?H\311\352>\372=~?^w\337<\324^\331=\230L\302>\002!q?y\035`>\223\020/?\244c]?\242s\357>\'\356~?\343Y\210<\346\024\206=S\233z>dF=?\204UE?*\3434?\266KT?\351\370\020?\304\177{?I\177\215=\232\270\203>\301\252C?\264t8?\3612N?\254s ?\203\213o?\205[v>\204\026;?urI?\030\266+?J%b?p\373\322>e\025x?\344}\365=\236\020\330>0\305y?\023\200\302=G\007\260>\214\004g?\270Z\264>\275\245i?\3754\243>u]^?\340\271\351>\337\017~?\232/\366<\236\311\356=.\362\322>#\022x?\261\337\365=\363Z\330>L\334y?Z\300\277=G\314\255>\323\232e?\275c\275>\016\253n?kD\201>\320BA?\003t=?\010\376D??\2405?\006\021S?\324/\024?\370\241y?\256\257\306=\'i\263>\026\026i?\377\346\246>\233\375`?\206\006\332>\360]z?\241J\260=\313\035\241>\031\325\\?&\261\362>\346N\177?\345\2370<t\270.=\200D\'>\344\361\013?G\305}?\rp\r=\303\215\010>\017\260\354>\t\213~?\262k\271<K9\265=\t0\245>\035\311_?\362H\341>\226P|?cuh=\024D[>\261P,?\247Pa?>\016\330>s\304y?\236\226\302=\212\031\260>\364\017g?F\021\264>@zi?\346S\244>2,_?Z\361\344>\350#}?\226\3724=\201\373,>\306\302\017?c\036|?:\243t=\301\006f>\270Z2?\300aX?\233\362\005?\200r\177?\2751\r<>\372\013=\2431\007>\224\260\352>\3409~?j}\341<}H\333=\331\315\303>t\330q?(\363U>\206?)?]je?2\227\276>\234Io?T\361y>~\357<?t\373E?\362y3?\276\230V?\024\324\n?\373*~?\311\324\350<\2666\342=!:\311>\355Gt?\317\3532>\236\250\023?&\366y?k\254\274=\265J\253>\206\370c?\266\256\307>V\234s?\267\242<>\336\342\031?\236\207u?\030\254 >3v\007?J!\177?\316\363]<\022\362Z=\000>O>\253L%?\376Bj?\237#\237>\371Y[?J7\373>\035\351\177?!\010\267:\263\306\266;\264\301\265<Y\271\261=\036M\242>\213\264]?\235\232\355>\226\255~?TU\250<\323\337\244=\342\231\227>\337lU?\027\372\r?\226\362|?P\006A=\247\3557>?\344\026?\347\317w?\326\241\375=\2558\336>\001\213{?\'$\214=5\215\202>\262\206B?\024\331:?\253\343I?y\261*?%\205c?\376}\312>\351\320t?! +>%\207\016?\303\263|?TWP=t\276E>\311\216\037?opp?\330\326i>\246p4?,\010U?I\006\017?\ry|?\206\240^=\331\206R>x>\'?\241\357g?dj\256>\374\377e?\032\340\272>\312Um?\252n\212>\325\001J?\304k*?\331\341c?Y<\310>Y\332s?\237!9>8\251\027?\240@w?\251-\007>\272\252\352>\3468~?f\370\341<\262\274\333=%)\304>C\003r?\206\221S>9\333\'?\344-g?TP\263>9\007i?\230H\247>eAa?\006k\330>E\341y?\317(\277=\022Q\255>xKe?\352Z\277>\013\255o?\276\207t>\373\":?\2050K?#\252\'?\341jg?\224\306\261>\366\030h?\260]\255>\236Se?P\'\277>\361\222o?\361\363u>\274\340:?\226\325I?\370\321*?\271Yc?\333\213\313>\234@u?\014\276$>\t=\n?\263\\~?\022O\320<\r\003\313=R\343\266>\242\036k?\nk\231>\365\344V?z\005\n?Jn~?\017\240\307<\275\302\302=F=\260>=&g?\253\201\263>\277$i?\261\206\246>m\272`?2\235\333>\020\324z?(&\242=\236O\225>u\211S?Q\366\022?\276az?$\326\257=U\275\240>s\215\\?7P\364>lw\177?\036K\010<\336(\007=\034\263\002>\005\t\344>\371\361|?\223,A=O\0208>r\372\026?\375\277w?O~\377=\263\236\337>\210\347{?E\366\200=\276\256q> \2448?$\337M?\010@!?\267\271n?\375\336\200>;\336@?\207@>?\271rC?\377\3528?baM?\027q\"?\017wm?-\213\211>\0300I?$N,?/Ta?\307\370\327>\276\275y?\272b\303=\310\276\260>\257vg?Az\261>:\352g?y\215\256>T\026f?\234Q\272>\207\010m?\344}\214>\331\341K?\220\007&?\005gi?\246\322\244>\272\206_?\332\325\342>l\255|?a\342Q=*!G>\005h ?R\227o?\332\266u>\372\300:?\365\017J?\026K*?\032\rd?\026.\307>}cs?k\327?>\241\346\033?)\326s??^9>\350\317\027?\356#w?B\331\010>\275\036\355>\214\233~?\246A\261<\307k\255=l\274\236>\270\013[?T\365\374>\300\366\177?\036\002\024:\272\354\023;@\227\023<\344B\022=\336\t\r>\3159\363>\322\\\177?A\306\"<C(!=\t\321\032>\376h\003?|\321\177?\222\3569;\210g9<mN7=Y\032/>\027)\021?\021f{?R\230\220=\333b\206>\022:F?\303\3602?FtW?\017\177\010?@\337~?\'\275\217<\2007\215=\272z\203>\237nC?\244\3638?\002RM?B\226\"?\371Nm?=\235\212>\224,J?\314\010*?tdd?\362\n\305>\013lr?\212\271M>\337d$?\346Mk?N.\230>\227\345U?\360\266\014?[y}?\333\020 =\212\317\031>\033\265\002?\256\342\177?wv\352:\031\013\352;(_\350<\303\307\341=\253\343\310>\320\"t?\346\0065>6\006\025?\354\027y?\024\014\327=kw\300>~;p?B\276l>l\0026?\351kR?\304\332\025?\204\211x?W\331\347=\031\232\315>\t\024v?`\230\030>\r\333\001?:\362\177?OV\\:\346&\\;\223i[<\\yX=\214\010M>\340\372#?\304\305k?\254\010\225>@NS?\253\220\023?\324\004z?\305\354\272=(\335\251>\222\004c?\267\233\315>\254\024v?\372\216\030>t\324\001?\233\362\177?\356BV:\031\026V;\020cU<\230\233R=^\307G>z\315 ?\362/o?.V{>\247\245=?\215\236D?\214m6?i\266Q??\254\027?c>w?\nO\007>\331\333\352>\rA~?\223\363\335<\037\360\327=x+\301>^\224p?\177\335g> ]3?\r\307V?\241V\n?xT~?\326^\324<m\335\316=I\370\271>\310\327l?\314\311\215>\256\013M?\343?#?\340\225l?\232\211\217>0\230N?\241{\037?M\203p?\217\315h>A\3403?\207\363U?\203\221\014?$\210}?\016q\034=nw\026>c[\000?~\377\177?\351}\0028\337|\0029\267x\002:\027h\002;\251%\002<\000\035\001=9\026\372=L\214\333>A\317z?\310\271\242=\323\313\225>\300\360S?\004\350\021?u\375z?;.\235=\003\036\221>\003\371O?w\021\034?\263\260s?O|;>\231(\031?.\034v?! \030>\226\206\001?\260\366\177?\001\366\024:V\340\024;\302\211\024<\0041\023=\356\346\r>\303y\364>0{\177?\264\212\004<7x\003=\346\177\376=\245\337\336>\244\266{?y\337\206=D\373{>\231\371=?h\374C?\244\3077?pbO?d\210\035?B_r?VpN>\027\322$?\364\320j?Zr\233>\010\201X?&\234\005?\035\202\177?\344I\373;\220\\\371<f\305\361=\276:\325>\256\332x?9H\336=\016(\306> \356r?\337pF>,\374\037?\324\003p?l\312o>\207\2437?O\241O?.\354\034?\360\355r?\225sF>\326\375\037?*\002p?\256\341o>\344\2577?\315\213O?\254!\035?j\275r?\026,I>\205\246!?\225Nn?\374\302\203>\326\264C?a_8?\210XN?\271\027 ?>\350o?yLq>4p8?\340:N?H` ?\'\237o?\226Iu>\033\210:?.xJ?3Y)?:Ie?\032i\277>4\264o?\302#t>\266\3569?Q\217K?\332\312&?\232|h?2\324\252>\342\251c?V\231\311>\207pt?A\2350>\032\'\022?\351\331z?\206r\241=^\270\224>\n\013S?[?\024?(\230y?\353\331\307=ZY\264>\357\244i?Q:\243>Qa^?\033\243\351>\347\013~?\021$\370<\342\237\360=]Z\324>\360\216x?\3515\347=\236\033\315>\376\341u?ez\033>\t\337\003?\016\304\177?Q\220o;\"\260n<\3625k=1\264]>\n\264-?\330\\_?\263\317\343>f\345|?\347=D=\371\326:>\264\277\030?\373mv?\326f\023>\n^\374>\316\362\177?\277\030S:;\355R;p?R<\300\214O=q\010E>\362\036\037?\367\335p?v\320c>\237!1?rHZ?\354\243\000?\\\376\177?\352\353\3218\211\346\3219\006\321\321:\n{\321;6$\320<_\332\312=\264\302\266>\374\013k?\326\347\231>\274HW?\356\365\010?\323\276~?\320\314\237<\320\256\234=\037\262\220>`\233O?\363\372\034?\223\340r?|3G>7s ?\372\213o?\nUv>\'\023;?\253xI?\327\247+?\2768b?\r\204\322>1\353w?\027p\372=3\320\333>\206\342z?\tj\240=r\331\223>sOR?\010$\026?&Wx?\312\305\355=\320*\322>[\313w?\357)\376=\007\237\336>\333\245{?\177\346\210=\221\177\177>\270\277??O\200@?a\376>?1\377A?\254\361;?\333\332G?}S/?\363\000]?|\262\361>n3\177?v\356K<\246dI=\263}?>\177\256\033?\351\006t?\312\2336>R\013\026?6hx?f\304\353= \240\320>\250;w?\276w\007>\273\027\353>\342J~?\222\031\331<\257X\323=E\211\275>\221\276n?o\275\200>\343\274@?\r\204>?\027\357B?d\3779?\033qK?!\022\'?\343%h?\221\t\255>3\035e?\220\177\300>\211?p?\214\205l>\354\3435?V\237R?(V\025?\002\343x?\240L\335=\363b\305>v\224r?\rwK>\214\t#?\216\321l?&\364\215>q1M?\342\344\"?\236\371l?~\343\214>`=L?\002.%?\255fj?~6\236>\255\245Z?\2718\377>e\377\177?\n\037\0338\222\035\0339\262\027\033:4\000\033;[\242\032<\274,\031=Tr\023>hn\374>D\363\177?\217\273K:\006\223K;$\361J<\236mH=\346\236>>\326\"\033?\210~t?`\321/>e\241\021?\253${?\277w\230=\361\035\215>\343qL?\271\260$?H\367j?Or\232>\344\266W?\272\310\007?\242\r\177?\262xq<\240\351m=\372\027`>|\r/?/h]?\032Y\357>\266\352~?\236\016\212<\377\272\207=Nx}>\216\272>?n\204B?\313\335:?\377\332I?|\305*?ljc?$$\313>\362\025u?\357.\'>^\343\013?\260\312}?\347\033\014=\376P\007>\271\336\352>\206A~?\237\267\335<k\267\327=\270\376\300>^~p?\360\022i>\022\0064?#\266U?-6\r?\320E}?\t\260,=9h%>X\260\n?\3776~?\307\350\342<\311\237\334=h\333\304>\035Vr?\027\363N>\017 %?\336vj?\305\312\235>4SZ?\222\205\000?\351\376\177?\276`\2138_^\2139\343T\213:\371.\213;\241\227\212<b?\210=\352]~>J.??\274\240A?\356\263<?\247lF?\231\2012?z$X?\234\233\006?XQ\177?r0.<[V,=\030\026%>\271x\n?bI~?\005\327\331<\023\014\324=\223\027\276>&\010o?\360~}>\347\275>?\336}B?o\353:?\345\301I?b\377*?\324\034c?\211\005\315>4\331u?\337\373\033>!9\004?\251\270\177?s\206\216;\300\347\215<wr\213=\307\363\201>\367\357A?\016\021<?\001\240G?m\327/?\303<\\?+\"\366>\247\236\177?dh\302;\037A\301<\005\262\274=GO\253>\214\373c?\322\233\307>\004\224s?\346\032=>\267.\032?\351Iu?\2745$>\203\340\t?\307y~?\332\362\301<Y[\275=Y\331\253>\235Vd?\303a\305>\352\223r?\334~K>@\016#?g\314l?1\027\216>\245PM?\214\231\"?jKm?\211\265\212>\332BJ?\"\325)?&\250d?\236a\303>`\245q?i\311X>I\344*?2Ac?\026$\314>\244~u?\371/!>\241\320\007?\265\013\177?%bs<\227\304o=\215\273a>\277\370/?\341\n\\?pA\367>\211\263\177?\001\300\230;\270\t\230<\\7\225=,X\212>*\355I?\210\233*?c\242c?\004\310\311>U\204t?\344|/>\345i\021?\017C{?\275\317\224=\241\377\211>\251\233I?lW+?\017\246b?\207\343\317>P\365v?\372\216\013>\252\023\361>L!\177?\331\361]<+\360Z=L<O>\250K%?,Dj?\310\033\237>\013T[?\'Y\373>\\\352\177?\247\r\255:*\323\254;\321\351\253<?N\250=fy\232>\204\274W?O\271\007?^\021\177?o\303m<!Pj=\270\350\\>\204@-?\006\001`?\337\371\337>x\376{?\r_|=Y\322l>8\r6?\256YR?\265\t\026?Rix?\360\242\353=^\206\320>\0352w?\367\005\010>\303\350\353>\\l~?\235\223\310<e\252\303=\304\370\260>\211\232g?F\222\260>\030[g?\223,\262>\"Wh?\271\310\253>\255Kd?R\246\305>>\263r?\370\275I>\001\377!?\017\361m?\260F\206>L\037F?z+3?\227\026W?\214~\t?n\227~?\362J\263<c^\257=\035Z\240>vC\\?\213\373\365>\247\233\177?\307c\310;\017*\307<{R\302=X\342\257>s\355f?_\357\264>A\375i?4\362\240>\302\264\\?\247l\363>\333a\177?\202\303\035<\234>\034=\326H\026>z:\000?\313\377\177?7\273U7\205\272U8\273\267U9\224\254U:\376\177U;\360\315T<Y\nR=\tEG>\360} ?\031\201o?\271\354v>\305a;?\'\347H?\246\364,?\365k`?\327v\335>HW{?o`\222=+\352\207>\206\253G?\243\275/?Gc\\?\362C\365>\305\214\177?\274\016\346;?q\344<o\022\336=\360\375\305>\021\333r?\231\202G>\206\243 ?\330Zo?\205\001y>\210t<?\255\344F?\224x1?z\302Y?\315\034\002?&\356\177?\367\303\216:(\234\216;E\375\215<=\207\213=\271\005\202>\242\001B?\242\354;?J\344G?N>/?A ]?h\374\360>\224\036\177?Z\245`<\323\220]=\235\224Q>\235\257&?\223\235h?\274\374\251>\316\031c?A\030\315>\250\340u?\033\216\033>\302\354\003?b\302\177?\372<v;!Pu<\327\243q=xbc>\207\3440?\006\246Z?\3006\377>b\377\177?\3714\0368r3\0369V-\036:\347\024\036;I\263\035<\263.\034=$:\026>\0300\000?\334\377\177?\277\221\0207m\221\0208&\220\0209\014\213\020:\245v\020;\037%\020<x\340\016=\234\344\t>\372\245\356>\354\322~?.\331\225<z\033\223=h\212\210>wAH?rl.?dS^?:\365\351>&\032~?+ \361<>\007\352=\027I\317>\346\272v?\273\362\016>_\374\365>\267\233\177?\243B\310;S\t\307<W3\302=\033\311\257>\245\335f?\002U\265>\2638j?\371g\237>\240\215[?\016\020\372>\300\334\177?\010\356\014;s\240\014<tk\013=\226\254\006>\233\354\351>\251\030~?\217\333\361<\226\267\352=\022\321\317>^\356v?7\366\013>\307\251\361>u2\177?3\346L<4VJ=rW@>\2376\034?\006\220s?\234T=>\031S\032?\017,u?$\353%>\347\010\013?\357\030~?\004\271\361<\025\227\352=\004\270\317>\355\344v?\211\202\014>\216u\362>\246H\177?\025\3276<\273\3144=\262\321,>\025\247\017?\372+|?\232Wq=9\037c> \2770?\025\337Z?\031\363\375>\314\373\177?\354\205\2069\026}\206:\302Y\206;\276\314\205<K\235\203=\377Ov>\211\020;?\177}I?\301\234+?\334Gb?9\'\322>\023\312w?hP\376=\363\273\336>b\255{?\276\375\207=\025\354}>\366\364>?\272\021B?l\313;?j\"H?\200\262.?w\355]?\335L\354>\353{~?\"\344\300<jY\274=\373\006\253>\243\313c?\361\306\310>o\026t?\231\2725>@z\025?\334\312x?\024&\340=\277\235\307>\336\224s?\244\016=>\374&\032?;Pu?\014\331#>\205\241\t?\373\214~?\250u\270<]N\264=\224n\244>J?_?\272\177\344>\261\013}?+\345:=\016^2>SL\023?T.z?\366\371\265=\211\316\245>.9`?\203\250\336>T\250{?\027\232\210=(\373~>R}??R\004A?:\363=?\276\010D?k\2557?\031\220O?\375\026\035?#\307r?\245\240H>\313Q!?>\247n?\313^\201>\353\\A?\274>=?+dE?f\3034?&\200T?\235n\020?\362\307{?\033\310\204=yXx>\227\035<?x\210G?\023\0140?\342\355[?$\350\367>\200\276\177?p\336\202;\243X\202<\262E\200=\362yp>\272\0008?\272\376N?$\177\036?\322wq?\017P[>\213W,?*Ga?\365G\330>h\326y?\276s\300=\004^\256>\030\370e?f\022\273>\352pm?;\265\211>\374VI?\032\365+?\372\316a?\373\013\325>\006\313x?2!\340=\356\231\307>0\223s?\353&=>L6\032?\264Cu?\262\220$>E\036\n?|f~?Vz\313<|l\306=\3742\263>\242\365h?\010\274\247>4\221a?#\205\326>jGy?0m\321=\301\002\274>v\361m?\353C\206>\252\034F??13?]\rW?\250\227\t?\361\217~?\267\376\266<>\350\262=EG\243>\264j^?\271k\351>.\002~?e\355\374<C\036\365=\345\307\327>k\256y?\3724\305=\2507\262>\336]h?\312\234\253>\276.d?\231[\306>`\005s?\264\"E>\030/\037?>\316p??\256d>\211\2341?\317\212Y?\303\270\002?^\342\177?I\361\354:\243\203\354;\235\316\352<\252\023\344=I\255\312>\245\344t?\337\377)>\352\306\r?\307\010}?a\233;=\233\0033>\031\270\023?\240\354y?\305\316\275=f7\254>O\224d?b\336\303>:\340q?\213\204U>\026\377(?,\275e?}\211\274>\3018n?nY\204>\203FD?\333)7?\364sP?K\335\032?6\271t?\021z,>\001m\017?.H|?\315\177j=\357\022]>\202X-?\016\337_?\210\305\340>\3120|?\331,p=\227\027b>-,0?\236\275[?\'\375\370>\330\316\177?\301yD;\366\342C<h\213A=0f8>m1\027?T\230w?x\020\002>\222\026\343>\033\274|?\340NN=\257\352C>\330n\036?V\207q?\351sZ>\202\331+?\326\364a?\\$\324>{|x?\023b\351=\236\311\316>#\212v?\327\305\021>\322\n\372>\201\334\177?\265\346\r;\r\230\r<\311^\014=L\217\007>_:\353>\206P~?;Q\326<\334\265\320=\333p\273>\244\243m?\353Y\210>-\024H?\224\322.?\226\276]?\310_\355>\024\245~?\007\213\254<\256\350\250=g\372\232>\225\"X?\323\240\006?DP\177?\036C/<+c-=8\014&>B\037\013?2\021~?\272\210\365<\302,\356=\332y\322>\220\347w?\316\334\372=N\"\334>\241\371z?\332\243\235=\216\201\221>\027OP?\3449\033?\364jt?h\3560>=\\\022?\231\273z?\027\025\245=\221\306\227>I\221U?\316\230\r?\200\034}?\t\3126=\313\241.>\266\331\020?A\220{?\023\202\213=C\001\202>>\375A?\261\365;?S\323G?fd/?\355\347\\?\333C\362>ZC\177?\373\032<<\035\3629= \2011>,\274\022?\376\203z?\271\275\253=\331V\235>\016\372Y?\267\200\001?\367\366\177?/\204\020:\312o\020;L\036\020<\304\331\016=_\336\t>\334\234\356>\257\321~?\014v\226<\230\262\223=\305\013\211>\361\271H?\206[-?\310\332_?\"\337\340>\0067|?\227\251n=\233\301`>\303l/?\211\333\\?\310\213\362>\376J\177?j\2024<K\2052=q\275*>gE\016?W\321|?\003\"I=\235A?>\336\210\033?`\'t?\265\3044>h\333\024?\3573y?\261\273\323=\323\327\275>C\347n?\037G\177>n\243??\236\270@?\257\214>?7\336B?\253\":?\0261K?\316\250\'?\210lg?\345\273\261>n\022h?,\210\255>\004oe?\263y\276>\207:o?\037\303z>\264Z=?\231.E?d75?\023\300S?\217g\022?\030\265z?\242\334\245=\335m\230>\025\031V?\217,\014?+\257}?\364\335\022=\325\231\r>B\n\364>\366p\177?S\272\016<\006|\r=\350\230\010>g\300\354>\200\215~?!4\270<\311\017\264=\003;\244>\\\032_?f[\345>\':}?1\212/=M\004(>\344r\014?\034\224}?\252\201\031=\346\300\023>@\336\374>1\366\177??\351\034:4\321\034;$q\034<\274\362\032=-\026\025>\361\302\376>w\376\177?uV\3048\300Q\3049\356>\304:\266\363\303;\274\307\302<!&\276=\215~\254>\316\302d?\326\271\302>}Uq?\2666]>\326l-?:\302_?+r\341>sZ|?\021\020f=\003$Y>~\030+?\r\373b?\240\326\315>\320+v?M9\027>$\344\000?\323\374\177?9MK9\"CK:\311\032K;\245yJ<\025\371G=\3025>>\314\340\032?E\266t?\000\245,>w\211\017?i:|?C\327m=\276\007`>[\004/?\232u]?\300\n\357>m\340~?\360\'\217<\203\247\214=\216\376\202>\227\365B?\312\3619?\277\211K?\001\330&?\246lh?X<\253>\004\357c?\035\352\307>k\266s?\236);>)\364\030?>Ev?\211\301\025>\243\265\377>\352\377\177?\371\314\2546\276\314\2547\325\313\25480\310\2549\234\271\254:W\177\254;\341\226\253<\311\376\247=\3746\232>\305\207W?\300I\010?;\355~?\002\317\210<\036\206\206=\020`{>\257\252=?\333\224D?T\2026?\t\223Q?\201\006\030?\037\373v?\2248\013>\351\225\360>e\022\177?\030\276l<\\Ri=\354\007\\>\204\300,?\007\265`?\326\275\333>S\335z?\262\t\241=\013`\224>\346\300R?n\377\024?`\034y?M\205\326=\350\014\300>t\006p?\254\245o>\373\2177?D\303O?\234\227\034?\3609s?N.B>\300[\035?V\210r?\251$L>\rr#?w^l?F\001\221>\033\340O?\255O\034?\345ys?#\224>>\025\034\033?B\204t?\375}/>\235j\021?\253B{?\317\333\224=\363\t\212>+\245I?\213A+?\252\303b?\343,\317>\'\260v?-\222\017>\n\342\366>\341\254\177?\255\007\246;Q0\245<\227\333\241=\331\020\225>\024US?\343~\023?\256\017z?\254\241\271=J\316\250>,Mb?\225\006\322>^\276w?\360\256\377=1\303\337>\276\360{?\314\261\177=\221\273o>\241\2337?\n\257O?\002\312\034?\301\014s?\242\270D>\323\355\036?\227\rq?\0050a>\250\252/?\222\177\\?\177\240\364>\247~\177?g\027\001<\005\023\000=\251#\370=\006\023\332>\244az?F\331\257=\355\277\240>b\217\\?\tE\364>fv\177?\325O\t<;)\010=~\242\003>!m\345>\327=}?d\243.=<1\'>\352\344\013?\035\312}?\034@\014=\271r\007>Y\020\353>\256I~?\373\261\331<\001\351\323=\304\373\275>\321\371n?\313E~>\'\"??\261\270A?\303\202<?\310\311F?\036\2641?6fY?\025\037\003?\007\331\177?\241\314\033;\317m\033<W\364\031=\367*\024>\024u\375>\211\371\177?u\335\3169\220\310\316:\014u\316;\013(\315<\302\004\310=\324{\264>J\271i?\332\263\242>\226\377]?o\342\353>^k~?9\021\311<\331!\304=^Y\261>\t\326g?\221\020\257>{if?6>\270>\357\342k?\027D\224>a\251R?7<\025?C\364x?\004C\333=\215\311\303>n\326q?\355\017V>EP)?\303Te?\020 \277>D\217o?)\'v>W\373:?\227\244I?\340B+?\336\301b?\3737\317>b\264v?iS\017>\254\207\366>R\246\177?\020\036\263;j#\262<\300C\256=\273o\237>{\223[?\216\356\371>-\333\177?\3374\023;9\340\022<\'\217\021=\357b\014>\261G\362>\303C\177?\\\262;<\344\2139=,$1>i\177\022?W\247z?v\202\247=\007\317\231>\3604W?\347+\t?\211\257~?r^\247<\017\363\243=\"\323\226>*\312T?\324\252\017?%*|?V\311q=\213\203c>\350\3660?\354\211Z?\340\325\377>\371\377\177?\202\320\3355j\320\3356\n\320\3357\212\316\3358\210\310\3359\204\260\335:\207P\335;\336\321\333<\330\353\325=\216\223\277>\231\311o?\345\370r>\004R9?\200\251L?\260+$?\274\216k?\372z\226>\234\201T?\301j\020?\356\311{?\317\212\204=\301\355w>\227\346;?\232\357G?\340$/?\301E]?\364!\360>:\004\177?`\316z<\201\367v=x\023h>\245z3?\236\227V? \327\n?\363)~?\027W\351<\232\261\342=\330\231\311>\276pt?\036\2320>\r%\022?\023\333z?\276N\241=:\232\224>\304\361R?\350\200\024?kny?\346\315\314=\314R\270>x\356k?L\366\223>\320gR?T\345\025?K\202x?\336\262\350=HB\316>\323Uv?M\314\024>,Z\376>I\375\177?E\303-9\346\273-:l\236-;\255(-<-T+=\224)$>A\330\t?S|~?\356\260\300<\237(\274=)\337\252>-\261c?\344k\311>/]t?\277\2661>1\337\022?joz?\3223\256=\202b\237>\201\211[?\245\'\372>\326\335\177?U\227\010;tN\010<&,\007=-\266\002>\226\r\344>\370\362|?I\356@=\344\3277>M\326\026?\336\331w?Pw\374=\354W\335>\354N{?\022b\223=\331\306\210>\321yH?\002\355-?G\013_?\006\265\345>\257L}?}\001+=\316\335#>\301\244\t?\002\214~?\335\360\270<\004\304\264=|\317\244>y\204_?L\343\342>|\260|?\212#Q=\331uF>9\377\037?\307\000p?\032\365o>5\2727?\326yO?ON\035?\251\224r?7tK>\326\007#?m\323l?n\347\215>\033&M?8\000#?\303\333l?\266\256\215>\201\363L?\020z#?\226Ul?j=\221>3\024P?z\315\033?\r\354s?+!8>>\005\027?;\270w?K3\000>\354L\340>$\023|?\363\\w=\253lh>b\2533?\021IV?P\253\013?R\337}?\314\t\007=\027\226\002>\312\335\343>\200\350|?O|C=\345\':>eP\030?O\303v?\344u\016>HH\365>\"\215\177?aU\345;~\272\343<\334e\335=\273v\305>\203\235r?e\365J>Z\273\"?\314&m?\201\257\213>\363&K?\236\300\'?\374Ng?\310z\262>\227\206h?\363\222\252>g~c?\357\247\312>k\342t?r *>\253\334\r?b\377|?\250\346==\302\0305>\301\021\025?T\020y?\343\361\327=\335,\301>\r\225p?\336\323g>\333W3?\202\317V?\262?\n?\331[~?\272\272\320<:i\313=85\267>OMk?E2\230>\316\350U?N\256\014?\310|}?\3749\037=k\t\031>[*\002?>\355\177?\200\002\226:\214\326\225;&\'\225<\361o\222=u\367\207>\375\267G?\265\241/?\345\214\\?mS\364>\267w\177?s\000\010<q\337\006=\206n\002>\324\242\343>}\333|?\314\250F=4\006=>\252!\032?\224Tu?E\231#>#v\t?\354\231~?\200\017\262<\2630\256=\354_\237>\215\207[?\3222\372>X\336\177?U\217\006;\233H\006<\333.\005=?\332\000>\002G\341>\037P|?K\222h=\263][>V_,?[<a?\245\211\330>\271\352y?\260\010\276=\223f\254>(\263d?^\034\303>\201\204q?\022\234Z>\207\360+?C\325a?\213\345\324>\032\276x?Q\247\341=`\312\310>\352\027t?\035\2455>dl\025?\'\324x?x\r\337=i\302\306>\2043s?\317\212B>$\225\035?|Sr?\244\030O>m6%?\344\\j?\215w\236>P\327Z?6\037\376>y\374\177?\016\272a9\236\255a:\341{a;F\265`<O\240]=l\242Q>\305\267&?\266\223h?7=\252>\022Ec?\013\014\314>\344tu?\"\277!>\2442\010?/\363~?s\333\205<\205\253\203=\313hv>g\035;?\275eI?H\323+?^\375a?\037\360\323>\212jx?U~\353=/j\320>\246\'w?\334\241\010>\210\315\354>x\217~?\231:\267<s!\263=yv\243>\335\214^?\377\241\350>\371\335}?\177^\007=3\345\002>\233S\344>/\002}?\2407==\356y4>\001\253\024?VSy?\256\003\320=\357\342\272>QWm?8d\212><\370I?\363\201*?i\304c?\003\364\310>\331)t?\313\2404>+\304\024?\014Cy?\241\361\321=\023l\274><)n?K\304\204>\222\255D?SM6?\'\355Q?F \027?\275\244w?\342V\001>m\001\342>V||?1\324]=\260\320Q>\026\323&?\236rh?c\025\253>2\325c?P\213\310>\247\374s?\21107>\356j\026?\312%x?\251\221\363=\355\231\326>%Ny?\032\241\320=T`\273>\311\232m?\231\226\210>\327LH?\301R.?\240x^?\216\031\351>\225\363}?,\016\002=\014\332\373=b\341\334>\235.{?\215E\227=)\031\214>\313\206K?\371\336&?0dh?\216s\253>\210\023d?\341\005\307>\236Qs?\036\331@>\204\207\034?MHs?e_A>&\333\034?P\375r?\242\226E>Vv\037?\202\210p?\\\204h>Q\2703?+4V?\241\343\013?\227\312}?\004\"\014=\260V\007>\033\347\352>\350B~?\025\t\335<P\022\327=W|\300>\357=p?\373\233l>\376\3575?\000\213R?\243\212\025?\331\277x?\230r\341=D\241\310>(\006t?\270\2466>Y\022\026?]cx?:V\354=W\020\321>\377dw?2\017\005>\377\211\347>\251\251}?\0138\024=\375\332\016>$\332\365>\005\231\177?\252\242\315;OX\314<h?\307=\363\334\263>,[i?\256 \245>7\276_?-\212\341>,`|?8\254d=\005\350W>\"b*?\235\356c?\244\354\307>\206\267s?\234\031;>\001\352\030?(Mv?\202L\025>\361\017\377>\037\377\177?\340\032a8\310\027a9i\013a:\364\331`;v\024`<\347\003]=\353\026Q>Oe&?\021\367h?\234\262\247>\264\212a?\303\254\326>;Ty?\201\350\317=G\315\272>\236Km?(\264\212>\226AJ?\022\330)?P\244d?\300y\303>\314\260q?\"\'X>\236\206*?5\276c?\253\032\311>s:t?\256\2573>\345\'\024?\370\246y?\216\027\306=\200\356\262>x\314h?\333\311\250>\'Jb?%\031\322>\007\305w?\203\347\376=|-\337>\262\312{?\023s\204=m\304w>E\321;?}\027H?\037\313.?\177\311]?\333\037\355>\267\233~?\315,\261<\325W\255=\332\253\236> \377Z?\373<\375>_\370\177?!\r\3649\014\360\363:\323{\363;\253\254\361<v\213\352=\016\257\317>\214\341v?\307\264\014>q\276\362>GP\177?\252@/<\304`-=\005\n&>\305\035\013?\266\021~?\241G\365<\217\357\355=\341J\322>\323\326w?p\322\374=\221\234\335>pa{?.\'\221=\201\335\206>_\256F?\265\3601?\342\007Y?\023&\004?\'\273\177?\375\214\211;-\371\210<\337\256\206=\334\246{>\264\316=?]OD?\370\0267?}\224P?n\213\032?\207\375t?+\224(>x\323\014?\370m}?\r\333\"=ma\034>\265\177\004?\013\257\177?\247\267\241;V\353\240<\036\302\235=)\233\221>/eP?j\002\033?\366\231t?\302A.>e\232\020?Y\261{?1\203\207=z\027}>\240\211>?3\344B?*\026:?\314GK?is\'?\210\256g?\275\020\260>u\ng?\2534\264>;\217i?\214\311\243>\321\310^?H?\347>L\233}?F\276\027=&\037\022>\206\212\372>3\342\177?\224I\356:\255\332\355;\260 \354<NR\345=\303\244\313>\317Ju?\226($>\224\327\t?\210|~?\256\226\300<\233\017\274=\275\312\252>\227\243c?\210\300\311>*\201t?\017\253/>;\210\021?\1772{?\013\316\226=H\263\213>b*K?\217\270\'?\376Xg?%:\262>a_h?\353\222\253><(d?W\204\306>\263\027s?3\033D>\311\214\036?\316jq?\227\010\\>\346\300,?\177\264`?\017\301\333>=\336z?\252\355\240=lH\224>\006\255R?\3142\025?\202\372x?#\206\332=\0145\303>=\220q?\225\365Y>\004\221+?\332Wb?\372\304\321>\274\246w?\0079\001>\314\324\341>\330q|?\351``=N\026T>\021)(?\220\314f?\313\302\265>\217xj?\206\277\235>\223JZ?\355\235\000?z\376\177?\361\326\3028O\322\3029\307\277\302:\263u\302;FN\301<\215\276\274=\177Y\253>O\002d?\221q\307>`\201s?%(>>=\330\032?t\275t?2<,>\366C\017?\335[|?P\270e=\033\326X>\233\353*?a7c?\367`\314>@\227u?g\306\037>c\330\006?\222D\177?\004\345:<>\3038=\252m0>\354\007\022?\212\353z?\355T\237=\231\357\222>\010\211Q?\000 \030?\360\347v?\305U\014>\2244\362>\265A\177? \275=<\234\212;=`\3642>0\256\023?\271\362y?\325\024\275=\335\237\253>\3050d?\351N\306>\251\377r?\341tE>\233a\037?\335\234p?\350eg>\243\0333?\350/W?\2369\t?\230\253~?\346Q\251<\374\321\245=\360d\230>\333\021V?\375?\014?\301\247}?\342\257\024=$J\017>Sz\366>T\245\177?\244\027\265;o\027\264<\347!\260=\023\374\240>\026\274\\?/B\363>\250]\177?Y\361!<\223W =\271\020\032>\261\342\002?\262\336\177?\337&\005;\236\341\004<\270\315\003=\352\037\377=\327W\337>\207\325{?\277#\203=\027|u>g\242:?\tHJ?\031\311)?\340\267d?\251\376\302>]vq?\267d[>Yc,?\3146a?o\253\330> \365y?\241\313\274=*d\253>]\td?xE\307>\335ms?\313A?>\374\210\033?F\'t?#\3064>T\334\024?U3y?\363\315\323=N\346\275>\276\356n?e\337~>ao??\367\037A?\002\273=?buD?\271\3056?\365\037Q?\013+\031?B\032v?\204<\030>\211\232\001?\267\365\177?J\220$:\330u$;1\014$<\262g\"=<\367\033>\3475\004?\026\271\177?a\255\215;\220\020\215<\266\242\212=<@\201>\253>A?w|=?\313\355D?<\3035?P\326R?\004\310\024?\214@y?h=\322=N\250\274>\373Hn?\236\351\203>O\332C?\003\0208?\367\343N?)\301\036?\2428q?E\317^><T.?{v^?6&\351>\330\365}?\273\177\001=7\317\372=\013\030\334>\301\366z?K\374\235=]\314\221>\226\217P?\310\227\032?F\363t?\032*)>\3637\r?\024E}?\327\335,=)\222%>\272\314\n?w-~?k\233\347<\035\017\341=\253S\310>\177\344s?\234\2168>HK\027?\214\205w?%)\003>\271\270\344>\343\027}?}\3527=l\250/>\177\206\021?r3{?\310\260\226=T\232\213>\263\023K?\315\355\'?\272\026g?\242\345\263>V`i?\254\376\244>\017\246_?\254\032\342>=\202|?\217d\\=\277\210P>\037\021&?\246[i?\206\035\245>\372\273_?\223\227\341>\\c|?\034\346c=\3767W>8\374)?\367td?O\243\304>%<r?\021fP>\220\374%?\025ti?\222|\244>LI_?#D\344>\326\376|?\334\010>=\31275>\316%\025?\033\003y?\031\202\331=_h\302>d.q?;`_>\010\246.?\245\377]?\025\342\353>Pk~?A\030\311<\210(\304=\306^\261>[\331g?\003\373\256>\330[f?y\225\270>\275\023l?\270\372\222>\201\222Q?\332\007\030?\033\372v?\251G\013>\340\253\360>\t\025\177?\312\037j<Q\307f=\245\306Y>\016v+?\204|b?s\343\320>\201Tw?E\005\006>\307\365\350>)\355}?v\242\003=\366\316\376=\013\033\337>\366\305{?\221\005\205=p\303x>\241T<?\343 G?\370\3620?\362\217Z?\310\263\377>\351\377\177?q\212\26561\212\26570\211\2658*\205\2659\023u\265:\3044\265;<4\264<p=\260=\337\022\241>\000\315\\?\035\340\362>\277S\177?\025\315+<\347\377)=\251\361\">\371\003\t?\342\272~?\301\300\241<!\217\236=\201H\222>;\372P?\233\212\031?\213\316u?\351\230\034>;\246\004?\211\251\177?\357\263\254;\352\312\253<\2440\250=\250`\232>\342\250W?\035\357\007?4\004\177?\002\324z<\367\374v=E\030h>E}3?e\223V?\215\342\n?\022&~?]@\353<\343~\344=\233\000\313>@\007u?\363\005(>\377s\014?\256\223}?\263\234\031=\350\331\023>\323\001\375>\013\367\177?\032L\017:\0148\017;\354\347\016<\324\250\r=\235\302\010>\215\375\354>\243\226~?}\257\263<\206\276\257=\305\251\240>\343~\\?o\244\364>\001\177\177?1\276\000<lv\377<\003\177\367=8\226\331>m<z??K\264=\002l\244>t=_?\250\212\344>\n\016}?nR:=\260\3301>Y\365\022?Qbz?\227\304\257=\313\256\240>\241\202\\?\316\216\364>\024}\177?k\251\002<\251\236\001=)\t\373=\312C\334>\377\002{?\340\203\234=\300\215\220>\272{O?\236I\035?\364\230r?\2656K>\301\342\"?\357\373l?\261\323\214>)/L?\333O%?G?j?O<\237>\246l[?\240\314\372>\364\344\177?\236I\330:@\356\327;\374\201\326<\017\344\320=\243\225\273>R\267m?\005\323\207>\315\225G?C\356/?\227\032\\?\006\347\366><\255\177?zR\245;\363|\244<p/\241=\332\177\224>\240\333R?D\272\024?wIy?\013/\321=P\321\273>*\327m?\213\370\206>\363\307F?+\2701?\354_Y?\2470\003?K\327\177?\202\270\";\024Q\"<i\265 =5g\032> \037\003?\006\331\177?\243\320\033;\315q\033<A\370\031=\226.\024>9z\375>\243\371\177?]\233\3139\037\207\313:76\313;\231\363\311<\025\371\304=J\007\262>q@h?\240\\\254>\250\254d?DE\303>\360\227q?B\210Y>0R+?&\255b?\320\267\317>\332\344v?\257\203\014>8w\362>\323H\177?Y\2526<\376\2404=\321\251,>\251\214\017?\3348|?\2407n=\351\\`>;4/?\037/]?\324\245\360>O\024\177?\363\327j<5zg=XeZ>(\321+?G\000b?M\336\323>fdx?!7\354=k\370\320>7\\w?:\222\005>\322K\350>!\316}?}C\013=W\207\006>\262\265\351>%\017~?J\213\366<\312\037\357=>4\323>S)x?j\'\363=\357H\326>\3313y?=\276\323=\330\331\275>N\350n?\2478\177>-\234??\n\307@?\200o>?6\027C?_\2539?\364\010L?\274\252%?\320\324i?\346\375\241>uz]?b\356\356>\250\334~?K\006\221<\nu\216=H\214\204>\231wD?\373\3006?\023(Q?w\026\031?k*v?\347M\027>\250\362\000?h\374\177?,\376e9B\361e:\237\275e;r\357d<\205\274a=\266KU>\361\335(?\221\347e?\263{\273>s\251m?#2\210>\367\356G?Q&/?\243C]?P.\360>\302\005\177?\314Iy<\312~u=\013\310f>\007\3052?\307\271W?\321\300\007?\215\017\177?\275\220o<\377\017l=\'u^>N!.?\017\300^?&s\347>J\245}?\325J\025=\322\331\017>\033I\367>\017\264\177?\363\264\227;%\001\227<\2228\224=c~\211>B$I?5i,?\253.a?\322\334\330>C\004z?\374\375\272=:\353\251>\n\016c?\037a\315>\215\375u?\031\344\031>}\303\002?s\341\177?#J\364:\225\325\363;\026\005\362<\251\336\352=0\357\317>\261\371v?\331M\013>\341\264\360>\034\026\177?\370\ri<N\275e=\212\332X>)\356*?\3633c?:v\314>\321\237u?uH\037>\260\201\006?\250V\177?\265\347(<\361)\'=uW >\031<\007?\242.\177?\261\262P<&\nN=\340\254C>\254H\036?\214\253q?\261qX>\256\261*?\337\204c?\266\177\312>\241\321t?\247\025+>+\200\016?\354\266|?\r\222O=5\rE>\340!\037?\035\333p?\254\370c>\35771?)&Z?\226\004\001?\333\373\177?x\236\2049\342\225\204:\214s\204;}\352\203<\257\312\201=\344!s>\215g9?\345\202L?\025\210$?\307%k?2;\231>\225\276V?\231m\n?\004M~?=\014\330<\230Y\322=\264\276\274>\302Tn?l\230\203>\177\213C?\277\2668?(\276M?;\220!?\376en?\212!\203>\274\027C?E\2529?\360\nL?\005\246%?[\332i?6\331\241>~_]?\327\213\357>F\361~?\277\315\206<\337\225\204=\004\001x>\206\360;?\001\335G?\253N/?\025\010]?\007\211\361>\305.\177?\222\217P<\353\347M=\027\216C>\2465\036?\210\275q?\035rW>\345\035*?\265Hd?\357\270\305>\270\273r?bDI>E\265!?\020?n?\367-\204>\177\034D?e\2037?\035\331O?!a\034?pjs?0s?>\353\247\033?\231\014t?EI6>4\326\025?\241\214x?~{\347={Q\315>]\367u?_?\032>L\003\003?\261\333\177?u(\021;&\326\020<`\216\017=Z\206\n>$\222\357>\025\362~?\007g\206<\2072\204=\004Tw>5\227;?\320\203H?\\\326-?\301+_?\373\363\344>v$}?\310\3274=\305\333,>\302\255\017?\265(|?q\"r=\037\322c>\213\"1?\tGZ?\351\247\000?G\376\177?\314A\3348\340;\33491$\334:\212\305\333;3L\332<\004{\324=\205o\276>P5o?\234\013{>\253\177=?\244\347D?~\3205?\t\300R?\251\001\025?\351\032y?\237\261\326=\361/\300>\360\027p?\303\260n>z\r7?\324\244P?Eb\032?\221\037u?\035\242&>t\204\013?f\355}?\213\223\003=\014\263\376=\023\006\337>\221\300{?\205\254\205=\334\345y>\237\351<?\241\006F?~a3?\n\300V?\244i\n?NN~?ei\327<T\277\321=\025D\274>\031\024n?\307U\205>Q9E?7 5?\225\346S?\256\002\022?~\356z?9\372\236=\376\242\222>\253GQ?G\306\030?\344hv?(\262\023>E\311\374>\254\365\177?\246:%:\375\037%;z\265$<\226\r#=\361\217\034>\002\240\004?p\252\177?I\347\252;\031\003\252<\330{\246==\363\230>\273\204V?7\n\013?{\030~?\034\362\361<\316\314\352=m\341\317>\205\364v?\273\232\013>\304$\361>J#\177?\001\370[<\370\003Y=|\204M>\037E$?\362qk?f<\227>} U?\242\305\016?\'\227|?VNW=\013\375K>9Z#?\323xl?\250N\220>\273DO?\t\322\035?\367\032r?\230?R>\177\024\'?\377\"h?a\034\255>c)e?\2072\300>9\031p?\265\236n>\326\0037?g\265P?{8\032?\352Au?\363\252$>\0240\n?\326`~?\227D\316<\003\023\311=\'U\265>\3118j?ig\237>4\215[?z\022\372>\334\334\177?\036{\014;\007.\014<\376\372\n=\305C\006>\010R\351>\243\375}?\270)\377<\0277\367=\254_\331>\003,z?\301@\266=\275\010\246>%b`?\370\261\335>.g{?\007v\220=gE\206>\024\036F?\'.3?Q\022W?.\212\t?\371\223~?\341\000\265<\017\001\261=\300\264\241>\247D]?b(\360>\006\005\177?\n\004z<Z3v=\356fg>3\0343?\002/W?\021<\t?\343\252~?Y\253\251<\274\'\246=\312\254\230>\360KV?\222\243\013?$\342}?QX\006=H\360\001>\212\346\342>9\261|?\223\365P=\223LF>\360\345\037?\005\032p?\221\223n>\343\3756?\241\277P?\260\036\032?\003Wu?\237u#>\340]\t?\017\241~?\302\207\256<\333\317\252=\304\220\234>\310`Y?B.\003?\210\327\177?\026\305!;\334^!<\372\307\037=Z\214\031>\026\206\002?\206\346\177?\005\276\313:\362l\313;\246)\312<x,\305=\3110\262>\261Yh?\005\270\253>\257@d?6\353\305>\223\322r?\201\374G>\336\355 ?\255\016o?L$}>\033\220>?\207\327B?\2430:?\263\027K?k\344\'?o\"g?1\232\263>e3i?i&\246>\374v`?_4\335>GE{?Z\213\224=-\305\211>\270eI?S\323+?N\375a?\177\360\323>\253jx?mz\353=-g\320>\207&w?\207\262\010>\370\345\354> \223~?\355k\265<^g\261=[\t\242>\336\202]?<\275\356>\020\326~?aJ\224<1\233\221=\013A\207>l\014G?n 1?GJZ?\301\236\000?v\376\177?l\344\3048\261\337\3049\304\314\304:\037\201\304;sS\303<1\253\276=\337\352\254>K\te?T\375\300>\257}p?\220\034i>P\0134?\234\255U?\002M\r?[<}?M\000/=7\206\'>\036\036\014?\247\264}?z\205\021=\363Y\014>\245:\362>]B\177?\362\026=<F\350:=\341`2>)N\023?8-z?\325\033\266=b\352\245>\313L`?\2042\336>a\211{?^V\214=\214\270\202>%\261B?\272\200:?\253\205J?\3159)?\276qe?nh\276>\2561o?\023>{>a\231=?/\266D?\325:6?\203\014R?\357\317\026?h\336w?B\357\373=a\361\334>\0003{?\210\276\226=\016\246\213>]\036K?\310\324\'?\3505g?\235\034\263>3\350h?\035\024\250>\323\315a?\007\023\325>c\315x?\315\331\337=(b\307>\220zs?\177\212>>\007\026\033?c\211t?P3/>\2039\021?>]{?\200\250\221=vL\207>0\027G?\204\0101?\365nZ?07\000?\320\377\177?\377V>7rV>8<T>9dK>:\007(>;\307\232=<\020i;=\345\3252>\\\232\023?\345\376y?\260\241\273=\374p\252>\270gc?\3574\313>\340\034u?}\311&>\002\237\013?\314\343}?\355\357\005=\272\216\001>\340T\342>\310\217|?F\031Y=\210\227M>\206P$?\004ek?6\223\227>ngU?\235\010\016?:\354|?q\223B=4U9>$\312\027?8(w?Y\231\010>\016\301\354>\231\215~?\305\'\270<\373\003\264=H1\244>b\023_?\335\204\345>\302B}?do-=h\027&>\321&\013?\221\016~?i\324\366<\201d\357=\347h\323>\266;x?\345\376\360=\010\243\324>\243\247x?3M\344=\000\332\312>>\367t?\016\360(>\021\021\r?\rU}?`\365(=1\375!>\024]\010?4\350~?OM\213<\347\356\210= \216\177>\004\307??\306q@?\251\033??~\305A?vh<?y\373F?\014F1?q\020Z?\276A\001?\257\371\177?\016*\3129\031\026\312:V\306\311;D\210\310<\232\237\303=\t\360\260>%\225g?-\265\260>\274pg?\271\240\261>\315\001h?I\364\255>~\264e?\253\300\274>\312Un?N\221\203>\224\204C?W\3058?G\244M?\020\317!?\332#n?]\351\204>=\321D?\262\0006?\323nR?B\323\025?\243\216x?\361>\347=\234\"\315>\306\344u?pQ\033>\202\302\003?u\307\177?Y\373a;\3353a<m\033^=3\020R>\216\370&?\022Eh?v>\254>\356\230d?T\301\303>\220\322q?\371FV>Jp)?\\+e?\022&\300>\003\023p?\275\365n>G27?neP?\314\001\033?|\232t?&:.>`\225\020?\364\263{?\2562\207=\275\213|>\343B>?#nC?\251\3648?0PM?\250\232\"?8Jm?\266\275\212>WJJ?\300\303)?\334\276d?\262\322\302>aaq?:\216\\>\n\r-?\250I`?gE\336>\\\216{?\177\274\213=\2703\202>\336.B?3\217;?\271\222H?\216\264-?\032\\_?\032\324\343>^\346|?b\001D=@\240:>\360\234\030?\313\210v?\270\331\021>B\'\372>\321\335\177?\203\251\010;\216`\010<\363=\007=\315\306\002>Y&\344>^\370|?\023\235?=W\2466>\033\022\026?\210cx?2Q\354=x\014\321>\224cw?b$\005>Z\251\347>\244\257}?o\300\022=n~\r>\232\342\363>;m\177?\324p\022<\300!\021=L\375\013>\023\264\361>\2343\177?L\301K<\2348I=\375U?>\242\225\033?b\034t?Dd5>\210B\025?\022\360x?\314\301\333=(-\304>#\005r?\322vS>\214\313\'?eAg?}\322\262>\227\273h?\\8\251>B\225b?\022K\320>\021\034w?VN\t>5\312\355>d\264~?,\367\244<\277\244\241=\253\342\224>w.S?Y\343\023?\334\321y?K\376\300=}\316\256>\242?f?\332I\271>\342wl?\013U\220>NJO?:\304\035?\321\'r?4\210Q>I\250&?o\246h?\313\302\251>\321\362b?\212\t\316>\272?v?\017\023\026>y\024\000?\371\377\177?\325\225\3215\300\225\3216j\225\3217\023\224\3218\266\216\3219Ey\321:\221#\321;\333\315\317<g\210\312=\365\200\266>M\346j?\311\343\232>\271\020X?\376\321\006?\357E\177?`\2119<\200o7=w8/>\347<\021?k[{?\310\340\221=\273|\207>\254DG?Y\2430?Z\t[?\317\002\375>\021\367\177?\364\355\016:\001\332\016;J\212\016<\323L\r=\370l\010>\365\177\354>\276\203~?u\006\275<\341\251\270=M\003\250>E\302a?\245Y\325>\376\344x?\243\020\335=\3543\305>\344~r?\335\253L>F\303#?\030\004l?`d\223>R\354Q?g\"\027?4\243w?\341m\001>\314#\342>_\204|?\357\337[=`\022P>\351\312%?\340\256i?\252\370\242>\2531^?\347\273\352>\302;~?\256\217\340<\320g\332=1\035\303>\346\204q?~\226Z>T\355+?\247\331a?\263\312\324>\r\265x?|\270\342=4\237\311>\005st?\366x0>S\017\022?]\347z?:\325\237=\350[\223>#\345Q?\3144\027?\342\225w?\0025\002>\024M\343>_\310|?\262QK=\007:A>\344\303\034?A\022s?\210iD>\027\275\036?\214<q?\343\227^>\3614.?\272\243^?\326\032\350>\005\305}?H\200\r=\337\234\010>7\306\354>_\216~?\233\305\267<:\246\263=\376\343\243>\334\333^?o\316\346>H\205}?\212$\035=,\035\027>Q\320\000?Z\375\177?\245\201)9\242z):\225^);\207\356(<\2370\'=\227] >P@\007?\256-\177?>\245Q<\201\366N=f\201D>\315\313\036?g.q?\n`_>\355\245.?\315\377]?*\341\353>+k~?}*\311<\3379\304=\311l\261>\366\341g?$\303\256>o8f?\333w\271>D\221l?\345\250\217>\253\263N?\0308\037?x\305p?\353)e>\352\3401?\203 Y?\202\341\003?\301\303\177?[\302p;\356\337o<\337\\l=)\271^>\277G.?\215\210^?z\273\350>\236\342}?`:\006=N\324\001>\310\274\342>\264\247|?\002GS= aH>\'+!?c\317n?\366H\200>\341H@?\353m??\335\"A?\033\265=?\304\200D?]\2556?\236IQ?T\301\030?\271lv?yy\023>\225x\374>\214\363\177?\2618G:\357\021G;\"wF<\260\017D=0\255:>(\245\030?x\202v?s7\022>@\255\372>\252\343\177?\346\230\342:\2354\342;\333\244\340<\324{\332=\360,\303>b\214q?B,Z>h\260+?\016-b?\315\313\322>\233\004x?\307u\367=8\217\331>S:z?z\213\264=\354\240\244>Dc_?g\251\343>\361\334|?\351MF=\037\264<>\334\355\031?\270~u?\316.!>\324\317\007?\347\013\177?z0s<e\224o=\377\220a>\362\340/?\206.\\?<t\366>\340\244\177?@\377\265;z\374\264<\332\374\260=E\261\241>\027B]?T7\360>\337\006\177?\t/x<\234lt=\251\326e>9@2?f\213X?x\177\005?\027\207\177?\354^\361;\304\227\357<\336\225\350=\337+\316>\034Mv?6M\025>\361\020\377>!\377\177?\362<_8\3479_9\275-_:\031\375^;\335:^<47[=\274{O>gq%?\030\030j?L@\240>)0\\?\315j\366>+\244\177?Ag\267;w`\266<\rQ\262=s\312\242>\014\020^?\257\201\353>\005\\~?\366\244\320<\222T\313=\252$\267>\344Ck?lq\230>\365\033V?\321$\014?\034\262}?\023%\022=.\356\014>\255\021\363>\312X\177?z\310&<\330\025%=\205n\036>^\353\005?\330s\177?\223\333\013<\363\251\n=8\370\005>\203\342\350>\260\351}?/}\004=\0324\000>!N\340>p\023|?dJw=Y\\h>y\2423?sWV?\203\204\013?a\355}?\331\224\003={\265\376=\347\007\337>\t\301{?\356\235\205=}\314y>\241\334<?Y\037F?]+3?\306\026W?\016~\t?\224\227~?j8\263<\252L\257=mK\240>|8\\?\324:\366>\213\240\177?\273\242\276;\317\206\275<L$\271=\235g\250>\022\007b?\260\264\323>\006Vx?\243\347\355=\314D\322>\247\324w?\203\023\375=\221\315\335>\221n{?+\222\217=\227\201\205>FcE?W\3054?\361|T?\023w\020?\231\303{?\253N\205=\241By>\365\225<?u\245F?e\0042?\"\351X?\222{\004?\237\257\177?K\217\240;\344\305\237<(\250\234=|\254\220>y\226O?$\007\035?\206\325r?%\322G>\r\324 ?5)o?\330\263{>N\325=?\234BD?/27?\230eP?b\001\033?\326\232t?\0135.>\002\222\020?\262\265{?\276\374\206=\030.|>f\023>?d\312C?\27618?\315\250N?\316R\037?]\253p?\275\231f>\226\2532?\031\342W?,R\007?\235)\177?\255\257U<6\346R=N\nH>G\366 ?\005\006o?{\234}>\320\314>?\235`B?+(;?\330QI?\343\000,?\310\276a?\362n\325>\025\354x?H:\334=\301\213\304>61r?\'\002Q>\006Y&?\315\005i?\355Q\247>\335Ga?\265C\330>\027\325y?\345\233\300=\237~\256>\337\014f?\356\215\272>O)m?_\236\213>a\027K?-\345\'?}!g?H\240\263>\0077i?\205\016\246>5f`?~\231\335>\234`{?\251@\221=_\363\206>\017\303F?\374\3021?\033OY?\232_\003?{\322\177?~\3645;*s5<\272p3=M\224+>p\324\016?N\220|?\305\370X=yzM>!?$?\275xk?\311\016\227> \373T?\363(\017?\264h|?\256\231b=s\020V>\222P)?_Te?\212\"\277>\206\220o?\252\025v>A\362:?V\265I?S\034+?\344\365b?\210\366\315>M8v?\314\200\026>\000b\000?j\377\177?\010\017\0268\250\r\0269)\010\026:-\362\025;Y\232\025<\245<\024=B\337\016>M\340\365>\202\231\177?\313\251\314;\215b\313<\341U\306=\303 \263>\261\352h?\311\003\250>\232\302a?\232W\325>P\344x?8%\335=\017D\305>M\206r?\321AL>\223\203#?\010Kl?\330\204\221>\356QP?\3042\033?\003qt?;\2260>\201\"\022?\205\334z?g\"\241=\336t\224>f\322R?\'\322\024?\3669y?\026\005\323=\352F\275>\013\234n?>\254\201>q\251A?\021\242<?\205\216F?\37762?\342\231X?aW\005?\342\215\177?@\327\343;\262A\342<\361\001\334=\206_\304>\243\034r?\265\'R>j\006\'?.4h?\202\254\254>\301\340d?\037\375\301>\233\372p?/<b>\233@0?\326\236[?\210\255\371>\010\330\177?\323\307\037;\031d\037<$\327\035=\n\302\027>kD\001?\224\371\177?\315\212\3159,v\315:\271#\315;\365\332\313<M\310\306=\376|\263>\364!i?\013\231\246>@\307`?\247O\333>\356\275z?\223\315\244=\222\212\227>a`U?m\033\016?\364\343|?\021\230D=}(;>r\363\030?\314Ev?G\271\025>\365\251\377>\343\377\177?\225[\3476,[\3477\212Y\3478\001S\3479\3408\347:u\320\346;>0\345<\303\306\336=\031\213\306>\274\032s?\212\357C>\327q\036?|\204q?_\234Z>\263\360+?\007\325a?\376\346\324>\227\276x?\231\230\341=\346\276\310>\366\022t?\370\3545>\273\232\025?\377\264x?\036\272\342=z\240\311>\220st?\033q0>-\n\022?E\352z?\374{\237=\224\020\223>\035\245Q?e\330\027?\234\035w?Z7\t>\216\250\355>\226\257~?\343W\247<\305\354\243=\331\315\226>\322\305T?T\266\017?\201$|?i\'s=+\270d>\007\2421?K\202Y?\226\320\002?O\340\177?\362i\375:\205\354\374;\300\370\372<iH\363=\030b\326>\n<y?\t\306\322=\331\024\275>\350\201n?\327`\202>/[B?m3;?\006=I?\2200,?\026}a?\303\377\326>\354ny?\217\276\314=\207F\270>\230\347k?\251$\224>\352\216R?\212\200\025?\243\306x?\244\245\340=Z\001\310>\230\300s?o\226:>\262\226\030?\227\215v?\243\222\021>\215\301\371>\003\331\177?\265\332\033;\322{\033<\025\002\032=\2557\024>$\207\375>\344\371\177?\027\213\3039kx\303:\313-\303;-\004\302<\332k\275=\315\346\253>t_d?P*\305>zzr?\020\353L>2\351#?\240\331k?\333\202\224>&\336R?\274\263\024?\262My?\304\256\320=5k\273>\236\240m?\247n\210>\215\'H?\352\246.?\\\376]?\244\351\353>\200l~?2\202\310<\324\231\303=]\353\260>B\222g?\332\307\260>M|g?\361U\261>\356\323g?;\036\257>\036rf?\353\006\270>\344\303k?K\025\225>\313XS?7u\023?\220\025z?\017\356\270=,;\250>\241\350a?\026o\324>\377\225x?\032a\346=\306v\314>\t\240u?8E\037>t\177\006?\034W\177?7t(<\324\270&=\220\357\037>\263\364\006?w>\177?\313\366@<\377\260>=L\3205>?\210\025?u\301x?\006B\341=b{\310>\277\365s?\243\2247>-\253\026?\207\370w?\035\340\370=\276\241\332>\236\213z?%\324\252=W\224\234>\216cY?\202&\003?M\330\177?\253\264\036;HR\036<\241\312\034=(\312\026>\306\225\000?\241\376\177?\265?\2578\365;\2579\367,\257:\010\361\256;\356\001\256<\271O\252=\372%\234>\246\rY?\010\026\004?7\275\177?[n\205;C\343\204<j\273\202=\033\306t>\214C:?K\365J?\0275(?x\275f?\303#\266>\250\260j?\332I\234>\235)Y?\'\310\003?\312\306\177?\201\243d;N\327c</\254`=SYT>OP(?9\233f?\206\377\266>\272.k?>\377\230>d\216V?\027\360\n?t!~?\246\206\355<\221\243\346=G\252\314>\274\264u?\320\024\036>c\255\005?\023\177\177?S\254\000<?S\377<\007^\367=5}\331>\3514z?\3440\265=\036)\245>5\304_?Sf\341>\237W|?\371\277f=!\300Y>Or+?\232\201b?$\304\320>\367Hw?T\261\006>\231\363\351>\336\031~?\224C\361<\221(\352=\313b\317>\254\304v?\251a\016>\024+\365>\254\212\177?};\352;\334\216\350<\302\364\341=\275\006\311>\3451t?\354+4>yx\024?\321sy?\365)\314=\231\317\267>\275\244k?\002\347\225>K\007T?\332\254\021?Y\036{?U:\231=|\303\215>\014\006M?rM#?\356\206l?\000\357\217>\037\361N?\271\240\036?\277Wq?\267\026]>\250Z-?\003\334_?\305\327\340>;5|?\323\030o=\335#a>\331\243/?\266\211\\?\333e\364>dy\177?2U\006<=;\005=\323\345\000>UX\341>FT|?\020\220g=\273xZ>E\334+?\r\361a?\211;\324>i\204x?\031s\350=\377\020\316>\242Bv?\021\350\025>&\354\377>\376\377\177?\236\005\3054\232\005\3055\207\005\3056;\005\3057\014\004\3058O\377\3049\\\354\304:\236\240\304;\222r\303<\324\310\276=\375\002\255>\360\030e?\203\232\300>\344Lp?\025\312k>\355~5?\314HS?\333\236\023?#\374y?\306\365\273=\246\265\252>\213\225c?\372\027\312>\033\246t?\273\220->\177%\020?*\355{?\263G\200=t}p>\226\0028?y\373N?,\207\036?)pq?\246\274[>\222\225,?\371\360`?\022S\332>\216tz?f\226\255=\322\337\236>\231&[?J\\\374>\301\362\177?P\344S:w\270S;^\tS<|QP=4\271E>\220\213\037?\234sp?/\252i>aX4?\351/U?\231\234\016?\376\251|?L\270R=\036\341G>-\335 ?\326\037o?\0016|>j\027>?\233\302C?<B8?\322\213N?\376\231\037?`ep?Arj>\374\3044?\210}T?\206u\020?e\304{?\3745\205=\257\027y>\352\177<?*\317F?6\2501?\264xY?h\353\002?\350\335\177?XO\010;\304\006\010<\247\345\006=St\002>z\253\343>g\335|?>1F=;\232<>\202\335\031?\364\213u?il >}J\007?^+\177?R\361S<s3Q=\"\204F>\370\007 ?\007\370o?\231op>=\3737?U\010O?mg\036?c\216q?\335\017Z>\034\240+?JCb?JC\322>\035\324w?\250#\375=\270\331\335>\317q{?\t.\217=z+\205>\300\020E?\335w5?\231TS?#\200\023?\353\016z?\364\270\271=Y\341\250>\'Zb?\325\266\321>\240\241w?z\205\001>\016G\342>\224\214|?\365\340Y=\003JN>6\273$??\353j?\272\302\232>\230\366W?\333\031\007?N6\177?\201\023I<\303\233F=n\372<><\032\032?\244Zu?Z@#>\2319\t?\231\253~?\'Q\251<E\321\245=Wd\230>_\021V?KA\014?A\247}?<\317\024=7g\017>2\244\366>k\250\177?\333\356\256;\310\377\255<\253M\252=C$\234>O\014Y?\302\031\004?\275\274\177?\320a\206;\273\324\205<\005\245\203=v]v>\206\027;?\230pI?^\272+?s\037b?A\037\323>\371!x?A\004\364==\361\326>Ejy?\334K\315=\212\267\270>\272&l?kz\222>\371$Q?T\036\031?@$v?\371\250\027>\3072\001?A\372\177?\233\314\2679\034\274\267:-z\267;-s\266<\355b\262=6\331\242>\313\032^?~B\353>\327Q~?\346\252\325<7\030\320=L\363\272>&`m?\333\'\212>\270\300I?\030\002+?0\031c?\024\034\315>-\342u?\263w\033>(\335\003?H\304\177??\250n;\302\311m<EVj=(\356\\>\233C-?\246\374_?\032\024\340>\005\005|?\312\310z=\376mk>6M5?\302\233S?\207\306\022?\354}z?\230w\254=z\361\235>\341pZ?\3011\000?\331\377\177?\232\264\0327=\264\0328\307\262\0329\357\254\032:\222\225\032;:8\032<\233\304\030=\372\021\023>!\345\373>&\357\177?n\305\206:\365\241\206;Y\024\206<\216\342\203=\263\310v>\036O;?\300\tI?\302\245,?i\332`?\272\333\332>\177\234z?\370\316\250=\357\344\232>\241\021X?\177\317\006?wF\177?&\0029<U\3536=\036\300.>\260\355\020?\265\205{?\273\307\214=Y\032\203>\270\020C?\373\2709?j\360K?\377\344%?\005\220i?U\304\243>\020\305^?\207U\347>\230\237}?\217\260\026=Y%\021>\010%\371>\001\321\177?\'\331;;PO;<\034+9=\'\3140>\321E\022?n\310z?;\213\243=\350{\226>`\202T?\272h\020?\370\312{?\243j\204=\274\265w>\260\311;?\251%H?.\253.?$\370]?-\016\354>6r~?\320\257\305<\220\352\300=z\276\256>x5f?\307\212\271>\257\233l?,b\217>\205uN?\264\320\037?)/p?9km>L_6?\242\316Q?[n\027?\360kw?\216\247\004>\201\360\346>\370\213}?\307\200\033=t\231\025>\352|\377>\275\377\177?\304?\20677?\2068\004=\206984\206:\n\021\206;\237\204\205<\206W\203=`\326u>^\321:?\330\361I?\270\220*?\307\260c?an\311>>^t?Q\2471>\036\325\022?Yuz?$~\255=\254\313\236>N\027[?d\263\374>\035\365\177?\022\".:u\004.;+\216-<\205\267+=\232\204$>\020\026\n?\024i~?\3242\312<25\305=\3257\262>\371]h?\027\234\253>H.d?|^\306>\255\006s?\000\020E>\230#\037?q\331p?E\020d>\006E1?\004\022Z?P=\001?\333\371\177?\303\242\3049\342\217\304:lD\304;z\027\303<\024r\276=c\274\254>\026\353d?\366\273\301>\371\332p?\257\372c>\r91?q$Z?n\t\001?\263\373\177?\244\227\2119f\216\211:qi\211;\355\325\210<\315\214\206=\255k{>\230\260=?v\211D?\275\2326?jiQ?~p\030?\334\252v?\264\340\017>\001S\367>\273\264\177?z]\226;\327\254\225<\302\360\222=\322e\210>L\037H?\205\271.?7\343]?\005\211\354>\037\205~?\344W\274<Z\003\270=\300z\247>\036da?\316\227\327>F\237y?\230\001\307=)\253\263>\204=i?\327\343\245>0H`??N\336>\261\220{?\214t\213=\223\365\201>\275\361A?h\r<?\333\246G?\030\310/?\253S\\?\016\236\365>4\224\177?\362=\327;\377\323\325<,?\320=U\022\273>\340pm?y\265\211>6WI?\227\364+?\257\317a?\251\007\325>\223\311x?\373L\340=\"\274\307>=\242s?kM<>\370\254\031?\013\263u?\254-\036>\222\276\005?\002|\177?;\272\003<\033\253\002=\357\377\374=\323\276\335>\237j{?\314\013\220=#\352\205>(\307E?\'\3543?;\340U?Q\305\014?\241s}?\034x!=\227\032\033>J\234\003?\333\313\177?\267gP;\017\276O<\273\033M=d\326B>\373\303\035?\014(r?\360\204Q>[\246&?\304\250h?\215\263\251>\214\350b?\014I\316>tXv?m\245\024>\001#\376>\207\374\177?\355-^9\340!^:\260\361];E1]<\3154Z=\355\224N>\354\347$?\316\267j?,\032\234>p\004Y?\251/\004?\347\271\177?\313\n\214;\223q\213<\357\021\211=\321\312\177>f\345??*5@?\201\225??M\324@?\245T>?\221KC?p=9?U\316L?\\\323#?\031\362k?\316\335\223>\"SR?\216\032\026?\263]x?\257\000\355=f\223\321>\313\224w?QE\002>ee\343>\321\315|?\020\376I=\001\010@>\001\005\034?\237\273s?[\336:>c\304\030?[jv?\202\234\023>v\252\374>\342\364\177?q\3251:\216\2661;1;1<eP/=u\317\'>`O\014?\332\241}?\321\"\026=\004\242\020>\262h\370>`\306\177?\332Jf;\257{e<\325Db=\373\304U>\243$)?\372\214e?\247\273\275>\260\330n?\214\010\200>\214\010@?\347\356??-\"@?\225\273??\215\210@?\302\355>?\345\037B?\'\256;?\016YH?$7.?\214\240^?\243-\350>\206\310}?\347\243\014=\255\317\007>\001\231\353>\277_~?=\316\316<\270\225\311=*\276\265>\337uj?g\321\235>JXZ?5w\000?\"\377\177?\305\007^8\302\004^9\272\370]:\234\310];x\010]<\031\rZ=tqN>\302\322$?0\320j?yw\233>\016\205X?\005\221\005?\017\204\177?\236j\367;`\214\365<00\356=||\322>\200\350w?\275\300\372=\035\r\334>\257\363z?\235Z\236=\035\034\222>&\324P?\341\352\031?\"\201u?]\013!>\212\267\007?\313\021\177?\351Vm<\301\346i=c\213\\>k\013-?\357K`?\2637\336>\277\212{?\034,\214=\023\224\202>n\215B?\026\313:?e\375I?\007v*?=\324c?I\221\310>>\377s?\002\0137>\323R\026?\2446x?Q\227\361=\211\027\325>\346\316x?(\254\337=|>\307>\304js?vn?>\365\244\033?(\017t?.$6>P\276\025?\346\234x?\025\221\345=y\325\313>\262^u?\344\004#>\026\021\t?-\267~?\"\226\243<\336Q\240=\020\305\223>8>R?TP\026?a8x?\rc\361=\231\357\324>|\301x?*A\341=\266z\310>u\365s?\332\2307>\341\255\026?\235\366w?\227\031\371==\315\332>J\230z?\346O\251=\223P\233>zfX?\213\345\005?\353t\177?x\311\n<\201\234\t=\363\374\004>\374n\347>}\244}?\r}\025=`\010\020>\n\214\367>\214\270\177?\355\277\216;\272 \216<w\251\213=H#\202>\266\036B?\231\260;?~TH?tA.?\247\221^?\267\205\350>\314\330}?3\244\010=E\025\004>\221\027\346>\307`}?0\026&=#Z\037>\335\215\006?,T\177?\237`+<\266\225)=F\220\">\213\301\010?T\315~?c\236\230<\200\306\225=j\322\212>M]J?\266\227)?8\370d?\036i\301>\222\262p?>4f>\304s2?M:X?w_\006?\213]\177?\222\r\"<>s =:*\032>\204\364\002?\022\335\177?\334\246\013;\255Z\013<?+\n=\024\202\005>\3633\350>\263\311}?\017Z\014=\345\212\007>\3463\353>yO~?\002\326\326<\2563\321=\001\325\273>!\331m?\r\353\206>0\273F?c\3241?\0104Y? \253\003?+\312\177?\326$W;\007pV<\211\241S=N\262H>\211\\!?\r\234n?,\254\201>_\251A?6\242<?@\216F?\23072?\362\230X?\371Y\005?s\215\177?F\264\344;\243\033\343<\323\317\334=\030\001\305>\201gr?v\372M>\261\213$?\250!k?\310V\231>\267\324V?\2211\n?\\`~?d\200\316<\315K\311=\311\202\265>_Sj?\321\266\236>v\007[?\221\r\375>Q\367\177?\223\360\n:\270\335\n;e\222\n<\\f\t=q\312\004>/$\347>\014\226}?\020\010\031=fP\023>\025>\374>\342\361\177?\365\331a:%\250a;<\341`<\020\313]=\214\310Q>H\316&?rxh?V\357\252>\356\273c?\341(\311>\212@t?\'W3>g\356\023?\373\312y?\310\317\301=ix\257>\372\252f?v\232\266>\357\364j?\377\201\232>V\303W?\233\246\007?\334\025\177?\204Mi<\013\373e=Z\021Y>\277\r+?\205\tc?\031}\315>\233\010v?\016A\031>YQ\002?\203\352\177?Z\331\253:\254\237\253;\216\271\252<\267*\247=\236\205\231>@\372V?\242\313\t?2\200~?\026\307\276<\265U\272=\240a\251>5\261b?\304\236\317>e\333v?5\020\r>\374B\363>\274]\177?\026\335!<\267C =k\376\031>\345\325\002?\327\337\177?~\224\000;\351S\000<2\245\376<\320\272\366=^\001\331>k\017z?\254\251\271=\327\324\250>\243Qb?*\353\321>\201\264w?\006k\000>r\240\340>\270\'|?\351_r=R\010d>\235@1?\316\030Z?3*\001?\223\372\177?\226\251\2559\334\232\255:\377_\255;)u\254<\274\323\250=\351\350\232>\306\024X?\331\306\006?MH\177?\261.7<b\"5=\310\037->\312\332\017?\205\022|?^\203w=r\216h>\322\2753?F+V?\227\373\013?\247\301}?\031T\016=\003b\t>\377\346\355>y\270~?\277\361\242<\010\264\237=\344?\223>X\315Q?\245q\027?\207iw?\212\313\004>\320%\347>]\226}?4\364\030=\006>\023>\347#\374>\032\361\177?[On:\345\027n;u:m< \313i=\352r\\>|\375,?\211_`?\255\301\335>ck{?E\364\217=\353\325\205>\335\263E?1\0264?\351\233U?c|\r?\206(}?\242\3313=\001\364+>\t\024\017?\226r|?\3522`=W\355S>\021\021(?\246\352f?c\001\265>\320\007j?;\254\240>\271\200\\?\324\231\364>\017~\177?\223\256\001<\315\247\000=\223:\371=3\346\332>\210\237z?\333q\250=\'\227\232>\031\324W?\234x\007?\273 \177?\246\202^<\013}[=\030\272O>y\226%?\242\354i?D`\241>N\006]?W\223\361>\357/\177?\202gO<`\307L=z\212B>\357\224\035?\255Sr?\360\025O>\3214%?\303^j?\035k\236>\326\315Z?\003U\376>8\375\177?\327\t29\032\0022:(\3431;\215g1<\313{/=#\367\'>\014j\014?\214\227}?\353\251\030=H\371\022>\353\301\373>\000\356\177?|\363\217:\003\313\217;z)\217<\377\250\214=\326\377\202>\327\366B?,\3579?|\216K?\320\314&?9zh?\271\343\252>6\264c?\374X\311>\035Ut?\022,2>\276+\023?\352Az?\216\243\263=\311\341\243>E\332^?\330\327\346>\"\207}?a\260\034=\352\261\026>\254\204\000?\355\376\177?\270\202\2118i\200\2119-w\211:ER\211;\363\276\210<\227v\206=\027E{>\364\234=?O\257D?\230I6?{\363Q?\023\020\027?n\260w?\376\247\000>\306\373\340>\372=|?\267\371l=\341C_>\014\226.?\357\026^?4Y\353>\203U~?\001\333\323<k`\316=\201\224\271>\t\241l?\326=\217>\210UN?\023\037 ?\336\340o?\235\263q>\262\2468?\226\332M?\035K!?2\256n?\263.\201>M-A?\334\237=?\266\251D?\233U6?\030\337Q?AD\027?\251\212w?\300\334\002>\010G\344>v\377|?\256\341==>\0245>\326\016\025?@\022y?\300\267\327=\373\376\300>\200~p?\036\021i>\023\0054?\300\267U?\3321\r?\231G}?C@,=\334\001%>\003k\n?\334M~?\300\241\327<\267\364\321=\207n\274>\210*n?_\273\204>\373\244D?\301_6?\334\315Q?Vp\027?}jw?3\275\004>\221\020\347>;\222}?\241\367\031=\002.\024>gy\375>\237\371\177?\277\037\3149g\013\314:\026\272\313;\324u\312<\343t\305=@k\262>.}h?l\320\252>_\247c?\371\250\311>+wt?\222<0>\274\347\021?\235\375z?d)\235=\353\031\221>w\365O?U\032\034?\352\250s?\337\354;>\345o\031?\322\343u?x_\033>H\314\003?M\306\177?e\227f;\261\307e<\265\216b=\261\006V>\345J)?\263[e?\036\364\276>\367xo?\014^w>e\234;?(zH?=\354-?c\014_?p\256\345>UK}?FV+=\200+$>\217\331\t?\354{~?\301\343\300<\rY\274=\260\006\253>q\313c?*\310\310>\366\026t?\364\2625>Ru\025?+\316x?+\302\337=\260O\307>drs?x\000?>\013`\033?gJt?\330\3072>7\221\023?~\004z?\371\366\272=\177\345\251>.\nc?\376x\315>\374\006v?\370X\031>\032b\002?H\351\177?\021\260\265:\230o\265;jn\264<\016u\260=\351@\241>\035\357\\?!\032\362>\331>\177?N\225@<\315Q>=\365y5>\211P\025?\301\346x?n\333\334=2\n\305>\263kr?{\276M>\323g$?\212Jk?\327D\230>\334\367U?\340\205\014?\264\214}?\300R\033=\353n\025>\257@\377>q\377\177?9\371\0168\371\367\0169\374\362\016:\007\337\016;K\217\016<\276Q\r=\214q\010>\254\206\354>\304\204~?\030\205\274<z.\270=\037\236\247>\220|a?\362\002\327>\362oy?\226\237\314=\277-\270>\263\331k?X\202\224>\270\335R?\330\264\024?\372Ly?\222\304\320=\221|\273>\352\251m?\362.\210>\373\353G?\006-/?\3009]?\356g\360>\324\014\177?\177Er<b\260n=\233\307`> p/?\214\326\\?\272\250\362>\005N\177?#\1771<\337\222/==\014(>9x\014?\t\222}?\373\003\032=o9\024>\243\211\375>\360\371\177?$\001\3029\304\356\301:O\245\301;Y\200\300<S\372\273=^\271\252>\005\230c?\220\010\312>\235\237t?j\357->\rd\020?]\315{?w \204=\2164w>\361\206;?\030\242H?\261\221-?\324\215_?p\253\342>\273\243|?k>T=\364>I>\371\261!?\210Bn?\r\026\204>[\005D?\236\2647?\223\203O?\0376\035?\306\252r?V7J>~H\"?\250\242m?\255`\210>}\032H?[\304.?c\323]?\336\345\354>\034\223~?\315m\265<)i\261=\327\n\242>\365\203]?\337\266\356>5\325~?B\267\224<\037\004\222=\t\233\207>0aG?\311c0?\267i[?c\335\372>\241\345\177?\337\340\322:\004\212\322;\266/\321<?\330\313=*\216\267>\305\177k?\216\337\226>^\324T?\307\217\017?X7|?\316\225n= \260`>\363b/?\021\352\\?k7\362>\004B\177??o=<\211>;=C\2572>6\201\023?C\016z?\362\314\271=\267\361\250>Ieb?^r\321>\313\210w?\237\370\002>\204p\344>k\010}?\260\261;=\337\0273>F\305\023?~\344y?\226\306\276=*\001\255>\301\027e?\372\241\300>\227Pp?.\226k>\352b5?\224wS?\372$\023?\366Ez?\277\'\263=\254{\243>\237\220^?\313\213\350>\352\331}?\017^\010=\316\323\003>b\266\345>\367L}?\377\357*=\305\315#>\331\231\t?I\217~?\371Q\267<\3077\263=\345\210\243>-\232^?OS\350>\204\317}?I\354\n=\0206\006>\316=\351>\014\372}?\001w\000=\033\337\370=\372\240\332>e\213z?\372\332\252=\010\232\234>\372gY?)\032\003?\201\331\177?\336\342\031;]\206\031<\026\026\030=rp\022>\252\376\372>\363\346\177?NW\310:\351\010\310;N\320\306<\027\375\301=$\235\257>\020\302f?@\006\266>\235\237j?u\273\234>\352\201Y?\245\321\002?7\340\177?\005)\376:\332\252\375;$\264\373<N\370\363=#\350\326>Ygy?\201\244\315=e\376\270>\034Nl?\004p\221>\362?P?\342_\033?\212Jt?\327\3052>\351\217\023?J\005z?\257\336\272=\244\321\251>\322\374b?\256\313\315>\205\'v?\262x\027>\313\020\001?u\373\177?vU\2219&K\221:\353!\221;\\}\220<\362\360\215=\210\032\204>\261\tD?f\2537?\236\223O?>\016\035?\025\317r?\240.H>g\014!?3\357n?\014\331~>1l??H&A?&\256=?-\216D?\245\2206?\243zQ?\247D\030?9\314v?\213\361\r>\033\211\364>\221|\177?r+\003<\234\036\002=\324\370\373=\230\370\334>\3714{?\256\201\226=&r\213>$\357J?\177C(?Z\253f?\n\230\266>\213\363j?H\213\232>\261\312W?l\222\007?\251\032\177?\037\211d<\rYa=3\363T>F\252(?d)f?\360\327\271>\021\306l?DB\216>\363vM?\351<\"?\016\257m?\261\013\210>\365\312G?,w/?\031\314\\?Y\345\362>HT\177?\227D+<Dz)=\031w\">]\260\010?\003\322~?pL\226<\203\212\223=w\351\210>\013\232H?\365\243-?\313s_?\325F\343>\371\306|?\033\251K=\301\210A>\342\364\034?\021\346r?\241\344F>\003C ?\266\274o?\354\254s>}\2609?\273\377K?\243\300%?\000\273i?\216\250\242>Y\367]?\323\022\354>\360r~?PT\305<y\223\300=\307w\256>\204\010f?\266\251\272>_8m?\2257\213>\302\271J?T\300(?U\rf?\373\212\272>\266\'m?J\251\213>M!K?\341\315\'?\177>g?2\345\262>\335\306h?\216\356\250>#cb?\225\177\321>\231\215w?\325\260\002>\240\005\344>;\361|?\346ZA=C:8>P\025\027?\250\254w?z\340\000>TP\341>[R|?L\007h=y\342Z>\331\030,?\314\235a?S8\326>o.y?Vb\324=\366[\276>J+o?\355\226{>\232\306=?\003_D?\216\3656?\363\315P?\212\372\031?ptu?\317\305!>57\010?\003\362~?\016p\206<B;\204=9cw>\022\237;?,uH?\206\367-?/\374^?\252\016\346>\372^}?8\207&=\376\301\037>[\325\006?8E\177?\376?:<\372!8=\354\332/>\252\247\021?7!{?\'\342\230=|x\215>\007\303L?~\356#?\256\323k?\355\252\224>\306\377R?\226\\\024?\234\205y?\213\r\312=_\036\266>\213\255j?\227^\234>\3039Y?&\233\003?\374\313\177?k\344O;\230;O<\222\234L=\364cB>\013}\035?\272ir?\252\332M>\256x$?X7k?\202\305\230>\341_V?\303m\013?\211\365}?G\223\001=\325\363\372=\2603\334>\177\376z?9\016\235=\353\002\221>\210\341O?\036L\034?\013}s?\260f>>\213\377\032?c\234t?k\036.>\024\203\020?j\275{?\010\016\206=d\217z>L@=?/aE?\340\3114?wuT?\320\212\020?k\271{?\230\211\206=\033f{>\303\255=?\355\216D?\t\2176?b}Q?\253=\030?\204\321v?\356\242\r>k\027\364>0r\177?\217\201\r<\257H\014=\266z\007>\030\034\353>\231K~?\230\277\330<y\003\323=\242E\275>`\233n?\334\260\201>\000\256A?\267\230<?<\240F?\354\0172?\033\327X?\244\255\004?t\250\177?M\333\256;o\354\255<$;\252=\321\024\234>A\000Y?J;\004?`\270\177?Q\030\217;Xx\216<\013\376\213=Ol\202>pfB?\025\034;?-hI?\260\315+?\007\005b?6\301\323>[Zx?Ve\355=\275\340\321>\300\260w?8\243\000>\237\364\340>><|?iem=\033\243_>\267\313.?\241\310]?\355$\355>v\234~?/\316\260<N\375\254=\242`\236>\330\305Z?[\202\376>\307\375\177?\031<\0169)7\016:i#\016;}\324\r<.\232\014=\236\306\007>\262\213\353>\237]~?\243\332\317<\211\224\312=\261\212\266>\343\353j?t\276\232>7\363W?\'#\007?<4\177?\267!K<\375\234H=\243\311>>\250=\033?\277gt?\013\0351>\300z\022?\t\252z?\327/\247=\350\211\231>\257\375V?M\302\t?\014\203~?[^\275<\267\375\270=\001H\250>l\361a?A9\324>\242\203x?\231\212\350=)#\316>\267Iv?`\177\025>\375W\377>\222\377\177?\026\210\3347\232\206\3348\252\200\3349\354h\334:\n\n\334;\310\217\332<\376\272\324=6\242\276>=Oo?\006\243y>d\307<?\270GF?\315\3222?\351\243W?\272\374\007?\321\000\177?H0~<\270>z=\317\364j>\262\0135?\237\010T?]\251\021?F {?\016\377\230=\022\221\215>\004\331L?\266\271#?\306\016l?B\034\223>\r\257Q?\t\277\027?w0w?}\036\010>\305\014\354>\376q~?\201\313\305<\352\004\301=\335\323\256>\nCf?\0224\271>\327kl?\247\246\220>f\221O?\303\023\035?\022\312r?\215vH>08!?\335\301n?\233\246\200>/\246@?\362\261>?L\225B?\270\272:?r\033J?|0*?90d?SR\306>3\001s?\301^E>\003T\037?/\252p?]\252f>\271\2642?\240\323W?\350y\007?m \177?\257\317^<\373\307[=\377\374O>7\276%?\333\275i?\257\225\242>\225\351]?\245c\354>k\177~?\235)\277<\244\263\272=s\256\251>\033\345b?O^\316>\264`v?U+\024>\232u\375>\214\371\177?\\\210\3169\210s\316:I \316;Y\324\314<@\265\307=\327;\264>z\223i?\212\255\243>\240\264^?\326\266\347>3\262}?w\037\022=\371\350\014>\037\n\363>\007X\177?\007\213\'<l\324%=\264\035\037>:d\006?\230\\\177?t\377\"<R`!=\256\004\033>\003\215\003?\221\315\177?3\224I;y\365H<w~F=\371\337<>\213\t\032?>hu?\316x\">\207\261\010?\262\321~?\220t\226<*\261\223=\213\n\211>\315\270H?\035^-?\035\327_?\033\365\340>\\<|?#^m=\254\234_>\027\310.?\355\315]?\342\005\355>\337\227~?\005\023\263<\350(\257=\311-\240>O\"\\?\225\272\366>\014\252\177?\355\256\253;\247\310\252<.9\247=\271\221\231>\360\003W?L\261\t?8\210~?j\320\272<\316\215\266=\020H\246>\227\216`?\373\245\334>C\036{?\005=\231=\305\305\215>\026\010M?\212H#?W\214l?M\312\217>\370\320N?\371\357\036?\203\013q?[Ma>\027\273/?\023g\\?\004.\365>\354\212\177?\300\274\351;\355\021\350<\351~\341=\337\252\310>O\nt?zj6>\225\353\025?\003~x?\3523\351=\371\245\316>j|v?\"\221\022>V-\373>\275\350\177?\177\004\272:\352\300\271;Y\263\270<G\211\264=\034\237\244>\371a_?\033\261\343>\246\336|?|\343E=\376S<> \261\031?\265\257u?\276^\036>y\340\005?\332u\177?\240\333\t<\254\262\010=\307\"\004>\235+\346>\325d}?0\030%=\255p\036>\333\354\005?\221s\177?\274!\014<\350\356\n=\2018\006>hA\351>\260\372}?\245N\000=r\223\370=\262g\332>\237zz?\275\334\254=\222E\236>1\261Z?z\367\376>\357\376\177?\341\251\2108\231\247\2109{\236\210:\007z\210;\203\350\207<K\247\205=\305\334y>\370\344<?}\017F?\033N3?%\337V?B\025\n?Ti~?\350\022\312<\332\026\305=T\037\262>\023Oh??\375\253>1nd?\320\315\304>\324Or?\344LO>\210U%?\2518j??h\237>\325\215[?\340\016\372>\262\334\177?\016&\r;;\330\014<G\242\013=\255\337\006>\3437\352>\217%~?\362\200\353<\302\273\344=\342/\313>\313\032u?\375\347&>\222\263\013?N\334}?\210\307\007=GG\003>\212\345\344>h!}?\350\2265=\374\211->\n!\020?j\357{?\003\002\200=\206\003p>\337\3017?}lO?so\035?>vr?\250\'M>\206\r$?\307\260k?\377\225\225>\014\304S?)]\022?\021\273z?_%\245=9\324\227>g\234U?\021{\r?\024)}?\332\2663=G\324+>\365\376\016?}||?\220\312]=\032\310Q>\004\316&?\304xh?A\355\252>\213\272c?\2011\311><Dt?v!3>\202\313\023?\244\340y?\n<\277=\265`\255>\221Ue?\370\032\277>\257\214o?-Kv>\t\016;?\035\202I?&\222+?PVb?n\316\321>&\252w?\372\005\001>q\210\341>\303_|?\354\305d=\331\376W>Vo*?\036\335c?\337Y\310>2\347s?\202g8>E2\027?\267\227w?\234\031\002>6$\343>/\277|?\350\216M=\005>C>\"\004\036?\037\354q?\'\333T>:\234(?:;f?\001f\271>l\207l?\254\353\217>5\356N?\351\247\036?\336Pq?.x]>\000\222-?c\215_?\026\256\342>W\244|?\226\030T=\n\035I>c\235!?/Xn?\312\200\203>\204tC?7\3478?\035hM?\320`\"?\220\210m?c\023\211>\005\301H?oK-?\224\361_?\204V\340>\204\025|?\244\311v=!\353g>\226d3?\023\273V?\032w\n?\352I~?\t\224\331<\247\314\323=G\345\275>6\356n?\302\346~>\024s??\242\030A?\356\311=?\226XD?G\0037?_\266P?\0146\032?\351Cu?\266\215$>>\034\n? g~?r)\313<\234\037\306=\377\364\262>a\320h?>\260\250>\2628b?\\\204\322>M\353w?\322l\372=\273\315\333>\323\341z?\200\177\240=\214\353\223>\274^R?\262\374\025?Frx?r\225\352=\301\266\317>s\344v?\235\211\014>\324\177\362>\273I\177?\350\3025<\263\2763=o\333+>\267\003\017?Bz|?^U^=\333CR>\002\027\'?\355\037h?Y0\255>Q6e?\307\340\277>`\360o?\267\332p>\00248?\322\244N?\231\\\037?\306\241p?\307 g>\274\3652?ZlW?\263\224\010?z\331~?\247\231\222<\n\372\217=\341\332\205>\231\270E?\342\0134?\256\254U?\200O\r?Q;}?<A/=\230\301\'>\016F\014?n\245}?\356A\025=\221\321\017><=\367>@\263\177?\344R\231;<\233\230<v\303\225=\322\317\212>\355ZJ?:\235)?\013\361d?b\226\301>\254\310p?\303\374d>\366\3071?_GY?0u\003?-\320\177?\206(?;\311\231><&b<=!\2703>a-\024?\203\243y?\251\200\306=@C\263>c\377h?\006|\247>\000ea?r\222\327>\225\235y?\0205\307=\237\324\263>7Vi?OA\245>]\325_?\230\377\340>\347>|?=\300l=\r\021_>`y.?\240@^?\321c\352>\001-~?\227\325\347<\376E\341=z~\310>\027\367s?.\2017>\262\236\026?\\\001x?-\327\367=\017\331\331>kPz?&\350\261=\313s\242>\325\320]?\327\364\354>W\225~?cS\264<8[\260=\206+\241>F\337\\?\027v\362>\264H\177?\262\3106<\252\2764=\337\304,>\226\236\017?!0|?\331Up=\310;b>a@0?-\237[?\226\253\371>\357\327\177?:* ;\005\306\037<\'7\036=\245\032\030>\273\202\001?\337\366\177?\367\010\022:#\364\021;\354\240\021<\216U\020=\210?\013>\t\240\360>\235\023\177?\236\210k<\315%h=\205\375Z>T(,?r\210a?\204\272\326>\253Xy?\345a\317=\367a\272>m\021m?=A\214>\017\253K?K\211&?\320\313h?\'\316\250>\025Mb?(\007\322>\222\276w?\311\250\377=\223\276\337>\224\357{?\347\371\177=\253\372o>+\2757?\260tO?\031[\035?\357\210r?\032\034L>\347l#?*dl?\253\332\220>\233\276O?;\243\034?\214/s?\357\303B>\214\270\035?\2552r?B\355P>\250L&?\234\024i?\260\360\246>Y\004a?\241\335\331>\307Qz?\202\276\261=bQ\242>\252\267]?S\210\355>\364\252~?\361\242\251<\255\037\246=\n\246\230>|FV?D\262\013?\310\334}?\214\251\007=H+\003>\346\273\344>\220\030}?\"\3007=\336\201/>*m\021?GA{?\227\006\225=\202.\212>\327\306I?\374\363*?$,c?\246\246\314>G\263u?9*\036>0\274\005?o|\177?,M\003<\313?\002=\3746\374=r\'\335>\303A{?\263\367\224=\310!\212> \273I?\374\016+?\331\007c?m\207\315>\256\014v?\360\004\031>6\'\002?u\355\177?\206P\224:\217%\224;\031z\223<m\322\220=\300\224\206>qiF?\254\2102?O\031X?\\\272\006?\360J\177?\316\2174<d\2222=e\311*>_M\016?\311\315|?\000\000J=\300\t@>\030\006\034?\252\272s?-\354:>*\315\030?\217cv?\033\001\024>\2229\375>L\370\177?\026i\3669pK\366:\365\324\365;\323\374\363<\203\270\354=\354[\321>\240\200w?\255r\003>\022&\345>\002/}?\316C2=\250\201*>\213\035\016?\006\343|?K\322D= ];>\325\024\031?\263+v?\366:\027>O\345\000?\312\374\177?FdM9\371YM:\3130M;T\214L<\224\376I=x\010@>K\005\034?^\273s?\006\342:>\270\306\030?\215hv?2\267\023>q\320\374>\332\365\177?\247\\\":\351B\";\020\334!<\266B =\177\375\031>@\325\002?\345\337\177?\003Z\000;\251\031\000<\2052\376<CO\366=\265\257\330>p\366y?\234\243\274=\205C\253>\305\363c?o\314\307>f\251s?\343\345;>yk\031?U\347u?\270+\033>:\250\003?\200\312\177?\237\321U;\010\037U<VYR=\353\213G>6\251 ?\013Uo?GRy>\375\235<?@\226F?\363%2?\235\264X?Q\r\005?\350\231\177?\223\335\313;\341\230\312<4\226\305=#\206\262>w\215h?\007f\252>d`c?rb\313>\235/u?\024\267%>\264\345\n?\377$~?\226\307\353<V\376\344=\225c\313>\0250u?;\260%>\022\341\n?\223&~?\274\000\353<\351B\344=\001\322\312>\354\363t?\230 )>\2251\r?\265G}?F9,=v\373$>\254f\n?EO~?\216\357\326<\343K\321=C\350\273>a\343m?\251\244\206>\207xF?vg2?\261MX?\373)\006?\005h\177?R\240\027<\0309\026=\250\266\020>Q\206\370>\037\310\177?\333T_;\006\222^<\000\214[=s\307O>i\236%?O\343i?\375\235\241>\3413]?\"\212\360>\372\020\177?\021\'n<\337\260j=a>]>1q-?\013\274_?+\227\341>Cc|? \354c=V=W>Q\377)?\346pd?\326\274\304>\371Gr?#\275O>H\230%?\202\352i?Sn\241>\262\020]?\356V\361>\022)\177?19V<#lS=l\202H>i?!?]\272n?\204\332\200>\312\331@?\207I>?5aC?\345\0179?\254\037M?\272\017#?\310\312l?4\"\216>qZM?\337\201\"?\373dm?\323\006\212>J\242I?+H+?\265\272b?(d\317>0\305v?\375Y\016>\000 \365>\274\211\177?\264\032\354;2g\352<+\262\343=}a\312>\373\304t?I\316+>\372\372\016?Z~|?~V]=\227`Q>\340\220&?\256\302h?\367\t\251>\305ub?\366\014\321>\302cw?\262!\005>a\245\347>\342\256}?\361\357\022=\210\252\r>j\"\364>5s\177?F}\014<\341H\013=]\214\006>\033\275\351>o\020~?\303\350\365<\010\207\356=\035\277\322> \000x?K\374\367=1\365\331>\312Xz?\023\350\260=\025\240\241>l5]?&\201\360>\344\017\177?<;o<\376\274k=\265+^>\300\367-?\333\373^?\233\020\346>^_}?\225n&=\\\253\037>\310\305\006?\207H\177?4\3656<-\3524=\213\354,>\336\270\017?B#|?\305ts=W\374d>\272\3071?\274GY?.t\003?I\320\177?\023\271>;\374*><\355\365;=\331U3>\217\355\023?\202\313y?\271\277\301=dk\257>\310\242f?\006\317\266>\010\023k?\256\270\231>\027#W?\206\\\t?u\241~?\261U\256<\354\237\252=\323h\234>\272AY?\360\204\003?u\316\177?:\004F;\020kE<\030\nC=\222\3009>\231\016\030?\n\365v?\006\223\013>\215\031\361>\374!\177?sC]<}FZ=\273\244N>Y\361$?\355\254j?\265b\234>\367<Y?6\222\003?\375\314\177?\242\343K;?AK<\275\273H=_\345>>\rO\033?\353Xt?\276\3641>\250\007\023?sWz?\004\021\261=\363\301\241>_N]?\267\357\357>\366\375~?\002\203\200<\320\375|=\205]m>\363W6?\036\333Q?nN\027?@\203w?lK\003>\265\353\344>\267\"}?>E5=\216?->\320\357\017?\024\010|?+\013z=\216\307j>3\3634?11T?\273>\021?oZ{? \377\221=\300\226\207>)]G?\306l0?\036\\[?\r+\373>\247\350\177?\263\264\272:\235p\272;\016a\271<\"/\265=\254\'\245>.\303_?vl\341>\027Y|?\312df=6oY>\307C+?\244\300b?\212?\317>C\267v?\256(\017>\037J\366>\265\241\177?\242P\274;\225;\273<\024\364\266=\025\234\246>`\311`?\316B\333>>\272z?\254>\245=q\351\227>\252\255U?\335L\r?j<}?\233\374.=\325\202\'>\330\033\014?\203\265}?YO\021=\251\'\014>\237\361\361>m:\177?\352\372D<\245\234B=\211]9>t\317\027?D$w?:\324\010>]\027\355>v\232~?t\313\261<\234\357\255=\345)\237>\271^[?-\034\373>\027\350\177?\2738\277:Q\361\276;z\324\275<_n\271=H\244\250>\2100b?s\266\322>\017\375w?/X\370=\320:\332>hmz??q\256=z\225\237>\357\257[?\227K\371>\014\323\177?\230\2603;x23<\271<1=i\221)>\025}\r?;(}?\t\3543=\312\004,>.\037\017?Sm|?)za=\252\020U>{\273(?\201\023f?\236c\272>S\022m?\035;\214>\205\245K?e\226&?\007\274h?\2025\251>T\223b?\372V\320>\200 w?J\014\t>\200i\355>}\246~?\035\330\253<I=\250=:k\232>E\261W?\"\330\007?\337\t\177?\2244u<\035\211q=\346Jc>l\3270?\t\272Z?Q\305\376>}\376\177?9g\3018\250b\3019eP\301:h\007\301;P\344\277<\234e\273=\351?\252>\340Fc?\326\000\314>Wpu?\361\001\">T`\010?Z\347~?%\271\213<\021W\211=G!\200>C!@?j\275??\350\204@?\035\365>?m\021B?\n\314;?C!H?\031\265.?\254\351]?\035c\354>V\177~?\3653\277<\200\275\272=\203\266\251>\213\352b?\266<\316>\251Sv?S\354\024>\231\207\376>\327\375\177?+Z\n9\177U\n:\317B\n;#\370\t<\265\316\010=\360<\004>mR\346>\244l}?\206.#=A\256\034>\014\265\004?^\247\177?\325\005\261;\003\021\260<HH\254=!\312\235>\266RZ?\365\206\000?\343\376\177?\377I\2168\207G\2169\244=\216: \026\216;gx\215<\370\006\213=\346\226\201>_\224A?G\315<?\211<F?[\3532?\341|W?\211g\010?v\345~?\354\250\214<\242>\212=\257\351\200>\332\350@?\375*>?\231\234C?\237\2228?\031\376M?\243\364 ?\266\007o?\001\205}>\367\300>?\334wB?\351\367:?\351\252I?U4+?\204\325b?\251\276\316>\354\205v?D\004\022>\031d\372>\212\340\177?\310\220\373:.\025\373;\251(\371<\250\224\361=\200\025\325>7\316x?\301\300\337=\225N\307>\346qs?\210\007?>yd\033?\234Ft?\357\3762>\016\265\023?\177\356y?\261\225\275=\345\010\254>\326ud?\324\235\304>\2329r?[\212P>\023\022&?\204Zi?\377$\245>H\301_?\327w\341>\316[|?\351\273e=M\331X>r\355*?\3514c?Hp\314>l\235u?\246k\037>\355\231\006?\261Q\177?\345\327-<\257\377+=\265\306$>\351B\n?\321Z~?\336<\321<\273\344\313=)\230\267>m\205k?\213\271\226> \265T?\213\342\017?\255\016|?\332qx=\r`i>\01604?\305qU?\003\355\r?I\370|?\032\242?=\345\2526>\t\025\026?\203ax?\014\216\354=F;\321>\266tw?\234$\004>U.\346>ae}?\316\365$=\021Q\036>\006\327\005?\225w\177?\253\"\010<\030\001\007=\365\215\002>\255\321\343>\325\345|?\275\"D=i\276:>\032\260\030?\010zv?d\264\022>\247_\373>\231\352\177?W+\253:\035\362\252;\321\r\252<\036\206\246=\327\373\230>\247\213V?~\367\n?\353\036~?>\306\356<\224\320\347=Q\223\315>^\021v?\310\277\030>\265\366\001?\223\360\177?q\273v:\376\177v;\243\222u<[\344q=_\233c>%\0041?\247uZ?B$\000?\353\377\177?\377S\2446\312S\2447\367R\2448\253O\2449|B\244:\312\r\244;\206;\243<\337\372\237=\254{\223>\025\000R?\312\357\026?\243\307w?^\231\376=\310\362\336>\227\273{?rF\206=o\361z>Sr=?E\001E?B\2315?\273\034S?m\021\024?\027\265y?\003j\304=\263\223\261>\323\371g?#(\256>\260\325e?\207\355\273>.\346m?m\221\206>JfF?\234\2172?[\016X?\204\330\006?\213D\177?\357\353:<\000\3128=\320s0>\363\013\022?E\351z?\274\232\237=\211*\223>2\273Q?\006\240\027?kGw?d\310\006>\225\025\352>\264\037~?\215c\356<\243s\347=fK\315>\365\364u?\341b\032>\032\034\003?Q\331\177?\262\243\032;IF\032<f\322\030=\276\036\023>S\367\373>\272\357\177?Q%\202:<\004\202;,\200\201<1\350~=\030\013o>\252=7?\310QP?\"3\033?\262pt?\317\2320>\201%\022?\322\332z?\244V\241=\341\240\224>Y\367R?pr\024?\255wy?\312\264\313=\303q\267>\257ok?\231K\227>\355,U?\212\244\016?]\246|?\205\232S=\004\254H>\265X!?\n\240n?\233\220\201>(\216A?\004\332<?R$F?w 3?1(W?\240N\t?\202\245~?\\T\254<Q\264\250=\254\316\232>\n\000X?\345\377\006?\006<\177?\007dC<\201\017A=\373\3657>\225\351\026?\025\314w?1\024\376=\256\216\336>\227\241{?dj\211=\0032\200>\3711@?\347\233??\225\307@?hn>?X\031C?\346\2469?\003\021L?\225\227%?U\353i?\342h\241>\255\014]?Nn\361>\276+\177?^\222S<\364\326P=\0241F>\027\325\037?\314*p?a\250m>\024\2006?\335\226Q?\274\374\027?s\002w?\222\313\n>\026\367\357>\342\376~?\257\r\200<\203\032|=@\226l>\350\3545?2\220R?;}\025?\334\310x?}b\340=\355\314\307>\236\251s?\301\342;>}i\031?\350\350u?z\024\033>\007\230\003?V\314\177?l}N;\336\326M<\327@K=\330*A>p\272\034?\277\032s?\\\357C>\272q\036?\227\204q?\337\232Z>\327\357+?5\326a?\306\337\324>(\274x?\371\341\341=\031\370\310>\232+t?J\2074>\250\263\024?\277My?D\255\320=\003j\273>\372\237m?\ns\210>\246+H?\255\235.?\323\013^?\206\232\353>\375_~?\240\257\316<\247x\311=\321\246\265>Rhj?\216+\236>Q\235Z?\022h\377>\246\377\177?\255T\2647\257S\2648\267O\2649\327?\264:b\000\264;A\003\263<\325\031\257=J!\240>\363\030\\?u\360\366>\347\255\177?\273\374\243;\243*\243<\251\352\237=\376m\223>{\364Q?\203\r\027?G\262w?[\214\000>b\322\340>\3543|?Sjo=\327ka>(\314/?\232M\\?\r\301\365>\006\227\177?\303\236\321;zG\320<\330\373\312=\213\335\266>U\033k?#\201\231>\251\366V?b\325\t?5}~?OA\300<?\276\273=O\210\252>Mwc?\032\324\312>\313\364t?\335\023)>\016)\r?8K}?S]+=\3661$>\363\335\t?\222z~?\304\216\301<\000\374\274=\235\213\253>j#d?\203\242\306><%s?jXC>v\024\036?\313\334q?i\265U>\221\033)?\243\230e?\244q\275>J\262n?e\022\201>?\021A?\364\330=?\220;D?7A7?\247KP?\205B\033?\233ct?QY1>)\242\022?.\223z?k\354\251=+\323\233>\362\314X?\327\311\004?I\244\177?\030-\267;\365&\266<\031\032\262=\020\235\242>\367\356]?\013D\354>\220z~?\376\217\301<*\375\274=\220\214\253>\013$d?\225\236\306>y#s?\304qC>#$\036?\n\316q?Q\207V>\260\225)?\330\372d?\212X\301>u\252p?\200\246f>\231\2622?\376\326W?\253p\007?\224\"\177?:\254\\<X\263Y=@!N>\336\242$?(\007k?$\010\232>}bW?\245\257\010?5\322~?\3103\226<\302r\223=\"\325\210>\037\207H?\336\316-?|6_?$\264\344>\351\026}?\226\'8=\007\340/>\004\253\021?]\037{?\025\033\231=\351\250\215>R\356L?\207\206#?\302Gl?\001\233\221>\reP?\300\002\033?\256\231t?\335E.>\032\235\020?\361\257{?\252\256\207=\351b}>\277\257>?\233\231B?\300\261:?\347+J?[\n*?gbd?\320\027\305>\370qr?\311dM>$2$?p\207k?\007\254\226>\002\252T?\367\377\017?\005\000|?\336\376{=\002~l>\335\3375?*\246R?\204D\025?\300\356x?\262\351\333=|L\304>\303\023r?H\246R>\372P\'?\351\330g?\343\375\256>\252]f?\325\211\270>=\rl?\234&\223>\333\267Q?\216\250\027?\036Aw?Z&\007>\370\237\352>\0337~?\361\332\342<\267\222\334=\'\321\304>_Qr?\3246O>fH%?\370Gj?\223\002\237>\364@[?\022\306\373>#\356\177?L\332\216:q\262\216;\\\023\216<\220\234\213=$\030\202>\301\023B?<\307;?=*H?\333\240.?0\007^?\303\265\353>Qd~?\205\214\314<\003q\307=\347\004\264>\351ri?K\204\244>\322N_?@#\344>\261\367|?,\307?=\177\3146>\245*\026?\222Rx?\221O\356=\217\224\322>\r\361w?T\300\371=^K\333>\263\274z?M\363\244=9\252\227>2zU?\203\326\r?\014\002}?\026@==\233\2014>\372\257\024? Py? e\320=\2200\273>%\201m?-F\211>+\360H?\032\340,?\314\210`?\361\310\334>\346\'{?S\024\230=O\311\214>\321%L?\031f%?P%j?\240\350\237>v\356[?\323\344\367>J\276\177?\262I\203;\t\303\202<\263\254\200=\035.q>&`8?-WN?\014\033 ?\351\344o?\026{q>\330\2108?b\017N?}\312 ?\0033o?\232+{>\370\217=?K\310D?\356\0236?XNR?\337&\026?/Ux?\352\000\356=4X\322>\224\333w?\376C\374=@1\335>nD{?{\245\224=\203\333\211>XzI?\376\243+?\377=b?\320c\322>\270\337w?\362\307\373=\274\323\334>\336*{?\365\270\227=\177{\214>\257\337K?\260\014&?\355`i?\311\372\244>K\243_?4+\342>\031\206|?ft[=`\262O>\343\221%?\005\362i?\233<\241>\354\353\\?\245,\362>\332@\177?\370\226><f_<=\242\2653>\302+\024?\211\244y?\224a\306=1*\263>[\360h?\246\336\247>\016\251a?\236\363\325>\357\027y?\261\013\327=\035w\300>W;p?d\300l>\222\0036?\372iR?\277\337\025?\034\206x?\355?\350=o\351\315>-3v?~\314\026>l\227\000?\232\376\177?7!\2638L\035\2639\242\r\263:\004\317\262;;\325\261<\366\370\255=\2501\237>\230d[?\243\372\372>\312\346\177?\001\232\311:\237J\311;\023\016\310<c+\303=\377\221\260>\354Zg?\256-\262>\316Wh?U\304\253>\312Hd?m\270\305>~\273r?\256GI>E\267!?\364<n?\177<\204>\215*D?ye7?\367\014P?\223\337\033?O\334s?:\0059>\027\227\027?\003Nw?\026f\006>\250\204\351>\222\006~?I\304\372<)\027\363=\212<\326>\317/y?\2548\324=\357:\276>V\032o?o\202|>,>>?NwC?U\3418?\221rM?\205G\"?\263\243m?\212Y\210>\322\023H?a\323.?j\275]?\245f\355>\023\246~?\227\014\254<\220o\250=<\225\232>\225\322W?\307|\007?\301\037\177?Jz_<\361m\\=\036\221P>\025\026&?\277Ui?eD\245>\216\327_?{\362\340>\271;|?\270\205m=\252\277_>\314\333.?\030\261]?\316\256\355>{\260~?\200\346\246<\002\200\243=zr\226>\232zT?B}\020?j\300{?3\261\205=\000\356y>\312\355<?\262\376E?\332r3?\'\244V?3\265\n?_5~?\275\265\343<^a\335=6s\305>\347\233r?s\014K>C\311\"?\257\027m?\223\026\214>s\204K?\200\344&?x]h?b\237\253>t0d?\343P\306>\215\000s?\022hE>\275Y\037?\224\244p?R\371f>\025\3402?\316\216W?\2026\010?1\362~?@Y\206<4%\204=\317<w>6\213;?&\232H?\267\243-?%t_?\302D\343>\201\306|?-\306K=\356\242A>*\005\035?R\327r?_\270G>U\304 ?Q9o?\356\323z>Gc=?\'\036E?\356Z5?\344\204S?<\002\023?\254Zz?~\256\260=qp\241>C\022]?\322M\361>\007(\177?\334BW<\327nT=ZjI>O\314!?\302&n?Y\325\204>\374\275D?\025*6?\342(R?$\207\026?\372\021x?\212\344\365=\242^\330>p\335y?\231\235\277=\010\260\255>\254\210e?\373\326\275>\323\346n?-M\177>w\246??\224\262@?\346\230>?V\306B?\210T:?Y\326J?\203}(?&bf?\"m\270>5\375k?\333\222\223>\272\023R?m\275\026?\225\353w?]d\372=W\307\333>\004\340z?\003\267\240=Z\032\224>9\206R?\363\226\025?\214\267x?\033m\342=\201d\311>\010Zt?\222\3441>\033\375\022?\270]z?KQ\260=O#\241>0\331\\?j\231\362>lL\177?]\0263<;!1=Lx)>Il\r?K/}?\36212=Zq*>\253\022\016?\320\347|?+\247C=\252N:>\020i\030?\210\260v?\224\214\017>\373\331\366>N\254\177?C-\247;\352R\246<m\362\242=v\373\225>>\030T?T\200\021?\3226{?\323H\226=\245A\213>\360\302J?\343\252(?\234(f?\351\334\271>\312\310l?\276/\216>|fM?\301d\"?U\204m?]0\211>\355\333H?7\016-?\377G`?aO\336>\375\220{?Rk\213=\233\355\201>\343\351A?\224\035<?}\210G?\007\0140?\364\355[?\275\347\367>z\276\177?e\353\202;~e\202<$R\200=\270\217p>E\0148?\204\352N?\003\261\036?$Hq?\301\363]>\020\330-?P)_?\200\002\345>\207\'}?\377\0274=\343,,>\3159\017?\264`|?O\213d=\310\312W>9Q*?\377\004d?\310`\307>\364ys?D\223>>\211\033\033?\271\204t?;w/>-f\021?\025E{?a\221\224=T\312\211>zjI?i\310+?@\014b?\365\224\323>\007Kx?c2\357=\177B\323>O.x?\247\221\362=\260\326\325>k\016y?\272+\330=\200Z\301>k\253p?\371\230f>*\2532?\304\342W?WP\007?\010*\177?\021EU<a~R=(\255G>~\275 ?Q@o?\224rz>\2251=?V}E?\312\2144?\002\332T?\323\200\017?\232>|?\372\322l=\240!_>\271\202.?\n3^?\322\263\352>j:~?H9\341<\032\010\333=?\233\303>\236\300q?=FW>z\004*? jd?W\347\304>\240[r?Q\244N>\032\361$?6\255j?\316`\234>|;Y?W\226\003?\207\314\177?\365\273M;\236\026M<i\205J=\374\201@>-Q\034?\222xs?G\247>>\030(\033?\023zt?O\0220>\004\314\021?\024\r{?\316M\233=\344\206\217>\316\225N?z\201\037?\214}p?\203\036i>_\0144?\343\253U?\241Q\r?o:}?\247x/=D\364\'>\036h\014?K\230}?\354z\030=\310\315\022>\342\203\373>\343\353\177?O\334\240:\305\251\240;\034\340\237<Z\301\234=\323\301\220>\006\251O?\372\330\034?E\377r?|zE>\re\037?|\231p?t\225g>\26053?B\006W?\375\252\t? \212~?\355\336\271<N\247\265=\216\212\245>6\t`?\273\310\337>#\362{?[[\177=\351oo>_s7?\344\364O?\304\033\034?\251\247s?\n\377;>d{\031?\254\332u?B\346\033>\031*\004?\241\272\177?\016\230\212;\376\001\212<\315\256\207=$c}>\335\257>?`\231B?;\262:?\005+J?f\014*?\267_d?\252(\305>\270yr?\351\365L>\263\357#?S\322k?\021\264\224>p\007S?\265H\024?<\222y?\353\215\310=*\352\264>2\372i?q\006\241>\307\303\\?\230\025\363>0Y\177?\264c&<\037\263$=\277\023\036>\247\254\005?4\177\177?\374\212\000<\237\021\377<~ \367=\207N\331>\325&z?\342\336\266=\255\212\246>6\275`?[\214\333>E\317z?C\271\242=c\313\225>c\360S?\370\350\021?\354\374z?\227>\235=\335+\221>\002\005P?{\363\033?\362\312s?\235\000:>d7\030?E\326v?L\\\r>1\261\363>\204h\177?\374!\027<\027\275\025=\275C\020>W\341\367>\022\276\177?\222\272\203;\0023\203<\030\031\201=\234\353q>?\3048?8\246M?Y\312!?\324(n?\032\307\204>F\260D?\206G6?\376\366Q?\023\007\027?\351\266w?\005G\000>~j\340>s\032|?m\227u=\272\335f>\360\3202?\337\246W?\235\364\007?\327\002\177?\001/|<OMx=\361?i>\224\0364?A\216U?\346\240\r?\016\031}?p\2417=\355e/>\314Z\021?CK{?\374\322\223=}\'\211>\260\323H?\370 -?\222-`?U\356\336>q\272{?\001j\206=8/{>\320\221=?\277\304D?\214\0336?wAR?\373G\026?2>x?7\264\360=\352i\324>=\224x?&\226\346=\341\237\314>\220\260u?/R\036>\314\327\005?pw\177?\250F\010<{$\007=\003\257\002>\353\002\344>\243\360|?\343\177A=\302[8>\300*\027?)\235w?1\310\001>\263\252\342>\220\243|?\365HT=gHI>\265\267!?~<n?\255?\204>\240-D?\354^7?M\030P?6\303\033?\367\364s?\371\2377>s\262\026?_\363w?\273z\371=\274\026\333>\220\255z?\232\303\246=R/\231>\013\265V?r\207\n?\216D~?\0369\334<\214M\326=\325\340\277>f\360o?V\332p>\31738?+\245N?\274[\037?\236\242p?\350\024g>9\3572?\271vW?^x\010?\006\341~?\t\334\216<B^\214=[\277\202>\316\267B?\327r:?\014\237J?\251\376(?\270\275e?\004\206\274>\3546n?\013f\204>\262RD?\334\0177?\273\240P?\232l\032?\013\027u?\341\036\'>\215\330\013?\263\316}?\250\037\013=\361e\006>r\204\351>\210\006~?\377\310\372<\226\033\363=\352?\326>\3510y?V\027\324=\201 \276>\276\014o?&?}>\256\235>?\372\274B?\016h:?\276\262J?\265\320(?v\370e?\020\020\273>\250om?\324\275\211>\356^I?\343\342+?\372\347a?\023s\324>[\227x?/8\346=\017W\314>@\223u?&\001 >\312\000\007?\324;\177?\367\225C<@@A=!\"8>\334\005\027?\311\267w?\3569\000>\337V\340>\232\025|?5\304v=Z\346g>\371a3?F\277V?\271k\n?\241M~?\016\277\327<{\020\322=\231\204\274>-6n?0k\204>\252WD??\0057?\374\262P?\226>\032?\351<u?K\364$>\321a\n?\331P~?H(\326<\r\217\320=\365Q\273>\024\223m?f\313\210>\016~H?g\343-?\017\031_?$c\345>\303;}?V%/=\025\250\'>\3474\014?\376\253}?\245\245\023=*S\016>&\026\365>\345\210\177?\206\306\355;\324\014\354<\226?\345=<\226\313>\335Du?\274\177$>\302\022\n?\036j~??\257\311<\032\270\304=\314\322\261>l h?\036-\255>:4e?\377\355\277>\376\366o?\026~p>\354\0028?\342\372N?\241\210\036?\306nq?X\320[>\320\240,?N\341`?\371\261\332>Z\220z?\021C\252=m\033\234>j\005Y?\361,\004?B\272\177?kU\213;\300\275\212<7d\210=\305\235~>hN??CaA?\3345=?(uE?\213\2364?\325\274T?#\316\017?\307\030|?\033\377u=\3678g>\000\0033?8WW?j\316\010?\314\311~?/^\232<\203u\227=\010B\214>\306\253K?\232\207&?\332\315h?\314\300\250>\373Cb?\016?\322>\231\322w?\006Q\375=\336\373\335>\347z{?f\025\216=\3569\204>\022(D?\301j7?\322\003P?t\366\033?Y\310s?-&:>MO\030?$\304v?\215i\016>x6\365>\243\213\177?\304P\350;\037\253\346<`,\340=\252\242\307>\010\227s?V\357<>=\023\032?Y`u?\246\354\">\217\000\t?\330\273~?\321F\241<\000\032\236=}\345\221>4\245P?Sa\032?Y u?\256\226&>\276|\013?,\360}?\004\345\002=[l\375=p\020\336>]\200{?\324l\215=\262\250\203>O\233C?[\2258?E\371M?g\000!?\226\373n?B-~>\314\025??\017\321A?\257P<?R(G?q\3420?6\251Z?\261$\377>D\377\177?r\337;8K\335;9\255\324;:9\262;;\233(;<J\0059=\300\2510>J/\022?D\325z?:\001\242=\2100\225>\211oS?\3639\023?c9z?\013\250\264=s\270\244>\016t_?JE\343>\240\306|?\275\276K=<\234A>\000\001\035?\030\333r?/\202G>E\243 ?\032[o?\353\375x>\256r<?,\350F?\326p1?q\316Y?<\373\001?L\360\177?\2652{:\026\365z;\022\377y<\211.v=\262bg>\341\0313?\2672W?\3671\t?\314\255~?\322:\250<h\306\244=\216\204\227>x[U?\206(\016?,\336|?=\001F=\336n<>\034\302\031?\r\242u?\230\'\037>\013k\006?;[\177?\373Z$<\350\264\"=Q>\034>Pg\004?o\262\177?\247\362\232;\0257\232<\343O\227=\370!\214>\304\216K?&\314&?\010{h?v\336\252>\266\260c?\312n\311>k^t?\310\2441>v\323\022?Svz?N`\255=\345\262\236>z\004[?\212\036\375>\264\367\177?i\302\004:2\261\004;kl\004<kZ\003=!H\376=\272\265\336>\304\253{?\276/\210=\313B~>\244 ??\254\273A?\244|<?Z\325F?\203\2321?\362\215Y?\374\257\002?\034\343\177?\211\003\347:M\233\346;\326\373\344<J\225\336=ad\306>U\ts?\330\351D>\036\014\037?@\360p?b\316b>\037\2220?\204#[?\334m\374>@\363\177?\357\371K:N\321K;\010/K<\372\251H=Y\325>>\001E\033?}at?\030x1>F\266\022?r\207z?\000T\253=\326\376\234>\031\266Y?\203?\002?\311\353\177?\n\255\241:\374y\241;G\256\240<t\207\235=\207i\221>W:P?\360m\033?\200>t?\305t3>\245\001\024?\371\276y?J=\303=|\240\260>\351cg?\233\363\261>r4h?\307\252\254>\240\337d?;\004\302>\014\376p?\222\013b>v%0?\270\307[?9\303\370>\237\313\177?eZQ;1\257P<\274\006N=\317\251C>\306F\036?X\255q?0XX>\364\242*?\201\230c?\216\005\312>X\236t?\350\001.>Bp\020?\032\307{?C\342\204=\377\205x>\0065<?i\\G?qn0?\230Y[?u9\373>2\351\177?Nb\266:V!\266;/\036\265<\021\035\261=\353\313\241>\266U]?\352\304\357>\220\370~?\2560\203<\327\026\201=\254\347q>+\3028?\350\251M?g\301!?E2n?\030\206\204>\241qD?\301\3156?5\022Q?\344M\031?\307\376u?\003\322\031>\326\266\002?\210\342\177?f\242\353:\3645\353;\274\205\351<\226\335\342=\026\274\311>G\177t?\200\306/>A\232\021?\232({?\264\376\227=\345\266\214>=\025L?\210\215%?\"\367i?\276\032\241>\326\322\\?B\276\362>BP\177?\205E/<\205e-=_\016&>\266 \013?\261\020~?|\310\365<\261h\356=\326\247\322>\343\367w?\\\363\370=O\260\332>\336\217z?\360Q\252=\322\'\234>\026\017Y?\007\022\004?\272\275\177?\244i\204;\252\340\203<,\301\201=H\021s>\324^9?\212\222L?\251b$?iPk?u\035\230>\354\327U?\235\333\014?\264j}?\013\250#=\024\036\035>\232\002\005?\230\233\177?\217\201\310;yG\307<xn\302=\004\371\257>\242\373f?\032\224\264>\232\307i?CU\242>\201\272]?\264w\355>\215\250~?9\323\252<OC\247=3\232\231>\270\nW?\332\236\t?\311\215~?\013\020\270<R\355\263=\232\036\244>\373\005_?{\324\345>\"S}?\222m)=uk\">i\250\010?*\324~?,;\225<=\203\222=\376\007\210>~\307G?\362~/?\221\300\\?:(\363>\020[\177?&\206$<5\337\"=Ae\034>]\202\004?\253\256\177?\300v\242;\213\250\241<\337w\236=\3314\222>`\351P?=\265\031?g\254u?_\217\036>\r\002\006?\236o\177?\003\021\020<\266\314\016=:\322\t>\035\213\356>D\317~?e\250\227<\244\331\224=\031\010\212>v\243I?xE+?[\276b?\250M\317>\243\274v?\356\330\016>,\327\365>\311\230\177?\336\032\316;\377\316\314<+\260\307=\2777\264>\r\221i?\207\275\243>(\300^?\225r\347>.\245}?\251Q\025=&\340\017>5R\367>\255\264\177?\013y\226;\'\310\225<\022\013\223=[|\210>Y4H?\r\212.?d(^?\202\362\352>\311D~?\001\034\334<\0002\326=\014\313\277>{\345o?\034sq>\241\2048?\324\026N?S\270 ?\232Eo?\022)z>\002\014=?\031\305E?\243\3603?\363\330U?\332\330\014?\317k}?\211b#=\037\336\034>A\326\004?k\242\177?\200\346\272;\230\325\271<e\236\265=9\203\245>\010\004`?\322\347\337>\362\371{?Fw}=\366\307m>\000\2216?\010zQ?3F\030?\014\313v?\370\002\016>J\242\364>\320~\177?\302\356\000<\007\326\377<\246\330\367=-\332\331>\300Pz?\366\335\261=`k\242>\256\312]?\354\030\355>\261\232~?`\256\261<\313\323\255=\315\022\237>>M[?\364\177\373>\300\353\177?l\366\241:0\303\241;\302\366\240<\027\315\235=q\244\221>0mP?N\356\032?\352\252t?\244J->&\367\017?l\004|?\343\355z=\213\216k>\312^5?t~S?\010\023\023?\255Pz?+\340\261=3m\242>\003\314]?\031\021\355>\211\231~?\271@\262<\310_\256=\375\206\237>\005\245[?\"\212\371>C\326\177?p\327&;\264j&<\372\271$=\r\032\036>\002\261\005?n~\177?\\P\001<\024K\000=\302\214\370=\241b\332>\"yz?L\n\255=nk\236>\023\316Z?\244S\376>3\375\177?\306.39\357&3:\227\0073;c\2122<Q\2300=4\373(>\211\030\r?\377Q}?\271\264)=\267\254\">\364\324\010?\376\307~?\251B\233<[Q\230=D\375\214>\213TL?\305\366$?\252\246j?s\214\234>m]Y?\2417\003?\231\326\177?\350\202%;\346\027%<\007n#=\262\350\034>\227\335\004?N\241\177?\032\036\275;\257\006\274<\341\265\267=0;\247>\0318a?\203\243\330>\261\362y?\341\025\275=\267\240\253>U1d?cK\306>\023\376r?\261\213E>\236o\037?\034\217p?u\'h>\222\2053?\010\206V?\262\006\013?\262\031~?\031Y\361<\322<\352=jr\317>\231\312v?\244\t\016>\357\253\364>\253\177\177?\274\024\000<\322(\376<*F\366=\314\250\330>Q\364y?V\344\274=Qx\253>\255\026d?6\362\306>\333Hs?aWA>*\326\034?\317\001s?\002VE>\243N\037?q\257p?I`f>\377\2132?\017\024X?\320\310\006?\343G\177?\233\2307<\355\2115=(~->8\031\020?Z\363{?\374\017\177=\357-o><P7?\2651P?\225\203\033?\353+t?\261\2024>\256\260\024?\253Oy?\350r\320=\212;\273>\013\207m?\314\035\211>\261\312H?q5-?\255\020`?\351\233\337>\323\346{?\036\014\201=\357\324q>H\2708?o\273M?\330\226!?\016_n?gQ\203>eFC?PH9?\340\272L?\n\002$?\265\275k?\363>\225>\220{S?\225\032\023?-Lz?\333i\262=\357\336\242>\365\036^?\000*\353>\335M~?T\241\327<Q\364\321=6n\274>]*n?\206\274\204>\027\246D?_]6?\347\321Q?\376e\027?\017rw?;L\004>\034i\346>.q}?\244\021\"=\377\247\033>\307\376\003?\'\300\177?$$\177;\333%~<\2364z=\361\353j>\346\0065?\223\020T?z\224\021?\307+{?\355\234\227=\235c\214> \312K?\307?&?\004$i?\177\213\246>\311\275`?\344\210\333>I\316z?\223\327\242=\341\344\225>\210\005T?{\261\021?\312\033{?\021\211\231=m\006\216>\271AM?\227\275\"?^$m?\031\300\213>\0076K?3\235\'?\350zg?\362^\261>v\331g?T\372\256>i[f??\230\270>I\025l?F\360\222>\233\211Q?\211\036\030?\013\351v?]E\014>\302\034\362>\"?\177?\264L@<\347\n>=\24495>\000\'\025?P\002y?\r\232\331=={\302>v7q?\335\337^>\233].?\350h^?Uv\351>\r\004~?\303\001\374<\'A\364=\236\037\327>\035yy?.\211\313=\323N\267>\334[k?\252\320\227>\202\231U?\317\202\r?\320%}?<\2034=\257\216,>\255z\017?\224A|?\366\031l=\370}^>J&.?\337\270^?\266\235\347>l\255}?\257K\023=\257\377\r>\213\235\364>d~\177?FZ\001<\325T\000=\r\237\370={p\332>3}z?\300\215\254=\347\003\236>\375~Z?\336\t\000?\376\377\177?G\256\3024B\256\30250\256\3026\346\255\3027\276\254\3028\035\250\3029\235\225\302:\251K\302;\274$\301<\371\226\274=69\253>\361\354c?\023\367\307>\030\274s?\207\327:>\r\300\030?\266mv?\331j\023>\301c\374>\367\362\177?\242\202P:-XP;\235\256O<\256\014M=\331\310B>\227\273\035?\331/r?\236\025Q>\212d&?\376\367h?\214\254\247>\205\206a?D\306\326>u\\y?\014\357\316=Y\006\272>y\337l?z\225\215>\364\334L?B\260#?R\031l?\377\324\222>ZrQ?\300Y\030?2\274v?r\337\016>\222\340\365>\210\231\177?\357\236\314;\324W\313<\261K\306=\213\030\263>\301\345h?&$\250>\325\330a?\271\317\324>\277\266x?K\205\342=Ww\311>\020bt?\300o1>\322\260\022?\241\212z?a\362\252=\210\255\234>\034wY?\334\357\002?\177\335\177?\022\360\t;\300\245\t<\264}\010=W\361\003>=\342\345>\361U}?s\275(=\340\311!>\3759\010?L\361~?\310\312\206<\000\223\204=\006\374w>\363\355;?\324\341G?\326C/?\026\030]?\356+\361>\036$\177?\324$[<t6X=\265\314L>\374\326#?\n\356k?/\371\223>@jR?\r\337\025?\226\206x?\2111\350=O\336\315>\322.v?\332\014\027>\320\304\000?\243\375\177?)M\0279\223G\027:91\027;\356\327\026<gt\025=\\\000\020>\204\200\367>\311\267\177?\275E\220; \243\217<c\036\215=\023e\203>\215YC?\004 9?\351\002M?\377T#?\230~l?\213\'\220>\223\"O?\222&\036?\300\313q?\351\247V>\237\250)?8\342d?\344\363\301>\"\366p?Y{b>\330c0?\240i[?\343\335\372>\246\345\177?\304\267\322:\013a\322;E\007\321<\336\261\313=lo\267>[nk?\204T\227>84U? \221\016?9\257|?0rQ=v\274F>r* ?r\325o?OSr>\350\3728?\022EM?\201\265\"?$-m?=\204\213>\234\377J?\353\034(?\315\333f?\335`\265>\235?j?\021:\237>\364j[?Q\326\372>X\345\177?\303&\325:\006\316\324;:l\323<]\367\315=\232@\271>\305rl?\262w\220>\203hO?Qy\035?)mr?\221\251M>P[$?\303Xk?o\345\227>g\252U?\230U\r?\3108}?\030\340/=\325R(>\241\247\014?m\177}?\033\224\036=hp\030>\375\276\001?\316\363\177?n\024C:D\357B;\325ZB<\235\014@=o\0137>\030S\026?s6x?\013\235\361=\351\033\325>]\320x?\334\177\337=\334\033\307>e[s?*L@>\225/\034?;\226s?\362\372<>\220\032\032?`Zu?DD#>D<\t?\324\252~?\224\262\251<\251.\246=\230\262\230>\237PV?\360\226\013?\272\346}?\2577\005=\200\342\000>\\S\341>\025S|?#\332g=m\272Z>\352\001,?^\275a?\227w\325>\365\356x?i\343\333=\215G\304>v\021r?\033\307R>Jd\'?(\301g?\377\227\257>\325\276f?\376\032\266>\230\253j?\227k\234>\341CY?\357~\003?\036\317\177?HcC;(\316B<3}@=sq7>\232\224\026?}\010x?H\001\367=\3316\331>\252\037z?\272\271\267=X>\247>J:a?4\226\330>\230\356y?\277\222\275=\177\006\254>Ctd?\267\247\304>0>r?\346HP>C\353%?\231\210i?K\365\243>N\350^?\242\204\346>\254v}?;\271 =\272j\032>\225!\003?\310\330\177?h\306\034;ff\034<2\350\032=o\014\025>!\265\376>T\376\177?\212\320\3258\365\312\3259\244\264\325:q[\325;\316\367\323<\273{\316=O\252\271>\007\255l?l\354\216>\266\rN?\221\316 ?\324.o?\270e{>\220\255=?N\217D?9\2166?\304~Q?$:\030?0\324v?={\r>\373\335\363>\313l\177?U\340\022<B\217\021=\tc\014>\325G\362>\307C\177?m\256;<\014\2109=\255 1> }\022?\251\250z?\361Y\247=\"\255\231>\334\031W?\247u\t?\021\232~?U\375\261<R\037\256=\177Q\237>\251|[?\033q\372>\033\341\177?\262\007\367:\202\220\366;\216\265\364<9f\355=k\341\321>\377\260w?\211\237\000>\034\357\340>\350:|?|\270m=\213\354_>\016\365.?\022\214]?r\207\356>\304\316~?\334\347\227<\301\026\225=Q<\212>\215\323I?\253\326*?oSc?\347\262\313>\227Pu?\316\323#>\364\235\t?\r\216~?\372\355\267<\311\314\263=\311\003\244>\270\362^?\324F\346>Pj}?\213\300#=\2374\035>9\022\005?\"\231\177?\235i\315;\371\037\314<\341\t\307=\326\261\263>\177Ai?\251\311\245>\2775`?*\275\336>\263\255{?\374\363\207=)\333}>n\354>?\201\"B?\303\250;?\034cH?h .?Z\301^?\201k\347>\322\243}?\000\247\025=C/\020>\353\303\367>1\274\177?\332z\207;t\353\206<\232\262\204=\t3x>N\n<?\254\254G?\020\273/?\036g\\?\310-\365>\347\212\177?\354\306\351;\364\033\350<_\210\341=?\262\310>\177\rt?=<6>\320\315\025?Z\222x?\010\317\346=\363\313\314>8\302u?VN\035>\n$\005?J\226\177?\220\024\323;z\270\321<\005Z\314=\022\366\267>j\272k? U\225>\r\216S?T\352\022?\327hz?\t\375\256=k\t\240>\020\007\\?dW\367>\007\265\177?\260\305\225;p\026\225<\327_\222=\251\351\207>\014\253G?\264\276/?\257a\\?\'M\365>\212\215\177?\202\205\344;\206\355\342<D\244\334=\354\336\304>\275Wr?\337\333N>9\022%?\351\206j?\002`\235>\036\001Z?\335l\001?\340\367\177?\370\374\001:w\354\001;\207\252\001<\322\243\000=\0353\371=\216\340\332>\345\235z?\t\244\250=\023\301\232>I\365W?u\035\007?\2015\177?\364\336I<4bG=\227\255=>%\213\032?\303\375t?\272\220(>(\321\014?\345n}?\377\240\"=\375+\034>\224Z\004?-\264\177?qx\227;2\305\226<\325\376\223=\000M\211>\177\366H?\255\321,?\003\235`?\354N\334>\032\006{?Z$\234=\320<\220>\'5O?\233\370\035?\356\366q?;AT>4B(?\372\254f?\235\215\266>\220\355j?@\263\232>Y\352W?\203;\007?\304.\177?\023\221P<c\351M=i\217C>v6\036?\303\274q?\020}W>=$*?\\@d?A\355\305>\200\323r?3\357G>\303\345 ?\004\027o?\201\260|>\203U>?\340IC?\377@9?\370\307L?\241\342#?\375\340k?4Q\224>j\264R?\264\037\025?\"\007y?.\010\331=R\010\302>\010\000q?\224\357a>\323\0250?;\337[?I<\370>\266\303\177?\334\355p;\035\013p<\312\206l==\336^>\260\\.?<j^?}n\351>\253\002~?\360\257\374<\231\344\364=\007\234\327>\233\240y?\022\331\306=\202\212\263>\007*i?\370c\246>#\242`?\367/\334>u\375z?@.\235=\007\036\221>\007\371O?n\021\034?\273\260s?\335{;>Q(\031?g\034v?\330\034\030>G\204\001?\314\366\177?\1774\023:U\037\023;\310\312\022<\031z\021=`O\014>K+\362>\265@\177?)\274><\272\203<=\236\3263>)A\024?\004\227y?\234\374\307=Fu\264>l\265i?i\315\242>4\022^?\003u\353>\375Y~?\251\245\321<*H\314=\307\347\267>^\262k?L\213\225>&\273S?rt\022?\254\255z?I\300\246=\213,\231>\320\262V?}\215\n?\220B~?c4\335<G;\327=\263\234\300>\372Mp?\336\272k>\267v5?\204VS?${\023?\366\021z?\n\\\271=E\225\250>I&b?V\365\322>@\023x?[\276\365=\236A\330>p\324y?\254\257\300=\255\216\256>\027\027f?\274L\272>\340\005m?\371\217\214>)\362K?\335\340%?\353\224i?\006\244\243>\304\255^?t\337\347>\342\271}?\261<\020=l(\013>b~\360>\216\017\177?T\220o<\230\017l=\314t^>\032!.?Y\300^?qq\347>\366\244}?g_\025=\344\354\017>\207d\367>\352\265\177?\'\001\224;\004V\223<\245\257\220=\343v\206>\031MF?\375\3062?\252\266W?Y\311\007?{\r\177? \237q<\354\016n=\3608`>\004 /?\352L]?5\370\357>\006\377~?\233\367\177<\336\367{=\336wl>\220\3345?\272\253R?\'6\025?I\370x?f\311\332=\362i\303>R\251q?_\221X>\366\303*?ulc?\177\027\313>\271\020u?d{\'>\326\026\014?h\267}?X\330\020=\027\271\013>\353P\361>b(\177?j\350V<\304\026T=i\033I>e\234!?9Yn?\235y\203>\212mC?\354\3658?\362MM?\023\240\"?[Dm?\277\345\212>\376nJ?\224n)?\223-e?\r\030\300>\004\014p?\276Wo>\201f7?.\013P?\014\344\033?i\330s?\250=9>\035\273\027?`3w?&\363\007>\037\315\353>\003h~?\201\271\312<7\265\305=*\237\262>\233\234h?\024\003\252>\021\036c?\331\375\314>$\326u?\373(\034>}X\004?v\264\177?F\347\226;^5\226<Jt\223=q\326\210>W\210H?\032\314-?p:_?\234\234\344>\342\021}?\353a9=\000\3760>qf\022?\274\265z?\355\310\245=Y]\230>\266\013V?\204P\014?i\241}?g>\026=\224\273\020>`\215\370>\210\310\177?,\260];2\360\\<{\365Y=Z\\N>)\306$?\254\336j?\277\026\233>\3618X?6c\006?\314\\\177?\362\313\"<\327-!=,\326\032>\224l\003?\032\321\177?\005v;;\277\354:<\314\3128=\211t0>m\014\022?\000\351z?\364\242\237=z1\223>\030\301Q?\364\220\027?\210Rw?\254\"\006>0!\351>\362\364}?=\270\001=\0239\373=\364g\334>\022\r{?\363M\233=\004\207\217>\352\225N?6\201\037?\317}p?\322\032i>]\n4?\'\257U?\340H\r?\022>}?\333\224.=\360#\'>\366\333\013?o\315}?\025o\013=\370\257\006>\230\361\351>\205\031~?\036o\361<\213Q\352=e\202\317>\250\320v?\253\257\r>\331)\364>\345s\177?\336\315\013<y\234\n=\250\353\005>\365\317\350>U\346}?qP\005=\246\371\000>\000v\341>^[|?/\327e=\204\361X>h\373*?-\"c?h\344\314>\376\313u?p\276\034>F\300\004?\266\245\177?&U\264;\026W\263<\377i\257=\274c\240>\246J\\?\025\322\365>a\230\177?=\351\316;\304\232\315<\272q\310=~\323\264>\344\354i?\217^\241>\013\005]?\255\232\361>\3030\177?_\225N<\214\372K=\027\322A>z\"\035?\257\274r?\2306I>\346\254!?\340Gn?>\361\203>\263\341C?U\0008?j\377N?q}\036?pyq?\0279[>iJ,?ZYa?W\331\327>\345\263y?U\216\304=\014\261\261>\313\013h?S\263\255>\312\212e?\213\311\275>\340\337n?z\255\177>\266\326??yR@?\245Z??\014IA?Mg=?o\026E?\231k5?\025iS?\305J\023?D/z?U\335\265=\376\266\245>\226(`?K\014\337>+\302{?\364z\205=\250\217y>w\275<?\220ZF?d\2512?\223\345W?\241H\007?\312+\177?\307\205S<\260\312P=\020&F>V\316\037?\2031p?<Jm>\232M6?\256\354Q?|!\027?\335\243w?\366c\001>\372\024\342>\351\200|?a\267\\=\246\322P>\347<&?t\'i?\350t\246>\376\255`?\\\350\333>X\351z?u\230\237=\236(\223>\220\271Q?2\244\027?WDw?O\366\006>;Y\352>7+~?K\267\350<\345\032\342=u$\311>\245>t?\262r3>L\000\024?\321\277y?\242#\303=\270\213\260>\007Wg?\330F\262>\030gh?\231`\253>\001\007d?6T\307>dts?\222\343>>\354M\033?\342Yt?\272\3461>\203\376\022?\342\\z?\326j\260=s8\241>\331\350\\?\201>\362>\307B\177?<\255<<\001\201:=\005\0032>\370\020\023?\350Qz?\225\272\261=#N\242>J\265]?>\226\355>\365\254~?\370\244\250<0,\245=\360\331\227>\016\241U?\236n\r?P.}?Eo2=V\251*>\0008\016?O\327|?\243\255G=\255\361=>\375\265\032?\035\332t?\304\231*>\237-\016?\352\333|?\035\216F=\033\356<>v\022\032?\373`u?]\343\">:\372\010?\237\275~?se\240<|A\235=O.\221> \007P?.\356\033?\223\317s?\235\2759>\267\014\030?t\366v?\367}\013>\352\372\360>g\036\177?\334\321`<\034\274]=7\273Q>i\306&?\375\201h?\006\261\252>v\222c?*+\312>.\256t?\367\032->\232\327\017?\032\024|?h!w=P8h>\311\2163?2wV?\315.\013?\307\013~?\2223\370<s\256\360=\201e\324>\274\222x?r\303\346=\371\302\314>\241\276u?1\203\035>\245H\005?T\220\177?\'\367\336;\304r\335<Iv\327=M\313\300>\005ep?>wj>\261\3074?\021yT?N\201\020?T\276{?\272\361\205=1^z>*\'=??\221E?\206a4?\362 U?l\304\016?\266\227|?y+W=\330\335K>sG#?\213\215l?&\302\217>\322\311N?\223\001\037?z\372p?\003>b>\240A0?M\235[?T\266\371>w\330\177?\272\014\036;&\253\035<\271&\034=\3052\026>\343*\000?\343\377\177?\304\346\3456]\346\3457\300\344\3458M\336\3459\200\304\345:c]\345;c\302\343<Pm\335=\223|\305>/\240r?\035\317J>=\244\"?\332?m?\204\004\213>!\213J?\025-)?\035\202e?\230\000\276>N\374n?B#~>\303\020??\374\332A?C<<?\311NG?\320\2140?\222+[?\370?\374>\360\361\177?K\367`:\336\305`;\203\000`<\200\360\\=\234\005Q>\022[&?Y\003i?\005b\247>\002Sa?\356\377\327>\372\277y?\256\036\303=\266\207\260>\212Tg?\351V\262>\331ph?\363 \253>\335\334c?u[\310>\342\347s?\210]8>\343+\027?W\234w?z\324\001>\n\275\342>\303\247|?WCS=\325]H>%)!?w\321n?\223:\200>\206:@?\276\212??\254\351@?R)>?\327\237C?\310\2138?1\nN?&\327 ?\007&o?\t\340{>\304\353=?/\027D?\265\2167?{\305O?\026\222\034?\337>s?B\347A>\242/\035?\262\260r?w\342I>\035\025\"?\212\331m?<\350\206>\206\270F?G\3321?\333*Y?\262\304\003?3\307\177??\002c;\3628b<O\031_=~\362R>\317}\'?\265\241g?\323c\260>=>g?\337\346\262>\340\307h?\361\347\250>\243^b?@\233\321>\243\227w?\307\032\002>\363%\343>\224\277|?mvM=\377\'C>\202\366\035?\345\370q?@%T>\3221(?\223\301f?g\t\266>o\241j?Q\257\234>\177xY?\373\353\002?\332\335\177?\353\204\010;\035<\010<\035\032\007=U\245\002>\177\364\343>{\355|?\025EB=I\0169>\337\234\027?\277Iw?\263\245\006>t\342\351>\351\026~?\177\270\362<t\207\353=5q\320>B*w?\373z\010>\203\224\354>\336\206~?\016{\273<\2460\267=\323\315\246>\023\354`?\300p\332>G}z?Y\213\254=\350\001\236>v}Z?0\016\000?\375\377\177?\243;I5\231;I6q;I7\323:I8Z8I9x.I:\361\006I;\025iH<\204\365E=Gd<>k\273\031?o\247u?m\330\036>u4\006?\377e\177?^\244\031<\2073\030=\263\213\022>\224%\373>r\350\177?{\\\274:/\027\274;\313\002\273<\342\275\266=\221o\246>A\252`?\360\376\333>\263\357z?\023\325\236=\234\203\222>\327,Q?a\n\031?\3433v?\n\302\026>\014\220\000?\274\376\177?\033\033\2428\345\027\2429\021\013\242:\310\327\241;&\013\241<\256\340\235=\002\265\221>x{P?e\312\032?\016\311t?\336\222+>|\323\016?\277\220|?A\335X=\337aM>f0$?i\211k?\304\236\226>\030\237T?\325\034\020?\211\361{?\267\200\177=\234\220o>\307\2047?\267\326O?\034g\034?!es?\305\277?>\327\327\033?\n\343s?\266\2438>\306X\027?\266{w?\n\274\003>\026\223\345>\262E}?@\267,=\324n%>\321\264\n?\2005~?s\245\343<\375Q\335=\'g\305>c\226r?}[K>\357\370\"?\272\343l?\203x\215>\r\303L?o\356#?\276\323k?~\252\224>i\377R?\211]\024?\002\205y?\341\037\312=\026-\266>\t\266j?\370%\234>\245\rY?\014\026\004?7\275\177?<o\205;\"\344\204<B\274\202=\224\307t>QD:?\345\363J?]8(?Z\271f?.>\266>\343\277j??\344\233>O\332X?\277\244\004?\300\251\177?\334E\254;\000^\253<K\310\247=m\t\232>\202cW?\333\254\010?\366\322~?\300\323\225<?\026\223=\355\205\210>H=H?\342u.?\261E^?\367E\352>\363\'~?\'S\352<F\237\343=\313R\312>\323\276t?)(,>\2526\017?2b|?\214.d=]xW>\204!*?\361Cd?\314\326\305>N\311r?\211\201H>\337>!?\354\272n?\245\326\200>\361\325@?TQ>?\007RC?\331/9?\242\346L?\000\231#?:3l?\344%\222>\212\334P?\256\325\031?F\222u?\201\017 >\250\n\007?\2519\177?\367\274E<\005ZC=\341\010:>\247<\030?I\322v?}\227\r>\336\006\364>\245p\177?\031\013\017<d\313\r=\311\342\010>\263,\355>\233\235~?Y=\260<\266r\254=k\355\235>\304mZ?\214:\000?\312\377\177?\3078V7\0248V8G5V9\023*V:H\375U;iJU<\225\203R=\323\261G>W\300 ?g=o?\033\233z>GF=?\273UE?\262\3424?|LT?\337\366\020?\330\200{?\344]\215=\322\233\203>\315\216C?\305\2578?\204\312M?1r!?r\205n?dH\202>.CB?+e;?\331\340H?\002\003-?\305W`?r\360\335>\335w{?(s\216=\252\212\204>\tvD?R\3046?[\"Q?\367$\031?\t\037v?\370\365\027>\363h\001?\014\370\177?\242m\3769\006N\376:\266\317\375;n\330\373<]\032\364=\025\002\327>\253oy?\002\250\314=|4\270>{\335k?\335h\224>P\310R?A\354\024?\360(y?\340\010\325=\347\337\276>\260no??\355w>T\346;?\030\360G?\306#/?aG]?\200\030\360>\016\003\177?u\370{<q\030x={\021i>F\0054?n\267U?\2672\r?=G}?\211V,=B\026%>\326x\n?YI~?\237\333\331<o\020\324=\010\033\276>\355\to??f}>o\261>?N\226B?\236\270:?L\037J?\221\'*?\372;d?\266\010\306>\362\337r?\210<G>\275x ?_\206o?3\243v>\257;;?\275-I?\210S,?\267La?0&\330>\351\313y?e\263\301=ea\257>}\234f?f\367\266>\030*k?J\036\231>\\\247V?\203\254\n?F8~?]G\342<L\007\334=\273c\304>\231\036r?\307\013R>\362\365&??Hh?\301)\254>`\213d?\214\026\304>\220\372q?\177\rT>\350#(?\t\323f?5\231\265>j`j?\"`\236>v\305Z?\205\204\376>\315\375\177?F\240\0149r\233\014:$\210\014;\376:\014<\274\007\013=\246O\006>\216c\351>\275\000~?\r\243\375<\257\310\365=xI\330>\340\326y?te\300=iR\256>\261\360e?\221A\273>G\212m?\244\007\211>\032\266H?@d-?i\316_?<)\341>\366H|?@Oj=\360\347\\>\022@-?\246\001`?\035\366\337>\207\375{?Z\231|=v\005m>\257(6??+R?\020\201\026?A\026x?1d\365=\023\375\327>\026\277y?\3239\303=\257\235\260>,bg?\327\376\261>K;h?,~\254>\217\302d?e\273\302><Vq?\",]>\324f-?\301\312_? ?\341>:N|?\366\007i=\376\305[>\347\232,?\213\351`?\027\200\332>\307\201z?\233\001\254=V\217\235>\214%Z?P\006\001?\315\373\177?\'b\2069VY\206:\0256\206;\\\251\205<\021{\203=V\024v>\220\361:?\233\266I?e\031+?\326\371b?%\336\315>\302.v?\315\r\027>{\305\000?\237\375\177?\202T\0309\330N\030:08\030;\255\335\027<Pu\026=u\356\020>Z\326\370>\262\314\177?^\016M;\036jL<9\335I=f\352?>\200\362\033?\316\313s?2\3649>{/\030?@\334v?u\003\r>\2020\363>\344[\177?\306\262#<\022\020\"=\214\246\033>\306\375\003?G\300\177?\253\243~;a\246}<\030\271y=\177\177j>*\3144?\260qT?\307\224\020?C\264{?\037)\207=${|>y:>?\177~C?+\3228?\202\215M?G\006\"?T\351m?\317{\206>\305QF?\271\2742?\363\306W?\261\234\007?:\030\177?\177\364f<\016\263c=\235\nW>\350\341)?q\227d?\260\312\303>\367\326q?R\010V>\330K)?zZe?\341\373\276>\350|o?\033\'w>\374\177;?\007\257H?Rt-?\232\267_?\300\261\341>\221i|?\366cb=\254\340U>\3034)?;xe?J?\276>\223\034o?[c|>j.>?\360\225C?\262\2408?6\345M?B1!?\016\311n?\321t\200>\234t@?\363\025??\301\320A?NQ<?&\'G?\014\3450?;\245Z?@;\377>i\377\177?\0226\0278\2554\0279\030/\027:\306\030\027;\230\277\026<\203\\\025=6\352\017>\255`\367>\250\265\177?\177\205\224;*\331\223<\021.\221=j\343\206>\367\263F?Z\3441?\'\033Y?o\360\003?\356\301\177?\214\nx;7\032w<)`s=.\352d>\260\2751?XWY?\233H\003?\337\324\177?\205f,;k\362+<t$*=-\023#>\322\032\t?j\264~?]\364\244<\r\242\241=e\340\224>\221,S?I\350\023?\311\316y?\324[\301=a\032\257>\257of?\177\026\270>\245\314k?Q\332\224>{\'S?\202\365\023?\215\306y?\221V\302=\247\345\257>\206\357f?\014\342\264>o\365i?\373%\241>+\333\\?\356\215\362>7K\177?\362H4<\030M2=#\212*>3#\016?\206\340|?5nE=\010\352;>\031n\031??\345u?kJ\033>\236\275\003?\007\310\177?\251\261_;2\356^<\252\345[=~\027P>\362\315%?I\253i?[\020\243>\341B^?\213V\352>\303*~?\240\360\350<\367P\342=\226N\311>\254Pt?\251l2>\326U\023?\226(z?`\251\266=\270^\246>v\236`?*F\334>\251\003{?}o\234={|\220>\257lO?\367n\035?\260vr?A!M>\257\t$?\031\265k?\345x\225>\327\253S?~\234\022?{\226z?X\207\251=\330~\233>\330\212X?\001\201\005?\324\206\177?\247\345\361;\203\034\360<\327\022\351=n\214\316>\216rv?!#\023>\224\375\373>\355\357\177?7\223\200:\356r\200;\017\344\177<\356\344{=Cgl>\240\3235?\304\272R?I\017\025?\364\021y?\267\300\327=\016\006\301>\373\201p?\'\340h>d\3523?\026\343U?\250\275\014?\257v}?\207\270 =\024j\032>!!\003?\324\330\177?\374\230\034;19\034<\332\273\032=q\343\024>\000{\376>\261\375\177?\034\305\0239\307\277\023:u\252\023;HU\023<\034\002\022=\266\315\014>\231\342\362>\000T\177?A\214+<o\300)=u\267\">H\334\010?\370\305~?wC\234<dH\231=q\317\215>\267\020M?\3033#?9\243l?\377.\217>uHN?\022? ?\260\300o?bus>^\2239?-4L?\354C%?/Mj?\354\337\236>\254&[?\334[\374>\276\362\177?I\026T:\\\352S;\360:S<\307\201P=\225\344E>.\246\037?SYp?}\033k>\236 5?\351\345S?q\004\022?\200\355z?\261\030\237=\273\274\222>\246]Q?l\216\030?\362\223v?v4\021>\260:\371>(\322\177?\212>7;`\2736<\244\2614=\000\271,>\270\226\017?\3673|?\237go=uia>\322\312/?\231O\\?\213\265\365>\031\226\177?\353u\323;\224\030\322<1\265\314=\010?\270>e\343k?\374@\224>\304\246R?\366B\025?\310\357x?q\312\333=\3613\304>N\010r?\235IS>\002\261\'?\\bg?\237\375\261>\215:h?\003\203\254>\267\305d?\204\247\302>\266Lq?\000\263]>]\263-?\316]_?\364\311\343>\"\344|?\366\214D=t\036;>\023\355\030?\303Jv?\344o\025>\020B\377>s\377\177?\252\354\0148t\353\0149\233\346\014:7\323\014;\300\205\014<6Q\013=!\224\006>\216\310\351>l\022~?\003\356\364<N\233\355=0\n\322>\251\277w?,\210\377=\032\246\337>g\351{?J\274\200=^Iq>\220n8?\305=N?4Y ?O\246o?\263\345t>\010T:?B\327J?b{(?\327df?\347[\270>\221\363k?\352\323\223>\306JR?\r0\026?\323Nx?6\300\356=\370\352\322>\231\017x?\352+\366=\334\224\330>.\356y?X\237\275=\302\020\254>\376zd?q}\304>\217*r?\023aQ>)\221&?V\302h?7\014\251>Mwb?\214\003\321>M`w?=U\005>\243\361\347>N\275}?\200e\017=W`\n>\255Z\357>\353\352~?\241\364\211<\343\241\207=\275L}>\214\244>?\212\257B?\021\204:?\221\177J?\003H)?k_e?\222\334\276>\375lo?\341\004x>\204\362;?F\331G?\013W/?\261\373\\?\014\321\361>\3256\177?9\215H<\305\030F= \204<>\213\317\031?:\227u?\265\306\037>\231\330\006?\206D\177?u\360:<l\3168=\326w0>\226\016\022?\310\347z?j\310\237=\030Q\223>\364\333Q?JL\027?\320\204w?\0314\003>\003\311\344>[\033}?\224\0217=\362\342.>\240\004\021?\213y{?Z?\216=\017^\204>\374JD?P 7?e\204P?\360\263\032?\323\333t?\305\200*>\363\034\016?I\343|?\373\301D=aN;>{\013\031?\0063v?\305\316\026>\007\231\000?\222\376\177?5\362\2668\037\356\2669\310\335\266:x\234\266;\362\227\265<q\221\261=#,\242>b\234]?\014(\356>\233\301~?Ql\236<\002\\\233=\360\222\217>d\240N?{g\037?\032\227p?\010\267g>\023H3?\321\350V?\000\373\t?\217q~?0\002\306<\3658\301=\027\376\256>\312]f?\003\211\270>\310\014l?\264)\223>}\272Q?\325\241\027?\026Fw?M\334\006>\3532\352>\266$~?\262\353\353<^ \345=\000~\313>\356:u?L\021%>yu\n?sJ~?\305P\331<\365\214\323=\300\262\275>\024\324n?|(\200>u(@?\374\256??\242\241@?#\273>?I\203B?,\340:?\236\326I?\227\317*?\350\\c?\027x\313>\2018u?\3314%>\217\215\n?\212B~?@7\335<\374=\327=\327\236\300>\tOp?\376\253k>\260n5?\355cS?5X\023?\'\'z?\032\325\266=\244\202\246>\230\267`?P\256\333>\355\330z?\327\220\241=\347\321\224>o S?\321\007\024?\034\273y?\312\262\303=\216\377\260>\272\236g? w\260>=Jg?n\231\262>#\231h?\277\031\252>J-c?\206\237\314>k\260u?HT\036>?\331\005?-w\177?\'\212\010<\333f\007=\000\355\002>9_\344>\261\004}?\302\232<=\207\3533>\271N\024?k\216y?\353\001\311=jG\265>\3040j?\241\234\237>R\265[?\273,\371>j\321\177?a4:;\361\2549<C\2227=\034X/>\267Q\021?.P{?K;\223=\246\245\210>\340ZH?\0063.?\177\246^?u\n\350>\366\301}?\320@\016=\021P\t>\274\314\355>\300\264~?\232\311\244<\003y\241=\325\275\224>\237\017S?x3\024?\254\237y?\201\365\306=k\241\263>\2647i?\017\n\246>\022c`?a\254\335>\256e{?B\244\220=\034m\206>\320CF?a\3332?H\226W?\014\"\010?k\367~?\336\301\203<^\243\201=9\335r>yC9?\211\303L?F\355#?\013\325k?\271\241\224>\016\370R?\233p\024?\331xy?>\221\313=IU\267>\207_k?\014\270\227>v\205U?i\270\r?\002\017}?\321\025:=\226\2411>`\321\022?\215wz?\271:\255=\253\223\236>\272\354Z?\222\245\375>v\372\177?o1\2619\033\"\261:\322\344\260;\\\360\257<\010)\254=#\260\235>\302>Z?B\277\000?\304\375\177?\220\342\0169\224\335\016:\245\311\016;\001z\016<\323<\r=\022^\010>\031j\354>h\200~?\250\254\276<\202<\272=\003M\251>A\243b?\322\364\317>\316\373v?b.\013>\021\207\360>\233\020\177??\205n<O\014k=U\217]>#\237-?\253z_?\322\035\343>\276\275|?\320\350M=\345\216C>%6\036?\020\275q?\306xW>\300!*?\242Cd?\277\330\305>0\312r?\324tH>$7!?\363\302n?\023\237\200>\260\236@?\026\301>?\236wB?k\370:?\373\251I?y6+?\237\322b?\205\320\316>\312\214v?\202\236\021>\213\322\371>\326\331\177?u\217\030;\2124\030<\220\312\026=p=\021>\214G\371>\326\322\177?i\2114;\027\n4<\237\0172=\003R*>\301\375\r?\373\360|?ojA=TH8>Q\036\027?(\246w?\267A\001>\310\341\341>\347t|?\243\242_=\327lS>\261\305\'?\256Hg?~\243\262>8\237h?\372\361\251>\223\022c?\007E\315>n\362u?\034\210\032>\0326\003?\300\326\177?\364\345$;\275{$<\002\325\"=\335[\034>\330{\004?\225\257\177?\242\242\240;\n\331\237<\220\272\234=\023\274\220>\006\244O?l\345\034?\013\364r?\334\033F>\025\310\037?\2727p?\023\363l>\317\0366?\364;R?&V\026?R4x?\017\335\361=\321L\325>\267\340x?\346\221\335=?\231\305>G\255r?w\023J>\3102\"?\343\271m?p\301\207>I\205G?0\0230?2\343[?\204%\370>S\302\177?\215yv;?\214u<(\336q=\347\225c>\033\0011?NzZ?\033\027\000?\370\377\177?wt\0056ft\0057 t\0058\ns\0059\261n\005:N]\005;\324\027\005<\r\003\004=\265\203\377=\300\242\337>\216\350{?\210\326\200=Awq>\321\2068?\366\022N?\303\301 ?\362;o?\\\257z>\236P=?\355AE?\224\r5?\200\005T?\220\261\021?\277\033{?r\212\231=\231\007\216>\304BM?\023\273\"?\031\'m?u\255\213>\027%K?\374\304\'?\217Ig?\316\235\262>\310\233h?u\010\252>\257!c?u\347\314>6\315u?\201\254\034>\325\263\004?\214\247\177?\255\252\260;\327\266\257<\373\361\253=V\202\235>\214\033Z?z\"\001?\332\372\177?^\311\2449\034\274\244:\033\207\244;\240\263\243<.n\240=\361\334\223>gRR?o\034\026?g\\x?\300\'\355=l\261\321>\253\237w?\274\242\001>\303r\342>\262\226|?\244jW=_\026L>ui#?\373gl?\323\300\220>\'\250O?%\333\034?Q\375r?\222\226E>Mv\037?\213\210p?\333\203h>\013\2703?\2364V?l\342\013?\n\313}?\335\005\014=v<\007>\203\300\352>\206<~?\013/\340<x\014\332=P\325\302>\241bq?}|\\>\360\002-?\336W`?\332\357\335>\265w{?\007x\216=\333\216\204>\024zD?\254\2736?\'1Q?o\377\030?r<v?\221C\026>\3016\000?\321\377\177?za;7\361`;8\315^;9:V;:\3653;;\020\253:<\234\2128=#:0>$\346\021?\202\376z?\361\r\235=\255\002\221>R\341O?\244L\034?\225|s?Vm>>\270\003\033?\335\230t?\311Q.>\367\244\020?\333\253{?\374,\210=\004>~><\036??k\300A?\343r<?\307\347F?\265q1?\031\315Y?\000\377\001?\020\360\177?\334\360~:c\261~;\377\263}<J\306y=\024\213j>q\3224?TgT?\034\260\020?\r\246{?t\340\210=\027u\177>y\272??\303\212@?N\351>?\247(B?\016\234;?\312zH?\317\352-?o\016_?D\242\345>\323H}?5\363+=H\273$>);\n?M]~?T\003\320<)\273\312=\254\251\266>\247\375j?\263G\232>\016\225W?f%\010?\221\366~?\024.\204<\030\014\202=\035\224s>|\2439?*\027L?\364\210%?\201\374i?+\367\240>r\270\\?JW\363>\300_\177?\352\333\037<\236L\036=t.\030>\247\220\001?4\366\177?\253\274\034:\255\244\034;\324D\034<D\307\032=\377\355\024>\370\211\376>\336\375\177?\330\235\0109J\231\010:\021\207\010;A>\010<8\034\007=L\247\002>m\367\343> \356|?\377\034B=\000\3528>\262\205\027?\320Zw? \247\005>\265j\350>\326\323}?\215\334\t=\2608\005>f\307\347>W\265}?<Z\021=\3061\014>O\000\362>\t<\177?PaC<\333\014A=\224\3637>\013\350\026?/\315w?7\363\375=\343u\336>\032\233{?\3432\212=\206\337\200>\303\336@?s?>?\323tC?\221\3468?CiM?\t^\"?\214\213m?\364\376\210>\007\256H?\230v-?_\264_?\026\305\341>#n|?\217Ga=\241\343T>.\241(?\3614f?)\216\271>\214\235l?\212U\217>gjN?\363\353\037?\007\024p?\210\347n>\263*7?\177rP?\365\340\032?\"\266t?\372\246,>\307\212\017?\3069|?\310\376m=\254*`>\377\027/?\270X]?Z\263\357>T\366~?\375K\204<\t)\202=\245\306s>\367\2759?k\347K?W\372%?\270vi?2k\244>\337<_?!\216\344>\310\016}?\337#:=\\\2561>\270\331\022?\244rz?\014\321\255=\205\020\237>\204K[?\317\211\373>\030\354\177?\1774\237:\375\002\237;t=\236<\365.\233=\270l\217>\314~N?\363\271\037?\301Ep?G.l>\360\2645?S\356R?\324\211\024?\263hy?\212{\315=\247\335\270>\356;l?\t\353\221>\372\251P?KU\032?A*u?\230\005&>\310\032\013?\300\022~?\307\304\364<\211t\355=j\354\321>\365\264w?Kd\000>]\226\340>?%|?g\371r=\237\217d>\226\2131?\022\245Y?=o\002?K\350\177?\363\227\275:\276Q\275;\2739\274<\224\346\267=%c\247>\311Sa?0\373\327>\177\276y?\305K\303=5\254\260>-kg?\247\304\261>\310\027h?\\e\255>\222Xe?\364\007\277>\n\203o?\247\321v>\301S;?\'\001I?_\271,?\005\277`?n\201\333>(\314z?\331\030\243=\304\033\226>\3732T?\004:\021?\371\\{?\325\260\221=\233S\207>\355\035G?\213\3710?\342\205Z?\271\354\377>\377\377\177?Q\330\2714M\330\2715<\330\2716\371\327\2717\353\326\2718\264\322\2719\327\301\271:s~\271;\243q\270<\206J\264=jk\244>\007=_?2\215\344>\225\016}?i0:=\303\2711>)\341\022?Anz?\\W\256=\000\200\237>\300\237[?M\250\371>\306\327\177?q\320 ;lk <R\331\036=B\260\030>\320\353\001?=\361\177?\246(l:/\362k;\270\030k<\037\271g=%\235Z>$\361+?k\324a?\267\352\324>\330\277x?\301r\341=d\241\310>6\006t?\361\2456>\331\021\026?\266cx?\336K\354=_\010\321>\023bw?\320:\005>\214\312\347>\357\265}?\3204\021=\002\017\014>\317\315\361>y6\177?\223\350H<\342qF=\234\324<>_\002\032?\023nu?6#\">\021w\010?^\341~?a\260\216< 4\214=\376\232\202>4\224B?\375\274:?H\027J?\":*?\177#d?\377\241\306>\001%s?\272[C>\202\026\036?\336\332q?\315\320U>\205+)? \204e?\327\363\275>\272\365n?\201~~>\257>??Z\200A?H\366<?\205\356E?9\2263?5kV?.O\013?f\000~?\261\315\375<\260\360\365=\335g\330>K\340y?\221F\277=Ei\255>\030[e?\367\367\276>\353zo?\316Bw>O\216;?a\224H?\315\260-?wa_?#\264\343>Q\337|?\250\271E=4.<>;\231\031?\333\302u?\366D\035>\214\035\005?U\227\177?U\001\321;\017\254\317<Qh\312=8g\266>\203\327j?\222F\233>\234^X?H\373\005?\342p\177?\325\315\016<1\217\r=\300\252\010>\222\332\354>l\221~?wC\266<W5\262=\220\263\242>`\377]?\255\343\353>\220k~?\223\370\310<h\n\304=jF\261>b\312g?)\\\257>1\231f?\215\014\267>(6k?z\315\230>NfV?k\\\013?\266\373}?8\016\000=\252\032\370=4\014\332>\237_z?\032\027\260=\"\363\240>r\265\\?\252h\363>va\177?`\'\036<\216\240\034=M\243\026>[z\000?\026\377\177?\246\353i8O\350i9\364\332i:\213\245i;M\320h<d\201e=X\245X>|\317*?\014]c?5w\313>$8u?&:%>%\221\n?[A~?\321\314\335<w\313\327=\213\016\301>\'\206p?t\245h>a\3123?\366\026V?C2\014?\000\255}?`f\023=t\030\016>W\301\364>\216\201\177?\327f\374;\"u\372<\332\314\362=\334\003\326>D\035y?Fj\326=\213\367\277>\305\373o?9;p>s\3377?\3478O?T\357\035?\235\377q?\206\305S>\271\371\'?\330\007g?\177E\264>1\231i?\324\207\243>h\231^?\335W\350>[\320}?N\267\n=\254\004\006>\346\364\350>\001\355}?n\254\003=\236\341\376=\017)\337>\217\311{?8\226\204=\237\001x>\326\360;?k\334G?\373O/?$\006]?P\224\361>\0130\177?\244KO<7\254L=\010rB>\306\205\035?\255ar?\320MN>{\275$?\244\350j?$\324\232>]\004X?\000\364\006?\236>\177?C\320@<_\213>=,\2565><r\025?=\320x?\266\203\337=\337\036\307>\273\\s?\3408@>\211#\034?\325\240s?\300a<>\322\271\031?\270\250u?\210\305\036>m\'\006?\203h\177?\032#\027<0\276\025=\301D\020>\314\342\367>)\276\177?I\213\203;\032\004\203<\260\353\200=>\234q>[\2328?m\360M?\364\025!?U\345n?\324a\177>\322\260??\373\235@?\205\302>?\320tB?>\376:?=\237I?1O+?5\261b?\311\236\317>f\333v?\032\020\r>\325B\363>\270]\177?\364\340!<\201G =\352\001\032>V\330\002?\237\337\177?]r\001;\3500\001<\037,\000=\271R\370=\2556\332>0lz?\235\226\256=z\264\237>F\307[?\314\305\370>\304\313\177?\277\305P;}\033P<\313vM=S(C>\266\366\035?\264\370q?\367\'T>i3(?\224\277f?8\026\266>\327\250j?\370}\234>,RY?\rW\003?`\323\177?1_2;\350\3421<z\364/=we(>\"\264\014?xz}?\001\313\037=$\217\031>\n\210\002?^\346\177?\304\371\314:\265\247\314;}`\313<\354S\306=.\037\263>\276\351h?\001\n\250>\340\306a?|=\325>\231\333x?\216,\336=e\022\306>T\344r?\225\375F>ER ?Q\255o?\350\203t>\373 :?)4K?\226\241\'?yug?\024\202\261>\006\357g?Nn\256>z\002f?3\320\272>3Mm?]\251\212>\2627J?\005\357)?E\206d?\2356\304>\216\tr?\3257S>\220\246\'?Oog?\357\251\261>q\007h?\241\317\255>\372\234e?\024V\275>\362\243n?\232u\201>ysA?\242\020=?H\274E?\334\0034?\272\271U?\216,\r?\307I}?\204\267+=\231\204$>\017\026\n?\024i~?\2702\312<\0275\305=\2777\262>\354]h?l\234\253>\200.d?\033]\306>\016\006s?\361\030E>\030)\037?\027\324p?\311[d>\341n1?w\321Y?\277\362\001?\321\360\177?P\334r:\266\242r;\276\274q<\253+n=WR`>J./?\3417]?\321r\360>\'\016\177?\346\364p<\266im=\350\246_>\332\315.?\200\305]?F7\355>(\237~?\232x\257<i\266\253=\303P\235>]\365Y?\350\215\001?V\366\177?\343\230\032:\214\201\032;K$\032<\r\261\030=\341\377\022>T\313\373>P\356\177?\354w\215:\325P\215;\321\264\214<\037J\212=\237\363\200>\267\362@?\371\026>?u\303C?n@8?\377\216N?4\222\037?\020mp?9\006j>a\2124?\367\335T?Uv\017?\255C|?\217\227k=\225\n^>\376\344-?\307\026_?\262p\345>\224>}?\ru.=\330\006\'>]\310\013?\255\324}?\234\247\t=O\007\005>R~\347>n\247}?\\\304\024=\"]\017>\255\225\366>Z\247\177?\245\016\261;\273\031\260<\240P\254=\022\321\235>\tXZ?\356w\000?\037\377\177?<\273`8\'\270`9\323\253`:\207z`;\261\265_<\270\247\\=\255\304P>\2414&?U1i?\3633\246>}\200`?\021\373\334>\2475{?\330l\226=``\213>\364\336J?di(?\226{f?G\312\267>\275\241k?/\373\225>\003\030T?\357\200\021?}6{?\006S\226=YJ\213>\340\312J?W\230(?)@f?|F\271>\005vl?\251a\220>OUO?\363\250\035?%Ar?\243\036P>0\322%?G\246i?q1\243>\343Z^?\n\311\351>\202\022~?m\343\364<[\221\355=\214\002\322>\352\274w?V\332\377=\300\343\337>\355\370{?\222\266}=l\377m>\261\2566?YGQ?\030\307\030?Bhv?\205\273\023>\230\326\374>\001\366\177?\360\353\037:\367\322\037;/o\037<\002\342\035=\022\314\027>zK\001?K\371\177?\226\224\3269\033~\326:?$\326;\376\275\324<\2447\317=C@\272>\025\377l?C\276\214>\337\033L?\301}%?\242\tj?.\240\240>\276w\\?\271\315\364>\244\202\177?==\372;\006T\370<\356\314\360=\322|\324>\253\232x?>\324\345=\221\t\314>\343su?\345\315!>\275<\010?\227\360~?\231$\207<\334\351\204=8\223x>\324;<?\233OG?\375\2120?W.[?00\374>x\361\177?\341kh: 7h;}dg<\343\037d=VkW>\370\031*?\340Md?\212\230\305>\365\254r?\025\030J>\2245\"?\346\266m?\357\325\207>\211\230G?%\350/?\300#\\?F\262\366>q\251\177?\317\342\254;L\371\253<\024]\250=\313\205\232>X\306W?[\236\007?\324\027\177?-Yg<\344\024d=\221aW>O\024*?RUd?\337i\305>\241\227r?\257IK>3\356\"?s\357l?\265(\215>\214{L?\245\231$?\266\021k?\207\301\231>(*W?GI\t?\020\247~?\227\217\253<\316\367\247=&1\232>!\203W?rV\010?\357\351~?\226q\212<\241\032\210=.\036~>4\016??\006\340A?\3441<?MbG?Ma0?xm[?\357\307\372>\303\344\177?L\320\331:\243s\331;8\002\330<\032P\322=*\267\274>\313Pn?\300\263\203>\013\246C?\252~8?[!N?\240\236 ?\327_o?\371\273x>\312P<? (G?\340\3420?\213\250Z?x(\377>K\377\177?\330u58\326s59\314k5:\247K5;C\3134<\211\3142=x\376*>\273p\016?\350\275|?\263\336M=\314\205C>\2060\036?^\302q?V-W>\013\366)?\021}d?pp\304>\203$r?c\267Q>&\304&?\272\204h?$\237\252>\211\206c?[u\312>L\315t?\341T+>A\252\016?\277\243|?\234=T=:>I>\211\261!?\377Bn?\335\022\204>D\002D?.\2737?%xO?\204R\035?\316\220r?e\253K>\024)#?\370\256l?9\337\216>\014\002N?\003\353 ?\236\021o?|\373|>w{>?\333\377B?M\3349?\240\260K?!|&?\250\333h?Vf\250>2\006b?\014\272\323>\341Wx?\341\257\355=\375\031\322>T\305w?r\336\376=\255&\337>\363\310{?#\251\204=\216\"x>\320\001<?\232\274G?`\227/?E\234\\?u\372\363>{o\177?\2123\020<\242\356\016=\311\361\t>;\271\356>\206\325~?\343\216\224<7\335\221=\254y\207>\313AG?\303\2510?\232\377Z?F:\375>P\370\177?X\354\3659\320\316\365:\315X\365;\207\202\363<~E\354=x\003\321>F`w?\254U\005>G\362\347>l\275}?\371]\017=WY\n>uP\357>\226\351~?{\235\212<\nE\210=\271g~>:3??\376\226A?\350\307<?\274FF?\367\3242?z\240W?\"\006\010?w\376~?\003C\200<\324\201|=\326\360l>\233\0356?\375=R?\354P\026?\3677x?yo\361=\027\371\324>\255\304x?\311\340\340=\204/\310>\301\324s?\235r9>\346\334\027?@\032w?[i\t>\277\361\355>\376\271~?h1\242<T\373\236=\355\243\222>wHQ?@\304\030?vjv?\361\232\023>;\250\374>\323\364\177?\260\3032:{\2442;\321\'2<\34470=\025\243(>x\335\014?\364i}?\335\326#=\'I\035>t \005?\335\226\177?\262\356\321;c\226\320<\275F\313=\224\031\267>\224=k?\273\233\230>)>V?\264\310\013?\215\324}?\221\257\t=\273\016\005>O\211\347>\210\251}?J@\024=\244\342\016>,\345\365>\345\231\177?=\345\313;s\240\312<f\235\305=\362\213\262>\373\220h?\021O\252>\007Qc?\331\301\313>\261Vu?Kz#>\016a\t?!\240~?\262\375\256<\303@\253=\321\356\234>\264\251Y?Ab\002?E\351\177? \307\265:\227\206\265;\'\205\264<\313\212\260=\347R\241>m\374\\?\311\314\361>\\6\177?{\005I<\025\216F=\023\356<>q\022\032?\377`u?$\343\">\023\372\010?\252\275~?\004`\240<C<\235=\344)\221>M\003P?\300\367\033?7\307s?\2306:>\300Y\030?2\274v?x\337\016>\232\340\365>\210\231\177?\256\235\314;\226V\313<\203J\306=\230\027\263>/\345h?\344\'\250>f\333a?\004\300\324>q\261x?Y%\343=\361\363\311>\351\226t?<n.>\272\267\020?\024\242{?N[\211=\363$\200>\356$@?\017\266??\215\223@?\223\327>?}KB?\364S;?\310\000I?9\272,?\324\275`?\242\210\333>6\316z?\324\331\242=\307\346\225>\032\007T?[\255\021?\022\036{?\344B\231=\303\312\215>\213\014M?\320=#?)\230l?\032z\217>\220\212N?\024\235\037?Sbp?\033\235j>6\3344?3WT?\244\332\020?\303\217{?4\221\213=T\016\202>\032\nB?)\333;?\375\004H?\306\364.?{\214]?\r\205\356>q\316~?F\021\230<\242>\225=c^\212>\341\362I?V\216*?\363\263c?\237Z\311>\320Ut?\347!2>\034%\023?\342Ez?;*\263=\270}\243>\032\222^?\013\203\350>O\330}?\t\303\010=\0142\004>EB\346>ei}?\003\372#=~i\035>\3326\005??\223\177?\256%\331;L\265\327<<\007\322=@}\274>M2n?\342\205\204>mqD?0\3166?w\021Q?\306O\031?J\375u?\375\347\031>6\306\002?7\341\177?\016,\366:\261\265\365;\007\336\363<\215\233\354=\247E\321>\201xw?\375\353\003>J\332\345>RT}?\'#)=0\'\">\310y\010?\246\340~?\235\013\217<-\214\214=\371\346\202>\215\336B?\367!:?^2K?\315\245\'?Apg?\325\243\261>\265\003h?\351\347\255>\217\254e?\027\363\274>=pn?\320\332\202>\252\322B?\314::?8\005K?\303\017(?H\354f?\345\366\264>\252\001j?\373\324\240>\013\237\\?i\352\363>\370m\177?\257\264\021<\366h\020=\222Q\013>M\272\360>\302\026\177?}ih<\200\035e=\243LX>H\234*?c\241c?<\316\311>\370\206t?\206V/>\254P\021?\277P{?\344)\223=\277\226\210>\373LH?oR.?\026y^?\327\026\351>\031\363}?\316,\002=k\023\374=\244\014\335>t:{?\342\330\225=\034\342\212>\252kJ?Rv)?\215#e?pW\300>\232+p?\036\235m>\013z6?$\241Q?\207\342\027?\016\026w?\331\247\t>\'M\356>\302\306~?;\337\233<\372\347\230=q}\215>v\307L?\333\343#?\236\337k?wZ\224>5\274R?\217\013\025?h\024y?\211v\327=\177\313\300>\036ep?\341uj>\364\3064?IzT?\026~\020?\375\277{?i\276\205=\370\004z>\213\371<?O\350E?\313\2433?QUV?E\212\013?N\353}?~\027\004=\364\251\377=t\277\337>\315\357{?/\354\177=\251\356o>\311\2667?\314\177O?\202?\035?4\242r?5\262J>\307\222\"?\274Rm?\211\203\212>\377\024J?k?*?\204\034d?\254\315\306>\2158s?PBB>,h\035?\357|r?\343\307L>\027\324#?H\361k?V\343\223>\315WR?\212\016\026?\376ex?+\007\354=\204\323\320>\243Nw?\307\\\006>\355v\351>\'\004~?\246\364\373<\3314\364=@\026\327>\036vy?\027\344\313=\246\227\267>#\205k?|\273\226>\271\266T?O\336\017?\307\020|?\244\357w=\237\355h>\274\3613?+\327U?\241\335\014?\344i}?\344\332#=\334L\035>\005#\005?t\226\177?\337\300\322;\335e\321<\242\013\314=P\267\267>\t\227k?.C\226>\221ST?7\344\020?\267\212{?,-\214=\376\224\202>S\216B?8\311:?\322\000J?\032n*?\301\336c?\250O\310>\301\342s?\341\2478>p[\027?\305yw?\024\331\003>7\276\345>\222N}?B\213*=nq#>\005[\t?\345\241~?\n\036\256<\243j\252=i<\234>$\037Y?T\345\003?J\303\177?\017\235r;\"\267q<8&n=\207M`>\226+/?\336;]?\226[\360>R\013\177?0\304s<\270#p=\210\017b>\255\'0?e\304[?O\326\370>\262\314\177?\302\020M;\177lL<\212\337I=~\354?>\316\363\033?\251\312s?\267\004:>\001:\030?K\324v?\255y\r>\270\333\363>\224l\177?\371\026\023<\354\304\021=\341\224\014>,\220\362>tK\177?\016\r4<\205\0222=\251T*>\206\377\r?6\360|?\257\232A=\005t8>F:\027?\351\221w?kp\002>\246\245\343>\034\334|?\312\201F=\371\342<>p\013\032?\263fu?n\217\">\370\300\010?|\315~?f\212\230<A\263\225=\374\301\212>ANJ?\251\272)?\266\312d?\010\210\302>\233=q?\340\210^>u,.?\371\257^?_\322\347>j\267}?\326\327\020=\236\270\013>;P\361>N(\177?~\374V<R*T=\360,I>\n\247!?\nNn?\275\306\203>z\270C?\255W8?\031fN?\177\366\037?\177\tp?\006{o>Jy7?\243\352O?`5\034?\037\221s?\273D=>\027I\032?I4u?\242r%>d\267\n?\2434~?C\022\344<\277\270\335=\257\267\305>\'\273r?\211LI>8\272!?\3319n?\346Q\204>=?D?a97?.YP?\221 \033?u\200t?Q\265/>\370\216\021?\315.{?\320?\227=E\024\214>]\202K?l\351&?|Wh?i\306\253>(Jd?\333\257\305>\226\267r?\252\177I><\331!?\031\031n?a3\205>U\030E?\200g5?\355oS?\3558\023?\001:z?D\225\264=\374\250\244>\006i_?\026\207\343>T\325|?J)H=Aa>>!\374\032?D\237t?t\364->ag\020?\251\313{?:U\204=t\220w>o\266;?\232IH?\020Z.?\nn^?\tX\351>\263\376}?\264\243\376<i\271\366=N\000\331>\030\017z?\220\263\271=\357\334\250>&Wb?J\311\321>K\250w?\273!\001>\365\261\341>\236i|?\355`b=\371\335U>13)?Aze?u2\276>\372\025o?\360\276|>\322\\>?\242;C?\355^9?]\222L?\023c$?\361Ok?\237 \230>}\332U?\273\324\014?wm}?\317\372\"=\251~\034>\002\224\004?*\254\177?\013v\247;\365\232\246<\2127\243=\2215\226>QHT?\331\001\021?\004{{?\322\021\216=\3326\204>\027%D?\032q7?\324\370O?\355\021\034?L\260s?+\202;>P,\031?C\031v?<K\030>\341\244\001?0\365\177?\035\365,:\346\327,;3c,<\336\222*=gx#>\304_\t?\201\240~?\364\315\256<\017\023\253=\300\310\234>9\214Y?\317\264\002?\264\342\177?JC\352:\032\330\351;\344,\350<Y\230\341=\264\276\310>\341\022t?/\3565>\204\233\025?w\264x?\032\312\342=\353\254\311>\330xt?1$0>\277\327\021?\213\006{?\273\026\234=D1\220>\022+O?\217\021\036?\205\337q?\220\216U>\355\004)?\260\265e?\024\271\274>\315Qn?\317\254\203>M\237C?\351\2148?1\010N?\007\334 ?\005!o?\233%|>\027\017>?\300\322C?\t 8?\340\307N?]\006\037?\326\365p?\217\177b>1f0?\023f[?-\362\372>u\346\177?\253C\314:-\362\313;9\255\312<\213\251\305=\277\225\262>\351\226h?Q(\252>\0207c?\357b\314>\013\230u?\276\272\037>^\320\006?HF\177?U19<s\0317=\035\352.>X\t\021?\010w{?\335\214\216=\313\240\204>`\213D?\245\2266?fpQ?\270^\030?j\270v?\231\027\017>\2021\366>\325\237\177?\237\016\300;s\356\276<={\272=S\200\251>\370\305b?\251\036\317>\271\252v?\274\342\017>\355U\367>\356\264\177?b\370\225;\254H\225<?\220\222=$\023\210>\360\321G?\203g/?P\343\\?\242^\362>7F\177?bB9<\036*7=J\371.>U\023\021?\265q{?61\217=6.\205>_\023E?5r5?\r^S?\205g\023?\342\035z?(\360\267=\000k\247>:Ya?\032\332\327>\"\264y?\025\207\304=1\253\261>6\010h?\241\312\255>\304\231e?vj\275>\215\256n?;,\201>\333*A?\326\244=?\037\240D?-j6?$\274Q?\233\235\027?4Iw?\310\255\006>^\356\351>\367\030~?D\265\361<\216\223\352=K\265\317>\346\343v?\313\221\014>\261\213\362>\373J\177?\326\2044<\251\2072=\232\277*>\330F\016?\263\320|?\037JI=\307e?>\205\237\033?\332\023t?\016\3405>h\222\025?\235\272x?\245\020\342=x\034\311>9;t?q\2443>\231 \024?\220\253y?\347\213\305=\323}\262>o\210h?\352\206\252>^vc?\343\331\312>2\367t?\275\360(>\207\021\r?\335T}?!\001)=\371\007\">sd\010?E\346~?=B\214<y\333\211=\344\223\200>\217\223@?\216\327>?\207KB?\340S;?\354\000I?\345\271,?J\276`?\332\205\333>k\315z?#\362\242=8\373\225>\n\030T?\333\200\021?\2106{?\267Q\226=<I\213>\334\311J?\267\232(?%=f?\300Y\271>\251\200l?\205\031\220>R\026O?\336D\036?&\257q?\216>X>&\224*?7\254c?\315\212\311>Yjt?5\3670>\377a\022?J\270z?\216z\245=\250\033\230>u\326U?\212\337\014?\037i}?\t\013$=&y\035>\262A\005?y\221\177?\000\257\334;\2062\333<\nU\325=6\034\277>P\215o?eBv>z\t;?\206\212I?\323~+?\230pb?\316,\321>low?\226s\004>x\243\346>\314|}?\3748\037=\177\010\031>\265)\002?J\355\177?\345\250\225:&}\225;\220\316\224<\224\032\222=I\256\207>KsG?b;0?\265\246[?u\200\371>\306\325\177?x\314(;+](<B\242&=\324\332\037>q\346\006?\215A\177?,\345=<\273\261;=\351\0273>L\305\023?z\344y?\r\307\276=\212\001\255>\000\030e?p\240\300>\323Op?\343\240k>\262h5?\356mS?!>\023?\3406z?\327\364\264=\260\367\244>\027\241_?]8\342>)\211|?\237\265Z=\002\010O>\205,%?ghj?\001+\236>\346\234Z?sj\377>\251\377\177?\251\273\2567\272\272\2568\000\267\2569\031\250\256:\204l\256;\325~\255</\322\251=J\275\233>\320\273X?]\371\004?\t\235\177?\314\241\305;\247p\304<\301\272\277=\273\307\255>\347\227e?Kv\275>\264\264n?\253\001\201>\250\000A?\252\372=?U\372C?\n\3147?\304ZO?l\233\035?\255Mr?\245kO>\325g%?J#j?\021\366\237>\215\370[?\326\252\367>\221\272\177?G\270\212;\361!\212<\254\315\207=\264\230}>\350\312>?[dB?h ;?1`I?\000\340+?\357\353a?\331Z\324>\032\217x?\3540\347=\301\027\315>u\340u?\006\221\033>\312\356\003?\"\302\177?\261;w;\355Lv<\r\231r=\262:d>\213\\1?\305\355Y?A\243\001?F\365\177?\021\240+:M\203+;d\020+<)G)=8H\">Y\220\010?\244\332~?\340\005\222<\212k\217=``\205>xCE?>\n5?\010\013T?\t\243\021?\304#{?\234\223\230=\2515\215>*\207L?\336}$?n1k?!\355\230>\317\177V?\204\027\013?\342\023~?\0246\364<[\356\354=P\205\321>\256\217w?\270\221\002>G\327\343>\021\347|?\274\325C=\307x:>\331\203\030?\016\234v?B\274\020>Z\216\370>\226\310\177?\037v];\212\266\\<a\275Y=7*N>9\250$?\005\001k?-1\232>&\203W?cV\010?\363\351~?\272o\212<\325\030\210=\021\033~>\243\014??\035\343A?\207+<?EnG?\230F0?\316\225[?>\341\371>\213\332\177?M\275\025;\267e\025<\371\010\024=S\257\016>)\233\365>\370\223\177?\312\265\327;DJ\326<B\257\320=\232k\273>\324\240m?6m\210>4&H?\365\251.?\354\371]?\263\003\354>\224p~?z~\306<;\257\301=\005^\257>]\232f?\007\005\267>\3361k?5\352\230>u}V?\341\035\013?\255\021~?OL\365<\366\363\355=BN\322>\010\330w?L\256\374=X\201\335>\035Z{?\023\t\222=H\237\207>/eG?\340Z0?/w[?i\220\372>s\342\177?3I\354:(\334\353;\214)\352<\014x\343=H4\312>\004\262t?\r\343,>\224\262\017?X&|?+\265r=zSd>Gj1?\223\330Y?\313\336\001?\002\362\177?\225\322_:\251\241_;N\336^<5\326[=\262\tP>\301\305%?\365\264i?v\320\242>m\024^?\362g\353>\343W~?\370\256\322<\334C\315=$\261\270>)#l?\202\222\222>\2249Q?\017\352\030?\035Mv? M\025>\320\020\377>!\377\177?\232y_8\215v_9\\j_:\2369_;\370v^<\256q[=\363\257O>r\220%?\266\363i?d1\241>\237\343\\?\334\\\362>\006F\177?xr9<\036Y7=\025$/>\177/\021?\241b{?]\002\221=\350\275\206>t\220F?\27422?\222\240X?\334D\005?\363\220\177?\265\270\335;\2448\334<\031M\326=y\340\277>9\360o?\325\334p>\"58?\331\242N?pa\037?\007\235p?\231cg>`\0323?\3541W?\0374\t?-\255~?b\211\250<\275\021\245=\302\303\227>\377\216U?\353\236\r?\346\031}?\265l7=\3535/>:;\021?R\\{?\372\304\221=\342d\207>6.G?V\3250?8\275Z?H\263\376>P\376\177?(5\3308s/\3309\241\030\330:l\275\327;\315Q\326<f\266\320=Iq\273>\337\243m?YX\210>\265\022H?\344\325.?\276\271]?)|\355>2\251~?\220\201\252<\016\365\246=\267X\231>D\326V?[-\n?\263a~?\023\327\315<\001\253\310=\215\001\265>\351\007j?\231\253\240>@\200\\?\216\234\364>N~\177?\262p\001<\347j\000=k\310\370=\315\217\332>`\206z?\271t\253=\025\032\235>)\313Y?p\004\002?\271\357\177?;2\202: \021\202;\365\214\201<\364\000\177=\306 o>8I7?\323=P?4e\033?\374Et?\001\0103>\365\272\023?\335\352y?\201\004\276=+c\254>\356\260d?^*\303>*\213q?\230=Z>[\272+?x\037b?$\037\323>\357!x?q\005\364=%\362\326>\217jy?\rC\315=~\260\270>\315\"l?\360\224\222>\247;Q?\311\344\030?7Qv?u\020\025>\325\272\376>c\376\177?G\201\3168\023|\3169Ag\316:\014\024\316;C\310\314<\305\251\307=\2312\264>\001\216i?\244\321\243>\246\316^?\275\034\347>\232\224}?\357b\031=y\244\023>\313\265\374>-\365\177?\263$-:m\007-;y\222,<%\301*=\323\242#>\243|\t?\377\227~?1\003\263<\305\031\257=>!\240>\352\030\\?\254\360\366>\353\255\177?\006\365\243;\002#\243<U\343\237=\317g\223>=\357Q?\360\032\027?\230\250w?=\035\001>=\253\341>\006h|?\352\303b=\0026V>mf)?!8e?N\325\277>\240\352o?(+q>\226^8?\356YN?N\024 ?\254\353o?\203\034q>\327V8?\223gN?\343\362\037?\032\rp?\210Ho>g^7?3\031P?\366\300\033?\353\366s?\257\2037>M\240\026?:\000x?=\371\367=\340\362\331>\032Xz?\"\375\260=\201\261\241>CB]?T6\360>\277\006\177?XNx<\370\212t=e\361e>\364N2?AtX?{\277\005?\330{\177?\316\343\003<\002\324\002=\204L\375=z\370\335>\000z{?91\216=\344Q\204>;?D?e97?(YP?\241 \033?h\200t?\030\266/>z\217\021?\205.{?iH\227=\231\033\214>\000\211K?\304\331&?\203jh?LJ\253>A\370c?h\260\307>\025\235s?\361\227<>\020\334\031?\037\215u?@[ >\264>\007?\013.\177?\225HQ<6\234N=:0D>\301\231\036?i^q?D\270\\>\365$-?\361\'`?&\020\337>)\303{?E\\\205=IZy>\031\242<?w\216F?\03672?\261\231X?\350W\005?\313\215\177?\024\004\344;\345m\342<\263+\334=O\200\304>\345+r?\rNQ>\353\205&?\341\317h?\204\263\250>\355:b?\251v\322>n\346w?\316\376\372=\371;\334>\320\000{?\005\307\234=\240\306\220>2\255O?\231\316\034?\237\010s?\013\364D>e\022\037?)\352p?[$c>\373\3010?\273\332Z?\315\013\376>/\374\177?\222Rt9\377Ct:\272\tt;\030!s<y\205o=\321\203a>\223\331/?\2159\\?\2554\366>\023\240\177?\302\222\277;\tt\276<\206\006\272=\326 \251>N\205b?Z\255\320>\214@w?\325.\007>s\254\352>09~?&\324\341<q\232\333=>\016\304>\254\366q?\344DT>YD(?H\252f?\356\236\266>\177\367j?\335p\232>\276\265W?\337\313\007?\336\014\177?G;r<v\246n=\327\276`>6k/?\326\335\\?q~\362>\226I\177?%\3505<\035\3433=\246\374+>\306\031\017?\341o|?b\333`=W\203T>\344h(?7|f?@\306\267>w\237k?y\n\226>\254$T?\250_\021?\240H{?B$\224=\003m\211>+\024I?\370\215,?\220\373`?\347\022\332>\233az?_\332\257=\326\300\240>\017\220\\?!A\364>\013v\177?\034\253\t<\371\202\010=C\366\003>\213\351\345>nW}?!`(=<t!>b\377\007?(\000\177?\306\330~<\372\341z=\030\204k>&Y5?\335\207S?{\372\022?G_z?\245!\260=\334\373\240>\356\273\\?\033C\363>\277]\177?\014\332!<\274@ =\254\373\031>\371\323\002?\002\340\177?7\315\377:jM\377;3P\375<\366z\365=d\016\330>~\304y?9\225\302=i\030\260>?\017g?\323\025\264>\363|i?\033B\244>s\037_?)=\345>\3303}?\'\0251=Cm)>\347d\r?c2}?Jp1=\202\300)>\223\234\r?\345\032}?Z.7=%\375.>\337\025\021?Zp{?\006[\217=,R\205>\3345E?\261\'5?+\332S?9#\022?\035\334z?\354.\241=j\177\224>B\333R?8\273\024?\331Hy?\267A\321=+\340\273>\023\337m?<\302\206>\215\224F?\262)2?\277\256X?\225\035\005?S\227\177?U\004\321;\005\257\317<!k\312=yi\266>\317\330j?\352=\233>\313WX?\030\016\006?Xm\177?\250S\022<\032\005\021=\255\342\013>b\215\361>C/\177?\\\022P<\345mM=R C>\302\361\035?W\375q?\342\345S>\262\014(?\037\360f?.\336\264>*\363i?\0025\241>M\346\\?NM\362>]D\177?R\031;<Z\3668=)\2340>c&\022?Q\332z?\016f\241=\335\255\224>=\002S?2V\024?\254\211y?\035\222\311=D\273\265>1tj?\225\334\235>\335`Z?\377^\000?s\377\177?\307\377\0148\220\376\0149\266\371\014:M\346\014;\301\230\014<\343c\013=\211\245\006>7\342\351>\336\026~?\276\275\362<d\214\353=\002u\320>\253+w?\363e\010>\251u\354>,\202~?\033\315\275<Wg\271=\206\236\250>\232,b?\222\316\322>\226\005x?lX\367=\364x\331>\2413z?\377W\265=MI\245>\010\333_?\247\335\340>\2526|?\372\277n=b\325`>\333w/?\026\313\\?7\353\362>\342T\177?\272\253*<\230\344(=\313\355!>\215R\010?\362\352~?\372\360\211<[\236\207=\235F}>s\241>?\231\265B?qw:?\244\226J?A\022)?\227\244e?\270%\275>\271\212n?\361#\202>\\\037B?C\257;?\374VH?\323;.?\311\231^?\242U\350>\362\317}?F\321\n=\341\034\006>\243\030\351>k\363}?\206\030\002=p\355\373=\001\360\334>\2372{?\036\312\226=\357\257\213>W\'K?\263\277\'? Pg?js\262>!\202h?\033\260\252>\331\221c?\370.\312>\310\257t?\240\003->&\310\017?\274\033|?\257Gu=\213\227f>a\2522?\003\344W?\354L\007?\320*\177?x~T<\361\274Q=\220\377F>{S ?\030\254o?\375\224t>\347):?\362#K?\255\307\'?6Fg?i\263\262>\326\250h?\025\263\251>;\350b?\001K\316>6Yv?-\232\024>\n\023\376>K\374\177?\240Mm9\340?m:\351\010m;o-l<\340\305h=l\213[>vy,?\027\030a?\343e\331>\343-z?v\007\266=\242\331\245>\000A`?{y\336>\013\234{?\314\025\212=\\\306\200>\302\305@?\030r>?%\022C?\375\2659?\321\365K?/\330%?0\237i?@`\243>\312|^?\364\000\351>,\357}?\362#\003=+\342\375=\021i\336>\275\227{?\304\232\212=]9\201>\3357A?V\212=?\"\323D?\240\3745?\262uR?\216\301\025?\261\232x?\210\323\345=\004\t\314>\251su?.\321!>\374>\010?\003\360~?\006n\207<\3340\205=\304\016y>V{<?\322\327F?\r\2251?h\226Y?M\230\002?\021\345\177?\017c\327:s\010\327;4\237\325<\"\r\320=w\352\272>b[m?mH\212>\260\336I?\367\274*?\316uc?g\335\312>\250\370t?f\333(>:\003\r?\260Z}?\344\223\'=\277\270 >\342~\007?C\037\177?\263\367_<\355\347\\=\366\375P>\213V&?\306\010i?l>\247>X:a?\342\225\330>\177\356y?\273\225\275=\355\010\254>\333ud?\262\235\304>\2139r?;\213P>\230\022&?\346Yi?\017)\245>*\304_?\223f\341>\256W|?;\274f=\317\274Y>gp+?1\204b?3\264\320>\024Cw?\031\t\007>\346t\352>\342/~?2j\346<\032\357\337=\314r\307>\353\201s?I >>M\323\032?\230\301t?\277\377+>\325\033\017?\350n|?\300\027a=\024\271T>P\210(?yTf?\235\304\270>\001.l?6I\222>\325\372P?\024\211\031?\303\317u?\362\206\034>\302\231\004?V\253\177?]\033\251;\363;\250<}\307\244=v\205\227>6\\U?\215&\016?\013\337|?\265\312E=\234=<>\371\242\031?\017\273u?\277\267\035>\006m\005?=\212\177?\022\031\353;Di\351<\276\302\342=1\247\311>jvt?\230G0>\367\356\021?\221\371z?\326\245\235=<\203\221>\212PP?A6\033?\013nt?e\3010>\306>\022?s\314z?\332\017\243=4\024\226>\271,T?zJ\021?\030T{?\242\302\222=O>\210>[\372G?\262\014/?Wi]?YR\357>\325\351~?6~\212<\323&\210=U3~>\333\030??\007\313A?\026]<?\360\020G?f\0261?\253YZ?Ps\000?0\377\177?\251\304O8\006\302O9}\267O:Z\215O;\024\345N<>HL=\013\030B>\356M\035?\001\225r?CoK>\332\004#?\262\326l?1\321\215>G\022M?\377/#?]\247l?\343\022\217>\253/N?\254{ ?e\203o?\255\314v>-Q;?\357\005I?w\256,?@\316`?M%\333>\303\261z?\335B\246=\204\303\230>F^V?\031r\013?\374\363}?\321\364\001=\215\252\373=\221\275\334>\304${?\303t\230=g\033\215>\234oL?+\266$?\t\361j?\016\234\232>\374\327W?\363m\007?6#\177?\220\013\\<\000\027Y=\200\225M>OO$?efk?\363\211\227>\337_U?\311\034\016?[\343|?o\275D=EJ;>\337\010\031?\0205v?\237\260\026>\302\203\000?\361\376\177?I\240\2078\n\236\2079\017\225\207:(q\207;\327\341\206<M\251\204=\331\"x>\367\001<?R\274G?\001\230/?V\233\\?\341\377\363>\375o\177?\355\261\017<Lo\016=Q{\t>\006\014\356>\260\275~?\364\\\240<Q9\235=f\'\221>$\001P?%\375\033?\177\302s?\335z:>,\205\030?\n\233v?N\313\020>\357\243\370>\326\311\177?5zX;\'\303W<\301\353T=L\332I>+\020\"?\317\336m?\021\304\206>J\226F?\334%2?\301\264X?\356\014\005?\370\231\177?-\276\313;\337y\312<\273x\305=Zn\262>\017\177h?&\304\252>3\237c?\334\333\311>\274\214t?\207\002/>j\031\021?vn{?d\225\217=\\\204\205>\354eE?\231\2774?j\206T?\020^\020?n\320{?\224\301\203=;\217v>V1;?\344@I?\266\',?M\211a?R\265\326>\376Vy?\274\224\317=\200\212\272>s\'m?\016\253\213>\351\"K?\034\312\'?0Cg?\355\306\262>\236\264h?\004f\251>.\264b?m\214\317>u\324v?@w\r>6\330\363>?l\177?\322k\023<>\030\022=D\342\014>f\000\363>\nW\177?\026\206(<U\312&=\244\377\037>\301\377\006?\016<\177?8\\C<\341\007A=\023\3577>(\345\026?@\317w?Z\265\375=[G\336>\340\216{?\226\254\213=\372%\202>]!B?\037\253;?\265^H?]*.?\376\262^?\203\300\347>\t\264}?,\254\021=\344}\014>\321n\362>\357G\177?\310\2147<]~5=\236s->@\022\020?\333\366{?\3726~=\347on>\327\3526?X\340P?\021\314\031?\010\232u?\200\235\037>?\274\006?\213J\177?\332\3644<6\3652=\227#+>s\211\016?\267\262|?\227\230P=\022\371E>\300\262\037?\343Lp?&\312k>\366~5?\275HS?\002\237\023?\014\374y?\237\370\273=\372\267\252>\027\227c?U\016\312>\013\242t?\365\313->\242L\020?S\331{?-\256\202=\003\257t>~7:?<\013K?\252\001(?\354\375f?a\205\264>\354\276i?\241\216\242>n\344]?\340\201\354>\t\204~?\201\341\274<\241\206\270=g\346\247>d\256a?\n\323\325>7\ry?#P\330=8w\301>v\271p?#\323e>H>2?r\216X?\tw\005?\211\210\177?\014~\356;\256\301\354<\001\352\345=r\032\314>\273zu?^i!>\361\367\007?\003\002\177?;\001}<\016\031y=\362\362i>\351\1774?&\357T?\300H\017?\224Y|?oFf=ETY>G4+?\226\325b?7\276\316>\300\205v?\322\006\022>\300g\372>\263\340\177?\260I\372:V\317\371;\314\347\367<Cg\360=\n/\324>#\200x?\351\363\350=\211t\316>Qiv?\346\253\023>]\300\374>r\365\177?W\323(:\202\267(;PH(<\324\215&=\021\310\037>\210\331\006?SD\177?[#;<)\0009=\025\2450>;,\022?\000\327z?\352\313\241=\246\003\225>\rJS?\232\233\023?#\376y?\343\270\273=\357\203\252>atc?C\346\312>U\374t?\243\245(>.\337\014?Di}?\000\002$=\327p\035>\361;\005?j\222\177?\255\315\332;\247W\331<z\223\323=\354\267\275>\301\326n?\356\025\200>\354\025@? \324??\242W@?DP??\225]A?`==?\307fE?\276\2754?y\211T?\374U\020?\216\324{?\325A\203=\215\260u>\263\275:?\371\025J?)=*?\200\037d?\000\273\306>30s?\213\272B>\272\262\035?\0248r?\034\240P>\370\036&?+Ki?\005\212\245>\325\010`?\000\313\337>\265\362{?\3777\177=\365Po>\344b7?o\021P?f\324\033?\t\346s?Sx8>\007=\027?\351\217w?I\216\002>*\322\343>\361\345|?\377\033D=Q\270:>;\254\030?\005}v?,\210\022>\213 \373>A\350\177?$\344\275:\267\235\275;\322\204\274<7.\270=\350\235\247>j|a?\331\003\327>;py?\323\226\314=\274&\270>\304\325k?\340\234\224>\374\363R?\'{\024?\033ry?\375]\314=?\371\267>3\274k?\025I\225>\003\204S?\211\004\023?NYz?I\330\260=\006\223\241>\312+]??\271\360>\242\026\177?g\211h<\202<e=-hX>/\254*?3\214c?!R\312>\213\276t?=,,>_9\017?\350`|?\226~d=z\277W>\257J*?\244\rd?\274*\307>\001bs?\337\354?>\013\364\033?t\312s?\271\007:>\352;\030?\330\322v?3\217\r>\336\372\363>\205o\177?\265)\020<\371\344\016=\314\350\t>\031\254\356>\300\323~?\007p\225<+\266\222=\2413\210>]\360G?+#/?EH]?L\023\360>h\002\177?\274\234|<\250\267x=c\235i>kQ4?J;U?L~\016?\306\267|?#]O=\247\335D>\235\004\037?\210\367p?\237gb>\330X0?Az[?\331~\372>\263\341\177?\247H\362:\000\326\361;\027\r\360<R\004\351=7\201\316>8nv?Mc\023>\002Y\374>\251\362\177?5cU:\2756U;)\205T<v\303Q=j\005G>\017W ?z\250o?p\307t>>D:?\007\364J?\r8(?\276\271f?\254;\266>q\276j?\343\355\233>\330\341X?\321\217\004?\303\254\177?XD\246;^l\245<7\025\242=\\A\225>\222}S?W\025\023?MOz?6\n\262=\360\217\242>c\345]?D|\354>.\203~?\221M\275<\264\355\270=\342:\250>n\350a?Op\324>j\226x?\217T\346=\016m\314>\037\234u?\306~\037>\030\247\006?\367N\177?E\2160<5\247.=\2724\'>D\347\013?=\311}?\034w\014=\365\245\007>\257[\353>\352U~?r\250\323<y0\316=8n\271>\364\213l?\360\314\217>H\323N?G\352\036?\003\021q?\236\377`>\211\217/?\354\247\\?\377\266\363>\023i\177?\353\223\026<\2441\025=w\302\017>\204\'\367>\301\261\177?\317M\234;\361\216\233<\276\232\230=\272;\215>\233\214L?\333p$?B@k?\303\211\230>\244/V?\323\357\013?\r\306}?\220?\r=\237`\010>\327m\354>\373\200~?5d\276<n\367\271=}\024\251>\353|b?\371\340\320>\230Sw?\333\022\006>\327\t\351>\304\360}?z\277\002=\023&\375=\212\333\335>Kr{?\016\037\217=\227\036\205>a\004E?\216\2225?\366\'S?B\364\023?U\307y?\322>\302=j\322\257>z\343f?\206/\265>\320\"j?:\371\237>\354\372[?4\235\367>\255\271\177? \177\214;\352\344\213<W\201\211=\341E\200>\315E@?\031t??\234\026A?\013\316=?\244PD?=\0247?1\231P?\230\177\032?V\007u?\257\004(>&s\014?\003\224}?\364\207\031=\267\306\023>\206\346\374>e\366\177?\216\260\031:}\231\031;T=\031<k\316\027=\030.\022>\343\237\372>\033\343\177?\321\017\347:\212\247\346;\347\007\345<\256\240\336=Km\306>X\rs?+\260D>\234\350\036?\240\022q?\321\350`>\301\202/?\352\272\\?\373H\363>U^\177?;E!<\332\256\037=/u\031>\335u\002?\311\347\177?\343\244\301:\246[\301;\2207\300<\365\264\273=\271\200\252><rc?\230\363\312>\334\001u?\311T(>\360\250\014?\350~}?\236\264\036=g\216\030>\r\324\001?\241\362\177?y\344U:\314\267U;`\005U<Y@R=~uG>\206\233 ?\000co?\377\217x>+:<?\272RG?\010\2040?\3438[?\016\364\373>\240\357\177?\237\370\202:\036\327\202;`Q\202<\252>\200=\246mp>4\3727?$\nO?\366b\036?\240\222q?\246\323Y>\206}+?]rb?\354!\321>pkw?\010\257\004>\224\373\346>#\216}?\303\370\032=\277\033\025>\327\312\376>\213\376\177?\361\254\2728\260\250\2729\255\227\272:\254S\272;qD\271<\321\023\265=0\021\245>7\263_?\375\313\341>\305o|?(\342`=_\211T>kl(?\302wf?\312\342\267>\217\257k?4\236\225>\335\312S?OK\022?K\305z?\212\353\243=\321\314\226>\371\304T?\224\270\017?f#|?\372ks=\230\364d>r\3031?eNY?\227a\003?E\322\177?\003\3136;}H6<QA4=\222R,>\316R\017?\304T|?{qg=\233]Z>\267\314+?[\006b?\022\271\323>\213Wx?\002\272\355=\304!\322>\036\310w?\370\212\376=\366\347\336>\313\270{?\351\234\206=\251\207{>\326\276=?\377mD?\205\3256?\350\004Q?\224o\031?\022\344u?\315[\033>\272\311\003?\233\306\177?\240ae;\030\224d<\270ca=\261\374T>\321\257(?X\"f?\355\004\272>\261\336l?\306\232\215>\260\341L?\342\244#?\000&l?S\177\222>,)Q?\256\023\031?\232,v?\250-\027>\357\333\000?\014\375\177?)\360<9r\347<:\231\304<;h9<<\326\017:=&\2341>\323\315\022?\243yz?\321\372\254=\221^\236>D\304Z?M\213\376>\341\375\177?\275\244\0079?\240\007:I\216\007;\201F\007<\224(\006=\254\303\001>\363\243\342>\004\242|?j\251T=\332\236I>%\354!?\023\005n?\035\275\205>.\234E?\300I4?\323GU?\347\\\016?\324\306|?\024\262K=\326\220A>\351\371\034?\205\341r?\364%G>\362j ?[\224o?-\340u>w\326:?z\350I?]\246*?\366\223c?\321!\312>@\252t?NT->\213\375\017?:\001|?\331\263{=6<l>r\2745?\271\341R?z\252\024?\256Sy?S\371\317=\256\332\272>\334Rm?\255\202\212>4\024J?AA*?\031\032d?\320\334\306>P?s?\351\340A>\260+\035?K\264r?\345\256I>\336\365!?\302\372m?\007\004\206>\326\337E?K\2663?q7V?\321\332\013?\334\315}?lT\013=\037\227\006>\370\314\351>0\023~?t\215\364<\205@\355=t\304\321>\214\246w?\332;\001>\005\331\341>\327r|?\003#`=/\337S>\304\010(?\t\365f?\220\276\264>\230\340i?\365\257\241>\037A]?\367<\360>\220\007\177?\233~w<\205\301s=\366?e>\026\3551?\210\rY?\\\026\004?-\275\177?\261\203\205;m\370\204<\344\317\202=\324\351t>0V:?U\323J?\220\204(?9Yf?=\246\270>\026\035l?\217\273\222>\245\\Q?\370\220\030?\376\221v?oQ\021>1d\371>S\324\177?F\224.;8\035.<\211C,=\334\004%>\013m\n?3M~?`\365\327<\357C\322=~\255\274>\266Kn?\315\326\203>\020\310C?\25568?\"\240N?\035h\037?{\226p?\304\277g>\333L3?&\341V?\321\017\n?\013k~?O:\311<\352H\304=\363x\261>m\351g?\256\222\256>\244\031f?y<\272>\004\375l?U\314\214>\212(L?\237_%?\342,j?i\266\237>\272\310[?u\275\370>K\313\177?\032\250R;\302\372Q<\324IO=L\314D>\356\371\036?\340\001q?}\325a>?\0070?!\365[?\200\276\367>\327\273\177?E-\210;e\234\207<\262]\205=\305\\y>_\243<?\016\214F?p<2?X\221X?\003o\005?\347\211\177?\'\305\353;\340\022\352<\254b\343=\247#\312>\006\253t?\nI->\027\366\017?\363\004|?\030\315z=\304qk>@O5?\\\230S?g\317\022?\266xz?3\027\255=\'v\236>?\326Z?A%\376>\220\374\177?\326\026\\9\002\013\\:\271\333[;\350\036[<\2600X=\215\307L>\344\323#?\201\361k?\321\341\223>\205VR?\326\021\026?\270cx?\225K\354=\'\010\321>\376aw?\006<\005>V\314\347>F\266}?\204\037\021=9\373\013>\017\261\361>E3\177?\006\027L<3\214I=\\\241?>\321\304\033?\223\363s?)\2647>e\277\026?.\352w?U\216\372=\013\347\333>\371\350z?\333\243\237==2\223>\276\301Q?M\217\027?\300Sw?\177\020\006>[\006\351>$\360}?\324\346\002=\301o\375=\376\022\336>\n\201{?\347W\215=\250\226\203>\310\211C?]\2728?\276\267M?\317\237!?\244Un?T\222\203>\222\205C??\3038?\377\247M?\013\306!?`-n?\312\247\204>\035\222D?4\2106?\006\211Q?\002 \030?\356\347v?\345U\014>\3034\362>\272A\177?\'\270=<\301\205;=\366\3572>Q\253\023?}\364y?\n\337\274=\377s\253>\323\023d?\020\004\307>\317Ps?\312\344@>\313\216\034?\317As?\353\274A>R\025\035?\247\310r?\340\212H>\216D!?\004\265n?\203\377\200>\204\376@?\005\377=?\347\361C?\363\3357?\205;O?\330\350\035?\255\005r?\035oS>\006\307\'?\005Gg?0\256\262>\257\245h?\266\307\251>\"\366b?\n\365\315>\2677v?l\211\026>\027h\000?W\377\177?\321J)8\021I)9\022B):\030&);U\266(<\225\371&=\013+ >\226\035\007?z5\177??\346I<RiG=\003\264=>0\217\032?h\372t?\311\301(>\017\362\014?\247a}?h\337%=\314\'\037>/k\006?4[\177?/b$<\367\273\"=\320D\034>\324k\004?\320\261\177?\2370\234;\010r\233<\356~\230=\017$\215>`wL?\235\243$?M\006k?\335\r\232>\013gW?3\243\010?\223\325~?\201\210\224<\020\327\221=et\207>\323<G?\322\2640?\306\356Z?\362\231\375>?\372\177?\321\030\2709E\010\270:\037\306\267;E\276\266<\254\252\262=s\024\243>\332E^?\007E\352>\313\'~?9g\352<2\262\343=\202a\312>\376\304t?*\316+>\346\372\016?d~|?2T]=\213^Q>\252\217&?#\304h?h\000\251>Gob?\3544\321>drw?EG\004>\301a\346>\266o}?\346m\"=\362\374\033>\3409\004?\220\270\177?\326\270\216;\263\031\216<\257\242\213=m\035\202>\364\030B?\177\274;?J>H?\235s.?\375H^?\2142\352>\246$~?\243\363\353<\332\'\345=\320\203\313>P=u?b\356$>\317]\n?&R~?=\204\325<\223\363\317=\031\326\272>bPm?\227\223\212>\272#J?M\035*?}Id?\t\264\305>~\271r?]dI>\255\310!?\231*n?\355\272\204>\215\244D?\255`6?J\314Q?Xt\027?\215gw?\n\351\004>\201Q\347>\321\236}?D\341\026=xR\021>\255e\371>g\324\177?\374E.;X\317-<Q\367+=\013\277$>\266=\n?|\\~?zj\320<\020\035\313=-\370\266>\211*k?R\033\231>\371\244V?\372\262\n?\0356~?\331W\343<\262\010\335=\261-\305>\010|r?\322\324L>\332\333#?\227\350k?\367\035\224>E\211R?\031\217\025?\327\274x?Z\315\341=\006\350\310>\261$t?\254\3534>\233\364\024?x#y?u\256\325=\374b\277>\036\261o?\334Nt>A\005:?zfK?.+\'?C\007h?\312\320\255>\271\235e?WQ\275>z\241n?\256\206\201>Z\204A?\030\356<?\034\376E?\"t3?\027\242V?\310\272\n?\2013~?\217\241\344<\r@\336=\250!\306><\353r?h\232F>\232\025 ?^\352o?\271.q>y`8?\233VN?p\034 ?\203\343o?\241\216q>+\2238?#\375M?\372\366 ?M\005o?u\246}>\331\321>?\273VB?\250<;?\361+I?\245W,?\005Ga?\325H\330>\256\326y?yk\300=LW\256>\317\363e?\263-\273>\232\177m?\270P\211>\362\371H?\320\311,?\005\250`?o\014\334>\177\363z?y`\236=\022!\222>g\330P?\"\340\031?\324\211u?\231\213 >\346_\007?v&\177?+\321X<\245\362U=\312\305J>\233\236\"?\362Em?\346\332\212>\020eJ?\252\205)?\247\017e?,\325\300>\344ip?\3042j>\216\2424?<\266T?\233\337\017?\"\020|?s\027x=\234\020i>\315\0044?3\270U?\2460\r?\030H}?+!,=a\345$>\265W\n?\037T~?\310\212\324<\027\007\317=\210\031\272>\364\351l?#N\215>\034\235L?\\I$?$mk?\254\\\227>\343:U?^\177\016?I\267|?j{O=\335\370D>\\\025\037?H\347p?\003Mc>\230\3300?>\270Z?|\317\376>\226\376\177?\364\033\2658\363\027\2659\357\007\265:\355\307\264;\232\310\263<\211\326\257=\250\275\240>\262\215\\?\317N\364>Kw\177?\335k\010<\022I\007=/\321\002>\3175\344>\272\373|?\024\313>=\363\3475>\177\227\025?.\267x?5x\342=\'m\311>\270]t?\357\2561>\027\332\022?lrz?\310\327\255=\035\026\237>\300O[?\245q\373>>\353\177?\215\002\246:\271\314\245;\366\365\244<\226\243\241=\260\341\224>\246-S?y\345\023?\211\320y?\221&\301=+\357\256>XTf?p\305\270>w.l?\034F\222>-\370P?\315\217\031?e\312u?\000\326\034>\237\320\004?D\243\177?\2554\271;\263(\270<\337\004\264=\0032\244>\351\023_?\276\201\345>\034B}?\325\227-=l<&>\321?\013?\320\005~?`#\373<mp\363=\231\200\326>\362Ey?\316\231\321=>&\274>K\004n?{\302\205>N\241E?\231>4?\nZU?W,\016?{\334|?\245jF=\022\316<>>\376\031?mqu?\373\361!>jU\010?3\352~?\222O\212<\303\371\207=.\345}>|\361>?\221\030B?K\275;?\316<H?\370v.?\037D^?;O\352>\206)~?\344\214\351<V\344\342=W\301\311>\202\201t?\021\246/>\363\204\021?K4{?\266\226\226=\027\204\213>y\377J?=\035(?f\333f?sc\265>\036Aj?\0210\237>dc[?\201\001\373>\017\347\177?8t\307:\205&\307;\253\360\305<I(\301=\220\360\256>:Uf?\312\277\270>R+l?^[\222>d\nQ?\261a\031?\031\357u?A\271\032>gX\003?<\323\177?\320\3572;\276r2</\2010=\021\346(>`\n\r?\307W}?GJ(=.`!>\246\361\007?\223\003\177?\346s{<\365\227w=\213\240h>\263\3073?L\033V?\231&\014?o\261}?\230O\022=\252\025\r>\344J\363>\205^\177?\350\024!<{\177\037=\201I\031>EW\002?\025\352\177?OK\257:K\017\257;\337\037\256<el\252=\340=\234>H Y?\'\342\003?\255\303\177?1\022q;./p<\314\251l=4\375^>,n.?\343P^?\374\003\352>\257\034~?\"\340\357<\000\332\350=\204`\316>\217av?\252\036\024>\231c\375>/\371\177?\257\037\3329t\010\332:\233\253\331;r9\330<j\204\322=\272\340\274>\235fn?=\035\203>\212\023C?\021\2639?\025\373K?\256\313%?\366\255i?\257\376\242>\0136^?\"\242\352>w7~?`\255\342<\253g\334=`\257\304>\275Ar?/\026P>+\315%?4\254i?K\n\243>z>^?xp\352>#/~?T\310\346<\360G\340=1\270\307>\201\240s?uf<>\314\274\031?T\246u?\264\350\036>\260?\006?\320c\177?\r\321\033<\262U\032=\376\204\024>\367\364\375>\323\373\177?d\221\2059\256\210\205:\333e\205;\325\332\204<A\263\202=\340\267t>\036<:?\321\002K?f\025(?9\345f?L$\265>?\034j?\304$\240>\216\033\\?z\341\366>\327\254\177?\"\034\246;\221D\245<\006\357\241=5!\225>\276bS?K[\023?I%z?\021\016\267=n\261\246>F\330`?\245\350\332>>\240z?\036\\\250=\375\204\232>\264\305W?\033\240\007?i\027\177?8\303g<\361{d=!\275W>SI*?p\017d?\177\037\307>\003]s?\3334@>\006!\034?\t\243s?\333A<>\250\245\031?\350\270u?k\327\035>\357\202\005?\177\206\177?A\217\362;\232\303\360< \260\351=\335\005\317>?\241v?Lo\020>\345\037\370>\372\301\177?\217\332w;\227\352v<\3701s=z\301d>-\2471?NzY?\355\346\002?P\336\177?V\256\006;{g\006<9M\005=\244\366\000>\177q\341>JZ|?\003\032f=\327,Y>\224\035+?3\364b?\376\000\316>c<v?cD\026>V7\000?\320\377\177?\177^?7\360]?8\264[?9\303R?:\004/?;=\240><th<=\332\2753>\0271\024?,\241y?\345\307\306=\252|\263>\302!i?U\232\246>\'\310`?5J\333>^\274z?\202\375\244=\311\262\227>,\201U?\337\303\r?\026\n}?~I;=7\2712>\261\207\023?O\nz?\206E\272=cT\251>?\250b?\007\326\317><\360v?x\332\013>t\201\361>\352-\177?~iQ<H\274N=\020MD>\212\253\036?cMq?s\251]>\363\255-?\212e_?\332\233\343>\360\331|?c\tG=j]=>\246X\032?\177\'u?\002.&>\0256\013?;\t~?\310t\371<$\334\361=\035L\325>{\340x?\365\230\335=\307\236\305>\315\257r?G\357I>\340\034\"?E\321m?\001!\207>/\356F?\204c1?\004\343Y?y\301\001?\253\363\177?\211@E:\212\032E;\310\202D<f\'B=j\3638>\266\213\027?dVw?\036\351\005>5\314\350>\247\345}?;{\005=\247!\001>\326\261\341>\226i|?\270bb=\221\337U>\0364)?\017ye?\n:\276>\340\031o?\321\210|>hA>?\004qC?\231\3568?\374ZM?\221\200\"?cfm?3\375\211>k\231I?\224\\+?\023\237b?\225\016\320>w\005w?\264\236\n>\251\265\357>\240\366~?\256&\204<\356\004\202=\234\207s>\356\2349?\370\"L?\340l%?d\035j?-\035\240>\336\025\\?3\002\367>(\257\177?\324}\241;\025\262\240<\034\213\235=\237l\221>\003=P?=g\033?>Dt?[!3>q\313\023?\256\340y?\302:\277=\252_\255>\345Te?;\037\277>\330\216o?\r-v>f\376:?\364\236I?\330O+?S\260b?;\244\317>u\335v?\206\361\014>\205\026\363>HY\177?\345K&<\313\233$=K\376\035>\322\235\005?\322\201\177?\242\337\373;\002\360\371<\334O\362=y\244\325>\327\375x?X!\332=\276\345\302>zjq?B\r\\>\220\303,?\305\260`?\223\327\333>\233\344z?\010*\240=v\243\223>\312!R?X\231\026?$\005x?\273e\367=\014\203\331>\2536z?8\373\264=\360\374\244>\323\244_?\014\"\342>\366\203|?U\371[=\014)P>]\330%?\370\236i?\254a\243>\321}^?\343\372\350>\025\356}?\233h\003=\256b\376=\257\311\336>\364\260{?q\217\207=\274,}>_\224>?0\317B?\017B:?\001\370J?\274.(?s\305f?\202\360\265>\n\223j?7\017\235>\304\302Y?\377\033\002?4\356\177?\304W\216:10\216;>\222\215<\353\037\213=u\254\201>\250\251A?\241\241<?Z\217F?)52?\303\234X?gO\005?5\217\177?\3601\341;\276\245\337<\255\212\331= o\302>\2431q?B2_>\034\214.?f%^?\037\004\353>\255G~?\311\256\332<X\330\324=w\271\276>\033[o?\345\375x>\253r<?1\350F?\312p1?\204\316Y?\006\373\001?O\360\177?\'\375z:\242\277z;\010\312y<\035\373u=s5g>\023\0013?JZW?\010\306\010?\031\314~?<:\231<\207\\\226=uR\213>D\322J?\017\207(?\021Vf?o\272\270>W(l?\203o\222>\244\033Q?\3755\031?\245\021v?\255\273\030>\323\363\001?\300\360\177?\313\351s:\262\257s;\273\307r<\302.o=<7a>\263\256/?\214y\\?O\303\364>\272\201\177?\255\016\374;S\036\372<Y{\362=\253\305\325>\317\010y?\205\325\330=e\340\301>\255\354p?\336\000c><\2560?\314\370Z?\365`\375>!\371\177?P\331\3339\266\301\333:cc\333;]\353\331<V\037\324=\331&\276>\002\020o?\326\021}>\305\206>?\306\351B?\202\n:?\362\\K?\241A\'?\301\353g?\217\203\256>\004\020f?\337y\272>l\036m?\243\350\213>\322ZK?\243F\'?\233\345g?{\253\256>h)f?\324\327\271>\001\306l?\255B\216>QwM?\007<\"?\000\260m?6\005\210>\343\304G?\313\204/?\342\267\\?\216Z\363>\022`\177?\272\211\037<\t\374\035=\027\344\027>`\\\001?\230\370\177?0\003\3559\302\347\354:$z\354;A\305\352<\327\n\344=m\246\312>\312\341t?\235)*>\312\342\r?\272\374|?\214\214>==\2575>\354r\025?\307\317x?\236\221\337=\275)\307>\217as??\363?>\007\370\033?\371\306s?\037::>\377[\030?}\272v?\321\370\016>&\005\366>g\234\177?\330\344\306;\312\257\305<\212\352\300=u\276\256>u5f?\332\212\271>\272\233l?\345a\217>GuN?M\321\037?\221.p?\210sm>\300c6?\020\307Q?\264\201\027?\300]w?Y{\005>\377)\350>\331\307}?\216\316\014=e\367\007>[\323\353>\377h~?4=\312<\017?\305=\313?\262>\320bh?\207|\253>u\031d?\316\340\306>\030As?=\307A>\273\033\035?\322\302r?\212\336H>kw!?\372\177n?\'n\202>?hB?T\030;?\034oI?\310\275+?\311\032b?\331;\323>\374+x?x\327\362=\366\013\326>\354\037y?\335\031\326=\365\267\277>\346\333o?\032\371q>]\3138?\230\231M?\372\350!?n\010n?\013\246\205>#\206E?\254y4?a\371T?\227-\017?\201f|?\211\"c=%\212V>U\227)?\265\370d?\006f\301>\016\261p?\221If>\200\1772?\313\'X?z\222\006?:S\177?\177Q,<\211\201*=\204h#>\363T\t?\253\243~?\237=\255<\274\223\251=0\211\233>\366\222X?\212j\005?\251\212\177?:B\352;\177\225\350<\005\373\341=\236\013\311>\3763t?{\r4>\276d\024?k\200y?S\253\312=\371\234\266>`\366j?]x\232>\262\273W?\216\273\007?\323\020\177?EMn<\366\325j=8_]>\326\203-?\214\241_?\2415\342>\207\210|?3\335Z=[+O>\222A%?\354Oj?\274\315\236>\337\030[?z\252\374>\342\364\177?\221\3231:\257\2641;T91<\223N/=\312\315\'>AN\014?H\242}?\302\007\026=\360\210\020>\265D\370>9\304\177?\263\344n;\305\005n<\212\220j=\301!]>\356`-?\036\323_?\r\r\341>(B|?\363\365k=\034^^>E\024.?\326\322^?\347\003\347>\303\217}?\262\222\032=e\275\024>\005E\376>\001\375\177?\204\237?9\215\226?:\265r?;\210\343><.\252<=\210\3713>\316W\024?\247\210y?,\261\311=6\324\265>\250\202j?S|\235>\354\026Z?\201/\001?a\372\177?\222\345\2639\304\325\263:\232\226\263;\242\232\262<\307\265\256=T\316\237>\265\332[?DV\370>G\305\177?|\255j;[\326i<\373\177f=X\207Y>\251Q+?\335\255b?i\263\317>0\343v?\\\234\014>\006\233\362>\227L\177?p\3532<?\3670=\361Q)>\236R\r?\005:}?}\222/=\343\013(>\374w\014? \222}?>\376\031= 4\024>\030\202\375>\312\371\177?\007\255\3069\301\231\306:\270L\306;\203\031\305<\200[\300=TJ\256>\210\353e?mb\273>\351\233m?\345\216\210>\247EH?\375b.?\033a^?\\\244\351>\037\014~?t\010\370<\361\205\360=\204F\324>*\210x?\r\002\350=\226\271\315>k v?\220\341\027>\231Z\001?\253\370\177?\254\231\3529\315~\352:g\023\352;Xg\350<|\317\341=\260\351\310>h%t?J\3414>\344\355\024?\335\'y?\\)\325=\241\371\276>\304{o?\0107w>9\210;?\266\237H?\031\227-? \206_?o\331\342>=\256|?y\257Q=y\363F>\030L ?\216\263o?\317,t>r\3639?\276\206K?\026\337&?\014dh?zt\253>$\024d?\022\002\307>\354Os?\215\361@>\277\226\034?\266:s?6#B>\336T\035?\247\216r?A\312K>\250;#?\211\232l?\374i\217>e|N?\331\277\037?\347?p?a\200l>$\3415?\004\244R?\020J\025?\020\353x?3Y\334=\005\244\304>y<r?[aP>\305\371%?ewi?\271f\244>\2549_?-\241\344>\334\022}?\330$9=t\3060>\026B\022?\220\312z?\332I\243=\366D\226>\tUT?W\340\020?\302\214{?\t\356\213=}^\202>\341XB?58;?,4I?\321D,?\027aa?>\252\327>\027\245y?\302P\306=\241\034\263>6\350h?\r\024\250>\307\315a?M\023\325>z\315x?\n\327\337=\377_\307>\233ys?I\230>>\257\036\033?\r\202t?\034\236/>\271\177\021?\'7{?\227>\226=\3528\213>\371\272J?~\275(?\361\020f?\366s\272>6\033m?\213\376\213>\256nK?\332\027\'?\346\036h?\r7\255>\247:e?Y\305\277>\237\342o?\027\233q>\277\2318?\200\361M?U\023!?\013\350n?H<\177>\376\235??m\303@?\321v>?\356\010C?K\3119?\370\322K?\322*&?\n=i?\373\346\245>fJ`?\356@\336>/\215{?\346\340\213=&S\202>\276MB?IO;?o\tI?y\246,?i\331`?\306\341\332>@\236z?.\231\250=\001\270\232>\035\356W?,1\007?\0311\177?0@N<\202\247K=Q\207A>\375\363\034?\340\346r?\000\331F>\347; ?\341\303o?\316Hs>\373{9?9^L?\256\337$?N\301j?\311\332\233>\350\322X?K\271\004?\276\246\177?pE\262;\'M\261<\310v\255=\220\305\236>\252\022[?\316\315\374>\311\365\177?\206i#:rO#;D\347\"<\236H!=\327\356\032>\311}\003?>\317\177?\003\343B;\247NB<\271\000@=\250\0007>,L\026?G;x?\363\013\361=\003\255\324>\004\253x?:\347\343=\276\212\312>=\326t?Z\322*>WS\016?\035\313|?\224\246J=\337\237@>\323c\034?\014hs?\257\225?>\202\275\033?\351\371s?NX7>v\204\026?\335\023x?\365\253\365=\2423\330>\030\320y?\3733\301=\r\372\256><[f?\\\231\270>\350\025l?\025\354\222>\t\206Q?\242\'\030?.\342v?Z\253\014>\306\260\362>\334N\177?\327\2510</\302.=fM\'>\341\367\013?\n\303}?\317\374\r=\310\020\t>\024p\355>r\247~?(_\253<f\311\247=Z\n\232>?dW?\327\252\010?\202\323~?\232\216\225<\237\323\222=\335L\210>\370\007H?\020\356.?S\226]?zK\356>\207\306~?\245\374\233<F\004\231=\202\225\215>\374\334L?/\260#?g\031l?s\324\222>\343qQ?\357Z\030?K\273v?\327\354\016>\341\363\365>\r\233\177?m\226\311;\362X\310<\231r\303=\240\313\260>\242~g?\327F\261>\245\312g?tZ\257>\035\230f?q\023\267>\025:k?)\263\230>\024QV?\264\225\013?,\347}?\227\033\005=<\310\000>\014,\341>\243I|?!%j=\243\302\\>\334*-?\236\037`?,B\337>\376\317{?\026\317\203=\307\246v>\212=;?N*I?b[,?\327Aa?Qh\330>o\340y?NB\277=\315e\255>\333Xe?$\006\277>\036\202o?x\336v>dZ;?\330\364H?r\325,?\273\227`?\320n\334>\372\016{?O\023\233=CU\217>)jN?\215\354\037?m\023p?\361\357n>0/7?\303jP?g\364\032?\307\245t?\204\225->\251(\020?\222\353{?$y\200=\361\323p>l08?\036\253N?\035M\037?\357\260p?KKf>s\2002?K&X?\234\226\006?`R\177?\364)-<mU+=\272*$>\010\331\t?\026|~?C\317\300<\207E\274=\301\366\252>\334\300c?&\n\311>\\3t?\245\0264>\256j\024?\241|y?^\036\313=8\371\266>\"+k?S\027\231>\302\241V?\255\273\n?43~?h\307\344<\312c\336=\243=\306>\337\367r?\330\344E>X\246\037?+Yp?\274\035k>\325!5?\345\343S?\272\t\022?\206\352z?9t\237=\006\n\223>\211\237Q?\237\346\027?\376\022w?a\325\t>\270\217\356>\345\317~?\306X\227<\367\214\224=\216\306\211>\376fI?g\320+?O\001b?\375\327\323>9bx?\243x\354=\316*\321>\261nw?\177~\004>\245\263\346>\377\177}?#p\036=9O\030>\256\247\001?\013\365\177?\222D/:\222&/;\275\256.<\365\321,=H\207%>]\305\n?\362/~?Kb\346<\245\347\337=\371l\307>X\177s?uE>>\252\352\032?\371\255t?\375\035->\232\331\017?\034\023|?\335^w=Znh>M\2543?\225GV?P\257\013?\334\335}?\240e\007=\333\353\002>\204]\344>S\004}?\320\261<=u\0004>L\\\024?\313\205y?\375\007\312=\351\031\266>\370\252j?\302o\234>\037GY?\343u\003?\032\320\177?\017v?;\335\346><o\255<=|\3743>\271Y\024?o\207y?3\326\311=\361\361\265>\336\223j?\263\t\235>\200\276Y?\365\'\002?h\355\177?r\267\224:?\214\224;\332\337\223<\2044\221=\363\350\206>3\271F?\310\3301?0-Y?3\276\003?\366\307\177?\367\366_;\0063_<\237(\\=ASP>h\361%?Q\201i?P%\244>\314\n_?\337\267\345>EM}?\321\334*=0\274#>\344\215\t?\335\222~?\002\215\265<\374\206\261=~#\242>\014\226]?\034M\356>\301\306~?\372\337\233<\262\350\230=\r~\215>\002\310L?\212\342#?\027\341k?\210P\224>\332\263R?)!\025?,\006y?B%\331=<\037\302>\035\013q?\372Ra><\276/?bb\\?\036I\365>4\215\177?\2561\345;J\227\343<\235D\335=\253\\\305>\225\221r?A\240K>^\"#?V\266l?*\255\216>\304\325M?\326V!?\376\241n?\033\203\201>\322\200A?S\365<?X\360E?<\2223?\243qV?\320=\013?\205\006~?\237\312\372<\034\035\363=\023A\326>J1y?\334\013\324=g\027\276>\017\010o?,\200}>\206\276>?\245|B?\372\355:?6\275I?,\n+?S\016c?Y_\315>\332\374u?p\356\031>\270\312\002?\322\340\177?CN\371:\336\324\370;$\361\366<\201\177\357=\227}\323>\351Bx?t&\360=p\375\323>\037ox?d\364\352=\356\377\317>\371\377v?f\360\n>\304,\360>\221\005\177?Izy<\315\255u=k\361f>\277\3332?\263\225W?\243#\010?\004\367~?\031\365\203<\363\324\201=\3223s>\367p9?\000rL?t\260$?\227\367j?;p\232>=\265W?@\315\007?\210\014\177?\226\220r<?\371n=\371\007a>8\224/?\367\240\\?K\337\363>\353l\177?\235\300\022<\034p\021=\031F\014>\323\035\362>@?\177?B/@<&\356==\216\0375>%\026\025?p\ry?qI\330=\361q\301>\342\266p?~\367e>PR2?\371nX?\023\316\005?5y\177?\236\203\006<\346h\005=\203\020\001>4\230\341>\202c|?\320\334c=\272/W>m\367)??{d?\332{\304>\322)r?\236kQ>e\227&?\322\272h?f=\251>\255\230b?\0066\320>7\024w?8\303\t>-u\356>E\314~?\272$\231<\323G\226=\313@\213>)\302J?\264\254(?M&f?\247\353\271>\335\320l?\326\370\215>\2365M?\316\332\"?\231\004m?\256\230\214>\002\372K?:\316%?\365\252i?\207\022\243>uD^??M\352>0)~?B\267\351<J\014\343=p\340\311>\253\216t?R\346.>\330\006\021?\\x{?\321c\216=u}\204>LiD?\221\3376?\256\363P?.\233\031?L\301u?\355[\035>u-\005?\306\224\177?)\033\326;\006\265\324<#/\317={9\272>b\373l?r\327\214>\2122L?\321G%?\246Hj?\021\376\236>\211=[?\221\331\373>\307\356\177?\221\300\211:\201\233\211;\221\007\211<\310\274\206=\005\277{>\375\332=?\2417D?\231I7?,=P?\330f\033?\224Dt?r\0343>?\310\023?\250\342y?\230\376\276=\273.\255>E5e?e\347\277>\260\363o?U\254p>p\0338?\360\317N?\202\362\036?\017\tq?\npa>\201\316/?\030J\\?J\325\365>\243\230\177?6g\316;a\032\315<\307\367\307=bq\264> \263i?\223\334\242>>\035^?\0334\353>\202O~?\304\321\326<\251/\321=\316\321\273>m\327m?\277\366\206>@\306F?\356\2731?\024ZY?\373@\003?\247\325\177?\343I);\360\331(<u\034\'=\023K >\2273\007?\2150\177?\226\312N<k.L=\313\000B>~?\035?7\242r?\t\262J>\255\222\"?\330Rm?\307\202\212>M\024J?\010A*?c\032d?\375\332\306>\177>s?\244\354A>\3722\035?\245\255r?2\016J>\230/\"?K\275m?\023\252\207>UoG?:D0?`\231[?\317\314\371>\217\331\177?\377\252\031;\301N\031<\204\337\027=\355=\022>\202\266\372>\014\344\177?\342\207\337:K&\337;C\241\335<E\242\327=\006\356\300>&vp?\210\206i>\376D4?\232OU?-H\016?\033\320|?7oI=:\207?>v\264\033?\300\001t?\244\3466>t;\026?\351Fx?6\256\357=^\241\323>UOx?\353\260\356==\337\322>w\013x?\362\247\366=\013\363\330>\r\013z?\353.\272=\344A\251>\270\233b?D#\320>5\rw?\210+\n>\225\r\357>\315\340~?^\370\216<\232y\214=\363\326\202>\343\316B?\260B:?\334\366J?k1(?\024\302f?+\006\266>\220\237j?\307\273\234>*\202Y?\363\320\002?G\340\177?W\253\375:\251-\375;\3438\373<\236\204\363=\375\217\326>\356Jy?\244\002\321=\372\255\273>S\304m?\330y\207>\364AG?g\2510?&\000[?)7\375>?\370\177?\005\026\3709\367\367\367:\337\177\367;O\241\365<\336C\356=\226\213\322>\336\355w?\335\037\372=\225\223\333>T\321z?\026z\242=?\226\225>@\304S?\240\\\022?`\273z?\350\033\245=I\314\227>\361\225U?Y\214\r?\310!}?\217\1775=\265t->\371\022\020?~\366{?aM~=\206\203n>R\3656?Y\316P?\207\371\031?Auu?\312\271!>\374.\010?\036\364~?\237d\205<\2218\203=g\240u>L\265:?d%J?s\031*?\217Nd?@\224\305>\000\253r?\"4J>\216F\"?\274\244m?qR\210>0\rH?R\342.?\212\247]?\300\346\355>p\270~?4\366\242<P\270\237=\201C\223>j\320Q?\315i\027?Fow?\313u\004>\276\246\346>r}}?N\020\037=\371\342\030>e\017\002?\006\357\177?+\307\207:)\243\207;n\023\207<B\331\204=Svx>\365,<?\225kG?\232L0?\276\214[?\035\025\372>\374\334\177?^\376\013;\320\261\013<\345\200\n=\362\321\005>\373\251\350>n\337}?\332\002\007=\232\217\002>\037\324\343>_\346|?\032\001D=\377\237:>\306\234\030?\353\210v?\335\327\021>\233$\372>\262\335\177?\210%\t;\016\334\010<d\267\007=58\003>!\317\344>\250\034}?E\3006=\346\230.>\331\323\020?V\223{?\306\"\213=\355\256\201>\030\254A?\241\234<?\323\230F?E 2?\204\275X?\243\364\004?\305\235\177?~+\304;\331\376\302<\237Z\276=J\251\254>\251\336d?S\n\302>\000\001q?\340\341a>+\0160?\274\352[?:\372\367>\243\277\177?\260\230\200;~\027\200<\204-|=\352\246l>\337\3655?\026\201R?3\244\025?\232\256x?\037{\343=\2546\312>\005\263t?d\324,>\336\250\017?\032+|?\330\215q=\022Oc>\275\3310?\177\266Z?e\331\376>\255\376\177?U\203\2518\323\177\2519\314q\251:\2709\251;\375Y\250<L\344\244=\242\235\227>\356oU?\355\361\r?%\366|?\305\'@=\n$7>\347b\026?h+x?\341\350\362==\031\326>F$y?%\226\325=\276O\277>f\247o?\203\326t>\034L:?\263\345J?\231Y(?\203\217f?\233J\267>vYk?\276\340\227>\226\246U?\317_\r?\2054}?\363\3520=\265F)>\031K\r?&=}?\251\316.=\320X\'>\220\377\013?*\300}?\263\261\016=\031\271\t>af\356>=\312~??&\232<\256?\227=(\024\214>C\202K?\252\351&?2Wh?Q\310\253>iKd?\000\250\305>\002\264r?\000\263I>[\370!?\036\370m?0\026\206>$\361E?\177\2203?ptV?@6\013?,\t~?4|\371<\035\343\361=pQ\325>B\342x?Mc\335=\272t\305>\230\234r?\210\002K>G\303\"?1\036m?8\352\213>A\\K?BC\'?\300\351g?\216\220\256>I\030f?\031E\272>\267\001m?P\254\214>\265\013L?0\244%?\203\334i?\365\312\241>\001U]?\010\311\357>\025\371~?g\356\202<\257\326\200=\205wq>\365\2068?\267\022N?\\\302 ?V;o?\336\267z>\365T=?\2339E?\225\0375?\241\347S?\360\377\021?\t\360z?\307\312\236=\351z\222>e%Q?A\035\031?\030%v?\216\234\027>\n*\001?\224\372\177?\353y\25599k\255:|0\255;\'F\254<\264\246\250=M\303\232>\r\367W?\234\030\007?\2246\177?!\315H<\034WF=o\274<>\033\363\031?wzu?Gm!>\237\372\007?X\001\177?\304\252}<X\275y=:\203j>0\3164?ZnT?\225\235\020?\261\257{?]\266\207=Cp}>~\266>?d\214B?>\315:?n\371I?1\177*?\023\310c?)\335\310>\003 t?\224/5>\200 \025?\234\006y?\031\030\331=\335\024\302>\031\006q?\327\231a>\345\345/?\036\'\\?\342\236\366>\007\250\177?p\265\257;=\304\256<\302\t\253=\001\301\234>7\206Y?\236\305\002?D\341\177?\305\302\365:\316L\365;\266v\363<a:\354=\353\372\320>\"]w?\204\204\005>\2157\350>^\312}?\370/\014=\260c\007>:\372\352>\rF~?\314{\333<d\232\325=\033S\277>\031\251o?\317\276t>\275?:?;\374J?\327$(?\337\321f?\265\240\265>\305dj?(C\236>Y\257Z?\352\001\377>\004\377\177?\030/|86+|9\260\033|:\236\335{;\322\345z<;\016w=t\'h>\222\2053?\t\206V?\260\006\013?\263\031~?\246X\361<f<\352=\027r\317>z\312v?w\013\016>\222\256\364>\347\177\177?~\262\377;\264\263\375<N\330\365=WU\330>\217\332y?Q\365\277=Q\367\255>p\266e?N\264\274>JOn?\035\276\203>\033\260C?bi8?\347FN?\336B ?\334\274o?\337\252s>i\2579?\253\001L?\t\274%?m\300i?\257\204\242>+\335]?{\254\354>\177\212~?\017\260\271<\220z\265=\276e\245>-\357_?\351d\340>\023\031|?\342\354u=\356(g>5\3722?;eW?\'\250\010?<\324~?F2\225<\252z\222=\245\000\210>\233\300G?e\216/?\237\251\\?)\255\363>!h\177?\331\204\027<!\036\026=\254\235\020>vb\370>\002\306\177?g\305g;\221\363f<\'\262c=\320\tW>q\341)?\r\230d?\333\306\303>*\325q?\365!V>\303Z)?6Ge?\336u\277>\244\272o?\325\311s>\243\2779?h\344K?}\001&?<ni?\033\243\244>\324d_?\032\240\343>\342\332|?\203\316F=B(=>$7\032?\003Cu?\327\232$>\'%\n?Nd~?\315\215\314<;r\307=\341\005\264>~si?v\200\244>\024L_?\2223\344>=\373|?w\351>=\201\0036>B\251\025?-\253x?k\342\343=\001\207\312>\255\324t?(\351*>\211b\016?L\304|?\331OL=\343\036B>.R\035?\035\221r?\003\247K>p&#?\336\261l?\210\313\216>\244\360M?n\025!?\340\345n?TZ\177>\017\255??v\245@?h\263>?o\222B?\253\300:?\206\020J?\306I*?\327\016d?:#\307>\253^s?\370\034@>\032\022\034?$\260s?g\204;>\272-\031?&\030v?\253[\030>l\260\001?\226\364\177?\313\2226:>r6;7\3605<\001\3533=\331\003,>\216\036\017?\237m|?\322ga=W\000U>\363\261(?\242\037f?;\026\272>&\350l?iZ\215>\033\250L?\007/$?\365\212k?^\224\226>\210\226T?z3\020?\032\346{?\223\"\201=0\374q>\375\3148?\265\226M?\373\357!?\002\001n?\024\331\205>\341\266E?\240\0174?\230\246U?\314_\r?\2064}?\236\3520=gF)>\345J\r?;=}?[\311.=\366S\'>L\374\013?c\301}?\304d\016=\205q\t>\260\375\355>\255\273~?*\\\241<\202.\236=\324\366\221>\036\264P?\273;\032?@?u?\367\321$>\213J\n?^X~?\232r\322<\231\n\315=Y\203\270>\237\tl?\014?\223>\241\314Q?zs\027?0hw?\225\337\004>\200C\347>\035\234}?\026\213\027=\300\357\021>\304F\372>>\337\177?\267\370\002;\265\265\002<\301\252\001=\321\037\373=\344T\334>\304\007{?-\361\233=o\021\220>@\017O?VV\036?\233\236q?\221)Y>\261\033+?\276\366b?G\361\315>?6v?)\237\026>ow\000?!\377\177?\235\342^8\225\337^9t\323^:\367\242^;X\341]<\035\340Z=\366-O>\037C%?\036Nj?\273\331\236>\372![?\240v\374>~\363\177?\262\025H:\231\356G;uRG<\257\345D=\247n;>\361\037\031?\374\"v?\264\273\027>\366?\001?\300\371\177?\265\356\30790\333\307:-\215\307;\024V\306<\311\210\301=\330>\257>\265\206f?\004\203\267>uyk?\363\t\227>)\367T?z3\017?\265c|?h\320c=\264$W>\t\361)?\240\203d?8G\304>O\021r?N\311R>\225e\'?\221\277g?P\242\257>P\305f?b\361\265>\214\223j?\332\013\235>*\300Y?I#\002?\270\355\177?\2755\222:\375\013\222;Ye\221<\272\320\216=3\333\204>\235\303D?\374\0356?Y=R?\221R\026?\3226x?\366\221\361=q\023\325>\207\315x?\231\325\337=\337^\307>\034ys?w\237>>1#\033?;~t?\301\325/>E\244\021?\026#{?\212\250\230=xG\215>!\227L?\254W$?\347\\k?\253\311\227>\317\223U?\014\222\r?^\037}?\253\0266=g\376->\362m\020?J\310{?\207\275\204=\017Fx>\033\024<?H\232G?=\344/?\230)\\?\240\220\366>\373\246\177?\204\314\261;\213\325\260<Y\004\255=}f\236>N\312Z?\010i\376>y\375\177?b\274!9\377\265!:v\234!;o6!<Y\240\037=\320g\031>\200l\002?\200\350\177?@\356\273:E\251\273;$\226\272<0V\266=[\032\246>\205n`?eg\335>\034S{?\n\341\222=[X\210>\267\022H?\337\325.?\305\271]?\377{\355>,\251~?\221\204\252<\356\367\246=\037[\231>3\330V?\035(\n?^c~?\226\004\315<\024\343\307=\271`\264>I\251i?\216\035\243>vL^?\025\036\352>(!~?#\254\355<\342\306\346=\243\305\314>\261\277u?\203s\035>\313=\005?\035\222\177?Mh\333;6\360\331<\355#\324=|*\276>\341\021o?\333\367|>\241y>?p\003C?\315\3249?/\276K?\r\\&?,\002i?\301i\247>]Xa?Z\337\327>\310\265y?\371T\304=\262\202\261>g\357g?\333k\256>\353\000f?(\332\272>\224Rm?\234\204\212>\374\025J?#=*?\210\037d?\317\272\306>\0350s?\313\273B>\200\263\035?\\7r?_\252P>\014%&?\354Ci?\262\271\245>~*`?\323\000\337>6\277{?\\\326\205=\234.z>\330\016=?\261\277E?l\3743?\320\305U?,\014\r?\014W}?Bx(=a\212!>\213\016\010?Z\374~?ZO\201<\242\211~=L\270n>\177\0217?\350\235P?\266s\032?+\021u?\332t\'>p\022\014?\021\271}?\364o\020=\022X\013>\303\303\360>\343\027\177?\346Jg<\005\007d==UW>+\r*?\265^d?\375.\305>\240|r?P\314L>\277\326#?N\356k?g\367\223>\277hR?\353\342\025?\361\203x?@\201\350=\360\033\316>\347Fv?\375\250\025>\347\222\377>\322\377\177?\226\36797\017\36798\363\36499\202\3549:\300\3129;\351C9<\234+7=\246\372.>:\024\021?;q{?\362?\217=\342:\205>\207\037E?\365W5?\332\211S?J\365\022?Zbz?\216\303\257=\360\255\240>\376\201\\?}\222\364>h}\177?qU\002<\005L\001=Tn\372=\337\316\333>%\342z?\227u\240=1\343\223>\256WR?\332\016\026?\307ex?\240\r\354=|\330\320>xPw?yA\006>\245N\351>\t\375}?Su\377<\373}\367=p\225\331>1<z?gR\264=\350q\244>\254A_?\214q\344>\244\010}?\325\243;=I\0133>\027\275\023?\214\351y?\226,\276=\317\203\254><\306d?=\244\302>$Kq?>\311]>\371\277-?\312K_?M5\344>\236\373|?\370\321>=3\3565>\206\233\025?v\264x?I\312\342=\020\255\311>\350xt?K#0>(\327\021?\340\006{?\236\014\234=\262(\220>\225#O?\023$\036?\031\316q?{\206V>4\225)?z\373d?\216T\301>\202\250p?\366\301f>\260\3012?\023\277W?J\262\007?\017\023\177?\201\025l<\242\256h=\323v[>\262m,?p(a?\250\002\331>\317\017z?\256\235\271=\005\313\250>\363Jb?C\024\322>F\303w?\362\033\377=\334T\337>\305\324{?G;\203= \245u>\302\267:?\342 J?\345#*?\317@d?q\352\305>9\322r?\204\001H>\355\360 ?\211\013o?\361O}>*\246>?_\254B?\255\212:?{sJ?$d)?\026;e?\232\302\277>?\341o?Z\256q>\353\2438?\201\337M?$?!?\244\272n?\226\330\200>\337\327@?jM>?\246YC?\320\0379?G\003M?\036T#?\221\177l?\364 \220>\321\034O?\3164\036?S\276q?\325fW>\\\027*?NQd?\007\203\305>\"\243r?\331\244J>\265\212\"?s[m?\370G\212>E\336I?\357\275*?\202tc?t\345\312>\377\373t?\214\252(>z\342\014?\361g}?\'U$=T\275\035>\342p\005?\226\211\177?rg\354;\324\262\352<y\371\343=\355\230\312>)\334t?\334{*>\255\031\016?\272\344|?\341gD=\355\374:>\315\327\030?O[v?,{\024>\005\347\375>\232\373\177?8\311\2149\213\277\214:\332\230\214;k\376\213<\371\231\211=4[\200>\023[@?XI??FkA?f!=?D\234E?\220I4?\"HU?\025\\\016?2\307|?\021\233K=\034|A>\005\355\034?.\355r?q~F>|\004 ?\204\373o?\310>p>V\3417?\2325O?~\367\035?\370\367q?h2T>\2079(?\344\267f?\221G\266>L\305j?*\300\233>\021\276X?\035\363\004?\001\236\177?,\263\303;\367\207\302<d\351\275=\026M\254>\177\242d?-\205\303>2\266q?c\332W>@Z*?\r\371c?k\253\307>\343\232s?\244\267<>\025\360\031?\353|u?EI!>\365\341\007?u\007\177?(\232w<=\334s=\177We>\025\3721?>\371X?\313N\004?\306\265\177?\227I\224;\315\235\223<\330\364\220=L\262\206>u\205F?\373J2?\200zX?4\256\005?\356~\177?H\321\000<\000\234\377<>\242\367=\357\260\331>oDz?\214V\263=G\242\243>\201\254^?\350\346\347>I\273}?g\344\017=W\326\n>\312\006\360>\331\000\177?\242(~<P7z=O\356j>-\0105?t\016T?\014\232\021?\267({?9\373\227=\356\263\214>\221\022L?\341\223%?\256\357i?\030L\241>c\367\\?\r\352\361>\2309\177?\264\316E<TkC=\212\030:>\237F\030?\273\312v?\263\007\016>!\251\364>k\177\177?\017T\000<|\245\376<\026\273\366=\223\001\331>{\017z?\303\247\271=F\323\250>\222Pb?\271\361\321>\336\266w?\266G\000>\207k\340>\265\032|?\224\207u=\307\317f>G\3112?\t\263W?K\323\007?\016\013\177?\256\007t<3ep=TIb>\361G0?\306\223[?\341\354\371>\031\333\177?<\206\023;81\023<\262\336\021=\322\254\014>\346\262\362>\024O\177?\215q0<\033\213.=\005\033\'>\364\325\013?\251\317}?.\343\n=\223-\006>F1\351>\321\367}?v\003\001=]\346\371=\037h\333>\357\304z?\244\366\243=#\326\226>\242\314T?H\244\017?Y-|?\212\002q=-\324b>Y\2250?\236\036[?\302\211\374>\004\364\177?\370\267?:\023\224?;\265\004?<\225\312<=\362\0264>\341j\024?\201|y?+\"\313=D\374\266>\337,k?\257\013\231>f\230V?\002\325\n?\252*~?\237\374\350<H\\\342=fW\311>pTt?\35152>(2\023?\021>z?\"\031\264=\267B\244>\342\037_?\223:\345>N3}?\37461=*\214)>\223y\r?\265)}?\214\2173=k\260+>!\347\016?\237\207|?\211\025[=\254]O>\204_%?\001-j?\235\265\237> \310[?\347\300\370>}\313\177?\245\340Q;\2244Q<\271\210N=\264\036D>\362\216\036?\276hq?\330%\\>\224\321,?&\235`?\030N\334>\337\005{?y+\234=\330B\220>l:O?\220\353\035?\"\003r?Y\223S>K\334\'?\217,g?\352X\263>^\014i?\323&\247>\371)a?V\371\330>\370\014z?_\364\271=\374\021\251>8{b?p\353\320>rWw?i\331\005>\002\265\350>p\341}?n\204\006=\200\031\002>\014$\343>&\277|?8\221M=\032@C>l\005\036?\352\352q?Y\354T>F\246(?y.f?y\267\271>B\264l?M\273\216>G\342M?d8!?\247\301n?\021\250\200>\243\247@?\004\257>?\n\233B?\304\256:?_1J?\256\375)?\014sd?W\257\304>\271Ar?l\026P>O\315%?\n\254i?d\013\243>F?^?\306k\352>Y.~?/,\347<)\246\340=\302\001\310>\305\300s?\335\223:>\020\225\030?\330\216v?\014\200\021>\361\246\371>\264\327\177?V\025!;\372\257 <\210\034\037=A\356\030>N\027\002?\203\356\177?}\341\213:E\273\213;\274\"\213<\306\305\210=\335F\177>M\243??\340\270@?*\214>?;\337B?\213 :?\3634K?\273\237\'?\306wg?8s\261>\350\345g?\204\251\256>((f?\314\337\271>`\312l?\372$\216>\351\\M?\350{\"?jkm?\326\332\211>\267yI?n\245+?\t<b?\332o\322>\002\344w?mG\373=\310r\334>\025\020{?]\361\232=t8\217>\312PN?\255* ?6\325o?\226Vr>\242\3748?\000BM?\355\274\"?\026%m?,\273\213>\2161K?\266\247\'?\343mg?!\263\261>\021\rh?\n\253\255>v\205e?Y\353\275>X\361n?L\273~>?]??\344CA?\321q=?@\002E?&\2275?D S??\010\024?\330\272y?\372\272\303=.\006\261>\320\242g?\247\\\260>\3079g?\247\003\263>3\331h?uv\250>:\021b?vv\323>o@x?\003q\360=\2006\324>\260\202x?\000\247\350=\0349\316>BRv?\010\001\025>\367\244\376>*\376\177?\2107\3538\3100\3539\305\025\353:\325\251\352;\237\373\350<W[\342=\252V\311> Tt?z:2>\"5\023?G<z?\267O\264=\260o\244>\026@_?\375z\344>\254\n}?\326$;=\351\2272>\002r\023?\204\027z?\214\262\270=g\n\250>\'\307a?\317;\325>\t\333x?w=\336=\242\037\306>R\352r?\216\247F>\246\035 ?L\342o?\243\237q>&\2348?A\355M?\255\035!?X\335n?\225\320\177>H\350??f/@?\020\241??S\275@?*\203>?\322\360B?\305\3739?\253wK?\247\002\'?\3048h?\241\216\254>J\315d?\312w\302>\3165q?S\367^>\332j.?\264U^?\232\347\351>\314\027~?tH\362<\014\036\353=\006 \320>\376\013w?\220=\n>\352\'\357>G\344~?a?\215<\352\317\212=Pg\201>WeA?\206-=?\030\205E?\360{4?\252\365T?s7\017?\322a|?\277Ed=\372\214W>t-*?84d?O9\306>\353\365r?\347\000F>\216\267\037? Hp?\364\014l>\374\2425?p\014S?\272;\024?t\232y?-\224\307=7!\264>\264\203i?\224\025\244>\201\377^?\364\372\345>\371Z}?\004\202\'=V\250 >\237s\007?\344!\177?\t[]<p]Z=<\271N>\223\375$?\316\236j?\331\300\234>\030\206Y?\363\305\002?=\341\177?\010\376\365:\330\207\365;\335\260\363<\023q\354=\376$\321>\220lw?D\236\004>\274\342\346>E\211}?#*\034=\3555\026>\036-\000?\340\377\177?:p\3766\273o\3767\302m\3768\333e\3769AF\376:\371\307\375;\317\320\373<6\023\364=\242\374\326>\354my?\371\334\314=\334^\270>8\365k?\277\310\223>UAR?SH\026?\365=x?[\273\360=ao\324>\031\226x?\027^\346=qt\314>\031\237u?\007S\037>\370\210\006?,U\177?\225a*<\376\233(=,\253!>\374$\010?\254\366~?\273 \204<-\377\201=\217}s>\250\2279?u,L?LV%?\3047j?+n\237>M\222[?N\365\371>\177\333\177?^\356\021;.\233\021<\351O\020=I:\013>f\230\360>\262\022\177?\375ql<s\010i=m\306[>\'\233,?2\351`?.\202\332>d\202z?\325\356\253=\267\177\235>\210\031Z?\'(\001?\246\372\177?\257I\2539\\;\253:\030\002\253;\240\035\252<E\225\246=\210\010\231>\335\225V?\337\333\n?W(~?\021\"\352<\377p\343=\314.\312>\265\257t?\257\004->\332\310\017?d\033|?\']u=p\252f>\303\2642?\220\323W?\024z\007?c \177?\365\331^<\372\321[=\353\005P>\203\303%?\233\267i?\372\276\242>\261\007^?\314\262\353>\331c~?\355\307\314<s\251\307=W2\264>\332\215i?\247\322\243>`\317^?j\030\347>\302\223}?\271\227\031=N\325\023>G\373\374>\344\366\177?{\301\021:\274\254\021;\327Y\021<\273\017\020=\240\376\n>\177A\360>\037\010\177?\334\360v<\r8s=\325\306d>$\2521?\265uY?\310\363\002?#\335\177?\\a\013;y\025\013<8\347\t=\243B\005>\037\326\347>\037\270}?X\253\020=E\217\013>\030\024\361>Y!\177?*\345]<\324\343Z=G1O>\031E%?\321Kj?\004\351\236>\223-[?\2124\374>\232\361\177?\213Zf:\271&f;\320We<\367!b=\367\245U>\221\022)?1\244e?@(\275>\013\214n?\317\032\202>a\026B?\321\301;?]4H?\005\212.?o(^?@\362\352>\276D~?c!\334<\0277\326=\022\317\277>\200\347o?\334Vq>\262u8?01N?\366w ?*\207o?*\230v>\3675;?R8I?R;,?8na?RZ\327>\316\213y?OQ\311=6\207\265>\362Uj?\264\245\236>r\372Z?\225W\375>\360\370\177?\277\010\3429\315\357\341:\031\214\341;\252\376\337<\275\336\331=Q\261\302>hQq?\200p]>\244\215-?\227\223_?\005\211\342>\324\233|?\002+V=C\370J>\024\275\"?\354$m?N\274\213>\2252K?K\245\'?\341pg?\307\237\261>9\001h?\016\370\255>\351\266e?N\261\274>\267Mn?\373\310\203>\247\272C?\021S8?6nN?\237\342\037?S\035p?:en>\"\3456?\"\352P?R\263\031?\362\255u?\256x\036>b\362\005?\213r\177?\022\'\r<\302\357\013=\336\'\007>3\242\352>z7~?\362\253\342<Rf\334=Q\256\304>?Ar?/\035P>S\321%?K\247i?\271*\243>\003V^?\307\345\351>|\027~?\"p\362<`C\353=\310<\320>\274\026w?\255\235\t>H>\356>\263\304~?]\344\234<$\343\231=\373R\216>\314\205M?\365\030\"?r\325m?V\004\207>\032\323F?\200\2371?7\206Y?\235\305\002?D\341\177?J\302\365:TL\365;=v\363<\3609\354=\224\372\320>\002]w?c\206\005>Q:\350>\342\312}?\247\017\014=\225E\007>\357\315\352>\277>~?#\026\337<\346\002\331=)\004\302>\004\376p?\013\014b>\272%0?S\307[?\200\305\370>\300\313\177?\325\326P;w,P<V\207M=57C>\354\377\035?\023\360q?\337\242T>U{(?\350df?x[\270>S\363k?\214\325\223>\'LR?\202,\026?HQx?Xv\356=P\262\322>\231\373w?\034\204\370=\025\\\332>5wz?=E\255=h\234\236>`\363Z?\312\177\375>\277\371\177?\000\035\3109r\t\310:K\273\307;\241\203\306<\"\264\301=\377a\257>\336\234f?\372\364\266>\266(k?\214\'\231>\315\256V?\\\230\n?\370>~?\376\371\336<J\350\330=0\357\301>\332\363p?\215\233b>\314u0?uN[?\ty\373>\201\353\177?\366\351\243:|\265\243;\033\344\242<\357\246\237=\3264\223>\363\303Q?\251\211\027?\346Ww?\232\322\005>\364\252\350>\234\337}?\264\367\006=0\205\002>\234\304\343>\364\342|?\214\326D=\371`;>E\027\031?\312)v?0W\027>2\371\000?6\374\177?S\216r9\366\177r:\210Fr;?aq<\336\322m=\334\003`>,\002/?\320x]?\000\370\356>\360\335~?\306c\220<C\330\215=E\005\204>\033\365C?%\3277?dGO?q\313\035?\033!r?\370\347Q>\323\340&?\360ah?>\202\253>;\035d?7\311\306>\2176s?\003_B>\372y\035?\215lr?E\262M>\206`$?\330Rk?$\r\230>\254\312U?%\377\014?Y\\}?\357+\'=IY >Z=\007?Y.\177?\350\372P<\206PN=+\354C>\302o\036?w\206q?D\200Z>\227\340+?!\353a?\306_\324>\310\220x?L\376\346=\216\360\314>\330\320u?\010w\034>\265\216\004?\353\254\177?\340\363\245;\270\034\245<\307\310\241=\002\001\225>\330GS?W\241\023?\235\372y?:$\274=\223\333\252>\312\256c?\302z\311>\205ct?\221Z1>\372\242\022?\264\222z?\002\373\251=W\337\233>w\326X?i\257\004?2\250\177?}_\257;5o\256<Z\270\252=/}\234>\217QY?\301X\003?3\323\177?o\0253;(\2302<\310\2450=\202\007)>\310 \r?\236N}?[\210*=\305n#>5Y\t?m\242~?\000\333\255<s*\252=\346\006\234>c\365X?\202Y\004?S\264\177?\'.\227;\230{\226<\357\267\223=W\020\211>0\276H?\337Q-?u\350_?/\215\340>\376\"|?X\205s=\361\ne>\314\3171?-;Y?5\227\003?n\314\177?.\037N;8yM<\213\345J=\232\330@>2\207\034?\226Hs?E[A>\226\330\034?\240\377r?auE>\352a\037?\220\234p?*jg>\371\0353?-,W?\307C\t?\250\250~?\225\305\252<<6\247=C\217\231>\367\001W?\247\266\t?\230\206~?\360\235\273<\357Q\267=\'\351\246>\033\377`?k\375\331><[z?S\235\260=<b\241>\303\007]?\340\212\361>\373.\177?kZP<\037\264M=\177_C>\327\030\036?\255\330q?\005\360U>\263=)?\270le?H\210\276>\374Ao?c[z>\273%=?\375\223E?\221[4?\262*U?{\252\016?\244\243|?)DT=\032DI>\031\265!?>?n?\273,\204>N\033D?\357\2057?\265\324O?\036l\034?\257`s?\350\377?>\361\377\033?\r\300s?E\236:>\256\233\030?\303\211v?b\313\021>\300\022\372>\340\334\177?)n\014;!!\014<P\356\n=\3637\006>\227@\351>\213\372}?\322W\000=\246\244\370=\271t\332>r~z?\250g\254=9\344\235>\271fZ?sN\000?\240\377\177?\366Q\3007\325P\3008RL\3009C:\300:\027\362\277;A\322\276<[`\272=Vj\251>\032\267b?gz\317>\241\315v?\245\334\r>\344j\364>\331y\177?\356\340\005<\340\310\004=\344z\000>8\270\340>\211-|?\256\366p=\267\311b>\205\2170?v\'[?_W\374>\235\362\177?\206\"V:\277\365U;\354BU<J|R=H\253G>Y\274 ?}Ao?Nbz>D)=?;\215E?Aj4?\246\022U?r\352\016?\023\206|?\323u[=\247\263O>\245\222%?!\361i?~B\241>I\360\\?S\023\362>\034>\177?\224QA<\243\t?=\255 6>\016\274\025?n\236x?\335b\345=\234\261\313>\017Pu?\216\333#>9\243\t?x\214~?\236\266\270<f\214\264=\256\241\244>\317c_?,\246\343>:\334|?\225zF=w\334<>T\007\032?\013ju?c^\">}\237\010?\223\326~?\213\t\224<\263\\\221=o\013\207>\316\331F?\250\2201?8\235Y?;\205\002?\227\346\177?\0224\313:l\343\312;\324\241\311<X\253\304=~\310\261>!\032h?\026V\255>\265Ne?gF\277>\255\242o?k\030u>{n:?\002\247J?\027\354(?|\325e?\320\356\273>\335\346m?\274\214\206>\326aF?f\2312?\340\376W?\027\003\007?S;\177?&\026D<^\275A=m\2238>\\N\027?N\203w?\250J\003>\221\352\344>y\"}?ZT5=SM->\355\370\017?\211\003|?\335${=\310\276k>\324x5?\375RS?T\204\023?]\014z?\343\006\272=\"!\251>\201\205b?\034\254\320>\027@w?\2545\007>\204\266\352>\335:~?\253\000\341<\231\322\332=.q\303>\276\254q?\275`X>\344\247*?\354\221c?\201.\312>\226\257t?|\006->\013\312\017?\315\032|?\240\201u=\212\312f>f\3062?\232\267W?\307\306\007?\033\016\177?\\\000q<\325tm=\275\260_>d\323.?f\275]?\277f\355>\027\246~?\274\n\254<\310m\250=\300\223\232>g\321W?\002\200\007?\000\037\177?\257:`<\024)]=\0258Q>\355x&?\202\337h?\032M\250>\353\364a?\336#\324>O|x?\'g\351=\211\315\316>\244\213v?\204\257\021>\342\352\371>\001\333\177?.\347\023;\272\221\023<x=\022=\325\004\r>\2012\363>\027\\\177?\366\177#<E\336!=\260x\033>\330\335\003?3\304\177?!\375n;\005\036n<\026\250j=\2326]>\306l-?Q\302_?\244q\341>SZ|?\341\027f=\362*Y>}\034+?\254\365b?\347\367\315>\3268v?\343x\026>j\\\000?{\377\177?[q\0058Ep\0059\354k\005:\211Z\005;\022\025\005<W\000\004=\242~\377=\361\236\337>\230\347{?[\364\200=e\253q>[\2428?E\342M?k8!?\240\301n?B\250\200>\324\247@?\240\256>?\315\233B?.\255:?H4J?\356\366)?\347{d?\277w\304>\352\'r?\335\206Q>~\247&?d\247h?\212\274\251>\233\356b?\230#\316>\343Iv?\335|\025>nT\377>\215\377\177?6\367\3457\231\365\3458$\357\3459S\325\345:(n\345;\353\322\343<\355|\335=\320\210\305>\307\245r?\375~J>\324s\"?\036tm?Q\237\211>\272BI?\201#,?\033\217a?\355\221\326>\217Ky?\237\357\320=\326\236\273>=\274m?M\261\207> vG?\01750?=\260[?\332I\371>\365\322\177?\350\r4;E\2173<~\2271=Q\344)>\201\264\r?\256\020}?$\2559=iB1>/\223\022?\343\233z?\231\341\250=}\364\232>\352\035X?\256\255\006?\230M\177?\262\3531<\022\375/=Sm(>h\271\014?`x}?qN =O\010\032>\317\334\002?9\337\177?:\n\003;\'\307\002<\353\273\001=\371?\373=)m\334>\205\016{?m!\233==a\217>\263tN?\267\322\037?)-p?B\207m>Tn6?\024\265Q?\246\257\027?\337;w?\220t\007>\r\023\353>\037J~?*z\331<\'\264\323=\330\321\275>+\344n?\367q\177>\350\270??\341\215@?\003\343>?\0055B?y\202;?f\252H?\324~-?\252\250_?\023\013\342>\230~|?\207G]=>SQ>\374\210&?/\314h?\267\313\250>kKb?\\\021\322><\302w?\036;\377=Cl\337>\274\332{?\235\202\202=\377bt>\310\017:?bSK?&X\'?\030\320g?\0317\257>\322\201f?U\242\267>.\213k?\342\222\226>O\225T?\2656\020?w\344{?@U\201=\276Tr>\251\3738?\272CM?\300\270\"?\236)m?D\234\213>v\025K?\253\351\'?\342\033g?i\304\263>\220Li?\325\200\245>W\002`?\367\361\337>}\374{?\272\331|=\344=m>\372F6?\353\367Q?\265\004\027?\236\270w?\202-\000>?D\340>\376\020|?P\342w=\351\341h>Y\3533?\210\341U?\323\301\014?\006u}?\275 !=\032\312\032>(d\003?\377\321\177?\004\3417;\360\\7<\230O5=\376H->\017\366\017?\367\004|?#\314z=\355pk>\314N5?\035\231S?n\315\022?\337yz?\267\363\254=\252X\236>\304\277Z?\327\244\376>)\376\177?ub\3538\261[\3539\245@\353:\215\324\352;\273%\351<\r\203\342=\230u\311>Qat?\223z1>\345\267\022?\177\206z?\014q\253=\005\027\235>\314\310Y?\023\013\002?M\357\177?U\220\205:~m\205;h\342\204<\226\272\202=\251\304t>\313B:?\252\366J?\3371(?\202\301f?\317\t\266>\254\241j?\277\255\234>GwY?d\357\002?\212\335\177?0\304\t;\rz\t<\275R\010==\311\003>\261\246\345>\275I}?\036\272+=\373\206$>\255\027\n?\221h~?*s\312<[r\305=4i\262>\361{h?\203\330\252>\301\254c?p\207\311>\352ht?\t\0141>\237o\022?t\260z?\005k\246=&\345\230>byV?\343(\013?\330\r~?Z/\367<\366\271\357=^\252\323>tRx?\036S\356=I\227\322>\005\362w?T\243\371=o5\333>g\266z?z\264\245=5L\230>\324\375U?\325u\014?\367\222}?\216\311\031=e\003\024>\324<\375>_\370\177?W(\3649<\013\364:\351\226\363;Y\307\361<\222\244\352=i\302\317>\331\350v?HH\014>\377 \362>\230?\177?\305\327?<\267\230==\t\3224>\007\344\024?O.y?\025f\324=\356^\276>\317,o?\304\201{>\326\273=?\311sD?#\3116?\035\032Q?\3359\031?\227\016v?\272\350\030>n\023\002?\303\356\177?\370\334\211:\331\267\211;\254#\211<\362\327\206=3\356{>\365\362=?B\tD?S\2547?\002\222O??\022\035?r\313r?\323bH>/,!?Q\316n?cP\200>IP@?\t_??Z@A?\ty=?b\364D?\n\2655?\'\356R?F\212\024?jhy?1\204\315=\221\344\270>\306?l?\013\321\221>\235\223P?\244\215\032?\261\373t?\376\256(>u\345\014?\276f}?l\240$=\215\002\036>\303\240\005?N\201\177?@\347\374;\217\363\372<\213C\363=a^\326>\325:y?\241\352\322=\3501\275>\026\221n?\371\367\201>\030\364A?\213\010<?\372\257G?\252\263/?%r\\?\022\356\364>t\205\177?\005\242\364;z\316\362<\"\234\353=!\201\320>+0w?\352\"\010>E\023\354>\001s~?\212K\305<\037\213\300=\000q\256>2\004f??\305\272>GGm?\320\321\212>\277\\J?\377\230)?\214\366d?\252s\301>\272\267p?\234\353e>\304K2?CyX?\241\261\005?R~\177?\177l\001<\305f\000=\254\300\370=\360\211\332>\251\204z?G\251\253=\325E\235>\357\354Y?\231\245\001?\'\365\177?\237\214-:5o-;\266\371,<4&+=s\377#>\240\273\t?\025\205~?\036]\274<W\010\270=\327~\247>\363fa?\226\206\327>\325\231y?\001\247\307=_0\264>\257\214i?W\332\243>\351\324^?\235\367\346>\\\215}?i)\033=\266H\025>\220\n\377>\025\377\177?\200Ok8\037Lk9\232>k:\217\010k;\3070j<\322\327f=J\325Y>x~+?\025qb?\315)\321>Rnw?\376\203\004>\314\273\346>\234\201}?\035\013\036=\001\362\027>)f\001?,\370\177?\010\203\3729dd\372:\357\351\371;\376\001\370<\337\177\360=\337A\324>\224\206x?\3361\350=\220\336\315>\354.v?_\013\027>\304\303\000?\251\375\177?\325\262\0259]\255\025:|\227\025;\022@\025<\004\344\023=\t\215\016>\260i\365>\352\217\177?\321\312\337;\213C\336<\301;\330=%g\301>\233\261p?\331Af>@{2?~.X?\003\200\006?\377V\177?\370\220(<\376\324&=o\t >|\006\007?\224:\177?\243\323D<PvB=\327:9>Q\271\027?\2654w?K\337\007>\364\257\353>ec~?\356\000\315<\232\337\307=\356]\264>\243\247i?w(\243>`T^?n\357\351>&\031~?(\236\361<\316}\352=\207\244\317>\222\335v?\333\357\014>\032\024\363>\tY\177?\376\211&<\241\330$==6\036>}\304\005?\361z\177?\243\311\004< \266\003=\304\363\376=\2606\337>\016\315{?\023*\204=LEw>\231\217;?\373\221H?>\266-?\262Y_?r\342\343>\205\351|?k<C=\031\3569>\232+\030?/\337v?\341\327\014>X\361\362>\202U\177?T\014*<\203H(=\217^!>\212\360\007?\332\003\177?\356-{<\"Tw=\352dh>&\2473?\346OV?\341\230\013?\006\346}?\372c\005=\352\013\001>S\221\341>\340a|?\203Bd=\032\212W>\311+*?j6d?\217+\306>\266\357r?\036ZF><\356\037?\277\021p?\177\007o>\277;7?\027UP?\325*\033?\300wt? 40>2\342\021?\266\000{?%\312\234=E\311\220>~\257O?\337\310\034?\306\rs?\360\251D>\306\344\036?U\026q?v\264`>ce/?w\346\\?ZL\362>CD\177?F3;<\266\0179=;\2630>\1775\022?\274\321z?\253m\242=\314\213\225>\220\273S?]s\022?L\256z?+\255\246=\212\034\231>\364\245V?R\260\n?\0017~?\321\347\342<\340\236\334=\262\332\304>\310Ur?\315\367N>\335\"%?\235sj?m\340\235>\320cZ?\254V\000?\213\377\177?C\275\3527\224\273\3528\332\264\3529\365\231\352:v.\352;\004\202\350<\244\350\341=L\375\310>\327-t?\325f4>\244\236\024?P[y?\256\021\317=\373!\272>\221\356l?\274.\215>\364\200L?\270\214$?{ k?\247^\231>\010\333V?n \n?\315e~?\264\320\313<\217\276\306=$u\263>B\035i?\342\267\246>\307\334`?c\315\332>U\230z?\223N\251=xO\233>\234eX?\362\347\005?zt\177?S:\013<q\013\n=ld\005>\030\010\350>\204\301}?\243\\\016=\364i\t>\237\362\355>\036\272~?\303!\242<M\354\236=<\227\222>\236=Q?\315\337\030?\030Uv? \327\024>\207i\376>{\375\177?,W!9\321P!:g7!;\341\321 <\304=\037=\350\014\031>\314,\002?\024\355\177?\350U\227:-)\227;\251v\226</\263\223=F\014\211>i\272H?uZ-?L\334_?\022\326\340>\3214|?\2162o=\227:a>\225\260/?\277v\\?\177\323\364>%\203\177?\334;\371;\221V\367<\320\336\357=\227\306\323>7\\x?i-\355=\305\265\321>=\241w?5\213\001>\237O\342>\220\216|?(eY=^\333M>\032y$?\3366k?\267\310\230>wbV?\311f\013?\006\370}?{\366\000=\t\316\371=\273U\333>\253\277z?)\230\244=\277]\227>\304;U?\007}\016?Y\270|?S9O=w\275D>\315\360\036?\266\nq?\254Xa>m\301/?\240]\\?\227d\365>}\217\177?H\242\340;\017\030\337<\270\004\331=\230\005\302>\265\376p?=\002b>@ 0?\220\317[?<\226\370>\014\311\177?}\242[;\r\346Z<[\371W=\016\226L>/\266#?\266\022l?\245\001\223>g\230Q?\321\370\027?c\005w?\343\237\n>d\267\357>\330\366~?\270\n\204<\340\351\201=]Xs>%\2049?\214OL?\257\002%?\345\230j?8\350\234>\231\244Y?\216p\002?1\350\177?\323d\276:\007\036\276;\245\003\275<2\247\270=\032\001\250>\302\300a?\341b\325>\021\350x?\251\263\334=\000\353\304>P]r?*\214N>\262\342$?\325\275j?\366\361\233>\007\345X?\370\206\004?\004\256\177?\310\302\243;D\361\242<\222\263\237=\201?\223>\004\315Q?~r\027?\351hw?\310\324\004>\2013\347>\005\231}?yM\030=\270\243\022>\335G\373>\272\351\177?\363\034\262:\375\336\261;\320\347\260<\324\025\255=\004u\236>a\325Z?.*\376>\242\374\177?\261\213W9Y\200W:\377RW;\343\235V<1\316S=X\332H>\337t!?\244\202n?\301[\202>2VB?\306=;?\340)I?^\\,?y@a?\241p\330>\001\343y?\003\364\276=\037&\255>\263/e?\241\n\300>P\005p?\235\265o>v\2307?\212\264O?M\274\034?\022\031s?s\007D>\231\200\036?nvq?\302c[>\315b,?\2167a?\323\246\330>\265\363y?\325\366\274=f\207\253>\242 d?\350\263\306>\006-s?D\350B>\016\317\035?\276\035r?\367\027R>\"\375&?~?h?\317b\254>\262\260d?\330+\303>\336\213q?\2403Z>\242\264+?H\'b?8\357\322>\030\021x?\377\376\365=\275r\330>\250\343y?&\340\276=\366\025\255><%e?\314L\300>O&p?U\347m>\314\2416?_]Q?\037\217\030?i\223v?j<\021>\025F\371>\302\322\177?-\3304;lX4<:\\2=\364\227*>i,\016?s\334|?\255lF=\351\317<>g\377\031?|pu?\320\377!>\337^\010?\274\347~?\320\210\213<a(\211=\262\361\177>\331\370??M\016@?b\343??/9@?o\215??T\344@?*4>?\305\212C?F\2708?r\273M?\321\226!?\026_n?2Q\203>1FC?\275H9?\035\272L?\337\003$?\245\273k?\322L\225>!\207S?f\374\022?#^z?{D\260=\263\030\241>S\321\\?\013\307\362>*Q\177?&^.<\026\203,=\017?%>y\224\n?B@~?\223W\336<\263N\330=\026v\301>\350\270p?\363\332e>\226B2?\260\207X?\274\211\005?R\205\177?*\346\364;\233\021\363<G\333\353=\275\261\320>,Bw?\246\026\007>\331\210\352><3~?D\303\344<\341_\336=\223:\306>}\366r?\263\370E>\206\262\037?\034Mp?\377\306k>B}5?\225KS?\233\227\023?\225\000z?Mn\273=\002G\252>\242Kc?T\343\313>Wdu?\026\262\">\236\330\010?\373\306~?\376\302\233<\321\314\230=Uf\215>\310\262L?s\025$?\330\247k?\033\322\225>\366\365S?X\332\021?\031\005{?HC\234=\006W\220>\010LO?\363\277\035?\314+r?jOQ>\271\206&?\351\316h?\337\271\250>B?b?\016\\\322>\364\334w?\314\032\374=3\022\335>\371;{? \252\225=0\272\212>\035GJ?>\313)?\024\265d?D\020\303>\277~q?\306\355Z>Q\037,?\341\224a?\270n\326>$@y?\260I\322=\020\262\274>\035Nn?;\306\203>\374\267C?\267X8?EdN?\374\372\037?\004\005p?\313\271o>\257\2327?\256\260O?\354\305\034?n\020s?\310\203D>E\315\036?\375,q?\007t_>1\261.?_\357]?\252A\354>2z~?b\276\301<])\275=\231\260\253>\314;d?\325\t\306>t\340r?=5G>It ?\343\212o?7dv>\007\033;? jI?7\311+?%\013b?\272\233\323>aMx?\301\353\356=Z\014\323>W\033x?k\313\364=\336\210\327>\216\232y?\021\221\307=\265\036\264>8\202i?^\037\244>\210\006_?8\321\345>wR}?_\227)=\314\221\">\226\302\010?\013\315~?|\302\230<@\351\225=\025\360\212>rxJ?\226X)?\006Je?\020d\277>\251\261o?AGt>G\001:?\257mK?1\032\'?\n\034h?\251I\255>\256Fe?9y\277>V\274o?4\262s>B\2639?\275\372K?~\314%?\001\255i?\004\005\243>\245:^?\016\207\352>\3572~?B\351\344<\300\203\336=\247V\306>&\003s?\270BE>\310B\037?\t\273p?\371\274e>\02122?\236\241X?\364A\005?n\221\177?\254\304\334;\347G\333<Fi\325=;,\277>n\225o?1\321u>\254\316:?\314\366I?F\205*?\376\277c?\214\017\311>\2555t?\374\3643>\333T\024?\207\212y?<x\311={\246\265> hj?\331,\236>N\236Z?xb\377>\237\377\177?\204\340\3017^\337\3018\310\332\3019n\310\301:\026\177\301;\225Z\300<U\326\273=\372\233\252>m\204c?y\202\312>\311\322t?\313\004+>\361t\016?\001\274|?PUN=y\360C>kr\036?\357\203q?*\244Z>*\365+?\345\316a?{\014\325>1\313x?\037\034\340=\370\225\307>q\221s?#@=>2F\032?\2526u?\314O%>\317\237\n?\200<~?\2561\340<\367\016\332=G\327\302>\221cq?/o\\>]\373,?\205b`?\263\257\335>\222f{?\311\210\220=\204U\206>e-F?\223\0143?\363GW?\022\370\010?:\276~?\314\030\240<\324\367\234=\365\357\220>\025\321O?)u\034?\246Xs?\305s@>NH\034?j\200s?\0036>>\365\340\032?\"\266t?\366\246,>\304\212\017?\3079|?{\376m=h*`>\331\027/?\361X]?\021\262\357>*\366~?\302`\204<#=\202=\274\351s>X\3209?=\306K?\373H&?\002\031i?\315\323\246>=\360`?\205W\332>\336uz?Pn\255=\207\276\236>Q\r[?<\354\374>\210\366\177?g|\027:\376e\027;t\014\027<\365\247\025=&0\020>3\305\367>F\274\177?\335P\207;\320\301\206<U\212\204=\355\354w>*\346;?g\360G?\024#/?hH]?\200\022\360>O\002\177?\372\265|<\037\320x=\340\262i>\032]4?.(U?,\261\016?\222\240|?a\003U=w\357I>\375\034\"?&\321m?\325!\207>\367\356F?\310a1?\261\345Y?\364\271\001?\024\364\177?\247\265>:\"\222>;E\004><\034\320;=\20133>=\327\023?`\331y?P\031\300=\221\024\256>+\311e?.=\274>r\020n?\351n\205>dQE?\032\3544?\360<T?\321\037\021?\tk{?\020\377\217=2\337\205>\267\274E?\350\0024?G\273U?i(\r?|K}?\251L+=\261\"$>\223\323\t?\303}~?\007\373\277<B{\273=\231Q\252>\270Rc?U\267\313>fRu?H\271#>\352\213\t?t\223~?BB\265<\214?\261=n\350\241>\257j]?\204J\357>\320\350~?\321\377\212<\013\244\210=h\014\177>\372\205??#\363@?\036\026>?\035\305C?\353<8?*\225N?\016\203\037?\376{p?W4i>C\0304?\213\230U?d\205\r?\271$}?z\3074=\350\314,>\351\243\017?\207-|?S\367p=I\312b>\327\2170?\373&[?\036Z\374>\261\362\177?j\341T:)\265T;l\004T<\017FQ=\330\224F>3\022 ?\310\355o?\370\376p>4G8?\025\203N?p\257\037?+Pp?\030\234k>\033f5?@rS?\3362\023?\244=z?\034&\264=hM\244>\213\'_?\003\r\345>\276)}?f\2153=u\256+>\323\345\016?:\210|?\304\357Z=\360;O>qK%?lDj? \032\237>\311R[?P`\373>\237\352\177?\224\372\252:|\301\252;\261\335\251<\375W\246=6\325\230>\212lV?\225K\013?\254\001~?\225-\375<|Z\365=\262\365\327>\307\274y?\021\200\303=\206\326\260>`\205g?:\033\261>\313\257g?\217\010\260>Y\005g?\222U\264>\262\242i?\024I\243>\004l^?\374c\351>\320\000~?~\231\375<\270\277\365=\247B\330>\303\324y?\336\245\300=\267\206\256>\006\022f?\016m\272>u\027m?\037\030\214>\332\205K?1\341&?}ah?*\205\253>(\037d?%\275\306>)1s?\275\254B>,\252\035?\003@r?\322.P>\313\333%?\353\232i?m|\243>+\221^?\223\210\350>S\331}?2\203\010=w\366\003>\331\351\345>~W}?<\\(=\251p!>\357\374\007?\304\000\177?\210=~<\220Kz=\025\000k>\313\0215?\202\376S?\352\303\021?\224\021{?R\303\232=_\021\217>U.N?\357~ ?\025\200o?\331\372v>\025i;?\224\331H?\217\023-?z@`?\245|\336>\337\234{?/\374\211=3\260\200>\272\257@?\252\236>?\014\273B?\024l:?f\253J?\332\341(?\223\342e?|\233\273>s\272m?\225\275\207>\253\201G?G\0330?\013\327[?Ok\370>\210\306\177?\253\254e;\234\336d<\'\254a=&=U>r\325(?j\362e?\2316\273>c\204m?\373/\211>\222\333H?\006\017-?\334F`?<V\336>\313\222{?\2343\213=y\275\201>r\272A?*\177<?\225\320F?\021\2451?\224}Y?\307\335\002?#\337\177?\331b\003;k\037\003<\306\022\002=\253\342\373=\342\347\334>f0{?\250\016\227=_\352\213>d\\K?\361B\'?%\352g?\002\216\256>\252\026f?sO\272>Z\007m?\351\205\214>\025\351K?e\366%?g{i?SL\244>\305&_?\237\021\345>\266*}?\261P3=\022w+>\000\301\016?J\231|?\026\311V=\311\205K>l\022#?\324\307l?G6\216>LlM?\263V\"?m\223m?\005\311\210>\327{H?m\350-?\332\021_?\367\215\345>\243D}?\210\371,=\204\253%>\341\335\n?\250\'~?\tx\352<\013\302\343=\325m\312>\'\312t?\325\202+>\322\310\016?\256\225|?\367\251W=\010OL>\205\213#?6Bl?\210\300\221>e\205P?n\261\032?\353\335t?,b*>\212\010\016?C\354|?Z\221B=PS9>\357\310\027?\036)w?\377\213\010>x\255\354>\245\212~? \235\271<|h\265=\337V\245>\245\344_?\n\244\340>\231(|?9)r=\031\330c>\334%1?\360AZ?I\266\000?\371\375\177?\333\312\0019\277\306\001:L\266\001;\223t\001<\270n\000=\223\317\370=8\225\332>\366\207z?1D\253=\254\361\234>\352\253Y?\020\\\002?\273\351\177?\314\033\262:\327\335\261;\256\346\260<\276\024\255=\035t\236>\261\324Z?\025.\376>\260\374\177?\363\372S9\373\357S:\035\304S;\360\024S<\302\\P=T\303E>\307\221\037?{mp?Y\000j>1\2074?4\343T?rh\017?`J|?Q\367i=\017\232\\>\306\023-?,@`?v~\336>Y\235{?y\355\211=x\243\200>\017\243@?B\270>?\356\210B?q\324:?2\354I?\306\235*?h\237c?\225\332\311>1\214t?g\n/>\231\036\021?\260k{?\354\352\217=\342\315\205>2\254E?\345&4?\264\200U?\037\305\r?\214\t}?(k;=\314\3272>\231\233\023?#\376y?\322\270\273=\341\203\252>Wtc?~\346\312>n\374t?<\244(>>\336\014?\245i}?Q\352#=\016[\035>\332,\005?\337\224\177?N\351\325;\322\203\324<}\000\317=D\024\272>\024\347l?\267a\215>\245\256L?[\037$?\253\234k?K\035\226>?4T?\2616\021?\303^{?\242y\221=B$\207>A\361F?\265\\1?\205\355Y?\365\243\001?<\365\177?\3073,:\321\026,;#\243+<\325\326)=\000\314\">K\352\010?\023\302~?\3310\236<\326\"\233=pb\217>\301uN?\"\320\037?\272/p?Acm>\006[6?\344\325Q?\313[\027?\202yw?\362\334\003>\365\303\345>\300O}?zA*=\311-#>\364,\t?<\257~?\211\204\247<\230\027\244=\320\361\226>\\\343T?\007h\017?\224J|?\303\352i=\360\216\\>q\r-?\027I`?\322H\336>C\217{?\256\240\213=\262\033\202>@\027B?\004\300;?\2717H?p\202.?u3^?\\\261\352>\001:~?\377l\341<\3718\333=\250\301\303>\270\322q?\311DV>\004o)?\002-e?\245\033\300>\317\rp?\233>o>\036Y7?X\"P?\020\252\033?\276\nt?3d6>\213\347\025?\307\200x?\221\340\350=\227e\316>\207cv?\221\001\024>::\375>P\370\177?\320\364\3659F\327\365:;a\365;\325\212\363<NM\354=z\t\321>{bw?\3034\005>\230\301\347>=\264}?Q\237\021=\363q\014>|]\362>\027F\177?\232a9<\241H7=\022\025/>\236%\021?\356g{?\350^\220=\2131\206>/\013F?\207W3?\t\320V?D>\n?N\\~?\361\200\320<b2\313=D\t\267>H4k?\006\332\230>kpV?\033A\013?]\005~?e\\\373<\362\245\363=c\251\326>%Sy?\216\t\320=\235\347\272>\330Ym?\362R\212>\\\350I?\243\246*?\230\223c?\031$\312>5\253t?QF->J\364\017?\331\005|?r\225z=\357@k>\33545?F\304S?\217\\\022?i\273z?\312\032\245=X\313\227>-\225U?e\216\r?\352 }?\307\2655=\036\246->\2423\020?\005\346{?\005%\201=v\000r>>\3178?\264\222M?\256\371!?\267\366m?\326\037\206>T\372E?h|3?\310\224V?\316\336\n?X\'~?\234\237\352<[\347\343=\327\212\312>H\326t?\274\321*>\356R\016?M\313|?\033\233J=\211\225@>`]\034?\304ms?+C?>\330\211\033?\211&t?\340\3204>F\343\024?\315.y?8W\324=&S\276>\304&o?\276\325{>\211\346=?M!D?+y7?\332\352O?\3314\034?\226\221s?\002>=>\333D\032?\3047u?\250?%>\341\224\n?\037@~?xh\336<\255^\330=\260\202\301>\020\277p?5\204e>\302\0222?\253\322X?\364\271\004?\245\246\177? w\262;M~\261<\315\245\255=\235\354\236>N0[?\376$\374>#\361\177?\231\310m:b\221m;\353\264l<sIi=\007\000\\>\004\274,?S\273`?\310\227\333>\206\322z?gU\242=aw\225>\223\252S?\314\237\022?\216\224z?F\302\251=\004\260\233>j\261X?1\026\005?\201\230\177?\372\252\316;K]\315<W7\310=\206\244\264>F\321i?L\025\242>\242\213]?\000\212\356>\036\317~?\250\273\227<1\354\224=\362\027\212>\021\262I?\332#+?\300\353b?B5\316>\303Pv?0\027\025>`\304\376>{\376\177?\001\220\3028b\213\3029\347x\302:\n/\302;s\010\301<\005|\274=9#\253>_\336c?\014R\310>\313\343s?\314\2308>\314Q\027?\315\200w?\rp\003>,\"\345>1.}?\014w2=p\260*>\274<\016?4\325|?\0011H=8h>>\200\000\033?\224\233t?;*.>\337\212\020?c\271{?\220\212\206=\312g{>\236\256=?G\215D?\222\2226?[wQ?\004M\030?\340\305v?\306O\016>?\021\365>z\210\177?\340\233\356;\023\337\354<\263\005\346=\353/\314>o\203u?\230\351 >c\240\007?X\027\177?.\324g<l\214d=\305\313W>\313Q*?=\004d?\204e\307>\r|s?\010u>>\215\010\033?\310\224t?B\215.>-\314\020?^\227{?D\246\212=OC\201>\266AA?Bv=?\270\371D?\214\2515?p\001S?FX\024?Z\210y??\272\311=\177\333\265>\340\206j?:`\235>I\001Z?dl\001?\345\367\177?\327\246\001:l\226\001;\323T\001<yO\000=\000\225\370=\337h\332>\367zz?+\322\254=\310<\236>{\252Z?\202\035\377>8\377\177?lbH8\370_H9+VH:\371.H;p\222G<\034$E=\022\247;>\262C\031?\325\006v?2[\031>\251c\002?*\351\177?\337\235\266:\274\\\266;\354X\265<6U\261=X\372\241>\330w]?\247\375\356>\260\336~?u\004\220<L|\215=\007\266\203>B\250C?\374y8?\237)N?r\212 ?bto?\340\235w>^\275;?\252<H?Hw.?\253C^?\346Q\352>\371)~?\324S\351<\206\256\342=s\227\311>\272ot?\357\2500>\301.\022?\221\325z?\353\367\241=\262(\225>\377hS?\377J\023?!/z?\207\341\265=q\272\245>\005+`?\252\375\336>f\276{?\220\357\205=lZz>>%=?\355\224E?\206Y4?\t.U?\230\241\016?\265\247|?\223FS=\275`H>\352*!?\242\317n?CG\200>/G@?Sq??\035\034A?\331\302=?@fD?\024\3466?\203\350P?k\267\031?\247\252u?\033\251\036>\320\023\006?Cl\177?\335g\023<[\024\022=\250\336\014>+\373\362>\202V\177?\214\r)<\000O\'=~y >xS\007?Q)\177?\023\373U<\244/S=+LH>d\036!?\232\334n?\327\332\177>j\355??\'%@?\235\265??p\224@?\310\325>?\002OB?\253L;?J\016I?e\233,?\334\350`?7\204\332>\374\202z?\233\334\253=\214p\235>\333\rZ?\005I\001?e\371\177?pi\3239\235S\323:d\374\322;\235\240\321<`C\314=\362\343\267>5\260k?\324\231\225>:\307S?\324T\022?\330\277z?\310\222\244=;Y\227>\0248U?\333\206\016?\344\263|?$OP=\031\267E>E\212\037?\342tp?J\230i>\246N4?\322?U?:r\016?;\275|?\320\010N=\255\253C>\356G\036?@\254q?\271gX>\355\253*?\214\214c?\366O\312>\243\275t?\1779,>+B\017?\267\\|?6\203e=\366\246X>k\320*?\315[c?\364~\313>R;u?\223\013%>\230q\n?\267K~?\306\260\330<p\365\322=}:\275>\220\225n?\005\331\201>\233\325A?SG<?\3649G?5\2730?\r\345Z?2\321\375><\373\177?-v\2309\323j\230:t=\230;b\210\227<\320\272\224=\277\355\211>+\213I?X}+?\235rb?e \321>\341jw?e\267\004>\370\007\347>\216\220}?\347`\032=[\217\024>\255\003\376>\017\374\177?hR|9\335B|:\270\004|;\237\014{<\3303w=\207Hh>\244\2273?\353hV?]U\013?6\376}?i\341\376<H\363\366=9,\331>r\034z?\014\034\270=\001\217\247>\037ra?\216B\327>@\204y?\3436\312=\216?\266>\256\300j?\365\336\233>+\326X?=\260\004?\023\250\177?\220\235\257;\236\254\256<&\363\252=+\256\234>\233wY?y\356\002?\240\335\177?\'n\t;`$\t<\200\376\007=\232z\003>\3311\345>z1}?J\2511=\221\364)>]\277\r?\006\014}?a\320:=*K2>\003@\023?\2765z?i\027\265=&\024\245>Q\265_?k\277\341>\315l|?\337\232a=\305-U>y\314(?\334\375e?\246\355\272>\032]m?\260<\212>\344\323I?\343\325*?{Tc?i\254\313>\360Mu?\265\372#>g\270\t?\020\206~?.\341\273<\030\222\267=\322\035\247>\270#a?K\037\331>\205\030z?\334\223\270=@\361\247>\333\265a?v\245\325>+\376x?s\027\332=\365\335\302>\302fq?\367A\\>\233\341,?\260\206`?\253\325\334>f+{?\237\250\227=\224m\214>\037\323K?w*&?v=i?1\344\245>oH`?\277L\336>L\220{?\271\200\213=\030\000\202>\027\374A?\017\370;?\342\316G?^n/?(\331\\?\230\231\362>pL\177?\224\0213<\216\0341=\006t)>mi\r?~0}?\355\3461=\333,*>\364\344\r?\312\373|?=\307>=x\3445>@\225\025?\262\270x?\207J\342=\221I\311>\207Nt?\324\2132>$j\023?J\034z?\300 \270=\335\222\247>\311ta?Q2\327>\024\177y?\372\323\312=\223\275\266>\r\tk?x\373\231>cXW?8\313\010?\255\312~?\305\356\231<J\n\227=\246\346\213>\004YK?\343J\'?c\340g?[\315\256>\351>f?tN\271>lzl?\320C\220>D;O?y\351\035?\027\005r?~wS>\361\313\'?\350@g?\247\325\262>\200\275h?\341+\251>\313\214b?8\177\320>v/w?y-\010>\305\"\354>ju~?\332\032\304<\021i\277=S\205\255>.me?W\205\276>{@o?Npz>l0=?\216\177E?\367\2074?\356\341T?\321k\017?\300H|?6\\j=k\363\\>\231F-?k\370_?}-\340>W\013|?\275@y=\315\025j>\326\2224?\024\320T?(\233\017?\3151|?\354\355o=\013\340a>%\r0?F\354[?b\361\367>\025\277\177?\177\264\201;\0201\201<\370N~=\353\204n>\021\3666?\022\315P?\303\374\031?\242ru?M\340!>SI\010?W\355~?\025\301\210<\247x\206=\255H{>\307\236=?\313\253D?#Q6?\255\346Q?\3310\027?\276\230w?=\n\002>F\r\343>\001\272|?\352\321N=\202`D>\207\267\036?\343Aq?HL^>/\n.?[\341^?\327\255\346>\332~}?,\270\036=\257\221\030>Z\326\001?\177\362\177?>\000X:\256\322W;\273\034W<\266IT=\023II>\036\270!?\020<n?\244B\204>~0D?\320X7?\340\"P?\275\250\033?\343\013t?\227S6>\332\334\025?\027\210x?A\004\350=J\273\315>\027!v?\256\327\027>\245S\001?\366\370\177?\tI\3419A0\341:6\315\340;fB\337<\300,\331=#%\302>\370\rq?\250*a>\247\247/?\013\204\\?\236\206\364>X|\177?Ad\003<\202V\002=\204a\374=\200G\335>yJ{?@\353\223=@<\211>\365\346H?\027\365,?Vk`?\225z\335>JX{?OA\222=}\317\207>|\222G?\255\365/?{\017\\?\363&\367>\267\261\177?\313a\234;\274\242\233<\310\255\230=\356K\215>!\233L?\031N$?\304gk?\300\200\227>]XU?\3200\016?\200\332|?i\346F=\326==>\276D\032?\3337u?T>%>\372\223\n?l@~?\347B\336<&;\330=\252f\301>_\261p?&Ef>\021}2?\240+X?\351\207\006?dU\177?\247**<5f(=\320y!>3\003\010?3\377~?h\313\177<\r\315{=QRl>Y\3105?\271\315R?@\336\024?\0242y?\343\363\323=e\004\276>D\376n?\016\010~>\017\003??\372\365A?\253\004<??\267G?_\243/?k\212\\?\302a\364>\005y\177?\371\263\006<u\230\005=\371<\001>\261\332\341><s|?\202\n`=[\311S>\371\373\'?\t\005g?\225W\264>\343\243i?9A\243>Sf^?\222\205\351>\272\006~? \260\372<=\004\363=\033.\326>\031+y?n\307\324=\021\254\276>ETo?\006]y>\200\243<?\316\213F?\373<2?}\220X?aq\005?\200\211\177?K\222\354;\017\335\352<H!\344=\337\267\312>\016\351t?u\277)>\337\233\r?2\033}?\237\0337=\027\354.>\245\n\021?Wv{?<\242\216=0\263\204>\031\235D?\251p6?\035\261Q?\305\271\027?_4w?N\344\007>P\267\353>\220d~?hm\314<tS\307=\030\355\263>\305di?u\341\244>E\221_?\340\226\342>\004\237|?rdU=mFJ>\237Q\"?\337\230m?\271\243\210>\025YH?\0257.?\242\240^? -\350>n\310}?\346\251\014=B\325\007>5\241\353>\ra~?\037)\316<\355\370\310=0@\265>\214,j?\241\270\237>e\312[?\344\263\370>\300\312\177?D\324T;T#T<*dQ=\337\257F>\275\" ?0\335o?\026\347q>\334\3018?t\252M?\023\300!?\2543n?p|\204>PhD?\255\3416?\021\360P?R\244\031?\372\271u?\245\307\035>\006x\005?^\210\177?U\324\356;\266\026\355<\036:\346=\216X\314>\333\223u?C\370\037>\256\372\006?)=\177?HBB<\246\364?=\266\3656>#E\026?-@x?\270x\360=f<\324>\265\204x?8j\350=\"\n\316>\365?v?\246\017\026>\020\022\000?\373\377\177?\337 \2435\322 \2436\236 \2437\316\037\2438\216\034\2439\221\017\243:\242\333\242;m\014\242<\317\327\236=\354\205\222>\321.Q?^\005\031?\3167v?\030\210\026>\'g\000?Z\377\177?\260@&8\000?&9A8&:F\035&;|\261%<\203\004$=&s\035>\212=\005?\'\222\177?2S\333;c\333\331<6\020\324=\333\032\276>\326\to?\201g}>\021\262>?\017\225B?6\273:?\212\032J?\2262*?s-d?\261c\306>\005\ts?P\356D>\336\016\037?\225\355p?\014\364b>\031\2470?\247\003[?;#\375>\317\367\177?N\023\003:\207\002\003;{\277\002<_\264\001=\3251\373=}b\334>\215\013{?\272|\233=\261\256\217>\301\270N?\224+\037?\253\321p?\346}d>\306\2011?A\264Y?\256D\002?k\353\177?\215\227\244:\243b\244;\206\217\243<\206K\240=\266\277\223>\2619R?\365[\026?C0x?\374V\362=\352\251\325>\244\377x?\351\352\331=\346\272\302>\377Uq?\200/]>\275h-?\n\310_?_O\341> R|?\216\025h=\034\357Z>\025 ,?\322\223a?*u\326><By?C\n\322=\250\177\274>\2223n?$}\204>\376hD?8\3406?\217\362P?\002\236\031?\010\277u?B}\035>\212D\005?\001\221\177?\266\235\335;\003\036\334<\3463\326=\214\314\277><\346o?\221hq>\016\1778?\253 N?O\240 ?\037^o?\341\323x>\024]<?\362\020G?b\0261?\263YZ?<s\000?1\377\177?\003zO8bwO9\340lO:\334BO;\016\233N<\027\000L=\025\327A>\224%\035?\334\271r?\026_I>y\305!?\372-n?\252\243\204>$\216D?\270\2206?\202zQ?\374D\030?\371\313v?F\365\r>~\216\364>\r}\177?|\260\002<\235\245\001=/\026\373=\237M\334>\275\005{?\202/\234=DF\220>h=O?,\344\035?\013\nr?\3420S>{\242\'?^tg?=\211\261>j\363g?\312Q\256>K\360e?\027D\273>\242\213m?\\\376\210>z\255H?\330w-?\230\262_?\264\317\341>\245p|?\242\253`=\325XT>\005P(?\226\233f?2\375\266>g-k?!\010\231>\212\225V?\277\334\n?\013(~?qG\352<<\224\343=5J\312>9\273t?\273\\,>\214Y\017?\211Q|?R:h=\266\017[>\2752,?\024za?\027\022\327>\312ty?r\014\314=\367\267\267>g\227k?\264@\226>\205QT?\233\351\020?\336\207{?\030\205\214=\335\340\202>\224\330B?q.:?\262\033K?\013\333\'?\034.g?\346N\263>^\006i?4N\247>HEa?cS\330>\364\331y?\277\007\300=K\006\256>\010\300e?Nw\274>*/n?{\233\204>A\206D?\235\2416?\256]Q?U\216\030?\003\224v?t3\021>?9\371>\025\322\177?\217\2147;\364\0107<}\3754=&\376,>\206\304\017?\206\035|?\311\330t=\3515f>\257t2?\3328X?uc\006?\277\\\177?x\330\"<\035:!={\341\032>wt\003?A\320\177?\345\330>;\236J><\323\024<=\351q3>\312\377\023?\"\300y?\367\031\303=\345\203\260>+Rg?9f\262>\"zh?S\344\252>\234\264c?\177V\311>\rTt?\210;2>\3225\023?\336;z?L\\\264=\016z\244>\200G_?\330N\344>\'\001}?\366w==P\2644>\314\320\024?\327:y?`\352\322=\2651\275>\373\220n?\262\370\201>\317\364A?\023\007<?\274\262G?{\255/?]{\\?\317\270\364>\316\200\177?\245\345\375;\005\356\373<\240.\364=\203\021\327>\233ty?\022\022\314=x\274\267>\362\231k?\232/\226>cCT?\325\016\021?\033t{?\'\347\216=\177\356\204>-\326D?\023\3665?\276\200R?\026\245\025?\000\256x?:\215\343=\301D\312>\357\270t?\034~,>\257o\017?\343F|?\023\320j=\003Z]>\341\200-?\301\245_?~\034\342>\252\202|?\027J\\= qP>\036\003&?Lli?\341\257\244>\361m_?\302i\343>\312\316|?D\301I=3\321?>\276\342\033?\214\331s?0-9>\232\260\027?*;w?\031\177\007>\215\"\353>\246L~?\232:\330<\203\205\322=\231\341\274>\022gn?\026\032\203>v\020C?\204\2719?s\357K?J\347%?N\215i?=\326\243>\365\321^?\036\t\347>\307\220}?\324R\032=X\202\024>4\361\375>\304\373\177?b\177\2079kv\207:\224R\207;\203\303\206<\371\213\204=\311\357w>\243\347;?\245\355G?H)/?C?]?\315G\360>\346\010\177?\364+v<\022yr=\200\036d>\352L1?\335\005Z?\203_\001?u\370\177?zL\3619\0140\361:n\276\360;\243\371\356<\372\000\350=\301\270\315>\030 v?c\346\027>\375]\001?\206\370\177?\2546\3579\273\032\357:\022\253\356;\r\356\354<\317\023\346=\333:\314>\334\207u?\222\250 >\311s\007?\333!\177?\245d]<\311fZ=\226\301N>\216\002%?\014\231j?7\347\234>\322\243Y?\275r\002?\006\350\177?/\272\277:dr\277;\014T\276<\005\350\271=\340\007\251>Ztb?\263\025\321>\366fw?\340\361\004>\226^\347>V\241}?\005C\026=\333\277\020>\203\223\370>\343\310\177?\307C\\;B\206[<F\225X=\203!M>\327\t$?\355\264k?\020z\225>\317\254S?\363\231\022?\365\227z?\rZ\251=\014Y\233>%mX?!\323\005?Jx\177?\250m\007<\025O\006=\247\347\001>\252\331\342>K\256|?=\254Q=\222\360F>QJ ?Y\265o?\307\023t>Z\3469?s\236K?\032\247&?\335\247h?q\271\251>\204\354b?\2010\316>\351Nv?\2132\025>\'\353\376>\325\376\177?\r\262\2258Q\257\2259`\244\225:\243x\225;\030\312\224<F\026\222=\231\252\207>\323oG?!C0?\007\233[?V\303\371>\032\331\177?\243\201\033;-#\033<\036\253\031=>\347\023>\314\024\375>{\367\177?*J\010:\0068\010;\212\357\007<\320\316\006=\376^\002>\255\213\343>Y\326|?\226\351G=\306\'>>\002\330\032?\245\275t?Z9,>\023B\017?\303\\|?_\200e=p\244X>\366\316*?\277]c?\336r\313>\\6u?BT%>\324\242\n?\177;~?\\\260\340<\263\206\332=}5\303>s\220q?\226\362Y>L\217+?1Zb?\227\266\321>\211\241w?\311\206\001>\004I\342>\010\215|?\242\304Y=\2630N>\031\254$?\226\374j?\327N\232>\273\232W?\335\025\010?\201\372~?\3169\202<\330\'\200=\270Ep>\005\3457?,/O?i\007\036?\r\351q?\352\006U>\311\265(?\300\032f?b5\272>&\371l?\251\346\214>9@L?8\'%?\217nj?\r\002\236>\222}Z?\337\r\000?\375\377\177?\346h@5\335h@6\271h@7)h@8\346e@9\335\\@:\2728@;e\250?<rj==\014\2504>\334\310\024?\000@y?\003N\322=\201\265\274>\354On?\304\271\203>\343\253C?Pr8?(7N?_i ?\364\225o?\351\311u>\343\312:?\301\375I?2u*?X\325c?_\212\310>?\374s?s67>\272n\026? #x?\232\341\363=\330\326\326>\313ay?%M\316=\035\205\271>\221\230l?Uw\217>\"\210N?\014\243\037?m\\p?\371\357j>\024\t5?\365\014T?\371\235\021?\216&{?\305=\230=\230\354\214>\217EL?\201\032%?O}j?\347\237\235>I2Z?l\342\000?\337\374\177?\255?H9\3435H:\276\016H;grG<\333\004E=\323\212;>\3141\031?\362\024v?\367\212\030>\243\321\001?\304\362\177?\215\261S:\311\205S;\003\327R<n P=\"\215E>\201p\037?=\216p?\2673h>F\2143?>{V?\335#\013?\230\017~?\312R\366<\260\352\356=\211\013\323>\016\033x?\n\324\364=m\217\327>\241\234y?\010R\307=\364\353\263>\027di?\356\345\244>u\224_?\334\203\342>\244\232|?\nuV=\214:K>\022\345\"?i\371l?\344\344\214>\242>L?\003+%?(jj?V\037\236>\372\223Z?\366\234\377>\332\377\177?\207B\0317+B\0318\274@\0319\000;\031:\022$\031;v\310\030<\273[\027=\346\303\021>\013\010\372>`\334\177?\nk\016;\320\033\016<D\340\014=\343\007\010>\226\353\353>\316l~?\236[\310<$u\303=\257\315\260>\350\177g?\233>\261>\225\305g?P{\257>\315\254f?\277\216\266>7\356j?\350\256\232>\352\346W?\364D\007?\240,\177?\027\261R<{\373O=\361kE>\035\\\037??\242p?\036\032g>\025\3622?,rW?\315\204\010?\271\335~?\320~\220<Y\362\215=\276\033\204>\335\nD?\351\2507?\362\227O?z\003\035?\331\330r?p\242G>\364\266 ?\001Go?\224\025z>\n\002=?\035\330E?(\3073?,\034V?=$\014?U\262}?L\027\022=c\341\014> \377\362>\351V\177?\014\247(<\235\352&=L\035 >#\024\007?\2227\177?\037\321G<DaE=V\336;>\262f\031?!\353u?\305\363\032>9\201\003?\336\316\177?!cD;y\314C<uuA=PR8>\264$\027?\211\241w?\306\206\001>\377H\342>\007\215|?\342\304Y=\3540N>;\254$?n\374j?\336O\232>\214\233W?\241\023\010?\022\373~?6\362\201<\014\305\177=i\314o>\225\2447?x\237O?\302\360\034?\314\351r?\007\257F>9\" ?\265\335o?\327\337q>\t\2768?<\261M?\236\257!?\004En?\362\004\204>\312\364C?\320\3277?;FO?Q\316\035?m\036r?1\016R>_\367&?\203Fh?\0175\254>\307\222d?\003\350\303>\277\344q?,DU>\213\331(?/\355e?\353W\273>F\226m?\177\265\210>\246iH?\234\021.?\253\326^?3\355\346>S\213}?d\251\033=\373\276\025>\006\262\377>\350\377\177?\334\001\2766\226\001\2767|\000\2768\024\374\2759t\352\275:\002\244\275;\013\213\274<\'4\270=\306\242\247>\306\177a?^\357\326>\253iy?\022^\315=\031\306\270>\324.l?\241C\222>\r\366P?/\225\031?\030\306u?N\025\035>\205\374\004?\213\234\177?\252\234\306;}h\305<\255\246\300=_\207\256>q\022f?dj\272>\003\026m?\000\"\214>\313\216K?\026\314&?\034{h?\362\335\252>^\260c?\353p\311>S_t?\220\2271>\324\312\022?f{z?\355\304\254=\3071\236>\022\242Z?$M\377>\203\377\177?9\356\3717Q\354\3718\261\344\37193\306\371:ZL\371;\316f\367<\022\356\357=F\322\323>@`x?\001\264\354=uX\321>\\\177w?\215\205\003> B\345>\3424}?)\3240=\3421)>)=\r?\355B}?\276d-=\251\r&>; \013?\333\020~?m\263\365<\345T\356=\247\230\322>\201\362w?\320\224\371=v*\333>?\263z?N\025\246=Y\235\230>x?V?/\305\013?\330\325}?\377]\t=\243\302\004>\240\030\347>\315\223}?&\225\031=\354\322\023>\344\367\374>\317\366\177?\\\t\023:?\364\022;\344\237\022<\371O\021=>(\014>v\362\361>\204:\177?k\343D<\267\205B=\310H9>7\302\027?\033.w?\243A\010>_@\354>\377y~?\240\327\301<jA\275=5\304\253>\265Hd?\361\270\305>\272\273r?RDI>;\265!?\032?n?\262-\204><\034D?\364\2037?%\330O?\213c\034?Khs?\034\222?>F\273\033?\331\373s?5<7>lr\026?\211 x?q/\364=\"\022\327>\316ty?\t\014\314=\243\267\267>7\227k?\363A\226>\214RT?\345\346\020?L\211{?\336X\214=\263\272\202>@\263B?U|:?\264\215J?\025\')?\325\211e?\236\317\275>\005\343n?\354\201\177>\347\300??\365}@?\037\003??\333\365A?\353\004<?\310\266G?k\244/?\335\210\\?\300j\364>\325y\177?8\344\005<\034\314\004=\352}\000>\300\274\340>\245.|?\364\261p=\022\215b>\271m0?\256Z[?C3\373>\366\350\177?\273<\270:o\372\267;\377\361\266<\027\334\262===\243>pc^?\231\226\351>\267\t~?\3067\371<\332\242\361=Y \325>\332\321x?\370R\337=\303\370\306>\307Ks?S-A>\373\273\034?\\\031s?M\003D>\t~\036?\337xq?\037A[>\000O,?\376Ra?\002\000\330>\001\300y?\351\035\303=\026\207\260>\'Tg?jY\262>^rh?\007\027\253>I\326c?\202\204\310>\264\371s?F[7>^\206\026?\205\022x?<\324\365=?R\330>\231\331y?\207\022\300=\016\017\256>\244\305e?\240S\274>R\034n?5\035\205>\016\003E?k\2255?+#S?\266\000\024?\216\277y?\215+\303=!\222\260>\001[g?&-\262>{Wh?q\306\253>-Jd?\272\257\305>\207\267r?\200\200I>\276\331!?\220\030n?\0227\205>\337\033E?\332_5?\257|S?\247\027\023?\354Mz?q4\262=\322\262\242>\325\376]?\333\346\353>\020l~?v\271\310<c\316\303=\341\025\261>\177\254g?\355\035\260>\260\022g?\246\377\263>\313oi?\330\230\244>\200]_?\307\313\343>\211\344|?\333sD=\301\007;>\254\336\030?\370Uv?%\312\024>\035W\376>?\375\177?\214J09\366B0:\237$0;l\253/<=\311-=\243i&>Y^\013?\006\373}?b9\000=\227k\370=\203I\332>\276qz?\227\354\255=c\'\237>\323\\[?\002\'\373>\200\350\177?\214\355\273:\222\250\273;r\225\272<\206U\266=\317\031\246>#n`?\261i\335>\273S{?\342\315\222=\363G\210>_\003H?i\370.?%\207]?@\244\356>\260\322~?\330\366\225<\0168\223=\341\242\210>KXH?\3358.?\017\236^?Z<\350>C\313}?\350\367\013=u/\007>_\255\352>W9~?\306\300\341<\"\210\333=\334\377\303>\357\357q?\340\244T>\201|(?mcf?\365d\270>\242\370k?\267\261\223>\333-R?_z\026?\365\032x?\366\326\364=\246\221\327>T\235y?\257<\307=\302\332\263>\336Yi?C)\245>O\304_?\266e\341>zW|?\023\311f=5\310Y>\363v+?L{b?\362\352\320>CWw?\034\334\005>\377\270\350>*\342}?\304V\006=\324\356\001>`\344\342>\273\260|?>\024Q=\035hF>\317\366\037?0\tp?a\177o>\234{7?\236\346O?k?\034?C\210s?\256\304=>\256\231\032?\262\361t?.A)>fG\r?\257>}?\202n.=\333\000\'>T\304\013?)\326}?6J\t=.\260\004>H\375\346>x\216}?\344\343\032=t\010\025>|\257\376>F\376\177?z+\3358\202%\3359\240\r\335:0\256\334;\2701\333<HT\325=\234\033\277>\002\215o?\245Fv>\257\013;?t\206I?-\210+?\341cb?\003{\321>\360\213w?\245\311\002>\225*\344>J\371|?|c?=#r6>\204\360\025?\242zx?\262\231\351=\216\364\316>\236\232v?\223\321\020>\355\254\370>Z\312\177?\372jV;c\267U<\270\355R=\n\021H>b\372 ?\312\001o?(\327}>i\352>?y&B?\217\240;?frH?\317\375-?\'\363^?DD\346>\314i}?\341\340#=_R\035>\326&\005?\327\225\177?\t\372\323;\374\232\322<\3470\315=\374\241\270>\267\032l?\225\313\222>RjQ?/n\030?\237\254v?\213\306\017>b-\367>)\262\177?\007\177\233; \302\232<\257\325\227=\367\223\214>\302\365K?R\330%?\006\237i?Qa\243>\220}^?e\374\350>Z\356}?\213W\003=\300B\376=\257\261\336>\267\252{?FP\210=3{~>\006=??\242\203A?\220\357<?R\373E?=z3?E\230V?]\325\n?\214*~?\257\013\351<}j\342=wb\311>)Yt?8\3611>\\\005\023?\321Xz?:\347\260=b\237\241>\3474]?(\204\360>A\020\177?\301\336n<5ck=@\334]>\277\312-?a<_?\020\221\344>i\017}?\223\3749=\243\2121>c\302\022?Z\200z?=-\254=\243\263\235>rAZ?\254\267\000?\361\375\177?_\306\0039\"\302\003:.\261\003;om\003<\212_\002=or\374=?T\335>\356M{?\277\200\223=\034\341\210>D\222H?\230\265-?\237Z_?\362\334\343>P\350|?\337\207C=[2:>\rW\030?@\276v?\001\301\016>\252\264\365>\007\226\177?\005\232\323;7<\322<\000\327\314=\024Z\270>\214\362k?\313\332\223>\226PR?\033!\026?,Yx?\351\210\355=\020\374\321>\226\272w?\017\020\000>\026\030\340>\003\006|?4\213z=\3617k>\00105?[\314S?hG\022?\206\307z?\"\247\243=Z\223\226>\262\225T?\2575\020?\373\344{?5E\201=\2658r>\344\3548?\004^M?=y\"?Jnm?-\307\211>\221gI?\026\317+?\035\003b?\361\314\323>i^x?f\353\354=\n\203\321>\333\216w?\021\236\002>\254\351\343>\034\353|?Q\331B=p\2249>x\362\027?#\nw?,Y\n>7P\357>\216\351~?}\241\212<\351H\210=pn~>\2326??R\220A?\225\325<?\300,F?\375\r3?\262EW?8\376\010?\200\274~?~\363\240<\364\311\235=\311\241\221>\346jP?\016\364\032?\022\246t?B\221->\331%\020?\375\354{?*M\200=\004\207p>\250\0078?\230\362N?\025\235\036?;[q?[\345\\>\232>-?\272\003`?\247\351\337>h\372{?\334Z}=\021\257m>\251\2036?\303\220Q?K\014\030?\306\366v?>y\013>\n\364\360>\231\035\177?\037\237a<\273\203^=/mR>[/\'?&\002h?\010\362\255>\r\263e?\327\311\274>\233Zn?\025p\203>DdC?u\t9?%+M?\021\364\"?\013\351l?RT\215>\246\242L?\031<$?+|k?\274\367\226>8\350T?$[\017?\306P|?\313ih=\3149[>\320J,?\313Xa?\276\334\327>\366\264y?\345m\304=\326\226\261>\277\373g?\243\033\256>\261\315e?f \274>2\001n?\306\327\205>\242\265E?W\0224?.\242U?\234k\r?\224/}?0 2=#a*>\331\007\016?\220\354|?\200~B=AB9>\014\276\027?31w?\222\023\010>\276\374\353>~o~?\344\007\307<\3721\302=\001\310\257>\364\334f?tY\265>K;j?\302V\237>\242\200[?bZ\372>\035\340\177?\336\372\376:\343{\376;\357\201\374<n\271\364=.{\327>:\226y?\257\024\310=\244\210\264>\331\300i?\350\201\242>%\333]?_\270\354>J\214~?\"\315\270<\346\241\264=d\263\244>rp_?\320Z\343>s\313|?\303\221J=\035\215@>\037X\034?lrs?\002\000?>\301_\033?\246Jt?@\3042>\340\216\023?\354\005z?`\313\272=\333\301\251>0\362b?q\r\316>?Av?\217\374\025>\221\004\000?\000\000\200?\006\317\2463\005\317\2464\002\317\2465\364\316\2466\276\316\2467\345\315\2468\177\312\2469\352\274\246:\235\206\246;\367\255\245<*T\242=Vv\225>\265\251S?\021\242\022?<\223z?\304\352\251=\312\321\233>\335\313X?\326\314\004?\326\243\177?C\022\270;\217\t\267<\231\362\262=\321O\243>\345p^?1G\351>\267\373}?\367\r\000=/\032\370=\330\013\332>\203_z?c\032\260=\331\365\240>w\267\\?\370\\\363>O`\177?\361L\037<n\300\035=\025\255\027>\2545\001?&\372\177?\305G\2739\2446\273:0\362\272;&\341\271<m\251\265=L\214\245>q\n`?T\301\337>F\360{?\342\316\177=\005\325o>)\2517?\202\227O?\217\004\035?\336\327r?\211\260G>\215\277 ?5>o?\353\217z>\221@=?\252`E?\377\3124?\236sT?\261\217\020?\345\266{?\253\327\206=\267\355{>\266\362=?\274\tD?P\2537?\304\223O?\336\r\035?l\317r?\274)H>m\t!?F\362n?c\256~>\302V??\274PA?\235W=?\2054E?\225*5?]\325S?\320/\022?\367\324z?e\n\242=@8\225>\371uS?()\023?vCz?<t\263=\304\272\243>*\276^?^~\347>p\247}?\316\303\024=\236\\\017>\357\224\366>L\247\177?k*\261;45\260<\352j\254=\357\346\235>\315hZ?\224H\000?\256\377\177?\020\235\2447<\234\2448\356\230\2449\263\213\244:\322V\244;\323\203\243<J@\240=<\266\223>\2561R?\215p\026?\331!x?\371\007\364=\022\364\326>-ky?H0\315=|\241\270>p\032l?u\315\222>\354kQ?\035j\030?\272\257v?y\230\017>\032\353\366>\206\255\177?\252\276\244;\240\352\243<\373\242\240=w\t\224>\374wR?\251\273\025?\263\236x?\303Z\345=S\253\313>~Mu?<\001$>\327\274\t?\266\204~?\325\213\274<\3504\270=e\243\247>4\200a?\305\354\326>\326hy?bw\315=U\332\270>\026:l?\205\367\221>\266\264P?::\032?|@u?\345\277$>J>\n?L\\~?\321\201\320<73\313=\357\t\267>\2524k?{\327\230>^nV?\244F\013?j\003~?\367Q\374<k\214\364=\354X\327>]\213y?\321^\311=\020\222\265>B\\j?\277{\236>\203\332Z?\014\r\376>4\374\177?\301\032s9T\014s:\244\322r;Q\354q<\326Yn=#{`>5E/?\017\026]?\2677\361>{%\177?*\312Y<\t\345V=\315\236K>~!#?L\267l?\242\246\216>\374\317M?\346d!?T\223n?{\350\201>\327\344A?\371\'<?\365tG?\25370?P\254[?\\`\371>!\324\177?\347^/;\304\346.<\312\010-=|\271%>T\347\n?r$~?t\r\354<-@\345=\261\226\313>\rEu?\375|$>\345\020\n?\264j~?.e\311<\255q\304=\345\231\261>\237\375g?x\017\256>\350\305e?\361Q\274>n\033n?V#\205>\360\010E?\272\2105?g8S?\202\311\023?\340\341y?[\026\277=\017B\255>\305Ae?O\230\277>\376\313o?y\327r>s@9?\361\310L?L\340#?\233\343k?\221?\224>\222\245R?\rF\025?\273\355x?\201\010\334=\255d\304>\n\037r?|\005R><\362&?\304Lh?P\014\254>\024xd?\300\217\304>\0223r?\244\347P>UI&?\227\030i?\214\326\246>\'\362`?\360K\332>urz?\263\326\255=7\025\237>\022O[?\207u\373>a\353\177?\027\350\244:\372\262\244;\016\337\243<\340\227\240=\031\000\224>\025pR?\005\320\025?\331\220x?]\374\346=\017\357\314>?\320u?\322\177\034>\320\224\004?\014\254\177?\354\260\247;<\325\246<ro\243=\216d\226>\036oT?\217\233\020?\276\260{?\346\225\207=\3577}>\010\232>?\035\304B?+Y:?\345\315J?G\221(?\035If?A\r\271>YVl?=8\221>\271\017P?\256\330\033?O\342s?J\2568>\212_\027?\306vw?\310\005\004>\225\000\346>\036\\}?Q:\'=\177f >mF\007?K,\177?:\006S<mNP=t\266E>\340\211\037?Fup?\321\222i>\254K4?\257DU?Ee\016?\021\303|?\240\234L=\000dB>\023}\035?\263ir?\022\333M>\355x$?\0217k?]\307\230>`aV?\271i\013?\372\366}?r8\001=\247I\372=)\263\333>L\332z?\241f\241=Y\256\224>\245\002S?%U\024?X\212y?\314}\311=\363\252\265>\270jj?\227\033\236>\034\221Z?.\255\377>\345\377\177?sX\3266\031X\3267\262V\3268\027Q\3269\251:\326:\006\341\325;\246{\324<\275\370\316=\025\016\272>\263\343l?\265x\215>:\303L?\003\356#?7\324k?P\247\224>\276\374R?rd\024?\233\200y?\237\245\312=f\230\266>\300\363j?\346\211\232>\231\311W?m\225\007?\363\031\177?\343=e<\304\010b=\214\217U>\200\005)?\363\264e?\302\275\274>BTn?\332\233\203>\324\216C?\264\2578?\242\312M?\351q!?\275\205n?]F\202>0AB?Ji;?2\331H?n\024-???`?\007\204\336>\316\236{?w\300\211=\205|\200>H|@?~\006??6\357A?\233\022<?\027\235G?\363\335/?\0023\\?dZ\366>\360\242\177?\234\334\271;\272\316\270<l\243\264=\245\264\244>Wq_?zU\343>A\312|?J\334J=D\320@>\000\202\034?8Ms?\207\030A>\010\257\034?\372$s?\032\\C>\276\026\036?\246\332q?\354\323U>V-)?\311\201e?\253\002\276>`\375n?l\024~>J\t??\265\351A?\363\035<?\312\207G?\227\r0?\233\353[?9\365\367>S\277\177?\'9\201;\262\266\200<\360a}=E\265m>\374\2066?\031\213Q?\271\032\030?\352\353v?\257\032\014>\305\336\361>Y8\177?\025\013G<\014\240D=\265/;>\006\370\030?:Bv?\023\356\025>\246\364\377>\377\377\177?\347\322\0004\346\322\0005\342\322\0006\322\322\0007\221\322\0008\216\321\0009\201\315\000:M\275\000;\217|\000<8\365\376<\334\005\367=R:\331>\270 z?\230\231\267=\371#\247>\376\'a?X\005\331>\241\020z?\267\204\271=\225\266\250>\004=b?\323i\322>\334\341w?\303\207\373=S\243\334>\207\035{?\232S\231=\370\330\215>7\031M?I\037#?\271\271l?*\226\216>f\301M?[\210!??nn?\221\350\202>\033\340B?\267\036:?E8K?\355\227\'?o\201g?\2724\261>\200\277g?\300\242\257>\226\305f?\237\357\265>\207\222j?\245\022\235>j\305Y?\220\024\002?\260\356\177?\264s\212:CN\212;\322\270\211<\030h\207=r\350|>\325q>?\250\022C?\352\2649?\277\367K?\230\323%?\234\244i?p<\243>\333b^?\007\232\351>Q\n~?\035\354\370<\312[\361=\014\352\324>\236\277x?\216y\341=\261\246\310>\201\010t?\255\2046>r\374\025?qrx?Z\220\352=\323\262\317>\370\342v?\245\237\014>\312\237\362>\026M\177?\231l2<,{0=\222\340(>\261\006\r?GY}?K\354\'=\351\t!>\213\266\007?\t\022\177?\326\031m<s\253i=\332V\\>\201\355,?\375u`?]:\335>\350F{?&Y\224=@\232\211>\013>I?<.,?L\200a?/\354\326>\246hy?\025}\315=\343\336\270>\236<l?f\346\221>\375\245P?Z_\032?\371!u?\333~&>\253l\013?\355\365}?\235z\001=\241\305\372=\316\020\334>\271\364z?\273:\236=*\001\222>\000\275P?R%\032?\227Qu?\034\305#>\366\223\t?\r\221~?\235r\266<db\262=\305\330\242>y\032^?dD\353>&R~?\020\204\325<h\363\317=\367\325\272>PPm?\024\224\212>-$J?D\034*?\333Jd?{\253\305>\230\265r??\234I>\221\352!?\277\006n?\234\261\205>0\221E?\247a4?\274 U?\373\304\016?t\227|?\216;W==\354K>\034P#?\375\203l?\364\002\220>\225\002O?\240u\036?\342\200q?w\317Z>\367\r,?\311\254a?\332\334\325>s\020y?N\356\327=\t*\301>\252\223p?g\347g>\214b3?Y\276V?:n\n?\320L~?!&\330<\036r\322=0\322\274>\375^n?\331Q\203>\324FC?eG9?\204\274L?\034\376#?!\302k?,!\225>\267bS?^[\023?>%z?y\017\267=\225\262\246>\024\331`?\307\343\332>\324\236z?^\207\250= \251\232>V\342W?\206Q\007?\303)\177?\362\211U<w\301R=W\351G>1\342 ?\260\032o?\214}|>\261;>? |C?+\3278?\241\204M?\312\033\"?m\322m?\022\031\207>\261\346F?\036t1?`\311Y?u\t\002?g\357\177?\355\274\204:\203\232\204;$\021\204<\027\360\201=7cs>\327\2119?PEL?\026\033%?\243|j?c\244\235>\2735Z?\266\330\000?\"\375\177?wq79?i7:eH7;-\3056<9\2734=\274\301,>\202\234\017?$1|?\335\026p=/\004b>V!0?\355\315[?\236\237\370>\226\311\177?RxY;\224\277X<\205\341U=t\266J>X\225\"?\366Om?{\226\212>a&J?)\027*?\222Qd?`\201\305>a\242r?\256\257J>@\221\"?bTm?Ex\212>\247\nJ?\\W*?\340\374c?\213\223\307>_\220s?\231O=>\361O\032?\251.u?\027\305%>-\357\n?\304!~?=_\355<q~\346=\203\215\314>/\251u?\263\276\036>\266\"\006?ki\177?u<\026<\312\333\024=\334r\017>\365\264\366>\243\251\177?L\177\254;\325\226\253<\277\376\247=\3636\232>\276\207W?\323I\010?6\355~?\201\321\210<\207\210\206=Ad{>\321\254=?\277\220D?#\2136?\006\204Q?\301,\030?P\336v?\321\344\014>\032\004\363>kW\177?g&(<\236l&=\215\251\037>\212\304\006?\313H\177?9\2626<\262\2504=\327\260,>P\221\017?\2306|?0\304n=\032\331`>\361y/?\376\307\\?(\375\362>\266V\177?\006\332(<\212\034\'=&K >\2453\007?\2120\177?\231\315N<[1L=p\003B>#A\035?\266\240r?\214\307J>\253\237\"?\314Dm?\275\342\212>>lJ?\372t)?J%e?tL\300>#&p?\267\351m>\022\2436?2[Q?\251\224\030?(\217v?o{\021>V\240\371>`\327\177?\034e\";\030\376!<\022d =>\034\032>\277\352\002?\367\335\177?\235\021\010;J\311\007<3\251\006=\332;\002>HW\343>\251\312|?\025\303J=\216\271@>\327s\034?\322Ys?\331b@>\276=\034?\276\211s?P\257=>;\214\032?\335\374t?\341\235(>\373\331\014?[k}?\351~#=;\370\034>]\350\004?\251\237\177?\016f\300;\333D\277<\235\315\272=\257\303\251>l\363b?\322\005\316>F>v?\210(\026>\247#\000?\354\377\177?\240\341\2366o\341\2367\252\340\2368\225\335\2369B\321\236:\377\237\236;k\333\235<\264\320\232=\274\034\217>Z8N?rf ?\352\230o?\237\240u>j\265:?.%J?\360\031*?\353Md?E\230\305>\325\254r?\331\031J>\2466\"?\301\265m?\303\335\207>\342\237G?\264\327/?Y<\\?\216$\366>\326\236\177?\221\n\302;i\344\300<\255Y\274=3\007\253>\307\313c?\r\306\310>\014\026t?.\3005>\332}\025?r\310x?\024o\340=\301\326\307>\356\255s?`\244;>\375A\031?/\010v?NG\031>\272U\002?2\352\177?\307d\256:a)\256;h<\255<\223\222\251=7\210\233>3\222X?\245l\005?N\212\177?:\370\352;\344H\351<6\244\342=k\217\311>Plt?\240\3320>JO\022?\004\303z?s1\244=\206\007\227>,\365T?\3028\017?3a|?~ld=g\257W>aA*?\355\031d?\337\335\306>\311?s?\036\332A>w\'\035?#\270r?\300wI>o\324!?-\036n?r\020\205>\314\366D?\327\2575?\341\366R?\246s\024?\347vy?I\314\313=\225\204\267>Xzk?\377\003\227>G\362T?q@\017?\212]|?\003Pe=\177yX>/\266*?\334~c?\033\245\312>=\341t?\2541*>,\350\r?d\372|?\215\036?=\24336>F\310\025? \226x?M]\346=\324s\314>\332\236u?\246V\037>v\213\006?\252T\177?n\343*<#\033)=\325\037\">\302t\010?\373\341~?\357b\216<`\351\213=xZ\202>\356TB?e@;?\006%I?vg,?\0271a?\031\316\330>\302\377y?i\207\273=\206[\252>]Yc?\027\216\313>\207Au?\243\260$>\3613\n?\233_~?\004\340\316<\232\246\311=\270\313\265>\274}j?\025\235\235>\0360Z?\210\350\000?\263\374\177?\0104S9$)S:\231\375R;\264OR<\231\234O=\257\026E>\264\'\037?q\325p?\263Hd>Nd1?\313\341Y?\346\304\001?{\363\177?/EH:\004\036H;\225\201G<\252\023E=6\230;>G:\031?C\016v?\226\355\030>\326\026\002?\212\356\177?\315\242\213:\270|\213;\267\344\212<\334\211\210=\007\337~>2o??U A?D\272=?\321vD?\247\3026?6%Q?\272\035\031?\271$v?\377\241\027>\337-\001?p\372\177?\321\366\2619Z\347\261:\211\251\261;\361\262\260<=\343\254=\371J\236>P\265Z?\031\340\376>\274\376\177?\225\343\2418b\340\2419\227\323\241:q\240\241;Z\324\240<\t\254\235={\210\221>\021UP?\343*\033?\264wt?\32540>\251\342\021?t\000{? \322\234=\007\320\220>]\265O??\272\034?\352\032s?\350\354C>7p\036?\010\206q?o\206Z> \344+?H\346a?t}\324>\342\232x?\301\315\345=\211\004\314>\327qu?\350\353!>CQ\010?H\353~?m\306\211<=u\207=C\377|>a}>?\037\374B?\036\3449?}\242K?\216\235&?d\263h?\013n\251>\234\271b?\357j\317>\303\307v?\3133\016>\326\350\364>\000\205\177?3\211\365;3\262\363<Ur\354=\365%\321>\352lw?\374\230\004>\351\332\346>\274\207}?\230\212\034=\005\217\026>\013l\000?J\377\177?\364b68\355`69\316X6:U86;\241\2665<\262\2623=|\320+>p\374\016?\253}|?\031\201]=\227\206Q>T\247&?\226\247h?B\273\251>\276\355b?\360(\316>\367Kv?\027^\025>\331(\377>K\377\177?+\32248,\320491\3104:F\2504;\311(4<\244-2=lm*>\013\020\016?\367\350|?)_C=\210\r:>\235?\030?\013\320v?\316\270\r>\0207\364>\036u\177?\010\227\n<\353j\t=\261\316\004>|*\347>E\227}?F\273\030=X\t\023>\322\330\373>\301\356\177?D\362\211:\032\315\211;\2778\211<Q\354\206=\222\021|>\354\004>?w\346C?:\3667?\031\021O?\305Q\036?\357\242q?\027\354X>G\370*?`&c?a\312\314>\227\301u?\226W\035>s*\005?B\225\177?>#\325;V\300\323<!G\316=P\200\271>\354\225l?I\211\217>\351\227N?P|\037?\241\202p?\007\327h>j\3453?(\353U?\376\247\014?H\177}?#\235\036=\276x\030>\327\304\001?|\363\177?v8H:P\021H;\365tG<Y\007E=\024\215;>:3\031?\322\023v?\220\233\030>J\335\001?\031\362\177?\366j^:\247:^;\275y]<O{Z=\353\323N>|\r%?f\214j?t;\235>\356\344Y?\027\274\001?\367\363\177?z\216@:Dj@;\245\331?<\213\232==\262\3234>\032\345\024?\234-y?P{\324=\301o\276>o5o?\352\t{>\316~=?L\351D?\354\3145?\n\306R?\"\362\024?\027%y?j}\325=,<\277>\200\235o?\237`u>\032\224:?:bJ?B\214)?\030\007e?8\013\301>\205\204p?q\274h>\353\3263?\250\002V?\335h\014?\001\230}?\'\215\030=\250\336\022>\364\233\373>\271\354\177?*0\232:\273\001\232;oH\231<1j\226=\036^\213>\345\334J?5n(?\200uf?A\361\267>\264\267k?_g\225>@\235S?\240\302\022?6\200z?}1\254=,\267\235>)DZ?\004\260\000?\034\376\177?\023\n\3628\354\002\3629S\346\361:\tt\361;\222\254\357<t\251\350=\002;\316>\377Rv?\036\366\024>|\225\376>\377\375\177?pU\0009kQ\000:VA\000;\025\001\000<!\002\376<\340!\366=<\215\330>\325\353y?\364\346\275=\031K\254>3\241d?X\215\303>\016\272q?\207\243W>\202:*?\000#d?\030\245\306>e&s?\277GC>\'\n\036?z\346q?\213+U>,\313(?\204\377e?\025\343\272>fWm?\252c\212>\272\367I?!\203*?\330\302c?\306\375\310>\013.t?\335c4>\267\234\024?\216\\y?\023\354\316=\372\003\272>-\336l?K\236\215>\325\344L?S\235#?j.l?oF\222>t\370P?\031\217\031?\365\312u?\271\315\034>\342\312\004?!\244\177?\267|\267;\257u\266<Se\262=1\333\242><\034^?\004:\353>xP~?\206X\326<\305\274\320=[v\273>\226\246m?\274E\210>M\001H?\023\375.?L\200]?B\314\356>\026\330~?\314I\223<\335\243\220=\305l\206>~CF?\026\3342?(\225W?\037%\010?\243\366~?\014%\204<Z\003\202=\332\204s>{\2339?\222%L?\256f%?\242$j?&\355\237>\333\361[?L\321\367>\014\275\177?\216\304\205;\3028\205<\"\016\203=fVu>\307\216:?\371kJ?\231u)?|$e?\212Q\300>\253(p?;\306m>\022\2206?\235{Q?,B\030?\032\316v?\234\325\r>\270`\364>\355x\177?\377\313\006<\026\260\005=\017S\001>\266\373\341>\376z|?\230\'^=\r\033R>\364\376&?G=h?=q\254>\036\272d?\211\360\302>\240oq?=\304[>\347\231,?\360\352`?\244w\332>M\177z?tM\254=n\316\235>\003VZ?\244}\000?\t\377\177?W\245v8\240\241v9\307\222v:gWv;[ju<H\275q=\351xc>\000\3610?\365\222Z?\272\242\377>\336\377\177?O\360\0077\007\360\0078\346\356\0079c\352\007:Y\330\007;C\220\007<\035q\006=s\007\002>\036\t\343>\021\271|?\215\014O=9\225D>\003\330\036?\244\"q?i\006`>\233\003/?\264v]?Q\004\357>\223\337~?2\224\217<\373\017\215=\247X\203>uMC?v99?s\325L?H\302#?4\005l?\342\\\223>\367\345Q?\2552\027?k\227w?\014\036\002>\324*\343>\255\300|?\3501M=Y\352B>X\320\035?\212\034r?\030)R><\007\'?.3h?\001\263\254>\373\344d?w\342\301>\256\355p?\256\362b>V\2460?\317\004[?\247\034\375>\251\367\177?Ip\005:\346^\005;j\031\005<\235\004\004=\241\206\377=\362\244\337>\034\351{?[\305\200=9Yq>\362v8?\374.N?W} ?\263\201o?M\344v>i];?>\357H?6\342,?\326\205`?\317\332\334>\317,{?#}\227=\210H\214>\246\261K?\265y&?\222\336h??S\250> \371a?\032\n\324>ysx?Zq\352=\355\232\317>\361\331v?\307%\r><b\363>\324`\177?\227\310\036<\246>\035=G5\027>N\341\000?\347\374\177?\002HF9i>F:\010\030F;\277~E<M\035C=\363\3219>\254\031\030?\265\354v?\344\016\014>\243\315\361>t6\177?f\355H<\227vF=\334\330<>\r\005\032?\345ku?7C\">\356\214\010?\216\333~?\347\221\221<\262\373\216=,\000\205>*\347D?\203\3215?Q\276R?\034\006\025?\375\027y?\n\n\327=\316u\300>\261:p?{\311l>u\0106?\272aR?\376\364\025?\220wx?.\366\351=\355;\317>\343\265v?\037=\017>\222g\366>\355\243\177?\315\342\267;\241\332\266<\304\305\262=\320*\243>\024V^?b\345\351>j\027~?\260x\362<lK\353=\372B\320>\014\031w?@{\t>\356\013\356>\255\275~?\251^\240<\366:\235=\312(\221>X\002P?#\372\033?!\305s?\310T:>\364l\030?\217\255v?\245\270\017>c\031\367>\306\260\177?\027B\236;l~\235<Jw\232=\322\320\216>Q\365M?\t\n!?\245\361n?!\267~>\'[??\tHA?\\i=?{\022E?!t5?\327ZS?\341o\023?\317\030z?\025\213\270=\016\352\247>\350\260a?\262\303\325>(\010y?;\351\330=\356\357\301>6\364p?w\226b>\366r0?\300R[?\205`\373>\241\352\177?c\353\252:T\262\252;\262\316\251<\235I\246=,\311\230>\325bV?\312e\013?a\370}?+\340\000=7\244\371=\0346\333>\231\266z?\212\256\245=;G\230>\314\371U?\252\200\014?\275\216}?\334\322\032=\266\370\024>*\231\376>\t\376\177?H|\3738\220t\3739\260U\373:O\332\372;\261\356\370<6^\361=\346\353\324>>\300x?\274f\341=\004\230\310>\'\002t?\303\3406>\2547\026?\211Ix?L_\357=\351d\323>R:x?\263(\361=\376\302\324>s\262x?\376\006\343=Q\334\311>\355\214t?\265\377.>\217\027\021?to{?\317v\217=\021j\205>\300LE?&\3664?P,T?\217K\021?\203S{?\244\324\222=\275M\210>\311\010H?:\354.?\005\231]?\271;\356>X\304~?S\021\235<a\016\232=\267w\216>g\246M?\350\311!?L)n?\336\303\204>)\255D?4N6?\251\353Q?\030$\027?\372\241w?-\200\001>#?\342>\275\212|?\212SZ=d\260N>M\370$?\346\244j?<\230\234>\224fY?\017\036\003? \331\177?zf\033;$\010\033<\231\220\031=\266\316\023>\347\361\374>\253\366\177?\210P\025:\302:\025;\305\343\024<d\211\023=\3638\016>I\360\364>\245\205\177?c@\364;Nn\362<\250A\353=t;\320>>\026w?\t\245\t>\013I\356>1\306~?W\'\234<W-\231=p\270\215>/\374L?.e#?\266ll?\302\240\220>E\214O?\202 \035?z\276r?\333\034I>F\235!?MXn?\373\177\203>\274sC?\336\3508?,eM?\355g\"?\353\200m?\266G\211>\227\361H?\333\334,?X\215`?\177\255\334>V {?!\375\230=o\217\215>\215\327L?;\275#?\330\nl?\3156\223>\237\305Q?d\205\027?\n[w?\301\243\005>\272e\350>\352\322}?O\026\n=\216n\005>\025\027\350>R\304}?b\254\r=\355\305\010>h\002\355>[\227~?LT\263<Tg\257=\207a\240>\000I\\?\233\333\365>#\231\177?\177g\315;\341\035\314<\344\007\307=;\260\263>\212@i?\362\317\245>-:`?\206\242\336>\304\246{?V\312\210=\305N\177>D\247??\375\260@?\034\234>?\r\300B?\244a:?r\276J?a\265(?D\033f?\0272\272>[\367l?\344\362\214>9KL?\001\r%?\364\214j?\3037\235>\025\342Y?\030\304\001?\206\363\177?~\217G:\232hG;F\315F<\276cD=0\371:>m\325\030?\']v?\346_\024>I\300\375>\361\372\177?\261\323\2419\347\306\241:\311\223\241;\323\307\240<\000\240\235=K~\221>GLP?\363@\033?\361dt?\340E1>s\225\022?\222\232z?\353\t\251=(\026\233>z8X?\177d\006?\212\\\177?L\r#<\344m!=.\021\033>\272\225\003?\230\314\177?\221uM;\253\320L<6AJ=\207D@>\320*\034?n\232s?E\276<>D\364\031?\207yu?\025{!>\022\004\010?\373\376~?d\001\200<\261\002|=\\\201l>\254\3415? \243R?^L\025?\207\351x?\201\207\334=[\310\304>NMr?\364pO>\375j%?\230\037j?\217\016\240>\352\n\\?9A\367>\205\263\177?\221\307\230;6\021\230<\222>\225=V^\212>\324\362I?s\216*?\315\263c?\214[\311>5Vt?+\0342>_!\023?\036Hz?\340\345\262=QE\243>Ji^?\023t\351>\247\003~?\3523\374<8p\364=tC\327>\211\204y?/.\312=\2218\266>\250\274j?\322\371\233>,\353X?\350u\004?j\260\177?\363\372\236;}5\236<M\'\233=9f\217>\026yN?\366\307\037?\3317p?a\361l>\345\0356?\177=R?/R\026?\0267x?\353\211\361=L\r\325>w\313x?\335\023\340=\204\217\307>\231\216s?9i=>\026`\032?^!u?\302\207&>\254r\013?\307\363}?\307\001\002=\324\302\373=\340\317\334>\316){?\236\331\227=P\227\214>\307\370K?&\321%?\201\247i?W)\243>\003U^?\256\353\351>\200\030~?\272\357\361<\220\312\352=\262\337\317>\337\363v?g\244\013>\3252\361>\353$\177?\233YZ<\250pW=\301\033L>\261l#?edl?\030\331\220>=\275O?\241\246\034?\201,s?\303\357B>\262\323\035?k\031r?\251UR>\200!\'?\033\023h?\305\203\255>.le?\260\213\276>\272Co?(Cz>Y\031=?\244\253E?\032(4?\274~U?b\312\r?H\007}?\322\370;={X3>D\357\023?q\312y?#\340\301=\254\205\257>Q\263f?\356d\266>2\326j?\\O\233>\206eX?.\350\005?ot\177?_E\013<N\026\n=\215n\005>\023\027\350>Q\304}?z\254\r=\003\306\010>\210\002\355>`\227~?\361Q\263<\023e\257=\250_\240>\232G\\?\247\343\365>\306\231\177?y\"\314;\353\334\312<\340\326\305=S\272\262>\003\255h?\307\227\251>\317\325b?\326\274\316>8\205v?\252\016\022>\367r\372>0\341\177?\264b\366:$\354\365;\250\023\364<\374\315\354=nl\321>\243\206w?\341\030\003>\206\240\344>\271\022}?\227-9=h\3160>KG\022?\227\307z?\035\245\243=\247\221\226>L\224T?b9\020?\034\343{?A\177\201=#\236r>L\"9?\326\376L?\314^#?\304sl?\360p\220>\240bO?\354\207\035?\261_r?\'jN>f\316$?4\325j?\376U\233>\275jX?\305\331\005?\024w\177?\204\242\010<\320~\007=`\003\003>\206\200\344>\335\013}?s\332:=QT2>\372E\023?\'2z?\031\205\265=jn\245>P\365_?\037@\340>\370\017|?\306!x=\257\031i>\276\t4?)\260U?-F\r?1?}?\264N.=\303\343&>\270\260\013?Y\335}?\373\205\007=\022\n\003>}\212\344>\000\016}?\270T:=\304\3321>\265\366\022?\203az?7\335\257=1\303\240>\320\221\\?\3756\364>\034u\177?\265\230\n<\221l\t=;\320\004>\303,\347>\266\227}?\210\237\030=\253\357\022>6\264\373>\213\355\177?@\233\223:\262p\223;\335\306\222<\241%\220=V\000\206>R\334E?\371\2753?\007+V?@\374\013?h\301}?\241c\016=vp\t>%\374\355>u\273~?\275w\241<\377H\236=9\r\222>\\\307P?-\013\032?\352fu?R\214\">\331\276\010?\021\316~?\342@\230<yl\225=\213\205\212>\326\026J?);*?$\"d?|\252\306>\317(s?\372$C>\244\364\035?\245\372q?V\014T>:#(?\344\323f?\270\223\265>9]j?Yu\236>\243\325Z?\273(\376>\234\374\177?\360\340X9u\325X:\212\247X;/\360W<\232\027U=\226\001J>\366\'\"?r\305m?$r\207>\263:G?\215\2710?\223\347Z?\332\302\375>\375\372\177?\006c\2409vV\240:@$\240;\345[\237<KB\234=/V\220>MKO?\302\301\035?\035*r?rgQ>\355\224&?\314\275h?\356)\251>y\213b?[\207\320>{2w?\177\000\010>\273\340\353>\031k~?\0363\311<\023B\304=ls\261>\010\346g?\265\250\256>\245\'f?\025\343\271>,\314l?\276\030\216>\007RM?7\226\"?\005Om?\351\234\212>G,J?}\t*?\212cd?\254\020\305>\256nr?\317\223M>KN$?\214gk?;\202\227>\222YU?\226-\016?\356\333|? \215F=6\355<>\346\021\032?qau?\241\334\">\243\365\010?\351\276~?U\302\237<\275\244\234=\227\251\220>\364\223O?h\r\035?\327\317r?\277#H>\307\005!?\n\366n?,z~>\202<??\247\204A?y\355<?L\377E?\212q3?C\246V?|\257\n?H7~?\202\304\342<\206}\334=\206\300\304>\256Ir?\274\244O>\307\211%?\211\373i?\225\375\240>5\275\\?\261;\363>\002]\177?-\226\"<#\371 =\236\245\032>\262J\003?\250\324\177?BB-;\000\315,<o\372*=V\327#>[\240\t?U\215~?VI\270<\n$\264=\264K\244>S&_?G\024\345>E+}?\271-3=*W+>\306\253\016?\014\243|?\005iT=#eI>%\311!?\032*n?X\276\204>\330\247D?\235Y6?I\330Q?\255U\027?\371}w?F\232\003>\354`\345>M;}?>B/=\204\302\'>\255F\014?1\245}?\331P\025=f\337\017> Q\367>\233\264\177?t\236\226;8\355\225<\310.\223=\357\232\210>\343PH?\234I.?\333\205^?g\313\350>\202\345}?c\204\005=5*\001>\243\276\341>\235l|?\\\246a=\3767U>p\322(?@\366e?#\036\273>;wm?\001\212\211>\003/I?\237P,?\277Pa?\254\r\330>E\304y?\016\234\302=\361\035\260>\263\022g?\223\377\263>\277oi?!\231\244>\264]_?\217\312\343>D\344|?\232\204D=\345\026;>H\350\030?\177Nv?\2558\025>\330\363\376>\347\376\177?\260q\2148Ho\2149\247e\214:\'?\214;}\245\213<\024D\211=\326\020\200>\325\020@?R\336??JC@?$y??\233\014A?b\342=?T)D?\022h7?w\010P?\325\352\033?\177\322s?R\2239>\301\361\027?\254\nw?>Q\n>\243D\357>\013\350~?Ka\213<4\002\211=\222\257\177>\303\327??bP@?\330^??\272@A?Dx=?\334\365D?\334\2615?}\363R?p|\024?Hqy?\372v\314=?\r\270>s\307k?T\375\224>\304DS?Y\251\023?\263\365y?\037\272\274=\343U\253>\354\377c?\177\200\307>\370\207s?\354\310=>Y\234\032?z\357t?\235a)>\033]\r?\2465}?G\2440=\"\006)>\334\037\r?\377N}?\263p*=\025Y#>qJ\t?\272\246~?d\272\253<\320 \250=mS\232>`\236W?\343\013\010?\005\375~?\177\372\200<G\345}=X(n>\225\3046?\350!Q?\032&\031?%\036v?&\003\030>7r\001?\242\367\177?&\324\005:\251\302\005;\305|\005<Zf\004=\276\036\000>\034.\340>\177\013|?77y=p\rj>L\2164?\211\327T?c\207\017?k;|?\215\230m=P\320_>+\345.?^\243]?.\377\355>\342\273~?\230A\241<\373\024\236=>\341\221>\216\241P?\205j\032?\302\030u?\276\005\'>\237\307\013?\363\324}?m\226\t=H\367\004>\227f\347>\340\242}?S\342\025=?f\020>\346\022\370>-\301\177?N\016{;\031\030z<\314Fv=\nxg>\223%3?\007 W?\335d\t?\003\237~?0\213\257<3\310\253=\221_\235>\306\000Z?\322m\001?\325\367\177?\016\254\002:a\233\002;\277X\002<FO\001=mt\372=y\323\333>r\343z?\234M\240=x\301\223>.;R?\"X\026?\3572x?\274\006\362=\244l\325>Q\353x?vQ\334=\362\235\304>\2509r?\224\211P>\235\021&?\021[i?`!\245>\266\276_?5\207\341>x_|?&\330d=\013\017X>\262x*?\263\320c?\\\247\310>\313\010t?~\2006>\301\371\025?Ktx?\250X\352=\342\207\317>\274\322v?\317\220\r>2\375\363>\275o\177?\003\362\017<B\256\016=\346\265\t>\263a\356>\230\311~?\335w\232<:\216\227=\027W\214>\317\276K?\221Z&?\363\003i?\023^\247>GPa?\211\020\330>*\305y?\324\200\302=\344\007\260>\356\004g?BX\264>I\244i?\226>\243>jd^?\330\220\351>\265\010~?\316\266\371<%\032\362=w{\325>>\360x?\177\274\333=\376(\304>0\003r?\217\222S>\324\333\'?#-g?1U\263>#\ni?x5\247>\"4a?\233\273\330>\027\372y?=4\274=\244\350\252>{\267c?\233D\311>hLt?\255\2522>;~\023?\024\020z?w\225\271=L\304\250>]Fb?i0\322>\\\315w?\352\355\375=\346q\336>\016\232{?-S\212=t\373\200>}\372@?2\007>?\017\342C?\223\3777?\277\000O?)z\036?\221|q?\272\014[>\0101,?o|a?\275\003\327>2py?\346\227\314=\230\'\270>@\326k?\235\231\224>@\361R?>\202\024?\220my?\336\347\314=\223g\270>\031\372k?\331\247\223>\201%R?\320\217\026?\336\013x?\364\233\366=\361\351\330>F\010z?\257\203\272=;\207\251>\243\312b?\331\001\317>\265\237v?\031\206\020>\240@\370>\372\303\177?\357\340o;*\000o<\244\203k=\365\370]>\003\333-?\027%_?\237\033\345>\321,}?\032\3152=\375\376*>\023q\016?\300\275|?b\350M=\202\216C>\3505\036?I\275q?\227uW>\351\037*?\017Fd?\212\311\305>G\303r?\377\327H>rs!?\"\204n?sQ\202>\024LB?\275R;?\010\003I?\026\265,?\002\305`?8]\333>\320\301z?VV\244=\177&\227>\216\016U?S\365\016?\377\200|?\352\261\\=\306\315P>\004:&?\347*i?<^\246> \236`?4H\334>:\004{?\373]\234=\246m\220>\302_O?\n\217\035? Yr?\r\310N>h\006%?\227\224j?\351\004\235>\314\272Y?X2\002?\263\354\177?\005]\232:{.\232;\303t\231<\335\224\226=\204\202\213>\n\376J?\231 (?0\327f?\210~\265>\345Pj?D\307\236>\365\023[?r\306\374>\232\365\177?\213]&:\204B&;\211\326%<\320($=\213\224\035>\251T\005?V\216\177?\340\357\342;\207]\341<Z*\333=+\266\303>O\315q?\275\221V>\277\233)?\371\362d?8\212\301>\275\302p?lPe>-\3661?X\377X?\323=\004?\n\270\177?\336\303\217;e\"\217<*\242\214=\361\371\202>\025\361B?8\3739?\252xK?M\000\'?\242;h?\366{\254>\036\301d?y\304\302>\224Zq?\226\356\\>\332C-?N\374_?,\026\340>\211\005|?\300\250z=\337Qk>\005>5?\014\265S?h\204\022?s\244z?\017\333\247=\036\031\232>\001pW?\271\212\010?%\334~?\030G\221<\213\263\216=\025\302\204>r\253D?\343Q6?h\345Q?\0334\027?b\226w?\213-\002>\361A\343>\340\305|?\235\355K=r\306A>=\033\035?E\303r?\035\330H>\204s!?\017\204n?\366Q\202>\224LB?\263Q;?\365\004I?\260\260,?\'\313`?\0168\333>(\267z?a\235\245=\3318\230>$\356U?\372\237\014?r\202}?\177\326\035=r\301\027>\000D\001?\230\371\177?e\003\3159\337\356\314:\330\234\314;\303U\313<\272I\306=\366\026\263>\316\344h?a*\250>\034\335a?\220\265\324>\351\255x?\366\217\343=\342F\312>\324\271t?\024q,>\013g\017?\rK|?Q\315i=\332t\\>\227\376,?\373]`?\t\313\335>\343m{?\r\247\217=\213\223\205>stE?\024\2404?O\272T?\323\324\017?y\025|?-\314v=]\355g>\316e3?\035\271V?j|\n?-H~?\267o\332<\243\234\324=)\212\276>\363Bo?\377Mz>\343\036=?\017\241E?!?4?,YU?\250.\016?u\333|?\300\252F=\367\007=>\306\"\032?\254Su?\227\246#>3\177\t?=\227~?bc\263<\301u\257={m\240>\355Q\\?\032\250\365>\004\225\177?\333\236\325;W:\324<\322\272\316=\254\334\271>\251\310l?\2410\216>FgM?\330b\"?b\206m?O\"\211>\341\316H?\351+-?#\036`?\024K\337>E\322{?\230\210\203=\352+v>\317\375:?\n\240I?XM+?\264\263b?_\217\317>\222\325v?\265f\r>D\300\363>\367i\177?\215\261\025<lS\024=c\364\016>\303\376\365>\347\233\177?H\343\307;!\253\306<\270\331\301=x\200\257>\013\260f?\357y\266>D\342j?\276\376\232>\002&X?d\227\006?7R\177?\367R-<\222}+=\202O$>\004\362\t?\\t~?}\240\304<L\350\277=\275\354\255>\250\257e?i\337\274>\355en?\377!\203>/\030C?U\2519?\241\014L?\377\241%?\027\337i?\344\271\241>pH]?N\022\360>I\002\177?\013\274|<\000\326x=\013\270i>\351_4?\226#U?f\275\016?\363\232|?\303aV=I)K>\251\332\"?\301\004m?\232\227\214>\n\371K?\210\320%?<\250i?\204$\243>\203Q^?O\000\352>\016\034~?\277/\360<\363$\351=j\232\316>\364wv?*\323\022>\217\213\373>\'\354\177?\277\267\236:\213\206\236;7\302\235<x\270\232=)\010\217>4&N?\312\222 ?\346ko?\024\024x>Z\372;?\227\312G?\000x/?\337\312\\?w\354\362>\003U\177?;\213*<\306\304(=\230\320!>\226>\010?\035\360~?\364`\207<9$\205=\310\370x>\013p<?(\355F?\312e1?\201\337Y?T\313\001?\037\363\177?=\377M:\314\325M;L0M<r\236J=\213\230@>@_\034?\032ls?1[?>\344\230\033?\222\031t?\014\2155>\334\\\025?\211\336x?\276\323\335=\326\314\305>\307\304r?\177\302H>`f!?\311\221n?\"\363\201>U\357A?]\022<?\214\235G?\355\334/?\2114\\?\231Q\366>F\242\177?\210/\273;\313\035\272<P\343\265=\351\273\245>\016,`?p\367\336>\313\274{?C!\206=\320\260z>\\Q=?\201@E?\250\0205?e\000T?\366\276\021?S\024{?\310n\232=\231\311\216>\356\356M?\230\031!?\221\341n?\r\226\177>\374\312??\335i@?\227+??\021\246A?\377\250<?c\201F?\362S2?glX?-\325\005?\353w\177?\256\314\007<\210\254\006=\366>\002>\354[\343>\262\313|?C\202J=&\177@>hO\034?#zs?\252\220>>\346\031\033?\033\206t?\022c/>\353X\021?GL{?\226\263\223=\237\014\211>\273\272H?\272Y-?T\335_?\341\317\340>O3|?2\220o=I\215a>\337\336/?\2401\\?Zb\366>\211\243\177?\275\252\270;Q\240\267<\235\202\263=\237\306\243>\266\306^?\302K\347>\266\235}?\344&\027=\365\222\021>\003\302\371>\t\331\177?\264\303\033;\356d\033<\240\353\031=\350\"\024>\240i\375>N\371\177?$5\3269\274\036\326:0\305\325;-`\324<\261\336\316=L\371\271>V\330l?\010\306\215>R\010M?\373G#?\365\214l?\036\306\217>M\315N?\001\371\036?\306\002q?\314\310a>\'\0000?\305\377[?Q\201\367>\326\267\177?\213*\220;+\210\217<`\004\215=\246N\203>\266CC?\364M9?\306\260L?A\032$?l\242k?\226\366\225>4\024T?\360\212\021?\0031{?\303\373\226=C\332\213>\307MK?We\'?\336\277g?]\240\257>\027\304f??\371\265>\030\230j?\216\355\234>\272\250Y?\375d\002?\021\351\177?\353h\267:8\'\267;%!\266<\214\024\262=z\230\242>\237\353]?\260W\354>\225}~?\253\021\300<\327\220\273=9c\252>\204^c?\031n\313>g4u?\364p%>A\266\n?\0055~?1\342\343<Z\213\335=\035\224\305>\360\252r?\0055J>\027G\"?(\244m?dV\210>\341\020H?\002\332.?\266\263]?|\237\355>I\256~?\277\374\247<\341\212\244=\231R\227>\2472U?L\225\016?S\255|?\250\350Q=\315&G>wk ?\325\223o?\203\347u>F\332:?x\341I?\214\266*?_~c? \250\312>\177\342t?F\037*>\343\333\r?\270\377|?u\321==\206\0055>R\005\025?\202\030y?b\372\326=pi\300>\2154p?\243\037m>\27566?r\023R?%\276\026?\022\353w?\266s\372=\357\322\333>K\343z?KR\240=l\305\223>\206>R?\215O\026?\3548x?\270R\361=\035\343\324>I\275x?\001\300\341=\237\335\310>6 t?\265,5>\245\036\025?\325\007y?\014\363\330=\252\367\301>\366\367p?\206ab>qU0?e\177[?xa\372>m\340\177?\275|\374::\000\374;\032\020\372<\376m\362=z\273\325>r\005y?R;\331=\2360\302>\203\023q?K\334`>\273{/?W\305\\?\215\014\363>FX\177?lL\'<\030\227%=V\345\036>]=\006?Dd\177?\236]\033<t\344\031=F\034\024>2`\375>\035\371\177?CY\3349\216A\334:\316\342\333;\022i\332<Y\226\324=.\205\276>f@o?sqz>\0011=?p~E?d\2124?\362\335T?cv\017?\247C|?3\231k=\t\014^>\321\345-?\231\025_?\266w\345>\010@}?\363\031.=~\263&>-\220\013?,\351}?\266\235\004=\206R\000>\273{\340>\263\036|?\271\217t=\225\365e>CQ2?\241pX?\200\311\005?\nz\177?b\260\005<\037\231\004=;N\000>Mu\340>\035\035|?\014\362t=\'Lf>\354\2002?\214%X?\251\230\006?\364Q\177?\231\225-<\313\276+=D\213$>\225\032\n?\246g~?\036\347\312<\221\340\305=%\302\262>\273\261h?\344x\251>\362\300b?\253=\317>\215\266v?E3\017>aY\366>\334\242\177?y\003\272;\'\365\270<\034\310\264=\334\322\244>\340\206_?\364\324\342>8\255|?\036\357Q=\231,G>\001o ?>\220o?\217\031v>G\364:?\233\261I?\351$+?R\352b?\027>\316>2Tv?c\344\024>V|\376>\265\375\177?:\301\0229\370\273\022:\362\246\022;\357R\022<d\004\021=\004\342\013>m\214\361>(/\177?\352-P<\300\210M={8C>\265\000\036?V\357q?b\255T>z\201(?\"]f?:\215\270>#\017l?\315\031\223>\366\254Q?^\304\027?\202,w?}Y\010>_c\354>`\177~?\350.\277<\260\270\272=\223\262\251>\343\347b?\037M\316>\tZv?\005\216\024>\307\001\376>\007\374\177?\3105~9\001&~:\355\346};\033\353|<\234\003y=\034\340i>\256u4?\355\377T?3\034\017?\274n|?\213\"a=\257\302T>\356\215(?\\Mf?\032\362\270>JGl?1\236\221>\315gP?\330\373\032?\202\237t?\361\360->\017e\020?\331\314{?o0\204=^Pw>S\225;?S\207H?f\316-?&7_?-\260\344>\021\026}?t\\8=$\0200>\227\312\021?\336\r{?r5\233=:r\217>\244\203N?\021\256\037?\206Qp?\t\211k>\321[5?j\203S?\030\006\023?aXz?\234\364\260=t\252\241>\021=]?\232T\360>w\n\177?.\235t<>\366p=T\311b>N\2170?\311\'[?\205U\374>\220\362\177?]\373V:;\316V;\375\031V<\277MS=+gH>\324.!?\223\313n?]c\200>7c@?\3708??\244\213A?*\337<?\207\032F?\35553?\341\005W?\005\254\t?\320\211~?`\006\272<\366\314\265=\207\251\245>\026\037`?_E\337>\320\320{?\300\265\203=\237zv>\246&;?\247TI?t\372+?\240\307a?\3478\325>\021\332x?\314Z\336=\2316\306>\262\364r?}\022F>W\302\037?n=p?\020\243l>\315\3635?\224\204R?2\233\025?\257\264x?\221\303\342=\325\247\311>\257vt?\241C0>]\354\021?\006\373z?\022y\235=Z]\221>\322/P?N\210\033?\334\'t?\254\2754>\333\326\024?\3466y?\331a\323=\212\220\275>W\302n?N\243\200>\346\242@?\225\270>?K\210B?\302\325:?\306\351I?^\243*?\363\227c?\377\010\312>\313\237t?\303\354->Lb\020?C\316{?\260\004\204=*\004w>\350m;?\240\320H?\357\'-?\276#`?a)\337>\244\311{?\250\223\204=)\375w>\211\356;?\273\340G?MF/?r\024]?\036A\361>\221&\177?b\266X<\221\330U=p\256J>\200\220\"?2Um?\272r\212>\220\005J?#c*?I\355c?\354\364\307>\'\273s?%\345:>\264\310\030?\004gv?\356\315\023>\312\360\374>\244\366\177?Y\275\025:t\247\025;\367O\025<\237\363\023=\204\233\016>\225~\365>\242\221\177?b\\\334;\004\341\332<\344\007\325= \337\276>Jno?\304\362w>-\351;?\304\352G?\301//?\2715]?c\177\360>\255\017\177?uqo<\241\361k=IZ^>\033\022.?\363\325^?t\361\346>(\214}?\035u\033=\255\216\025>\247m\377>\254\377\177?\275R\2477\343Q\2478xN\2479\315@\247:*\n\247;-0\246<\031\321\242=p\337\225>\004\001T?U\275\021?;\025{?\371R\232=\373\261\216>\010\332M?vL!?\313\254n?j8\201>\3546A?A\214=?q\317D?\216\0046?OhR?\013\344\025?,\203x?h\230\350=\325-\316>\337Mv?\353A\025>\360\000\377>\002\377\177?a\037~8p\033~9\254\013~:\245\314};\007\321|<V\352x=\351\311i>\236i4?\260\023U?\256\347\016?]\207|?\201%[=\356kO>\000h%?\027#j?_\367\237>\207\371[?8\245\367>3\272\177?Es\213;Y\333\212<\317\200\210=W\317~>Qg??\362/A?x\232=?\026\264D?V?6?\341\004R?\177\343\026?p\320w?\313\221\375=\233,\336>\321\207{?\227\206\214=(\342\202>\327\331B?\317+:?{ K?\317\317\'?\031<g?\256\364\262>0\320h?{\261\250>\2119b?.\177\322>u\351w?\374\243\372=f\367\333>\224\355z?G\026\237=\261\272\222>\350[Q?\331\222\030?\214\220v?\321f\021>\322\202\371>\345\325\177?\333Q(;0\343\'<\307*&=\017m\037>\345\232\006?~Q\177?\350\n.<\2341,=q\364$>\353a\n?\321P~?m,\326<\372\222\320=\025U\273>\301\224m?\352\277\210>[sH?\243\373-?F\366^?\2751\346>\021f}?\272\312$=t)\036>\250\273\005?\210|\177?\3424\003<\346\'\002=:\n\374=\266\005\335>\2208{?3\023\226=\343\023\213>,\231J?]\014)?\'\254e?\253\365\274>\227qn?}\321\202>\214\311B?\325M:?\220\342J?\361`(?@\206f?\362\205\267>\036{k?\315\376\226>\004\356T?\301K\017?$X|?\262\237f=}\243Y>\330a+?\360\227b?\223:\320>\352\025w?\357\251\t>5P\356>.\307~?\276\251\233<\206\264\230=\252Q\215>E\240L?\314A$?\267uk?\026#\227>\303\013U?\277\374\016?\206}|?\032\212]=\236\216Q>\023\254&?\333\241h?\276\340\251>\374\006c?\312\214\315>\313\016v?\301\345\030>X\021\002?\346\356\177?\242\310\210:\027\244\210;9\022\210<\236\317\205=\344\"z>\332\010=? \313E?~\3433?F\356U?\237\237\014?\226\202}?\242\315\035=D\271\027>?>\001?\321\371\177?\307\313\3059\255\270\305:Rl\305;\322;\304<u\210\277=\330\236\255>\236}e? \035\276>\001\013o?HW}>\337\251>?\034\245B?\314\231:?\315WJ?}\244)?\232\347d?\363\321\301>\252\345p?\331cc>K\3450?\332\244Z?c=\377>l\377\177? \362\0238\312\360\0239s\353\023:\024\326\023;\265\200\023<\301,\022=O\365\014>\002\034\363>\325Y\177?\005\277%<\305\021$=Y\177\035>\374E\005?\304\220\177?E\027\336;\354\225\334<\\\245\326=@&\300>\032\023p?y\364n>\23317?\230fP?\340\376\032?\363\234t?5\026.>\250}\020?5\300{?\223\267\205=\025\371y>v\363<?\345\363E?y\2123?$~V?\006\034\013?R\022~?.\373\364<\260\247\355=\262\023\322>\023\303w?\001\"\377=iY\337>\356\325{?W\027\203=ufu>$\227:?\252\\J?1\231)?K\366d?Eu\301>\202\270p?\222\340e>\257E2?\322\202X?3\227\005?\373\202\177?\025\220\371;\202\251\367<\275,\360=@\002\324>\306px?\230\302\352=\215\331\317>\217\361v?\300\306\013>\310d\361>\250*\177?g\246T<\327\343Q=z\"G>\322h ?\202\226o?/\302u>\336\306:?#\005J?\037d*?\373\353c?\026\375\307>\272\276s?t\261:>\336\247\030?a\200v?^V\022>m\331\372>x\345\177?\232&\324:\262\316\323;5p\322<S\010\315=\210\201\270>\233\010l?\347E\223>t\322Q?\227d\027?\025sw?\352<\004>eR\346>\242l}?\361.#=\244\256\034>P\265\004?T\247\177?\342\031\261;\330$\260<C[\254=\353\331\235>\322^Z?\305d\000?a\377\177?J\251\0368\301\247\0369\234\241\036:\t\211\036;\333&\036<\013\240\034=\324\242\026>\006z\000?\027\377\177?\000\247h8\262\243h9{\226h:\247ah;\266\216g<\353Hd=\313\217W>\025/*?\0222d?\304F\306>\375\373r?\247\251E>\004\202\037?\004}p?\375%i>r\0204?C\245U?]c\r?\0103}?\370G1=\256\233)>\364\203\r?U%}?g\2414=1\252,>\350\214\017?\2758|?\030?n=\202c`>\3577/?\247)]?\255\305\360>\035\030\177?\371\020g<\272\316c=6#W>+\360)?\303\204d?\026@\304>\372\rr?\306\370R>\200\201\'?&\235g?Y\201\260>\227Pg?lp\262>P\200h?\363\273\252>\275\231c?\332\375\311>\030\233t?F1.>\205\217\020?\374\266{?\350\324\206=\353\350{>G\360=?s\016D?H\2417?6\245O?w\342\034?\266\366r?|\365E>\215\260\037?\020Op?\227\253k>yn5?IdS?DW\023?\270\'z?\301\303\266=dt\246>\241\255`?\213\352\333>\365\351z?\216\205\237=\251\030\223>\375\253Q?\331\306\027?\252*w?\347t\010>\231\213\354>\204\205~?T&\274<\022\324\267=\365S\247>EIa?%;\330>n\322y?\342\354\300=\\\300\256>\2536f?#\203\271>z\227l?\273~\217>\243\216N?\026\223\037?1lp?x\022j>\007\2214?\014\323T?H\223\017?\2435|?\262\377n=\253\ra>i\227/?7\234\\?\307\372\363>\203o\177?\351+\020<#\347\016=\317\352\t>\n\257\356>&\324~?\206=\225<\201\205\222=\357\t\210>P\311G?\336z/?\236\306\\?!\005\363>\205W\177?\336\013(<\240R&=\254\221\037>\032\264\006?@L\177?\211A3<vK1=\337\236)>\026\206\r?n$}?\320\3314=\237\335,>\374\256\017?\034(|?\303Gr=\007\363c>\31541?\372*Z?\005\367\000?G\374\177?hVn9\212Hn:\027\021n;\2633m<\220\304i=\032m\\>-\372,?0d`?\246\245\335>\340c{?\363\333\220=\355\234\206>2qF?\233w2??4X?(p\006?4Z\177?\277`%<h\265#=`*\035> \013\005?A\232\177?\347,\313;g\352\311<W\360\304=:\000\262>$<h?\250x\254>\365\276d?\020\322\302>\023aq?\202\222\\>y\017-?:F`?\013Z\336>\313\223{?\250\024\213=\272\242\201>\r\240A?T\265<?\000jF?q\2072?B\033X?\000\265\006?\020L\177?uq3<Vz1=\257\311)>\265\242\r?I\030}?\253\3217=\324\221/>\247w\021?\217;{?\314\266\225=\003\305\212>\007QJ?:\264)?\033\323d?(S\302>,$q?\272\360_>h\367.?\235\210]?\246\233\356>\205\321~?\365\212\226<\274\306\223=\001\035\211>\364\311H?\0377-?N\016`?)\252\337>m\352{?\210\234\200=\326\021q>0Q8?\204qN?\204\332\037?f%p?\027\364m>\240\2506?\265QQ?\305\254\030?\232|v?V\216\022>W)\373>\227\350\177?\0109\273:\222\364\272;\202\343\271<\255\253\265=&\216\245>\300\013`?{\271\337>K\356{?\270$\200=A@p>\037\3427?=4O?\340\372\035?\316\364q?\203_T>\356S(?\250\226f?\311\034\267>g?k?\177\217\230>G4V?W\343\013?\262\312}?T\033\014=vP\007>\360\335\352>eA~?\373\307\335<\344\306\327=\356\n\301>a\204p?l\276h>\000\3303?\350\000V?\222m\014?.\226}?\310\377\030=\274H\023>*3\374>\217\361\177?\203\001g:f\315f;P\375e<\324\302b=\n5V>\334e)?\3348e?\261\320\277>P\350o?\200Kq>\261o8?\310;N?\021^ ?e\241o?O*u>\316w:?\372\225J?\317\023)?\231\242e?`2\275>T\221n?J\366\201>p\362A?\365\013<?\222\251G?\004\302/?\276\\\\?\255i\365>\351\217\177?O\313\337;\010D\336<7<\330=\202g\301>\310\261p?Y?f>\340y2?\2520X?\007z\006?6X\177?\022\\\'<m\246%=n\363\036>\025G\006?]b\177?\316A\035<g\277\033=R\323\025>\316\316\377>\367\377\177?\334D\0276\306D\0277mD\0278\007C\0279q=\027:\033\'\027;\334\315\026<\204j\025=1\367\017>Ws\367>\350\266\177?\366\005\222;`_\221<\367\312\216=>\326\204>\330\276D?;(6?\003,R?\032\177\026?\242\027x?\305:\365=\223\335\327>9\265y?\356e\304=g\220\261>\316\367g?D5\256>\025\336e?\031\270\273>\271\311m?\312T\207>\013\037G?\020\3670?\256\211Z?:\327\377>\372\377\177?u\314\3175`\314\3176\014\314\3177\273\312\3178u\305\3179a\260\317:\"\\\317;6\014\316<x\335\310=\037*\265>\247\037j?-\016\240>\241\n\\?\337B\367>\242\263\177?\003\216\230;1\330\227<\253\007\225=m/\212>\260\307I?\007\362*?\303.c?c\226\314>\300\254u??\212\036>\203\376\005?Gp\177?\361g\017<\233&\016=\2567\t>\t\251\355>\250\257~?\'O\247<d\344\243=\320\306\226>\n\300T?\246\305\017?\370\034|?-\373t=0Tf>X\2052?\221\036X?\342\253\006?\370M\177?C\2141<\266\237/=\372\027(>\034\200\014?\365\216}?/\305\032=\022\354\024>=\207\376>\326\375\177?S\236\n9\243\231\n:\340\206\n;\352;\n<X\021\t=\037{\004>\244\256\346>\002\177}?8\256\036=\200\210\030>\350\317\001?\335\362\177?3\037R:\025\364Q;\344GQ<\213\233N=\237/D>b\231\036?\304^q?:\263\\>\030\"-?\375+`?\327\367\336>\345\274{?\014\036\206=:\253z>\202N=?\370EE?\325\0045?\376\023T?\177\213\021?\2650{?\'\005\227=E\342\213>\013UK?=T\'?\346\324g?\354\027\257>!nf?r \270><\322k?\253\264\224>\360\007S?hG\024?\020\223y?\330t\310=\000\326\264>]\356i?\317T\241>\326\375\\?\225\304\361>s5\177?0\355I<\026pG=\037\272=>\t\223\032?7\367t?w\360(>W\021\r?\360T}?g\374(=\243\003\">}a\010?\014\347~?\246\337\213<A|\211=zA\200>iA@?\353|??\035\005A?\235\361=?\334\013D?\312\2467?\243\233O?L\372\034?+\341r?\373*G>\004n ?>\221o?\230\013v>\006\355:?\370\276I?!\006+?\303\023c?\256=\315>\205\357u?\014\263\032>\022T\003?\260\323\177?\362!1;b\2470<\310\277.=4K\'>g\366\013?\230\303}?\t\332\r=j\360\010>\253@\355>\211\240~?7\312\256<{\017\253=\305\305\234>\351\211Y?F\273\002?(\342\177?g\247\356:)8\356;\320|\354<\035\251\345=\036\350\313>Jfu?{\225\">\031\305\010?[\314~?\320\031\231<Q=\226=\3247\213>\373\271J?\317\277(?\377\rf?\302\206\272>k%m?\353\270\213>\201/K?\206\254\'?\353gg?\265\331\261>\245$h?\247\021\255>q\"e?q^\300>\026/p?Dlm>\333_6?\257\315Q?\311p\027?)jw?\"\302\004>\341\027\347>\250\223}?>\236\031=V\333\023>\333\003\375>\027\367\177?\305\211\016:\355u\016;\246&\016<\353\352\014=\316\021\010>&\372\353>\026o~?%;\307<\275b\302=\204\357\257>\261\365f?X\272\264>\035\336i?^\300\241>5M]?\200\366\357>\320\376~?\375\026\200<\211,|=\016\246l>i\3655?\336\201R?0\242\025?\365\257x?&R\343=\315\026\312>\234\245t?\363\227->E*\020?\302\352{?R\222\200=\373\377p>\276G8?$\202N?\300\261\037?\341Mp?>\274k>uw5?GUS?]~\023?\377\017z?\366\227\271=W\306\250>\302Gb?\334\'\322>M\312w?\230I\376=\325\266\336>\016\254{?\341&\210=m3~>\347\030??\357\312A?G]<?\222\020G?7\0271?lXZ?\327v\000?#\377\177?\004\252\\8\013\247\\9(\233\\:\242k\\;\331\255[<\315\273X=\366CM>{\036$?\247\235k?\254\026\226>\305.T?\032E\021?\000W{?\026i\222=\225\361\207>{\262G?\r\256/?\203z\\?\271\275\364>=\201\177?\022\t\375;\334\024\373<\315b\363=6v\326>\223By?\362\377\321=uw\274>?/n?\354\232\204>\267\205D?\303\2426?\271[Q?P\223\030?1\220v? l\021>k\212\371>G\326\177?\261\310&;\010\\&<\232\253$=\325\014\036>\337\247\005?\r\200\177?\202f\377;\347h\375<#\222\365=\002 \330>\375\311y?\373\355\301=\345\220\257>_\272f?\2457\266>\037\274j?_\375\233>\362\355X?2n\004?|\261\177?\256\327\234;\177\027\234<\032\036\231=z\253\215>\235\360L?\003\201#?\341Ml?\224q\221>LAP?\177\\\033?oMt?\302\2332>\204t\023?\376\025z?\n\341\270=\2020\250>P\341a?\331\233\324>4\245x?\234\226\344=\010\023\313>\340\016u?i\226\'>\004)\014?\204\260}?@\211\022=3K\r>o\230\363>!f\177?\374\202\031<\305\022\030=`m\022>H\372\372>\307\346\177?\250\266\311:0g\311;J*\310<9F\303=\267\247\260>dhg?\245\326\261>\306\"h?\326\035\255>U*e?\216,\300>?\026p?n\310n>\034\0327?\026\217P?\n\231\032?:\362t?b9)>.B\r?\331@}?\360\346-=\321\204&>\260p\013?}\364}?\033\325\001=(o\373=\303\220\334>e\030{?\225\361\231=@_\216>\262\220M?\215\376!?\212\361m?dC\206>*\034F?Y23?\233\013W?p\234\t?\202\216~?]\264\267<\302\225\263=i\326\243>\025\322^?a\010\347>\243\220}?\332[\032=\260\212\024>\r\375\375>\364\373\177?\302x\2019\223p\201:\332O\201;6\315\200<\217\215}=}\333m>u\2336?1hQ?\232s\030?|\250v?\356\003\020>\246\205\367> \270\177?\330\227\217;\302\366\216<\014x\214=\234\325\202>\223\315B?mE:?\340\361J?\031=(?f\263f?fd\266>\343\325j?hQ\233>\"gX?\274\343\005?@u\177?\177t\n<\370H\t=\005\257\004>\217\373\346>\"\216}?\376\370\032=\365\033\025>$\313\376>\213\376\177?\211P\2728ML\2729Z;\272:\235\367\271;n\351\270<\352\274\264=\244\311\244>O\200_?)\374\342>!\266|?\221\303O=\2639E><=\037?s\300p?\256pe>\374\0072?\206\343X?(\213\004?l\255\177?\306\361\244;8\035\244<\215\323\240=i2\224>\177\232R?\247b\025?\252\332x?\256H\336=j(\306>J\356r?\211nF>\276\372\037?A\005p?n\266o>\345\2307?\311\263O?/\276\034?b\027s?\273\037D>\224\217\036?#hq?p.\\>z\326,?J\226`?\203w\334>e\021{?\372\310\232=,\026\217>\2212N?\226t ?\226\212o?qhv>8\035;?\023fI?\201\322+?n\376a?\236\351\323>Lhx?\272\301\353=\023\236\320>\345:w?\024\203\007>g(\353>\232M~?7\302\327<x\023\322=\372\206\274>n7n?\216b\204>TOD?\014\0277?\\\224P?\303\213\032?A\375t?/\230(>)\326\014?\344l}?\303\036#=\300\237\034>\372\252\004?\330\250\177?\314\024\256;\013(\255<\022\177\251=\362w\233>l\205X?\000\220\005?<\204\177?D\020\367;c3\365<\210\334\355=E<\322>\233\321w?\320n\375=I\022\336>\332\200{?\264]\215=\251\233\203>\244\216C?\032\2608?\355\311M?\240s!?\362\203n?\277R\202>YMB?\033P;?\352\007I?\360\251,?\222\324`?\017\377\332>\272\246z?7\225\247=\267\336\231>uAW?\306\t\t??\271~?\031\220\242<CV\237=\273\360\222>\376\211Q?\213\035\030?\312\351v?G:\014>\250\014\362>b=\177?N\nB<\000\276?=/\3046>M%\026?FVx?4\340\355=\030?\322>\235\322w?\233P\375=\215\373\335>\321z{?\371\027\216=&<\204>7*D?0f7?\272\013P?\255\342\033?\233\331s?\\,9>\023\260\027?\216;w?Ay\007>\363\031\353>?K~?\307\353\330<Q-\323=\332f\275>\255\254n?:9\201>\2727A?\235\212=?\231\322D?\306\3755?\302sR?\215\306\025?L\227x?\3609\346=kX\314>\315\223u?\026\371\037>?\373\006?\n=\177?\242aB<A\023@=s\0217>\366V\026?\3013x? \356\361=\332Y\325>\020\345x?\216\016\335=J2\305>$~r?\231\266L>\270\311#?\343\374k?\002\225\223>\215\025R?\300\270\026?\347\356w?\320\000\372=\035|\333>\244\312z?_G\243=\340B\226>PST?\342\344\020?]\212{?\n8\214=_\236\202>\204\227B?\031\266:?\354#J?\331\034*?\026Jd?L\260\305>\312\267r?\310|I>|\327!?\362\032n?\246&\205>\036\014E?\335\2015?\343CS?\244\253\023?J\364y?\034\345\274=\362x\253>\030\027d?\232\357\306>\262Gs?\'hA>\231\340\034?f\370r?I\335E>\265\241\037?\300]p?V\335j>\376\3764?\254\035T?\020r\021?\234>{?\316X\225=\276t\212>j\007J?\331^*?\366\362c?w\321\307>\234\253s?\360\305;>?W\031?`\367u?3?\032>-\003\003?\264\333\177?\350\034\021;\246\312\020<\024\203\017=\331{\n>\321\202\357>\035\360~?-a\207<p$\205=(\371x><p<?\313\354F?\230f1?C\336Y?\323\316\001?\355\362\177?\323$Q:\034\372P;\205OP<\177\251M=\361UC>\356\022\036?;\336q?\363\240U>\244\017)?\361\247e?j\020\275>\227\177n?\330p\202>\343jB?\331\022;?;yI?\214\246+?\202:b?8y\322>W\347w?\215\343\372=f\'\334>\017\373z?\375w\235=p\\\221>\010/P?I\212\033?(&t?h\3264>\332\346\024?w,y?\000\236\324=>\213\276>\200Co?PFz>\366\032=?\220\250E?\316.4?\316sU?\222\347\r?\247\372|??\016?=\333$6>\300\276\025?\232\234x?\002\232\345=f\334\313>\204au?~\333\">\334\364\010? \277~?\325\246\237<P\212\234=4\223\220>y\200O?\323=\035?\275\243r?4\234J>{\205\"?\027am?p!\212>\317\272I?\267\017+?\336\006c?~\215\315>\022\017v?\250\341\030>x\016\002?\025\357\177?RM\207:\221)\207;\327\232\206<\243d\204=J\253w>K\304;?\273/H?x\224.?<\031^?\256K\353>TS~?\003\357\324<\035f\317=Te\272>B\023m?\3054\214>\310\237K?\365\243&?\251\253h?\237\240\251>\307\333b?\365\227\316>\002wv?3\341\022>\223\237\373>\330\354\177?F2\231:o\004\231;\202M\230<\241x\225=\355\217\212>] J?\030%*?;?d?P\364\305>\264\326r?=\301G>\275\311 ?\3073o?\363 {>\213\212=?\273\322D?|\3755?>tR?N\305\025?%\230x?d \346=\235D\314>\316\213u?\234n >\377K\007?\006+\177?\361HT<\315\210Q=\303\320F>\3356 ?\364\310o?\350\001s>\301V9?\003\241L?\003@$?\275wk?\203\025\227>\243\000U?N\032\017?\240o|?\366\352`=6\221T>\001q(?\367qf?\342\007\270>o\304k?\245\021\225>\277US?\'}\023?\274\020z?m\201\271=\343\263\250>.;b?\033u\322>\340\345w?j\017\373=\202H\334>P\004{?][\234=mk\220>\323]O?\326\223\035?\260Tr?o\007O>-,%?\315hj?[(\236>\337\232Z?\354u\377>\266\377\177?J\363\2247\234\362\2248\347\357\2249\022\345\224:\305\271\224;\367\014\224<\377_\221=C\016\207>z\334F?\275\2121?a\246Y?\221k\002?\222\350\177?\267]\273:&\031\273;\252\007\272<1\316\265=\212\252\245>\315\037`?\025A\337>\267\317{?\270\327\203=\320\265v>UE;?\340\033I?\\|,?\020\024a?U~\331>@5z?\212&\265=\231 \245>)\276_?\205\212\341>A`|?)\247d=\206\343W>\211_*?\016\362c?#\327\307>\031\256s?\370\241;>w@\031?b\tv?\2165\031>JI\002?\027\353\177?\3436\247:F\000\247;d&\246<\265\307\242=\212\327\225>w\372S?\206\316\021?\256\013{?\273x\233=M\253\217>\310\265N?\3452\037?\212\312p?q\342d>h\2711?\377]Y?\t6\003?\302\326\177?\025\337$;\347t$<O\316\"=\263U\034>\217w\004?/\260\177?\257p\237;\025\252\236<b\227\233=M\305\217>\226\314N?\305\372\036?\020\001q?\372\340a>\253\r0?}\353[?\343\365\367>^\277\177?\331#\201;\217\241\200<\3778}=d\221m>\302s6?\327\253Q?<\307\027?a*w?-y\010>\336\221\354>x\206~?\335\255\273<\"a\267=\241\365\246>\312\007a?\307\310\331>\217Kz?\251|\262=v\356\242>@*^?\216\347\352>\373B~?\261\377\334<m\t\327=Ru\300>s:p?\333\314l>E\n6?\252^R?\340\374\025?&rx?5\231\352=\247\271\317>\213\345v?[y\014><h\362><G\177?\207>8<\037,6=\363\021.>\331z\020?\250\301{?\311\212\205=2\253y>\224\313<?\303?F?E\3442?&\210W?\267H\010?\200\355~?\021\255\210<Ne\206=\016\'{>\247\215=?\277\314D?Z\n6?\206^R?=\375\025?\346qx?\261\240\352=l\277\317>\270\347v?\tY\014>Q9\362>8B\177?G;=<\304\013;=!\2012>,c\023?\204 z?\303\237\267=\n)\247>\202+a?\000\360\330>\037\nz?=K\272=\020Y\251>j\253b?\201\302\317>\342\350v?\303G\014>= \362>\203?\177?\255\354?< \255==\217\3444>\002\360\024?{&y?BS\325=\315\032\277>\231\214o?^Lv>\247\016;?\371\200I?\305\224+?\276Rb?]\344\321>\017\262w?\251\217\000>U\327\340> 5|?p\037o=\265)a>\037\247/?\326\204\\?\014\202\364>\357{\177?\327\314\003<j\275\002=6\"\375=\242\330\335>\205q{?\3756\217=.3\205>$\030E?\352g5?<oS?\273:\023?\3538z?m\266\264=L\304\244>\200|_?\343\022\343>F\273|?\307\202N=[\031D>\245\213\036?\344kq?2\371[>\036\270,?\305\300`?\332v\333>$\311z?vu\243=\235i\226>JsT?\216\220\020?s\266{?|\345\206=\265\005|>\346\376=?#\362C?s\3357?e<O?\257\346\035?\262\007r?PRS>\035\266\'?\006\\g?\222&\262>{Sh?\207\340\253>U[d?*D\305>Y\206r?\"AL>+\203#?}Kl?\304\201\221>GOP?m9\033?Xkt?\260\3500>~X\022?\277\275z?9\323\244=O\217\227>?dU?\035\021\016?\177\350|?~|C=\020(:>\200P\030?:\303v?\024w\016>\377I\365>G\215\177?#\014\345;Fr\343<\247!\335=CA\305>\004\205r?0TL>\236\216#?\305>l?\321\327\221>q\231P?\365~\032?\335\007u?\365\374\'>\365m\014?\007\226}?:\t\031=yQ\023>\235?\374>\355\361\177?\371!a:y\360`;\324*`<\250\031]=S*Q>\312p&?I\351h?\001\r\250>\360\310a?\3450\325>c\327x?\260\253\336=\351u\306>7\021s?sxD>I\306\036?\2663q?\365\024_>\224{.?m=^?\252v\352>.0~?\277D\346<\302\313\337=.W\307>\265us?\225\320>>\003B\033?\tdt?\tS1>\016\236\022?\222\225z?-\243\251=\022\226\233>\022\235X?\214N\005?Z\217\177?]\351\340;+^\337<\001G\331=\3239\302>\365\027q?w\235`>{X/?\221\371\\?b\335\361>28\177?\3721G<\377\305D=\003R;>\310\r\031?91v?d\351\026>\317\253\000?3\376\177?#\232\3468\245\223\3469\260y\346:\360\021\346;ht\344<k\025\336=F\000\306> \334r?esG>>\232 ?Ndo?\323}x>\3210<?RdG?\315\\0?Ft[?\n\241\372>\'\343\177?\247\254\346:\272D\346;{\246\344<\263D\336=L%\306>\341\354r?\310\202F>$\007 ?\333\370o?\001dp>\027\3657?\026\023O?\334L\036?\225\247q?\006\252X>/\322*?oYc?\245\215\313>XAu?R\263$>\3025\n?\006_~?W)\317<8\354\311=\237\003\266>\030\236j?\225\305\234>\304\211Y?\256\273\002?\037\342\177?\036\356\356:\236~\356;?\302\354<\211\352\345=\333\032\314>\346zu?\352f!>C\366\007?n\002\177?\031\227|<2\262x=\226\230i>\317N4?\216?U?\356r\016?\351\274|?\247\034N=\205\275C>\364R\036?\320\241q?\001\374X>s\001+?\016\032c?\265\026\315>\n\340u?,\227\033>\022\363\003?\233\301\177?\270Vy;\336cx<\330\237t=\306\003f>\024Y2?UdX?z\353\005?\323s\177?\267\340\013<\000\257\n=\356\374\005>w\351\350>\361\352}?*.\004=`\324\377=G\337\337>\316\367{?!\374}=\\<n>J\3176?\224\017Q?\216T\031?\202\371u?\304\037\032>5\355\002?\275\335\177?\274\367\010;t\256\010<\215\212\007=V\016\003>\325\220\344>]\017}?\240\3779=h\2151>2\304\022?J\177z?\275M\254=\253\316\235>2VZ? }\000?\013\377\177?\234\237t8\365\233t9Y\215t:\362Rt;\304is<\374\313o=\024\302a>e\374/?h\005\\?\352`\367>\254\265\177?R}\224;\017\321\223<A&\221=\266\334\206>\237\255F?]\3621?K\005Y?F-\004?7\272\177?\236k\213;\302\323\212<zy\210=\241\302~>\356`??\230<A?\261\200=?\254\345D?\272\3245?\350\270R?\027\024\025?\312\016y?x \330=\236Q\301>\022\247p?7\326f>\317\3142?l\255W?\253\342\007?H\007\177?\223\306w<P\007t=q}e>\007\0172?\202\330X?\276\251\004?\006\251\177?\327\270\255;\021\315\254<\357\'\251=7/\233>9LX?\t.\006?=g\177?\252g\030<\275\374\026=\353k\021>\037\212\371>C\326\177?$\330&;gk&<\251\272$=\256\032\036>r\261\005?Z~\177?\016d\001<v^\000=\031\261\370=&~\332>5\201z?\007\023\254=\324\235\235>\2610Z?\351\346\000?\277\374\177?\356DP9W:P:\000\020P;\346fO<\307\306L=\361\211B>\232\224\035?\373Sr?\211\021O>22%?\317aj?\331V\236>a\276Z?\262\254\376>>\376\177?X\332\3408,\324\3409}\273\340:\331X\340;\242\317\336<<\300\330=\235\317\301>\207\344p?\336sc>2\3560?>\227Z?x\212\377>\312\377\177?\014\327W7V\326W8~\323W9\036\310W:\246\232W;\021\345V<\202\023T=}\030I>\237\232!?\026[n?\303l\203>\taC?C\0209?\005\037M?M\021#?\017\311l?\355-\216>\336dM?\252h\"? \200m?\"M\211>\236\366H?f\321,?g\235`?\217L\334>q\005{?\2348\234=\372M\220>#DO?\200\323\035?\231\031r?\027SR>\374\037\'?\365\024h?\271w\255>jde?\350\274\276>\334\\o?t\345x>\034f<?\350\377F?6<1?\225\037Z?\036\027\001??\373\177?;&\2309\355\032\230:\275\355\227;i9\227<\303n\224=\273\254\211>!OI?\033\007,?:\266a?4\243\325>k\375x?\014.\332=\275\357\302>?oq?\235\311[>\371\234,?\251\346`?\212\221\332>\342\206z?)e\253=\037\r\235>%\301Y?\211 \002?\347\355\177?\200\276\220:\225\225\220;D\362\217<\277j\215=\347\246\203>\221\231C?\t\2318?\303\362M?B\020!?7\353n?D\020\177>\352\207??K\357@?\354\035>?\372\265C?\370\\8?\307\\N?S\r ?\252\362o?\254\272p>\t#8?\235\302N?R\023\037?C\351p?\0231c>\017\3110?\362\317Z?\007I\376>\017\375\177?\273+<9\026#<:\205\000<;tv;<[Q9=\360\3560>\226\\\022?f\273z?7\033\245=\264\313\227>w\225U?\236\215\r??!}?)\2415=T\223->7\'\020?L\354{?\220b\200=r\254p>\200\0338?\325\317N?\306\362\036?\315\010q?\253sa>\211\320/?\017G\\?\314\346\365>\005\232\177?\340\243\313;\345_\312<\t`\305=kZ\262>\371rh?\016\023\253>\246\323c?\364\224\310>\324\000t?\374\3636>\007D\026?\363@x?\203a\360=\244*\324>\241~x?I!\351=\226\227\316>\335vv?U\343\022>\236\242\373>\363\354\177?\214]\230:50\230;B{\227<-\256\224=\362\342\211>4\201I?=\224+?vSb?\363\337\321>w\260w?w\247\000>\374\372\340>\311=|?\242\005m=kN_>\375\233.?H\016^?\024\214\353>\257]~?\344\322\317<.\215\312=\312\204\266>\200\350j?\026\325\232>\034\005X?\363\361\006?\020?\177?\316^@<\225\034>=\256I5>]1\025?u\373x?fi\332=q\036\303>~\205q?\021\216Z>\200\350+?G\340a?+\242\324>X\247x?\376U\344=\325\340\312>\024\372t?\224\306(>E\365\014?Z`}?\3520&=\262r\037>\307\236\006?\261P\177?*\327.<\205\371,=\201\253%>\337\335\n?\251\'~?\264w\352<\274\301\343=\227m\312>\r\312t?O\204+>\316\311\016?:\225|?H\306W=]hL>\276\232#?K1l?\3752\222>\307\347P?G\271\031?)\251u?\022\277\036>\370\"\006?^i\177?\374H\026<\025\350\024=C~\017>_\305\366>\323\252\177?\323 \252;\264>\251<\225\277\245=\204U\230>_\005V?\221a\014?\325\232}?\226\333\027=J:\022>O\261\372>\325\343\177?\005@\341:\355\334\340;\346Q\337<h;\331=\2570\302>\214\023q?\324\333`>x{/?\271\305\\?P\n\363>\014X\177?\"\206\'<\241\317%=L\031\037>0a\006?3]\177?\023e\"<\003\311 =Dy\032>\275+\003?\310\327\177?\371\304 ;\003` <\"\316\036=\360\245\030>\222\344\001?\253\361\177?qAe:\035\016e;+Ad<\032\023a=\361\264T>\345\205(?\211Wf?\005\261\270>\031#l?\364\222\222>\3659Q?\027\351\030?\336Mv?\375A\025>\t\001\377>\002\377\177?\310\356}8\331\352}9\033\333}:,\234};\356\240|<\271\273x=\365\240i>\\S4?\0358U?\301\206\016?\360\263|?RLP=\221\264E>\267\210\037?kvp?\277\202i>\357B4?\366RU?6?\016?\032\324|?\312uH=F\246>>w\'\033?\233zt?\214\n0>\354\306\021?\351\017{?\260\366\232=\371<\217>\305TN?\360  ?\377\336o?\304\315q>\200\2648?#\302M?\217\206!?!pn?\222\333\202>g\323B?@9:?\010\010K?,\t(?\210\364f?\322\301\264>\202\342i?G\243\241>\3067]?ns\360>:\016\177?\353\341p<JWm=\236\226_>\256\304.?\351\322]?\246\350\354>\206\223~?M9\265<\3746\261=Z\341\241>ze]?\350h\357>\304\354~?\035\n\211<>\277\206=K\303{>)\335=?n3D?\214R7?\265-P?\233\215\033?L#t?\345\3774>\256\001\025?\346\032y?\004\262\326=A0\300>\027\030p?\225\256n>P\0147?\325\246P?:]\032?\271#u?9e&>][\013?\025\374}?l\355\377<\225\356\367=\315\352\331>\263Uz?\225F\261=@\356\241>\365n]?\2151\357>\213\345~?\243\236\214<\2644\212=\030\341\200>R\340@?I<>?\371zC?\233\3318?N\200M?D&\"?A\307m?\277e\207>\006/G?\210\3230?\371\277Z?\247\243\376>&\376\177?\246\377\3548\313\370\3549_\335\354:\313o\354;\016\273\352<:\001\344=\364\236\312>\254\336t?!W*>,\001\016?}\357|?\276\307A=\322\2348>^T\027?\355~w?\013\214\003>\306K\345>\3456}?\013V0=\244\276(>\363\357\014?\201b}?\361\251%=\251\366\036>PI\006?\355a\177?L\261\035<\300,\034=W8\026>\322.\000?\336\377\177?#\003\t7\332\002\t8\265\001\t9 \375\010:\314\352\010;\222\241\010<\342}\007=\201\002\003>;\177\344>\226\013}?\331\353:= d2>GP\023?\361+z?\325B\266=r\n\246>Xc`?\274\252\335>=e{?\334\261\220=\311x\206>\347NF?\006\3032?\365\274W?\030\270\007?\251\021\177?\347xm<\303\007j=\240\250\\>\017\034-?~4`?\266\304\336>\251\257{?X\267\207=\370q}>Z\267>?\264\212B?\301\320:?\372\362I?\034\216*?@\264c?\272X\311>\001Ut?\251-2>\307,\023?KAz?\212\266\263=q\361\243>\210\345^?\021\225\346>\361y}?<\354\037=\307\255\031>{\235\002?\245\344\177?d\302\332:\354d\332;L\360\330<\2311\323=?j\275>q\256n?\000-\201>\236+A?I\243=?\035\243D?\304c6?\n\307Q?\303\201\027?\265]w?\365{\005>\346*\350>\004\310}?\367\303\014=\210\355\007>\337\304\353>\265f~?9^\313<\305Q\306=r\035\263>\263\350h?\330\020\250>\223\313a?\305 \325>\376\321x?\266N\337=o\365\306>KJs?\264BA>K\311\034?f\rs?_\257D>\037\350\036?\031\023q?#\342`>\002\177/?z\300\\?\277(\363>\035[\177?\327x$<+\322\"=@Y\034>\007z\004?\326\257\177?\325 \240;\203X\237<\013?\234=nS\220>\345HO?\267\307\035?\223$r?\202\266Q>\241\303&?Z\205h?\010\233\252>\314\203c?e\206\312>l\324t?\340\354*>\003e\016?/\303|?L\225L=h]B>\373x\035?xmr?&\245M>\254X$?\304[k?J\321\227>\004\232U?s\201\r?c&}?N_4=\353m,>\362d\017?\017L|?\260\216i=_=\\>\374\336,?\\\212`?\202\277\334>M%{?Id\230=a\r\215>\005cL?<\324$?}\316j?\320\202\233>\365\215X?bx\005?N\210\177?\225\363\356;\2015\355< W\346=\013o\314>\354\234u?\377r\037>\374\236\006?\246P\177?\r\342.<-\004-=C\265%>y\344\n?k%~?\300\222\353<\212\314\344=\353<\313>+ u?O\231&>\203~\013?\211\357}?\027\r\003=a\267\375=\342H\336>G\217{?.\240\213=C\033\202>\323\026B?\345\300;?\0256H?$\206.?\023.^?\014\321\352>C?~?\020\325\336<^\305\330=\251\323\301>~\346p?\036Xc>\305\3360?\321\256Z?\357\004\377>\n\377\177?\2008v8\3154v9\000&v:\325\352u;\231\376t<\300Tq=\265\034c>\272\2750?6\341Z?\375\346\375>\232\373\177?m\315\2149\277\303\214:\013\235\214;\223\002\214<\375\235\211=\255^\200>\212^@?`B??\017yA?5\005=?\022\322E?X\3243?\323\006V?\250]\014?X\234}?\240|\027=\\\342\021>\2363\372>a\336\177?lj\006;\331#\006<\262\n\005=q\270\000>f\024\341>\357C|?\221\207k=n\374]>\373\334-?E\"_?d,\345>U0}?\343\3601=\3635*>\006\353\r?&\371|?\032l?=\362y6>\212\365\025?/wx?\211\001\352=\257D\317>9\271v?\236\013\017>? \366>\201\236\177?\021\264\302;\346\213\301<D\371\274=b\211\253>\361!d?\267\253\306>\\)s?\021\035C>\276\357\035?:\377q?\010\313S>\364\374\'?\317\003g?|_\264>\216\250i?e\"\243>\371O^?b\t\352>\234\035~?Ek\357<\371k\350=}\013\316>|@v?\322\007\026>\210\014\000?\376\377\177?=\002\03557\002\0356\037\002\0357\277\001\0358>\000\03599\372\034:)\342\034;\004\202\034<I\003\033=z%\025>\241\330\376>\253\376\177?\224e\2528\tb\2529\334S\252:2\033\252;\"9\251<>\272\245=\013Q\230>\277\001V?Ok\014?\016\227}?\256\310\030=\277\025\023>\200\352\373>R\357\177?\261e\205:\357B\205;2\270\204<\276\221\202=g}t>\224\035:?U:K?\023\223\'?o\207g?\350\r\261>\225\247g?\305=\260>\214&g?\253\177\263>\215#i?\213\216\246>\352\277`?\003|\333>\235\312z?IH\243=\245C\226>\363ST?5\343\020??\213{?\274\034\214=\316\206\202>l\200B? \346:?\253\313I?\333\350*?\022;c?\025J\314>\003\216u?)N >\2665\007?\0230\177?\005DO<\310\244L=XkB>\240\201\035?\200er?\032\027N>\316\234$?\030\016k?\270\331\231>y=W?\244\024\t?+\266~?\373\025\244<\232\314\240=\215,\224>\217\225R?co\025?%\322x?\032J\337=\324\361\306>\260Hs?\332YA>\264\327\034?l\000s?\361iE>\343Z\037?s\243p?*\tg>\307\3502?\372\200W?U\\\010?f\350~?\2034\213<\363\326\210=\237d\177>8\262??1\233@?%\310>?\306iB?*\025;?\364tI?]\260+?\035-b?o\313\322>z\004x?\255y\367=-\222\331>6;z?Xp\264=\222\212\244>NS_?\210\010\344>\335\361|??3A=Z\0268>Q\376\026?6\275w?\215\321\377=(\335\337>E\367{?!\035~=DYn>\275\3366?\031\365P?\226\227\031?,\304u?\2351\035>$\020\005?v\231\177?8\301\314;\257y\313<\335k\306=|2\263>U\365h?\000\276\247>\217\222a?\336|\326>\274Dy?|\276\321=iC\274>\276\023n?8X\205>\247;E?(\0335?\373\356S?\251\354\021?\333\372z?&~\235=\247a\221>\2123P?\376~\033?\335/t?hI4>\224\213\024?\223gy?\237\235\315=\345\370\270>\017Kl?\254\204\221>\311QP?\"3\033?\263pt?\310\2320>|%\022?\324\332z?MV\241=\230\240\224>\034\367R?\017s\024?Hwy?\332\300\313=l{\267>(uk?\325&\227>\325\016U?\227\364\016?W\201|?\205\234\\=\257\272P>\266.&?f8i?\177\005\246>\335_`?\263\277\335>\333j{?\226\004\220=\361\343\205>?\301E?\t\3713?P\313U?m\375\014?\014]}?+\000\'=\0271 >\276!\007?\2154\177?\220\321J<\322NH=\036\203>>e\021\033?N\215t?6\372.>\361\023\021?bq{?3;\217=\3156\205>\236\033E?h`5?\302{S?\021\032\023?{Lz?z`\262=0\327\242>S\031^?&K\353>>S~?\327\371\324<ap\317=\203m\272>\265\027m?m\026\214>Q\204K?\321\344&?\026]h?\342\241\253>\0322d?\217F\306>\345\373r?\376\252E>\327\202\037?4|p?^1i>\244\0264?-\233U?Y~\r?\263\'}?^\r4=1#,>^3\017?\303c|?\024\315c=\277!W>R\357)?\340\205d?\0319\304>\267\nr?G\'S>\326\234\'?[{g?\010\\\261>\254\327g?\360\005\257>\301bf?>i\270>\010\373k?\214\241\223>+ R?\201\235\026?4\002x?\347\275\367=\347\305\331>\263Jz?\347\226\262= \004\243>\000:^?\332\212\352>\2223~?\346\230\344<\3417\336=B\033\306>W\350r?\372\303F>\013/ ?\322\320o?\364\223r>\361\0349?f\010M?\310G#?,\215l?\246\304\217>\004\314N?,\374\036?\265\377p?(\364a>b\0300?c\333[?[R\370>\013\305\177?\352\234k;\021\304j<\345fg=7TZ>U\307+?\271\rb?\354\213\323>\344Gx?\266\220\357=\305\212\323>~Gx?\271\234\357=\371\223\323>\260Jx?\245<\357=\\J\323>\0171x?\034?\362=\260\227\325>\233\371x?`\241\332=yJ\303>h\232q?3eY>\005>+?m\310b?{\017\317>\354\244v?\2778\020>\215\321\367>\020\275\177?C\274\205;\2110\205<-\006\203=\205Hu>\214\207:?2yJ?\326V)?HLe?\304U\277>q\252o?\016\254t>\3625:?\013\016K?\023\373\'?(\006g?ZP\264>\234\237i?r]\243>\303z^?\362\014\351>S\361}?l\234\002=p\344\374=\037\252\335>\023e{?\356\266\220=$}\206>\tSF?\360\2712?]\313W?\226\220\007?\030\033\177?\331\032d<\332\355`=\310\223T>\202r(?\021pf?\r\024\270>F\313k?\224\343\224>:/S?^\341\023?\027\323y?\312\330\300=\r\260\256>O,f?I\305\271>\327\273l?\311\207\216>\247\264M?P\247!?\300Mn?\275\310\203>k\272C?\222S8?TmN?\310\344\037?,\033p?e\203n>@\3656?x\316P?:\371\031?\200uu?-\266!>\203,\010?\300\364~?i\024\205<\370\352\202=\020\031u>\321n:?d\246J?\207\355(?\246\323e?\203\372\273>\025\355m?\003b\206>E9F?\206\3622?xqW?\270\206\010?7\335~?\227\277\220<\3260\216=\217Q\204>\351>D?\024:7?\371WP?\231#\033?\343}t?\301\332/>\215\247\021?F!{?B\340\230=\340v\215>\226\301L?\362\361#?\315\317k?\022\305\224>\257\025S?\272#\024?\230\251y?\274\307\305=\034\256\262>\242\245h?\006\310\251>X\366b?\274\363\315>57v?\367\220\026>jm\000?E\377\177?\005\r;8\342\n;9X\002;:1\340:;\306W:<798=\023\360/>\214\265\021?\213\031{?G\316\231=@A\216>\014vM?\031?\"?\267\254m?\272\033\210>\373\331G?tU/?\014\376\\?]\303\361>P5\177?\301\017J<\315\221G=\215\330=>/\246\032?J\347t?@\331)>\035\255\r?\330\023}?Y\3478=\203\2160>r\035\022?b\337z?m\312\240=\270*\224>\004\224R?`s\025?y\317x?\306\232\337=\3460\307>\275ds?g\305?>]\333\033?\371\337s?\037\3208>*u\027?\363fw?\005\362\004>\314^\347>a\241}?m@\026=t\275\020>\021\220\370>\260\310\177?R\020];mQ\\<\375ZY=G\322M>\252s$?\017=k?5\237\230>\370@V?#\301\013?U\327}?f\000\t=Ok\004>3\227\346>]z}?\255\321\037=K\225\031>X\214\002?\007\346\177?/\265\317:\354`\317;\360\020\316<\366\341\310=\273-\265>\303!j?.\000\240>#\000\\?9\177\367>\263\267\177?\215q\220;\215\316\217<JH\215=3\211\203>\262|C?\370\3258?\303\206M?\237\026\"?\357\327m?E\363\206>\367\302F?2\3031?\310NY?\203`\003?b\322\177?\261V6;\322\3245<8\3203=j\353+>T\016\017?Eu|?\303\213_=vXS>\272\271\'?\212Wg?\206C\262>\024eh?\301m\253>\263\017d?\330\035\307>G\\s?u?@>\245\'\034?7\235s?\004\226<>\331\332\031?\032\216u?\317L >\3114\007?I0\177?\334\016O<\367pL=\264<B>\260d\035?\"\200r?\030\232L>\233\270#?\002\020l?\356\023\223>\367\247Q?\036\321\027?\007#w?\251\346\010>`2\355>p\236~?\261\323\257<\231\r\254=P\231\235>8-Z?\263\360\000?w\374\177?}Lb9\374?b:\377\rb;bFa<o-^=A R>\006\002\'?\2119h?\235\211\254>\005\312d?d\214\302>\263?q?;k^>\261\033.?%\310^?BC\347>\021\234}?\003\216\027=u\362\021>\243J\372>j\337\177?\324G\002;\207\005\002<`\375\000=\365\332\371=\200_\333>w\302z?SB\244=\262\025\227>\312\000U?\350\031\017?\321o|?<\337`=\305\206T>\346j(?\256yf?z\326\267>\236\250k?\346\314\225>\244\361S?\256\345\021?\304\376z?\003\006\235=\367\373\220>\200\333O?+[\034?\271os?\363&?>*x\033?\2735t?0\3643>WT\024?\333\212y?Dn\311=y\236\265>ycj?\312K\236>\361\265Z?\214\334\376>\264\376\177?e\347\2458\010\344\2459\231\326\245:\341\240\245;\220\312\244<\357y\241=\234\276\224>E\020S?\3101\024?\274\240y?&\325\306=Y\207\263>$(i?bp\246>\323\252`?|\373\333>\273\356z?\352\362\236=\322\234\222>dBQ?\255\323\030?\202^v?\322K\024>\304\243\375>n\372\177?\216A\2629\n2\262:\006\364\261;\237\374\260<\274)\255=\216\205\236>\373\341Z?\236\342\375>\207\373\177?]\032\2179^\020\217:d\350\216;\327H\216<0\320\213=\270D\202>\223?B?\242l;?\374\322H?\221\"-?Q+`?\340\373\336>\360\275{?\324\375\205=:sz>\3521=?\263|E?*\2164?\277\327T?\322\206\017?\261;|?\211\207m=E\301_>\263\334.?\305\257]?\217\266\355>\227\261~?\023Z\246<K\371\242==\001\226>\006\035T?\303s\021?\257={?[u\225=!\215\212>\315\035J?\t+*?h7d?X%\306>\347\354r?x\202F>\363\006 ?\014\371o?Oap>\250\3637?\227\025O?\254F\036?p\255q?\326VX>,\242*?\213\231c?\025\377\311>\235\233t?\262).>\205\212\020?\222\271{?\355\204\206=\377]{>\242\251=?\342\226D?\373}6?p\232Q?\240\363\027?E\tw?\022f\n>\tc\357>\001\354~?\300j\211<\245\034\207={e|>~/>?\330\223C?\036\2458?a\335M?QD!?D\265n?\315\375\200>\321\374@?w\002>?:\353C?\037\3547?\304\"O?\031&\036?2\314q?\227\241V>\363\244)?\377\346d?\301\325\301>\202\347p?\311Ic>\315\3260?\373\272Z?\365\277\376>p\376\177?5\014\3108R\007\3109\311\363\307:\262\245\307;Ln\306<\326\237\301=\211Q\257>\177\222f?x7\267>\227Nk?\260)\230>\330\341U?\374\300\014?[u}?\267\013!=\274\266\032>\245V\003?k\323\177?\32532;\311\2671<J\312/=\347>(>?\232\014?\264\204}?\277H\035=\232>\027>\340\347\000?\270\374\177?\224\002R9\317\367Q:\302\314Q;\322 Q<wuN=c\rD>C\204\036?\360rq?J\225[>\031\177,?A\020a?m\225\331>0<z?\210R\264=\002r\244>\277A_?\033q\344>\214\010}?\277\251;=\251\0203>\225\300\023?d\347y?Pn\276=R\271\254>\030\351d?\213\310\301>\027\341p?^\244c>$\t1?\000nZ?\3449\000?\314\377\177?#tQ7wsQ8\312pQ9\024fQ:B;Q;@\220P<\225\350M=\260\216C>\0046\036?.\275q?\023wW>\305 *?\355Dd?\244\320\305>\202\306r?\254\251H>HW!?\206\241n?U\206\201>\002\204A?\313\356<?\310\374E?\nw3?k\235V?n\307\n?@/~?\037\272\346<\207:\340=\270\255\307>\346\233s?\005\251<>\331\346\031?f\204u?j\333 >\252\226\007?\250\031\177?\206\210e<PQb=\025\320U>\032+)?\252\204e?k\360\275>\366\363n?\001\227~>\001K??\376gA?\033(=?s\217E?ne4?\215\032U?o\325\016?\330\217|?\225\025Y=;\224M>\214N$?Bgk?*\204\227>&[U?`)\016?\313\335|?\305\030F= \204<>\213\317\031?:\227u?\264\306\037>\230\330\006?\206D\177?R\360:<I\3168=\266w0>\202\016\022?\324\347z?\007\307\237=\355O\223>\367\332Q?\323N\027?\367\202w?\261O\003>\r\362\344>\016$}?L\3614=\010\363,>*\275\017?%!|?\350\367s=\337oe>\212\0072?8\344X?8\211\004?\263\255\177?\206e\244;a\222\243<DN\240=\006\302\223>\246;R?\357V\026?\3063x?\205\355\361=cY\325>\350\344x?<\023\335=\3655\305>\324\177r?{\236L>=\273#?\021\rl?\306\'\223>\331\270Q?\006\246\027?\375Bw?q\n\007>\340v\352>70~?4@\346<y\307\337=\325S\307>9ts?\375\345>>pO\033?\227Xt?\217\3711>\314\n\023?\225Uz?,J\261=7\361\241>$q]?\321$\357>\337\343~?\020s\215<\321\001\213=r\222\201>\371\217A?K\326<?g+F?\362\0203?\372@W?\026\013\t?\340\270~?\376\276\242<L\203\237=\301\026\223>^\252Q?\375\312\027?\227\'w?\277\242\010>\324\316\354>\252\217~?\370!\267<\354\t\263=\020c\243>\323~^?\362\364\350>\003\355}?\354\253\003=\254\340\376=Y(\337>a\311{?\333\233\204=q\013x>\346\365;?\357\322G?Fe/?\241\346\\?bK\362>)D\177?\252M;<\200)9=\260\3120>\333D\022?\373\310z?oz\243=\312m\226>\274vT?u\207\020?\'\273{?\001T\206=\376\010{>V~=?4\352D?\371\3125?O\311R?\254\351\024?\240*y?\300\325\324=i\267\276>\017Zo?z\014y>(z<?\013\332F?!\2201?\t\236Y?\360\202\002?\305\346\177?*\303\311:\250s\311;\2336\310<\360Q\303=2\261\260>Eng?\253\260\261>\217\013h?\330\264\255>\304\213e?V\303\275>\252\334n?\370\331\177>\373\354??\005&@?\337\263??\347\227@?\312\316>?\274\\B?60;?\370BI?\365\",?\334\217a?T\215\326>\022Jy?\277\034\321=\301\302\273>h\317m?\315-\207>D\372F?\271H1?R\014Z?XM\001?8\371\177?\003\001\3319\005\352\330:\037\216\330;\277\037\327<\214y\321=\226\014\274>\257\366m?\t \206>\205\372E?\375{3?t\225V?\374\334\n?\366\'~?\254Q\352<\341\235\343=\265Q\312>^\276t?\321.,>\025;\017?\030`|?6\261d=t\354W>\262d*?7\353c?\330\001\310>\317\300s?Q\223:>\270\224\030?\035\217v?\027|\021>G\241\371>l\327\177?\0235\";K\316!<75 =\016\361\031>\215\314\002?\251\340\177?\236\225\372:\372\032\372;H2\370<=\255\360=\224d\324>k\222x?\367\314\346=Y\312\314>\224\301u?\304W\035>\223*\005?=\225\177?\222-\325;\210\312\323<\315P\316=\010\210\271>,\232l?nl\217>\214~N?\222\272\037?#Ep?\3516l>\227\2715?\204\346R?\020\236\024?\260[y?]\006\317=\364\030\272>\243\351l?KP\215>\n\237L?\275D$?ark?|9\227>\033\036U?\372\313\016?8\224|?\347\004X=c\240L>b\274#?\312\013l?h0\223>0\300Q?F\223\027?\322Pw?-<\006>\323F\351>\246\373}?\017\022\000=\334!\370=\250\021\332>=az?\245\345\257=,\312\240>\001\227\\?\357\030\364>Tr\177?\236]\r<]%\014=\317Y\007>\262\353\352>\252C~?\226\251\334<\367\267\326=\3644\300>o\032p?\301\215n>\311\3726?\366\304P?:\021\032?\374au?\241\324\">.\360\010?o\300~?\354\000\237<\333\352\233=\023\014\220>\220\nO?\352a\036?\237\223q?\210\305Y>ju+?b}b?\033\336\320>\211Rw?\233\"\006>\027!\351>\356\364}?^\271\001=1;\373=\215i\334>\204\r{?L@\233=n{\217>\274\213N?5\232\037?)ep?<uj>\232\3064?\335zT?\217|\020?\306\300{?\013\246\205=\232\332y>\333\343<?\232\021F?{I3?\217\346V? \001\n?\246o~?\354\363\306<\372\036\302=\233\270\257>M\323f?\201\227\265>l_j?\270f\236>{\312Z?\010h\376>v\375\177?\334\207\"9i\201\":\237g\";\230\000\"<\205f =\200\036\032>S\354\002?\322\335\177?\353\244\010;\373[\010<t9\007=\231\302\002>\027 \344>\001\367|?/\362?={\3636>\264C\026?-Ax?\264Z\360=n%\324>\330|x?\016W\351=\033\301\316>\335\206v?T\366\021>-P\372>\251\337\177?\274K\001;n\n\001<@\006\000=\270\013\370=\342\000\332>C\\z?\334}\260=3H\241>\201\364\\?\314\372\361>n;\177?\335\372C<\274\242A=P{8>\360>\027?\205\216w?\t\243\002>\024\361\343>\274\354|?\332sB=\23589>\345\267\027?\3035w?\230\317\007>\342\230\353>\272_~?\245\320\316<\001\230\311=\000\300\265>\360vj?Q\312\235>\333RZ?\215\206\000?\345\376\177?\265o\2158Dm\2159\177c\215:t<\215;\235\240\214<\2346\212=\277\342\200>\366\341@?\3668>?p\201C?\370\3138?\204\230M?\226\353!?\252\005n?\021\271\205>P\230E?(R4?\026:U?\202\201\016?Q\266|?\352\267O=;/E>\3146\037?\273\306p?!\030e>\026\3271?\324/Y?\327\266\003?\321\310\177?\240\212\\;\242\314[<\303\331X=\300^M>\207.$?\206\213k?\217\220\226>e\223T?\304;\020?\346\341{?\263\244\201=\214\337r>\262D9?Y\301L?\205\362#?(\317k?k\311\224>S\031S?E\032\024?\212\257y?\354\022\305=(\034\262>%Mh?\325\t\254>tvd?\366\231\304>\3177r?\371\243P>B!&?pHi?\372\233\245>\205\025`?\326~\337>t\337{?b\360\201=\273cs>\034\2129?\324DL?>\034%?L{j?Q\255\235>\227<Z?^\305\000?\237\375\177?\236(\0309\367\"\030:]\014\030;\016\262\027<\200J\026=\312\306\020>u\235\370>v\311\177?\251\367Y;\023>Y<\252\\V=\271$K>\350\327\"?\301\007m?.\203\214>\236\346K?>\374%?vti?\021z\244>\202G_?\316N\344>%\001}?\210x==\325\2644>\"\321\024?\237:y?\005\361\322=\3736\275>\274\223n?\253\345\201>\022\342A?\255-<?;jG?\234O0?3\210[?\030/\372>,\336\177?B<\007;\322\364\006<=\330\005=\226x\001>\3153\342>\031\210|?\275\367Z=\017CO>\256O%?|?j?\356:\237>\233k[?\224\322\372>2\345\177?\322[\326:\023\002\326;D\234\324<\252\027\317=\301&\272>,\361l?\376\034\215>\tqL?\302\262$?\362\364j?\352\201\232>E\303W?\312\246\007?\321\025\177?\202Xi<\272\005f=\325\032Y>5\023+?+\002c?\225\252\315>\206\032v?\2358\030>\314\227\001?\332\365\177?\275_\":\376E\";!\337!<\270E =D\000\032>0\327\002?\271\337\177?\273\t\001;\261\310\000<\027\213\377<d\222\367=\352\244\331>\325@z?\224\304\263=\004\375\243>\333\355^?\263c\346>\031p}?\202U\"=}\346\033>B*\004?\234\272\177?\254\242\212;\205\014\212<\371\270\207=\313t}>\307\270>?\351\207B?\220\326:?L\350I?\307\246*?i\223c?B%\312>\262\253t?4?->\225\357\017?1\010|?\t\004z=J\301j>\317\3574?\3156T?\367/\021?ab{?\036\n\221=\217\304\206>\302\226F?\326$2?]\266X?x\010\005?\254\232\177?\226W\312;\272\027\311<\010(\304=]^\261>\033\331g?\242\374\256>\337\\f?\350\216\270>\023\020l?z\023\223>\224\247Q?\032\322\027?L\"w?\223\361\010>^B\355>\311\240~?\261\252\256<M\361\252=\241\254\234>jvY?\317\361\002?Q\335\177?\220\247\n;w\\\n<X1\t=\372\230\004>\345\332\346>\273\207}?\301\212\034=+\217\026>%l\000?I\377\177?\243\27568\231\27369r\2636:\331\2226;\244\0206<\265\n4=\304 ,>\3011\017?\207d|?\201\235c=v\367V>\314\326)?\372\245d?Io\303>\330\253q?{mX>?\257*?\035\210c?\213k\312>1\311t?\322\220+> \322\016?`\221|?\013\266X=\320>M>f\033$?\"\241k?D\377\225>d\033T?\rx\021?X;{?{\275\225=\270\312\212>AVJ?\026\250)?\353\342d?|\357\301>\377\363p?\204\231b>\251t0?-P[?6o\373>(\353\177?\377\263\246:\270}\246;)\245\245<\267K\242=9o\225>\312\243S?\212\261\022?6\212z?<\377\252==\270\234>k\177Y?\241\330\002?\231\337\177?\372\214\001;kK\001<6F\000=\244\203\370=\272[\332>\032wz?sH\255=\023\237\236>h\365Z?>t\375>\205\371\177?*e\3179*P\317:8\374\316;\203\255\315<\210\203\310=\317\341\264>L\365i?\347&\241>\332\333\\?\365\211\362>\314J\177?H\2634<\026\2652=\021\351*>yb\016?T\304|?\"NL=X\035B>9Q\035?\375\221r?t\232K>\340\036#?,\272l?\032\223\216>\257\276M?\364\216!?Ugn?H\030\203>\264\016C?4\2759?\315\350K?\022\367%?\232zi?\231Q\244>\214*_?)\373\344>\372%}?\361x4=L\205,>st\017?\226D|?\014_k=\222\330]>\251\310-?]?_?K\177\344>\231\013}?\001\353:=\\c2>\307O\023?>,z?\2369\266=\337\002\246>\005^`?\320\312\335>\324m{?\337\250\217=\034\225\205>\362uE?\324\2344?\247\277T?\254\306\017?w\034|?q\032u=\267of>|\2242?\246\006X?\266\355\006?\373?\177?\371t?<:8==yz4>\\\253\024?\034Sy?\232\n\320=s\350\272>LZm?\336O\212>\210\345I?,\255*?\342\212c?NZ\312>\371\301t?5\372+>\'\030\017?\245p|?\272\253`=\352XT>\022P(?\206\233f?\227\375\266>\240-k?\241\006\231>V\224V?\002\340\n?\357&~?D\323\352<\r\030\344=\262\260\312>\021\346t?\036\353)>\r\271\r?\274\016}?\361&:=\'\2611>\213\333\022?\221qz?\360\361\255=\323+\237>/`[?\325\023\373>\305\347\177?L\307\301:\365}\301;vY\300<D\325\273=\033\233\252>\330\203c?\026\206\312>K\324t?\301\356*>Cf\016?\237\302|?z\270L=\021}B>\236\214\035?[[r?\037\250N>_\363$?\230\252j?Fr\234>\023IY?op\003?\260\320\177?\227\034=;\343\220<<Oe:=\331\3511>\214\000\023?\255[z?\315\217\260=\014W\241>}\377\\?\371\272\361>a4\177?v\375J<\242yH=\275\251>>\244)\033?\303xt?l%0>\215\330\021?\030\006{?\222$\234=\377<\220>Q5O?4\370\035?N\367q?\342;T>\023?(?\352\260f?Zt\266>\017\337j?)\024\233>\3476X?\327h\006?\254[\177?z\352#<\250F\"=\320\330\033>\277 \004?\327\273\177?\016-\210;.\234\207<}]\205=i\\y>/\243<?g\214F?\253;2?\216\222X?\253k\005?x\212\177?\255\243\352;\215\365\350<\236U\342=5R\311>8Rt?*V2>.G\023?n1z?C\233\265=\245\200\245>5\002`?\302\362\337>\260\374{?i\315|=\0303m>/A6?\276\001R?\210\353\026?\260\312w?\004>\376= \256\336>\312\251{?\351l\210=\330\254~>\374U??ERA?{T=?\207:E?\230\0355?\356\352S?I\367\021?\346\364z?U5\236=\231\374\221>\023\271P?8/\032?\177Iu?\310;$>\236\344\t?\203x~?9\223\302<\035\364\275=\322U\254>5\250d?Aa\303>4\245q?\331\313X>\261\345*?P?c?\305/\314>_\203u?}\352 >\000\241\007?3\027\177?e\371g<\225\260d=\345\353W>`d*?\245\353c?,\377\307>\243\277s?=\244:>y\237\030?\330\206v?\234\366\021>\222P\372>\256\337\177?\2459\001;j\370\000<\010\351\377<x\352\367=\256\347\331>\305Tz?\367b\261=\267\005\242>2\200]?\334\314\356>+\330~?\225?\223<\004\232\220=Pd\206>u;F?\271\3552?\034yW?\325q\010?\300\342~?\376\000\216<\325\212\213=\323\010\202>\260\004B?V\346;?\025\360G?\314#/?XG]?\257\030\360>\023\003\177?\253\362{<\324\022x=\214\014i>\226\0024?\314\273U?\004\'\r?\017L}?\277(+=\310\001$>6\275\t?\231\204~?$\232\274<\216B\270=\226\256\247>\355\207a?\261\275\326>\261Yy?\333B\317=5I\272>\364\003m?\021\235\214>\367\375K?\326\304%?\013\266i?K\311\242>5\017^?\241\206\353>\320\\~?\373@\320<\256\365\312=\232\330\266>\201\030k?\013\224\231>\313\005W?>\254\t?\277\211~?\370\016\272<*\325\265=F\260\245>\331#`?\304(\337>|\311{?\211\230\204=\247\005x>\352\362;?\206\330G?\271X/?5\371\\?|\337\361>m8\177?\363\366F<g\214D=\362\035;>\302\354\030?\003Kv?4l\025>\327<\377>k\377\177?\243\307\0248J\306\0249\342\300\024:F\253\024;\360T\024<\'\375\022=\313\266\r>\'4\364>\331t\177?Z\333\n<\025\256\t=X\r\005>A\207\347>#\251}?\360X\024=\201\371\016>#\006\366>{\234\177?p\275\306;\335\210\305<}\305\300=c\240\256>[\"f?\331\004\272>\247\336l?\017\233\215>\361\341L?E\244#?\257&l?\266z\222>:%Q?\260\035\031?\301$v?\216\241\027>\217-\001?s\372\177?\307\230\2619`\211\261:\321K\261;=V\260<\207\212\254=9\001\236>\360|Z?\251\017\000?\374\377\177?AIu52Iu6\370Hu7\rHu8aDu9\2615u:\371\372t;\212\020t<\313mp=\353Pb>-L0?b\215[?p\021\372>\320\334\177?c\254\014;\026_\014<5+\013=\266p\006>T\224\351>Q\t~?\336i\371<\345\321\361=ID\325>\336\335x?\346\347\335=\237\334\305>\363\313r?\215[H>\302\'!?\347\322n?\2340\200>\2220@?\267\236??\377\301@?\266y>?H\003C?!\3259?\230\275K?r]&?\201\000i?\263t\247>\360_a?D\261\327>M\247y?z\r\306=^\346\262>\222\307h?\355\351\250>\375_b?\362\222\321>\241\224w?\306G\002>\020i\343>\242\316|?\370\312I=\363\331?>6\350\033?\310\324s?=r9>\251\334\027?n\032w?\265f\t>\336\355\355>r\271~?\303v\242<\356=\237=/\334\222>{xQ?&J\030?\r\310v?u/\016>\222\342\364>u\204\177?i\236\366;?\303\364<\031s\355=O\353\321>\217\264w??j\000>I\237\340>o\'|?\216qr=\340\027d>=I1?\206\013Z?\225O\001? \371\177?M\355\3339\257\325\333:Kw\333;\001\377\331<\3561\324=\2275\276>\226\027o?\226\250|>\200Q>?\260QC?\22009?\\\345L?\021\234#?\321/l?\365<\222>T\360P?\250\243\031?\202\272u?\326\277\035>\237r\005?J\211\177?5\376\354;jG\353<\210\205\344=\304\005\313>c\tu?\262\346\'>\377^\014?\323\233}?/\235\027=\203\000\022>\273^\372>N\340\177?\014s\375:\225\365\374;\254\001\373<\312P\363={h\326>\036>y?\033\207\322=\335\342\274>\274gn?\201\025\203>\377\013C?\341\3029?\217\336K?\\\017&?\277]i?\267\017\245>+\262_?A\322\341>?q|?5\206`=\2037T>\204<(?\"\264f?\261_\266>.\323j?{c\233>XuX?w\274\005?b|\177?\336Y\003<JL\002=aN\374=\0249\335>\217F{?\354c\224=v\243\211>\217FI?\274\032,?3\233a?-H\326>\2323y?\270\305\323=\307\337\275>_\353n?&\016\177>\332\206??g\361@?\243\031>?J\276C?`K8?\300{N?m\301\037?V>p?`\226l>\372\3545?\025\220R?\205}\025?\252\310x?`h\340=\206\321\307>\242\253s?\226\305;>\005W\031?\216\367u?\224<\032>X\001\003?\340\333\177?\275l\020;B\033\020<\307\326\016=\230\333\t>\315\230\356>\"\321~?\005\274\226<\376\365\223=pE\211>{\357H?\252\341,?\232\206`?,\326\334>\211+{?X\244\227=\356i\214>\324\317K?D2&?(4i?c!\246>us`?\241I\335>\rK{?w\331\223=\010-\211>\326\330H?A\025-?\026>`?\002\213\336>\241\240{?\014\210\211=\257K\200>\231K@?uh??\257-A?\024\237=?6\253D?dR6?\216\344Q?H6\027?\316\224w? E\002>\035e\343>\301\315|?\002\002J=\217\013@>:\007\034?\255\271s?\200\372:>C\326\030?\201\\v?}i\024>\350\315\375>.\373\177?\232B\2329\3736\232:\210\010\232;+O\231<\256p\226=\246c\213>\357\341J?jb(?d\204f?\334\221\267>\335\201k?~\321\226>\321\310T?f\256\017?e(|?\3675r=V\343c>\031,1?[8Z?M\321\000?T\375\177?$\035+9\376\025+:h\371*;8\207*<\330\300(=\376\314!>\037<\010?\300\360~?a\020\207<O\326\204=1qx>Q*<?\215pG?\202A0?y\235[?V\265\371>j\330\177?r>\036;\241\334\035<@W\034=\231_\026>\216J\000?\251\377\177?\322\262\2557\347\261\25588\256\2559}\237\255:\235d\255;\272y\254<\034\330\250=\221\354\232>\251\027X?\350\276\006?\373I\177?r\2035<\245\2003=\323\242+>\027\336\016?\323\213|?\310\017Z=\332sN>0\324$?\212\316j?w\202\233>\260\215X?#y\005?-\210\177?M5\357;Dv\355<\"\224\346=R\236\314>\357\257u?e[\036>)\336\005?Fv\177?{o\t<XH\010=\211\277\003>H\230\345>\305F}? t,=\\1%>1\213\n?RC~?\333\324\334<\347\340\326=NU\300>\213*p?\373\253m>\002\2026?\224\223Q?\036\005\030?)\374v?\032)\013>_\177\360>\255\017\177?\336qo<\007\362k=\243Z^>N\022.?\252\325^?$\363\346>|\214}?Y`\033=|{\025>{R\377>\212\377\177?b9\3537\2627\3538\3610\3539\357\025\353:\376\251\352;\307\373\350<}[\342=\310V\311>,Tt?\30192>\2524\023?\220<z?\021G\264=\221h\244>\375:_?T\231\344>/\021}?\330\2159=\363%1>\223\200\022?\253\246z?\020\227\247=B\340\231>\261BW?j\006\t?2\272~?\352\027\242<\327\342\236=>\217\222>\3116Q?$\361\030?\231Gv?\264\236\025>X\204\377>\304\377\177?\017\352n70\351n8\264\345n9\305\327n:\017\240n;\241\301m<aNj=+\347\\>\242?-?D\002`?e\362\337>\231\374{?\016\323|=\0138m>\327C6?>\375Q?\021\367\026?j\302w?\2555\377=.h\337>\261\331{?\312\242\202=&\233t>\036-:?\032\036K?f\325\'?$5g?\217!\263>,\353h?\243\000\250>p\300a?\325d\325>\270\350x?\004\240\334=\226\333\304>2Vr?\346\361N>Y\037%?\262wj?H\305\235>\376NZ?u\221\000?\265\376\177?\032J\2458\304F\2459m9\245:\034\004\245;_/\244<\371\344\240=\031A\224>\334\246R?\270B\025?\362\357x?\226\305\333=!0\304>\207\006r?\000cS>\352\277\'?\333Og?&u\262>.\203h?=\251\252>E\215c?uK\312>\277\273t?\020U,>vT\017?\371S|?\267\242g=F\211Z>\301\345+?\014\344a?\037\213\324>\207\237x?\301A\345=\352\227\313>\215Eu?\245u$>\351\013\n?El~?\"\237\310<Z\265\303=\241\001\261>\001\240g?\330n\260>\027Eg?\245\272\262>4\255h?\201\226\251>\364\324b?#\302\316>C\207v?s\360\021>\304G\372>I\337\177?\367\312\002;$\210\002<\352}\001=\317\313\372=y\025\334>\010\366z?z\022\236= \337\221>\273\237P?\035o\032?\367\024u?B=\'>\003\355\013?\031\307}?\243\375\014==#\010>\277\023\354>\024s~?#B\305<,\202\300=\273i\256>\220\377e?\310\342\272>=Wm?\305d\212>\276\370I?\310\200*?\367\305c?P\352\310>\255%t?`\3354>]\353\024?\205)y??\367\324=\361\321\276>\224go?8Px>V\031<?t\220G?9\372/?\253\010\\?(N\367>g\264\177?g\005\227;8S\226<\013\221\223=\016\357\210>>\237H?(\230-?\236\204_?p\342\342>J\260|?\276/Q=\316\200F>\356\005 ?\021\372o?\rSp>\030\3547?\320\"O?\374%\036?M\314q?\023\240V>\022\244)?$\350d?\212\316\301>\001\344p?>{c>K\3620?\372\220Z?\363\255\377>\346\377\177?Rb\3226\374a\3227\242`\3228;[\3229\240E\322:E\357\321;\364\226\320<FG\313=\003\032\267>\323=k?\026\232\230>\325<V?J\314\013?;\323}?\241\002\n=4\\\005>\360\373\347>=\277}?\352\353\016=A\357\t>\210\265\356>\006\325~?6\316\224<=\032\222=\377\255\207>\005sG?\377;0?\311\245[?\273\205\371>\n\326\177?\365\272\';\017M\'<\271\227%=\352\345\036>\303=\006?0d\177?^q\033<\324\367\031=1.\024>\251y\375>\240\371\177?\n\366\3139\272\341\313:\212\220\313;\315L\312<\342M\305=\304K\262>\025jh?\032M\253>\034\372c?\321\244\307>\373\227s?\243\341<>\230\n\032?cgu?Z\205\">\027\272\010?]\317~?0\234\227<\343\315\224=\014\376\211>3\232I?\307Z+?\203\241b?\214\377\317>\324\377v?\210\362\n>\337/\360>\363\005\177?\322\030y<MOu=?\236f>\020\2562?.\336W?\361\\\007?$\'\177?\354#X<\371IU=\266.J>FC\"??\250m?`:\210>\255\366G?\372\024/?*]]?j\231\357>\004\363~?\236\360\205<\377\277\203={\214v>\350/;?\210CI?\253!,?\243\221a?\177\202\326>\217Fy?+\207\321=l\027\274>o\374m?\205\370\205>\336\324E?=\3163?\266\020V?\022C\014?\223\246}?\010\372\024=\347\216\017>T\335\366>\213\254\177?5\263\246;\033\332\245<\204~\242=\370\231\225>Y\307S?\205T\022?\006\300z?N\215\244=\243T\227>R4U?\335\220\016?X\257|?\303jQ=\313\265F>]& ?\214\331o?\375\031r>\264\3348?\314zM?\2313\"?\003\271m?k\307\207>\350\212G?\237\0060?\021\366[?\036\271\367>~\273\177?\325\336\210;zL\210<\360\007\206=\313\204z>\343:=?\211kE?k\2634?{\232T?\010)\020?b\353{?\362~\200=\030\336p>\31458?\255\241N?Rd\037?3\232p?b\213g>,03?\025\017W?\374\222\t?X\221~?\233M\266<\007?\262=\220\273\242>5\005^?j\301\353>)f~?T\243\313<p\223\306=cR\263>u\010i?|@\247>\306;a?1\215\330>\321\353y?W\347\275=jK\254>h\241d?\n\214\303>p\271q?I\254W>\223?*?P\034d?\366\316\306> 9s?\007:B>\007c\035?\250\201r?E\204L>\200\253#?\240\036l?+\261\222>\306SQ?\204\247\030?\247\200v?^R\022>\264\323\372>=\345\177?\213\376\325:\032\245\325;\201@\324<\252\300\316=V\341\271>7\313l?@\037\216>\321WM?7\210\"?#^m?\2335\212>`\315I?\352\344*?Z@c?P)\314>\302\200u?\342\020!>S\273\007?\342\020\177?\r?n<(\310j=\377R]>\345|-?j\253_?\247\372\341>\277z|?\t7^=\321(R>\022\007\'?b3h?\263\261\254>\"\344d?\322\347\301>G\360p?\002\316b>\352\2210?\325#[?\014l\374>3\363\177?\\\311L:h\240L;\327\374K<\254rI=W\212?>i\266\033?\017\000t? \3776>0K\026?\367;x?V\367\360=@\235\324>\255\245x?J\210\344=\350\007\313>F\nu?\273\331\'>HV\014?1\237}?\335\311\026=\312<\021>\237F\371>\311\322\177?A\2734;\251;4<\031@2=F~*>I\033\016?\004\344|?-\224D=\372$;>7\361\030?\212Gv?\223\237\025>\224\205\377>\305\377\177?\016.j78-j8\337)j9|\034j:\366\346i;@\021i<~\300e=_\335X>\313\357*?\3031c?\314\203\314>G\245u?(\370\036>XJ\006?\271a\177?\352\344\035<`_\034=\032g\026>\333O\000?\234\377\177?\305E\3077\217D\3078\266?\3079T,\307:\331\336\306;\336\251\305<\347\344\300=\342\271\256>\2162f?h\235\271>\357\245l?\230\034\217>;8N?\300f ?\233\230o?\347\244u>\244\267:?\030!J?i#*?sAd?j\346\305>e\320r?\300\033H>\350\000!?\021\373n?v4~>m\031??\350\311A?d_<?\226\014G?\021 1?\326JZ?/\235\000?~\376\177?\356\003\3018b\377\30092\355\300:\200\244\300;\221\202\277<q\010\273=\306\363\251>\310\023c?\214=\315>w\357u?\326\263\032>\237T\003?\241\323\177?W\\1;v\3410<\233\370.=,\177\'>b\031\014?q\266}?\325\024\021=K\361\013>\241\242\361>\2501\177?\032\262M<\377\034K=\217\nA>T\246\034?\306,s?\340\353B>J\321\035?\251\033r?\2555R>\246\016\'?\"*h?\353\355\254>E\013e?\326\360\300>\211wp?\nsi>c:4?\352`U?\001\032\016?\225\344|?\333pD=\013\005;>\363\334\030?OWv?]\266\024>\013;\376>\337\374\177?LZH9\177PH:P)H;\317\214G<\236\036E=\034\242;>\215@\031?Q\tv?\2276\031>\004J\002?\n\353\177?\337\240\247:\376i\247;\007\217\246<\030,\243=\362+\226>]@T?\313\026\021?\334o{?/j\217=5_\205>ZBE?\252\0145?\005\007T?\223\255\021?\363\035{?\241F\231=\361\315\215>a\017M?\3746#?\255\237l?\020G\217>\251]N?,\013 ?\322\364o?{\234p>\t\0238?\252\336N?;\316\036?\020,q?(\201_>\227\270.?\223\344]?\n\201\354>\350\203~?\230\361\274<\372\225\270=\374\362\247>\r\267a?,\236\325>\301\373x?j`\332=_\027\303>!\202q?\311\275Z>\327\003,?\270\272a?\303\207\325>T\364x?\021A\333=\004\310\303>\266\325q?3\032V>?V)?\013Me?\360P\277>\000\250o?\026\316t>\266G:?\266\355J?\330F(?#\247f?\026\263\266>\013\003k?\244#\232>bxW?\324s\010?9\342~?\315C\216<S\313\213=\205@\202>s;B?,u;? \303H?\245F-?Z\370_?\340-\340>p\013|?\306:y=\220\020j>\376\2174?\300\324T?\305\216\017?\3257|?^wn=<\225`>\334S/?g\000]?\247\265\361>\3113\177?_\224K<\315\014I={.?>\342|\033?\2561t?\021/4>\203z\024?\204ry?\210Q\314=G\357\267>\227\266k?\336n\225>}\243S?Q\262\022?\301\211z?3\r\253=\337\303\234>p\210Y?e\277\002?\315\341\177?\ty\361:&\007\361;JA\357<rD\350=\356\354\315>\2134v?K\270\026>,\211\000?\332\376\177?\311\376\2228&\374\2229\231\361\222:m\307\222;\035\037\222<\341\203\217=Nu\205>\203WE?\326\3364?\335RT?\021\346\020?\274\211{?]K\214=\014\257\202>\330\247B?\032\224:?:bJ?B\214)?\030\007e?9\013\301>\205\204p?k\274h>\350\3263?\255\002V?\316h\014?\007\230}?\267\213\030=T\335\022>\017\232\373>\250\354\177?n\265\232:\256\206\232;\"\314\231<\364\350\226=:\312\213>9?K?\223\207\'?\246\225g?\352\261\260>\266ng?\313\255\261>\315\th?H\300\255>\036\223e?\254\224\275>|\304n?v\224\200> \224@?i\326>?\307MB?7O;?\220\tI?/\246,?\320\331`?T\337\332>\212\235z?\356\256\250=,\312\232>|\374W?\254\t\007?\3419\177?\310\205E<,$C=*\3309>\241\035\030?\272\351v?9;\014>\010\016\362>\210=\177?(\344A<\301\230?=l\2426>\226\017\026?Eex?\351\034\354=?\344\320>\314Tw?\344\000\006>P\357\350>\377\353}?\310\353\003=+X\377=\023\202\337>G\340{?\361\326\201=L7s>\313r9?\271nL?I\270$?\234\356j?F\254\232>\324\344W?\255J\007?S+\177?c\374S<;>Q=\320\215F>\345\r ?\030\362o?\246\302p>C\'8?2\273N?\222%\037?\204\327p?n+d>\025T1?\321\372Y?\223~\001?\021\367\177?\352\351\016:\370\325\016;F\206\016<\341H\r=Ki\010>\221z\354>\354\202~?an\275<\000\r\271=\206T\250>\000\372a?\274\004\324>\241qx?\336\250\352=\271\305\317>\030\352v?\2715\014>\013\006\362>\251<\177?\346\301B<<q@=\233f7>\245\215\026?e\rx?\007n\366=\023\307\330>\233\375y?\010\311\273=\036\221\252>.}c?\211\257\312>\225\345t?-\362)>\304\275\r?\266\014}?u\245:=\'$2>\224&\023?\001Ez?\031E\263=\343\223\243>\035\242^?_$\350>\315\306}?s\020\r=\3014\010>v-\354>\022w~?BI\303<|\241\276=\371\342\254>*\004e?\265\035\301>\234\215p?\227<h>\037\2213?nsV?\3718\013?8\010~?z\364\371<\016T\362=\256\247\325>\346\376x?D\001\332=\177\314\302>j^q?7\270\\>\356$-?\374\'`?\351\017\337>\031\303{?*^\205=\226]y>\312\243<?B\213F?0>2?\231\216X?\237v\005?\233\210\177?\374Y\356;%\236\354<\205\310\345=z\000\314>1pu?\032\004\">\316a\010?\367\346~?*\352\213<i\206\211=DJ\200>/J@?Lk??\016(A?\213\252=? \225D?\301\2016?\003\224Q?\002\004\030?\376\374v?\273\034\013>[m\360>}\r\177?\227\235q<o\rn=\2377`>G\037/?\001N]?\333\361\357>;\376~?\350`\200<\300\273|=\235#m>\34086?\324\017R?l\307\026?x\344w?\2209\373=Sh\334>-\r{?\312J\233=U\204\217>\217\223N?\377\206\037?\034xp?\362ji>\37454?\031hU?\323\006\016?\003\355|?mbB=\327(9>\324\255\027?8=w?|`\007>\204\365\352>GE~?\226\335\333<\357\366\325=T\234\277>\003\316o?8\273r>\23019?\202\343L?\202\240#?\337*l?e^\222>\374\014Q?![\031?M\364u?\212l\032>\331\"\003?\251\330\177?\035E\035;\177\344\034<\342c\033=\300~\025>\033W\377>\221\377\177?7\331\3367\263\327\3368\244\321\3369f\271\336:\203X\336;G\326\334<?\342\326=^V\300>\022+p?\221\244m>\t~6?X\232Q?\335\363\027?\030\tw?\272h\n>\353f\357>\202\354~?\333*\211<\344\336\206=B\372{>\025\371=?f\375C?\210\3057?\035fO?E\177\035?\254gr?\014\370M>?\212$?N#k?\276K\231>\334\313V?\227I\n?\254X~?\327K\322<\323\345\314=\360e\270>/\371k?\004\256\223>\271*R?h\202\026?N\025x?\226\200\365=\252\022\330>\324\305y?\236l\302=\205\367\257>\263\372f?!\232\264>\'\313i?\306=\242>O\251]?g\334\355>\372\266~?\306\257\243<|j\240=\323\331\223>\304OR?6#\026?\267Wx?\276\264\355=\271\035\322>\253\306w?Z\266\376=\216\010\337>4\301{?\274\230\205=t\303y>\001\330<?%(F?\025\0303?\2255W?&*\t?\n\260~?\307\036\247<\375\265\243=\325\237\226>\371\237T?\203\032\020?\263\362{?_8\177=IQo>\021c7?!\021P?)\325\033?`\345s?\346\2018>\'C\027?u\213w?\316\320\002>?5\344>\233\373|?\267\322>=\340\3565>\366\233\025?+\264x?(\323\342=\370\263\311>\326{t?\243\370/>+\273\021?n\026{?\023.\232=\244\222\216>F\276M?\362\217!?Kfn?t\037\203>\263\025C?\211\2569?@\003L?H\270%?\332\304i?lg\242>\312\307]?\335)\355>0\235~?\036r\260<5\245\254=h\027\236>\351\215Z?J\277\377>\360\377\177?<\334\2026\032\334\2027\225\333\2028}\331\2029!\321\202:\265\257\202;G*\202<\317\030\200=j+p>\016\3277?\215GO?\r\313\035?x!r?\313\342Q>\305\335&?\246eh?\tj\253>>\rd?9-\307>\033cs?\363\334?>\027\352\033?$\323s?\363\2119>\310\353\027?$\017w?\276\016\n>\212\343\356>5\333~?\001\276\221<:&\217=\303$\205>N\nE?\306\2055?Y=S?\247\274\023?\321\351y?Z$\276=\033}\254>\335\301d?\307\277\302>UXq?k\016]>\362U-?\261\342_?\301\257\340>x+|?1wq=\027;c>\241\3160?t\307Z?9y\376>\253\375\177?\216\037\0259 \032\025:k\004\025;\254\255\024<GT\023=\251\007\016>\022\251\364>j\177\177?^U\000<\021\250\376<\201\275\366=i\003\331>\n\020z?\257\226\271=K\305\250>\014Gb?<,\322>\336\313w?\255\032\376=\217\223\336>\335\242{?\006C\211=\354\017\200>\353\017@?%\340??\245?@?v\200??\026\376@?\343\377=?7\360C?\207\3417?F5O?O\370\035?5\367q?E=T>\343?(?\345\257f?\345z\266>\321\342j?\r\373\232>\030#X?j\237\006?\217P\177?\243\370.<G\032-=\177\311%>(\362\n?\277 ~?\267\337\355<w\367\346=D\353\314>\273\316u?\036\226\034>K\244\004?\321\251\177?\030$\254;\227<\253<G\250\247=\247\356\231>,NW?\031\347\010?\367\302~?\377\277\235<V\266\232=Z\006\217>\233$N?\261\226 ?\355go?kKx>\336\026<?\030\225G?\330\357/?8\030\\?\251\364\366>3\256\177?\371d\243;e\224\242<dZ\237=7\364\222>\366\214Q?\372\025\030?}\357v?\210\345\013>\210\221\361>\273/\177?N\233O<\334\371L=\351\267B>\031\261\035?\2309r?\201\212P>*\022&?iZi?\255%\245>\304\301_?\362t\341>\035[|?\327\346e=k\377X>j\003+?j\027c?\022\'\315>\213\346u?R7\033>O\260\003?\223\311\177?[\206Y;\206\315X<\030\357U=\234\302J>\260\234\"?\006Hm?\267\314\212>\025XJ?\326\243)?r\350d?\236\314\301>\022\343p?g\210c>\233\3710?\312\205Z?C\355\377>\377\377\177?\320\221\2574\314\221\2575\275\221\2576\201\221\2577\220\220\2578\315\214\2579\300}\257:\232A\257;\244Q\256<\014\234\252=\230e\234>6?Y?\362\213\003?\257\315\177?l\033I;p}H<_\tF=7v<>\301\306\031?P\236u?\225^\037>\355\220\006?\213S\177?s\000,<12*=\306\037#>g#\t?\367\261~?g*\246<\217\313\242=\306\332\225>\'\375S?z\307\021?\231\017{?3\000\233=\013E\217>\341[N?\207\017 ?u\360o?\207\331p>b38?\354\245N?\343Y\037?n\244p?b\373f>7\3412?\001\215W?o;\010?\355\360~?\363\371\206<\236\300\204=oKx>\340\026<?\024\225G?\340\357/?,\030\\?\357\364\366>8\256\177?\037[\243;\245\212\242<\007Q\237=O\354\222>:\206Q?%\'\030?\215\342v?\340\245\014>\324\250\362>\010N\177?{|1<E\220/=\334\t(>\240v\014?\250\222}?\361\334\031=S\025\024>RV\375>\351\370\177?\325\337\3429\263\306\342:Bb\342;\336\321\340<_\246\332=fN\303>E\234q?\301JY>\314.+?\373\334b?\211\220\316>$tv?\245\013\023>\032\334\373>\334\356\177?\223\030\211:\336\363\210;Va\210<\031\034\206=\327\247z>\310L=?HIE?\252\3754?\337\037T?Gl\021?\303A{?\272\367\224=\316!\212>%\273I?\360\016+?\353\007c?\002\207\315>\204\014v?a\007\031>\354(\002?W\355\177?\257<\225:/\021\225;\225c\224<{\263\221=\341U\207>\022 G?\311\3640?*\215Z?\203\303\377>\362\377\177?\013\257d6\330\256d7\014\256d8\332\252d9\026\236d:\014kd;=\237c<\256u`=\314(T>\3463(?\367\276f?\'\032\266>\034\253j?\326n\234>gFY?\343w\003?\342\317\177?cS@;\346\302?<T\204==\212\2774>\020\330\024?\0356y?\250y\323=o\243\275>$\314n?r_\200>O_@?\325@??\034|A?\367\376<?\371\335E?]\2723?\3350V?\212\354\013?F\307}?\215\362\014=\352\030\010>\226\004\354>\267p~?\354l\306<\207\236\301=zP\257>\324\221f?\302;\267>\007Qk?U\031\230>\222\324U?\231\344\014?\026g}?\277\212$=\236\356\035>\373\222\005?\267\203\177?\304\030\370;\3447\366<i\321\356=\'\370\322>>\024x?\225\240\365=\375*\330>h\315y?\345\205\301=\200<\257>;\205f?\177\214\267>\323~k?\345\345\226>\223\331T?\371\201\017?\013>|?\213\365l=1@_>\367\223.?\366\031^?dG\353>\243R~?\253F\325<6\271\317=\224\247\272>77m?w?\213>\363\300J?\210\257(?\265\"f?\233\002\272>m\335l?g\243\215>f\351L?[\222#?\236:l?\353\363\221>\236\261P?\tB\032?\024:u?\303\035%>\353}\n?\257G~?\336\255\332<y\327\324=\307\270\276>\301Zo?\306\002y>-u<?u\343F?G{1?N\276Y?\201(\002?^\355\177?\364\002\225:\226\327\224;\202*\224<y|\221=\261&\207>\215\363F?\234W1?a\365Y?\334\215\001?W\366\177?X\217\032:\004x\032;\317\032\032<\276\247\030=D\367\022>\014\277\373>\350\355\177?\247\266\220:\300\215\220;\200\352\217<Bc\215=r\240\203>K\223C?H\2468?R\333M?TI!?\016\260n?\332!\201>\222 A?\307\271=?\302wD?\244\3006?\247(Q?\000\025\031?\221+v?\357<\027>\263\346\000?\300\374\177?\307\343O99\331O:\t\257O;\215\006O<\336hL=j5B>*`\035?J\204r?\240^L>\344\224#?\3157l?\372\006\222>\376\301P?\270\030\032?\341[u?5.#>=-\t?\'\257~?\366\216\247<\227!\244=5\372\226>@\352T?\300U\017?[S|?\035\311g=T\253Z>E\371+?A\311a?\364.\325>\275\326x?K\277\336=@\205\306>\034\030s?K\025D>$\211\036?Hnq?J\327[>\306\244,?\307\333`?p\323\332>\027\232z?\263\030\251=\177\"\233>4BX?\255I\006?\333a\177?\207\303\035<\242>\034=\333H\026>~:\000?\313\377\177?\'\324U7u\323U8\252\320U9\201\305U:\340\230U;\251\346T<m\"R=\245ZG>\"\213 ?\257so?\231\247w>c\302;?K3H?n\214.?\355$^?\342\006\353>!H~?\236u\332<:\242\324=\227\216\276>6Eo?\201.z>\312\016=?\314\277E?2\3743?/\306U?/\013\r?sW}?\362^(=&s!>\243\376\007?W\000\177?\222\251~<>\264z=\366[k>xC5?\372\253S?\"\234\022?\260\226z?\367\200\251=\206y\233>\252\206X?\220\214\005?\325\204\177?\356\337\365;\241\007\364<\255\302\354=\275c\321>x\203w?)H\003>\333\346\344>\260!}?\202\2055=!z->\216\026\020?\261\364{?\n\275~=O\345n>\204)7?\212tP?\322\333\032?r\272t?\th,>\013a\017?\360M|?\n\032i=\003\326[>\014\244,?\313\334`?K\315\332>N\230z?nO\251=/P\233>,fX?d\346\005?\303t\177?:\361\n<\226\303\t=g!\005>\362\244\347>\315\256}?\"\365\022=Z\257\r>c)\364>\333s\177?\245\330\013<\021\247\n=\211\365\005>\214\336\350>\371\350}?G\252\004=F^\000>W\215\340>\010#|?\347\202s=\313\010e>\234\3161?\006=Y?\016\222\003?\001\315\177?\247\321K;a/K<P\252H=\250\325>>2E\033?Sat?zz1>\324\267\022?\211\206z?\336o\253=\t\026\235>\t\310Y?5\r\002?*\357\177?;\247\206:\321\203\206;t\366\205<\244\305\203=Q\226v>\0025;?\030:I?D7,?\323sa?+8\327>\361\200y?Z\233\312=)\220\266>\007\357j?{\251\232>\236\342W?\300P\007?\360)\177?\334\\U<\215\225R=\362\301G>,\312 ?U3o?\031\'{>\255\215=?\265\314D?q\n6?_^R?\240\375\025?\242qx?\300\250\352=\242\305\317>\017\352v?=6\014>\313\006\362>\276<\177?\020\255B<\345\\@=.T7>\320\201\026?\271\025x?\tt\365=\037\t\330>\331\302y?F\307\302=\361@\260>\206(g?\353r\263>\356\033i?\237\300\246>\337\342`?\200\250\332>\227\215z?\271\227\252=\376a\234>i<Y?\304\223\003?\320\314\177?8\225L;\272\361K<\325gI=\222\200?>K\260\033?[\005t?X\2626>\323\031\026?4^x?\214\361\354=\304\207\321>\222\220w?i\204\002>s\303\343>\263\342|?\207\346D=jo;>m \031?\233\"v?K\301\027>\345C\001?\231\371\177?x\340\3149\371\313\314:\016z\314;h3\313<\024)\306=\242\374\262>\371\324h?\"\222\250>$$b?y\002\323>\337\027x?\2433\365=\'\330\327>\206\263y?\256\231\304=8\272\261>g\021h?\327\216\255>Pse?z^\276>\224,o?\377\204{>{\275=?\235pD?\354\3176?}\016Q?OW\031?S\367u?\362?\032>\262\003\003?\247\333\177?\034O\021;\242\374\020<-\264\017=\200\251\n>i\305\357>\240\370~?\242(\203<\r\017\201=\020\332q>\375\2728?\243\266M?~\242!?\321Rn?\314\245\203>}\230C?N\2338?\277\356M?\013\032!?\032\341n?z\234\177>3\316??sc@?\2008??\222\214A?D\335<?$\036F?\003.3?\213\022W?\221\211\t?\'\224~?\262\351\264<\346\352\260=k\242\241>%7]?\034w\360>\254\016\177?upp<)\351l=>5_>\313\215.?\363\"^?\210\022\353>\tJ~?\345\204\331<Q\276\323=\350\331\275>V\350n?68\177>\364\233??{\307@?\233n>?\364\030C?\267\2479?\212\017L?\024\233%?9\347i?\026\204\241>\304 ]?l\371\360>:\036\177?o\376`<v\347]=\337\341Q>9\335&?Ofh?\267e\253>c\nd?\021?\307>\006ks?\275j?>\240\242\033?+\021t?\370\0066>~\253\025?\252\251x?\005\020\344=t\252\312>w\343t?\033\021*>m\322\r?\320\003}?\273\321<=o\0354>\025o\024?\322yy?\266s\313=\237=\267>\026Rk?<\022\230>\317\316U?\r\364\014?\330`}?\001\022&=LV\037>8\213\006?\267T\177?\273\326*<\264\016)=m\024\">\366l\010?\t\344~?\007^\215<\202\355\212=\344\200\201>\241~A?\316\371<?\317\347E?\342\2443?\220SV?\000\217\013?\230\351}?\005\203\004=\2179\000>PV\340>w\025|?\303\314v=\341\355g>\026f3?\251\270V?\244}\n?\306G~?t\242\332<\254\314\324=8\260\276>cVo?\212?y>`\224<?u\250F?\305\3751?|\363X?\314^\004?\232\263\177?@\236\230;G\350\227<(\027\225=\251<\212>\336\323I?\361\325*?iTc?\330\254\313>\035Nu?\034\370#>\243\266\t?\231\206~?`\235\273<eQ\267=\266\350\246>\315\376`?H\377\331>\311[z?d\214\260=:T\241>g\375\\?\031\307\361>\2725\177?\023\246I<\272*G=\203{=>\234k\032?\334\027u?\351\022\'>}\320\013?\256\321}?)d\n=\'\267\005>e\202\350>1\330}?\204\312\010=\0079\004>\240L\346>zk}?\214w#=u\361\034>\252\343\004?a\240\177?\343\366\276;\374\331\275<\237s\271=\225\250\250>w3b?q\244\322>\257\366w?p\027\371=\234\313\332>\321\227z?g^\251=\256\\\233>\000pX?<\313\005?\271y\177?I\000\006<\267\347\004=\273\227\000>l\343\340>\0218|?\331hn=g\210`>\250L/?\016\013]?\274w\361>\320,\177?\277\201R<Z\315O=~BE>\244B\037?+\273p?\025\273e>\00612?A\243X?l=\005?,\222\177?\\I\333;\256\321\331<\005\007\324=\221\023\276>\025\006o?\226\233}>]\314>?\200aB?S&;?@UI?\025\371+?\202\311a?g-\325>9\326x?\363\316\336=\201\221\306>\234\035s?,\306C>LX\036?\277\234q?\370CY>\345*+?@\342b?\372o\316>\215gv?\005\306\023>\210\345\374>^\366\177?\356\022\032:\277\373\031; \237\031<b.\030=\360\206\022>\310\036\373>0\350\177?mm\276:\231&\276;\037\014\275<H\257\270=\272\007\250>O\305a?\016G\325>\313\336x?\376\313\335=\303\306\305>\004\302r?\032\352H>r~!?\240xn?\354\240\202>\004\232B?\346\260:?v-J?\277\006*?%gd?\017\372\304>Cdr?\322(N>d\247$?\372\001k?\313*\232>\023~W?Ed\010?R\346~?/<\214<\240\325\211=\325\216\200>\206\216@?\270\341>?\2207B?6};?/\264H?\233h-?<\310_?9N\341>\332Q|?\251&h=H\376Z>\304(,?\331\207a?/\276\326>\332Yy?\013>\317=_E\272>\335\001m?O\253\214>\315\nL?W\246%?\373\331i?\267\333\241>Ua]?\030\201\357>\344\357~?]}\207<\262?\205=\224(y>\226\210<?\303\276F?}\3141?S@Y?\332\210\003?\007\316\177?.\275G;V!G<\303\265D=VC;>z\004\031?\2018v?\316}\026>\343_\000?p\377\177?\357\250\0178\255\247\0179\243\242\017:}\216\017;\375=\017<c\375\r=R\021\t>\336p\355>\217\247~?\253P\253<\204\273\247=\276\376\231>\377ZW?\031\304\010?\241\314~?\377\366\230<\315\033\226=:\033\213>\340\237J?\272\374(?2\300e?Dv\274>\236.n?A\237\204>\343\211D?\324\2316?\371jQ?\206l\030?\343\255v?\310\263\017>e\022\367>J\260\177?\335:\237;\311t\236<&d\233=\330\231\217>u\246N?\223X\037?\267\245p?J\351f>I\3272?\312\234W?;\020\010?\355\373~?L\205\201<\036\362~=\311\023o>LB7?\311IP?6G\033?\234_t?v\2231>&\310\022?\370|z?\306\224\254=\276\t\236>u\203Z?q\372\377>\000\000\200?oZ\3672oZ\3673mZ\3674eZ\3675GZ\3676\320Y\3677\362W\3678zP\3679\2352\367:C\273\366;\252\337\364<\321\215\355=\325\377\321>\360\273w?\216\367\377=\253\371\337>k\376{?3b|=\033\325l>\264\0166?,WR?(\020\026?\340dx?\300(\354=[\355\320>&Xw?\347\316\005>|\245\350>\234\336}?u6\007=\315\277\002>\355\033\344>\031\366|?\335*@=\330&7>\264d\026?&*x?\274\016\363=\0356\326>\266-y?9x\324=Nm\276>-4o?_\033{>\263\207=?3\330D?\271\3615?\024\210R?+\222\025?\306\272x?\313\013\342=\260\030\311>\2319t?\001\2743>\344/\024?\356\241y?\335\260\306=\033j\263>\250\026i??\343\246>\377\372`?W\026\332>\240bz?6\273\257=\007\247\240>\330|\\??\260\364>\r\200\177?\342f\377;Fi\375<|\222\365=E \330>\022\312y?~\353\301=\341\216\257>\032\271f?\311?\266>\320\300j?\022\336\233>z\325X?*\262\004?\313\247\177?\227-\260;\032;\257<\213{\253=\302\037\235>\214\317Y?!\370\001?}\360\177?\350!x:\307\345w;\272\365v<\305<s=\376\312d>q\2541?#rY?\304\375\002?6\334\177?\356\025\017;\364\305\016<s\207\r=\214\243\010>\001\320\354>\327\217~?\265\013\267<\247\364\262=\202Q\243>\037r^?\364?\351>n\372}?\361^\000=\000\262\370=\325~\332>h\201z?\344\014\254=\272\230\235>\305,Z?\370\361\000?m\374\177?\216\261d9\311\244d:\274qd;\341\245c<#|`=\213.T>C7(?\274\272f?O5\266>\307\272j?[\006\234>\367\364X?\260Z\004?)\264\177?\034\200\227;\314\314\226<\'\006\224=CS\211>M\374H?p\304,?\214\257`?\367\336\333>\261\346z?\343\351\237=Wm\223>\355\363Q?\356\016\027?B\261w?\242\233\000>D\351\340>}9|?\235\020n=n:`>\333 /?\256K]?k\377\357>\355\377~?\211\022\177<\361\031{=3\265k>\250s5?\241[S?\324m\023?\016\032z?\014e\270=\337\312\247>n\233a?\302F\326>$3y?\263\323\323=\336\352\275>\031\361n?\272\276~>\370^??z@A?\307x=?\341\364D?\372\2635?\360\357R?\245\205\024?bky?\010*\315=}\234\270>\246\027l?K\340\222>\374{Q?:A\030?\322\316v?\372\312\r>XQ\364>\206w\177?\3400\010<\020\017\007=\001\233\002>\035\345\343>\034\352|?\315\027C=\370\3149>\200\026\030?\030\357v?d\353\013>\014\232\361>\2610\177?j\247N<\"\014L=\355\341A>Q,\035?\270\263r?%\267I>\336\372!?t\365m?\201(\206>\225\002F?[j3?\316\261V?8\220\n?\252A~?\030\246\335<\326\246\327=\241\361\300>\355wp?\215mi>f74?\312eU?\377\014\016?N\352|?\202\013C=\332\3019>j\017\030?m\364v?%\234\013>\322&\361>\207#\177?c\273[<\373\310X=\276OM>\212%$?\256\225k?GL\226>\024[T?k\320\020?$\225{?\023\353\212=\312~\201>\216|A?\r\376<?\266\337E?\220\2663?\0017V?\376\333\013?l\315}?\323o\013=\251\260\006>\234\362\351>\262\031~?\nY\361<\304<\352=`r\317>\225\312v?\336\t\016>C\254\364>\262\177\177?Q\r\000<7\032\376<w8\366=e\236\330>\035\361y?\343E\275=\332\307\253>\033Kd?\347\251\305>\340\264r?\221\246I>\322\360!?\035\000n?5\337\205>\273\274E?\341\0024?R\273U?J(\r?\210K}?\241I+=\352\037$>\260\321\t?X~~?\273\261\277<f5\273=\204\030\252>v,c?\245\244\314>y\262u?\0146\036>\\\304\005?\367z\177?\241\303\004<7\260\003=\265\350\376=a.\337>\355\312{?\367k\204=\014\270w>\341\312;?m#H?6\260.?\315\360]?E9\354>\346x~?Hb\302<\177\305\275=\330/\254>]\217d?y\375\303>\320\356q?\323\264T>\324\205(?\240Wf?v\260\270>\311\"l?\021\225\222>\304;Q?\201\344\030?oQv?8\r\025>>\266\376>W\376\177?,`\3248\253Z\3249\246D\324:\245\354\323;\305\215\322<^$\315=\366\227\270> \025l?Z\361\222>\206\212Q?1\034\030?\317\352v?\035+\014>\243\366\361>\371:\177?\343nD<\373\023B=\327\3418>|\200\027?\245^w?\370m\005>6\026\350>(\304}?\227\266\r=m\317\010>T\020\355>k\231~?,O\262<\232m\256=u\222\237>\251\255[?\243X\371>\272\323\177?\220\3700;9~0<\202\227.=]&\'>\230\335\013?\324\314}?*\225\013=u\323\006>\343%\352>}\"~?\363\003\355<p(\346=\332J\314>S\216u?\223I >\2202\007?\3110\177?\254\217N<\376\364K=\026\315A>^\037\035?\203\277r?\377\rI>@\224!?\307an?\240>\203>\0314C?\302n9?\366uL?\375\246$?p\002k?\266\'\232>\237{W?\371j\010?\217\344~?\240\033\215<d\255\212=xI\201>\320GA?\322i=?\231\021E?\010v5?\251WS?+x\023?\305\023z?\323$\271=\013h\250>]\007b?\342\262\323>fUx?o\372\355=:S\322>\316\331w?,y\374=SY\335>MO{?_V\223=\325\274\210>}pH?\"\002.?\357\354^?)i\346>1q}?\375\020\"=e\247\033>]\376\003?4\300\177?\362\356~;\023\361}<z\001z=\014\277j>\230\3564?\3208T?\253*\021?9e{?u\262\220=My\206>dOF?\362\3012?\251\276W?k\263\007?\312\022\177?\262Zl<\324\361h=a\262[>\265\217,?$\371`?\225!\332>\364ez?^U\257=\243R\240>\340=\\?\302\033\366>(\236\177?\365d\303;\257:\302<\307\237\275=\035\021\254>:{d?\374{\304>\342)r?\277jQ>\341\226&?q\273h?W9\251>\354\225b?\374F\320>\213\032w?\006e\t>g\353\355>\031\271~?\325\242\242<Ah\237=\354\377\222>\357\226Q?\217\374\027?\224\002w?\241\311\n>B\364\357>\210\376~?\260:\200<\264q|=\263\342l>\002\0266?\324JR?\350/\026?\354Nx?B\275\356=\264\350\322>\315\016x?\333C\366=\013\247\330>\307\363y?\304\364\274=\267\205\253>\206\037d?\335\272\306>$0s?j\273B>E\263\035?\2247r?G\247P>7#&?\033Fi?T\253\245>[ `?\275=\337>\334\316{?6\362\203=\372\343v>>];?\215\357H?\202\341,?\323\206`?\324\324\334>++{?\264\257\227=\234s\214>\221\330K?\217\035&?\330Li?\376~\245>\n\001`?\307\371\337>r\376{?}`|=\233\323l>\346\r6?\211XR?\247\014\026?Kgx?\010\340\353=f\265\320>\206Cw?\177\002\007>-k\352>?.~?\3518\347<+\262\340=\"\013\310>\336\304s?\214X:>Zo\030?\273\253v?\306\323\017>i@\367>w\263\177?\340\343\230;B-\230<\223Y\225=gu\212>\005\010J?t]*?\320\364c?\352\305\307>\211\246s?I\017<>\254\205\031?{\322u?\357^\034>\371}\004?I\257\177?F;\241;/p\240<\314K\235=\n7\221>\257\016P?H\333\033?\014\340s?\021\3178>}t\027?rgw?\245\352\004>\341S\347>F\237}?\207\304\026=\3317\021>\211?\371>j\322\177?\21186;\324\2665<\344\2623=\252\320+>\216\374\016?\235}|?\217\204]=\255\211Q>\'\251&?b\245h?\252\311\251>s\367b?\347\354\315>\2114v?s\270\026>H\211\000?\332\376\177?b<\2238\2749\2239\'/\223:\327\004\223;\372[\222<\222\276\217=\303\247\205>\307\207E?\032v4?<\377T?\010\036\017?\336m|?mXa=\244\362T>\363\251(?\315)f?L\325\271>\237\304l?\031L\216>\257\177M?\303\'\"?\250\305m?\262p\207>W9G?\224\2740?\366\342Z?\r\335\375>o\373\177?\247\017\2229<\005\222:\227\333\221;b5\221<v\242\216=b\263\204>I\235D?Bp6?\314\261Q?\007\270\027?\2525w?\016\321\007>\010\233\353>\021`~?m\245\316<\367n\311=\t\237\265>\315cj?\235I\236>G\264Z?\372\345\376>\311\376\177?\037X\2338-U\2339eI\233:L\032\233;Z^\232<\255u\227=,B\214>\347\253K?M\207&?6\316h?m\276\250>]Bb?\372H\322>%\326w?\315\346\374=\347\253\335>\216e{?3\250\220=~p\206>\007GF?S\3242?~\241W?Y\003\010?)\377~?\332\324\177<3\326{=WZl>\253\3145?v\306R?\n\361\024?\316%y?\256g\325=\370*\277>\313\224o?\034\332u>O\323:?G\356I?\367\230*?\317\245c?\267\262\311>N{t?c\0000>A\300\021?\234\023{?\327\204\232=T\334\216>}\377M??\361 ?4\013o?\210T}>|\250>?\325\247B?\"\224:?,bJ?c\214)?\355\006e?F\014\301>\n\205p?&\265h>\361\3223?\031\tV?\213W\014?\264\236}?e\350\026=\022Y\021>\"o\371>\344\324\177?\203T,;\201\340+<\352\022*=\030\003#>\334\017\t?\206\267~?(j\243<\245\'\240=s\241\223>\026 R?\270\235\026?\r\002x?\201\302\367=d\311\331>\276Kz?\020w\262=\327\351\242>\344&^?S\373\352><F~?\017e\333<\337\204\325=\023B\277>|\240o?\3706u>g~:?\353\211J?\350/)?{~e?\241\027\276>-\010o?\220~}>\266\275>?=~B?\252\352:?O\303I? \374*?5!c?c\352\314>b\316u?E\233\034>\337\247\004?L\251\177?\212-\255;=C\254<\351\243\250=\370\300\232>4\365W?\257\035\007?t5\177?\303\353I<\263nG=\336\270=>?\222\032?\337\367t?\342\346(>\354\n\r?\216W}??X(=\000m!>n\372\007?d\001\177?\256\236}<\242\261y=\361xj>\235\3104?\215wT?P\205\020?C\274{?\2641\206=c\315z>\361_=?\215$E?\032M5?\360\233S?\017\306\022?3~z?*o\254=x\352\235>\202kZ?\356@\000?\276\377\177?H\276\2037\301\275\2038\242\273\2039)\263\203:I\221\203;\r\n\203<r\361\200=O\246q>\254\2378?\005\347M?\332,!?\240\315n?-U\200>\020U@?oU??\\SA?@R=?\314>E?Y\0245?E\372S?\t\317\021?e\013{?\210\201\233=\304\262\217>T\274N?\310\"\037?;\332p?\036\005d>\327>1?\211\033Z?\202\"\001?\331\372\177?#\322\2449\337\304\244:\330\217\244;G\274\243<}v\240=\362\343\223>RXR?5\r\026?\351fx?\220\353\353=E\276\320>\315Fw?\243\321\006>5#\352>\010\"~?\247=\355<\316^\346=\376t\314>R\237u?\302O\037>\267\206\006?\242U\177?\217\354)<f)(=\000B!>\373\334\007?\256\010\177?\362bv<h\256r=\205Md>\372f1?\254\335Y?{\320\001?\325\362\177?\335\244R:\210yR;|\314Q<\276\034O=\306\243D>\372\340\036?\377\031q?\252\200`>OH/?z\021]?cR\361>\215(\177?\241\275V<\033\355S=\017\366H>\266\205!?\005qn?p\325\202>i\315B?\305E:??\361J?\220>(?\217\261f?6p\266>\256\334j?\013$\233>lCX?QF\006?\204b\177?x\033\035<\315\231\033=\224\260\025>\244\235\377>\332\377\177?\255(\0277T(\0278\357&\0279[!\027:\r\013\027;\357\261\026<\033O\025=\310\335\017>\316N\367>r\264\177?\004\357\226;\n=\226<\255{\223=\305\334\210>:\216H?\301\276-?\210M_?\356*\344>]\371|?\315^?=\344m6>\310\355\025?\201|x?Ha\351=\001\311\316>\346\211v?T\311\021>\320\017\372>\275\334\177?\203\371\014;\341\253\014<\257v\013=\016\267\006>\t\374\351>Q\033~?q\214\360<4|\351=\312\335\316>\343\221v?\377R\021>mf\371>q\324\177?Y\036.;\354\247-<\272\320+=\262\233$>\273%\n?\037d~?\014\245\314<P\210\307=\251\027\264>\n~i?\353:\244>K\032_?\313[\345><:}?\025\205/=\241\377\'>\300o\014?U\225}?\0145\031=\005z\023>\\y\374>\221\363\177?\375\340F:\\\272F;\030 F<\301\272C=``:>Tt\030?\355\247v?1\014\020>\206\221\367>\351\270\177?\027\007\216;\177i\215<\224\370\212=v\212\201>\026\210A?r\346<?\255\014F?CT3?F\325V?\0140\n?\330`~?GC\316<\304\021\311=\'T\265>38j?Jk\237>!\220[?\274\001\372>\025\334\177?\214\230\017;\000H\017<:\007\016=z\032\t>G~\355>\200\251~?\305Z\252<\340\317\246=\2309\231>K\275V?\026q\n?\341K~?\333\233\330<\240\341\322=\302*\275>Z\215n?\302\021\202>y\rB?3\324;?\003\022H?t\327.?t\267]?\223\211\355>\"\253~?\035\214\251<\313\t\246=\264\223\230>\2557V?.\332\013?\030\316}?\217E\013=E\211\006>\213\270\351>\244\017~?\313L\366<\016\345\356=8\007\323>\211\031x?\226\001\365=\025\262\327>\217\247y?\254\005\306=\024\340\262>\310\303h?\277\002\251>\336pb?!+\321>\317nw?\271|\004>\004\261\346>{\177}?\271\220\036=Im\030>\314\274\001?\355\363\177?\364+A:\203\007A;\366u@<23>=1^5>\234>\025?\254\362x?\020s\333=N\357\303>+\350q?t\023U>\034\275(?n\021f?\327p\272>\204\031m?\031\n\214>\'yK?(\377&?\007=h?\335r\254>-\273d?\337\351\302>rlq?U\361[>\242\263,?\t\307`?\365P\333>M\276z?\033\302\244=\363\200\227>\206XU?b0\016?\261\332|?\200\332F=\0243=>\367=\032?l=u?\317\354$>\276\\\n?~R~?\231X\325<4\312\317= \265\272>\215>m?b\r\213>;\223J?5\032)?a\232e?\224f\275>\210\254n?4:\201>\2628A?\244\210=?d\326D?\236\3655?\205\201R?\026\243\025?Z\257x?xd\343=\r%\312>\234\253t?v@->j\360\017?\307\007|?\260\035z=\320\327j>\000\3744?\237\"T?\013e\021?\262E{?s~\224=%\272\211>\207[I?\261\352+?E\335a?\224\264\324>\223\255x?\006\232\343=\265N\312>\034\275t?*A,>AG\017?JZ|?\037\032f=\357,Y>\242\035+?!\364b?r\001\316>\220<v?\311A\026>\1775\000?\323\377\177?\351\33227l\33228y\33029\251\3202:p\2612;\26542<\177D0=\233\256(>2\345\014?\330f}?\336\231$=\206\374\035>\231\234\005?\t\202\177?\016r\373;\035\204\371<\213\352\361=\035W\325>&\344x?\"*\335=\351G\305>\021\210r?\203(L>]t#?\346[l?\246\022\221>+\357O?\021*\034?\025\233s?\317\264<>K\356\031?^~u?\3673!>]\323\007?\n\013\177?\r\014t<qip=\023Mb>\010J0?\237\220[?\355\376\371>\363\333\177?T\037\020;1\316\017<\021\213\016=(\225\t>\3221\356>\370\302~?\316\277\235<\'\266\232=2\006\217>x$N?\007\227 ?\225go?2Px>S\031<?z\220G?,\372/?\276\010\\?\272M\367>`\264\177?L\024\227;\372a\226<B\237\223=9\373\210>\217\252H?x~-?-\251_?\007\010\342>\341}|?\367s]=\340zQ>i\240&?\362\257h?\227\204\251>\332\310b?\336\014\317>\354\243v?\222G\020>\330\346\367>k\276\177?Y\010\203;6\202\202<\362m\200=\\\300p>\r&8?S\275N?U \037?\235\334p?\201\343c>1,1?78Z?\265\321\000?Q\375\177?\277\306+9\213\277+:\275\242+;\252/+<\307e)=Od\">\210\243\010?|\325~?\336\223\224<\004\342\221=\312}\207>\253EG?!\2410?\271\014[?\237\357\374>\235\366\177?\263/\026:\254\031\026;\251\301\025<=c\024=\017\003\017>\351\023\366>\215\235\177?\004\233\304;\010m\303<\216\303\276=\262\376\254>(\026e?\026\254\300>\227Up?\360Ok>\371<5?\311\266S?\333\177\022?\025\247z?Z\212\247=\240\325\231>5:W?\214\035\t?\243\263~?\307V\245<\177\000\242=\353/\225>\005oS?J;\023?\2258z?\247\300\264=\270\314\244>\200\202_?\022\357\342>)\263|?\302|P=\022\340E>j\243\037?\020\\p?\022\365j>\326\0135?c\010T?\373\251\021?\357\037{?\206\t\231=\372\231\215>\372\340L?\230\246#?\030$l?2\214\222>/4Q?\277\367\030?qBv?\344\352\025>&\360\377>\377\377\177?\025E{4\021E{5\001E{6\304D{7\315C{8\363?{9\2110{:\353\362z;\354\374y<t,v=\334`g>\340\0303?R4W?\227-\t?\r\257~?\303\233\247<\336-\244=\204\004\227>\265\362T?N?\017?\025^|?C.e=\206[X>\341\244*?\360\225c?\207\025\312>\023\245t?\301\237->m/\020?&\350{?\032\343\200=;\215q>m\2228?r\376M?\313\363 ?\224\010o?\363x}>\341\272>?\313\203B?\036\337:?\220\330I?\032\313*?\352bc?\310R\313>,)u?s\025&>\177%\013?\007\017~?W\232\366<\357-\357=\025?\323>\036-x?\200\265\362=\013\362\325>k\027y?[\033\327=|\203\300>{Ap?@jl>;\3255?\017\270R?G\026\025?Z\ry?\021L\330=\003t\301>\345\267p?;\351e>uJ2?R{X?\360\253\005?U\177\177?\272j\000<\035\322\376<\360\344\366=W!\331>$\031z?\342\200\270=\262\341\247>&\253a?\323\346\325>\273\023y?\371\212\327=\242\333\300>\025mp?\371\005j>>\2124?0\336T?\276u\017?\367C|?\310\205k=\332\372]>\026\334-?\215#_?\304$\345>\274.}?\361T2=M\221*>\372\'\016?j\336|?\032\362E=2a<>x\271\031?\000\251u?`\301\036>\217$\006?\020i\177?\241\226\026<N4\025=\357\304\017>\021+\367>\000\262\177?\223\320\233;\346\022\233<g#\230=%\326\214>_1L?\231J%?hEj?\230\023\237>\330M[?\206|\373>\241\353\177?\227\355\242:\276\271\242;\337\352\241<\225\267\236=\261j\222>\204\027Q?r@\031?f\tv?^5\031>)I\002?\032\353\177?\253#\247:\033\355\246;j\023\246<\201\265\242=:\310\225>\304\355S?\331\357\021?\022\371z?\023\265\235= \220\221>\253[P?R\032\033?\300\205t?Dh/>V\\\021?mJ{?\270\354\223=\201=\211> \350H?o\362,?\021o`?\032d\335>8R{?|\374\222=\335o\210>\256(H?^\244.?\022\002^?\325\323\353>\022i~?\2673\312<\n6\305=\2038\262>d^h?c\231\253>\200,d?\245i\306>\263\013s?\311\307D>\'\367\036?\221\004q?\201\257a>\003\362/?\371\024\\?Z\007\367>\204\257\177?6\305\240;H\373\237<w\333\234=\360\327\220><\274O?\"\251\034?D*s?\003\020C>\252\347\035?\310\006r?b_S>\312\275\'?\177Rg?\033d\262>\331xh?\263\354\252>.\272c?\3123\311>6Et?A\0233>F\302\023?Y\346y?\026\216\276=/\323\254>\351\371d?r^\301>Y\255p?\310}f>8\2342?k\372W?X\017\007?\2418\177?\254\303F<_ZD=\267\360:>\014\320\030?Sav?,\"\024>\224h\375>I\371\177?w\342\3269\353\313\326:\316q\326;\211\n\325<5\200\317=\"z\272>\220\036m?\253\347\213>\361YK?\265H\'?\021\343g?\372\273\256>\3423f?\354\224\271>D\241l?E<\217>\'TN?s\" ?{\335o?\374\342q>\262\2778?J\256M?\303\266!?}=n?\3178\204>\374&D?\021m7?\321\377O?v\000\034?\231\277s?\325\244:>\331\237\030?\216\206v?\347\372\021>\266V\372>\363\337\177?A#\000;<\306\377;#\307\375<\211\352\365=1c\330>\331\336y?\240r\277=\030\215\255>0re?\231e\276>;0o?@R{>\247\243=?g\242D?Ie6?u\304Q?\\\210\027?\333Xw?W\304\005>\342\225\350>\303\333}?\327\351\007=Pg\003>-\025\345>v+}?\345!3=^L+>\227\244\016?W\246|?\003\234S=Z\255H>\206Y!?1\237n?x\226\201>\363\223A?%\316<?\343:F?\371\3562?\037wW?Ew\010?P\341~?C\267\216<\304:\214=\272\240\202>\322\231B?N\261:?\270,J?w\010*?\342dd?<\010\305>\314jr?c\313M>\214o$?\301Ak?\302\177\230>\216\'V?\233\005\014?\345\275}?O@\017=\300=\n>/(\357>P\344~?\324:\215<\205\313\212=\203c\201>\226aA?35=?jvE?\321\2334?R\301T?A\302\017?\244\036|?n\223t=\330\370e>\017S2?\315mX?P\321\005?\237x\177?{\031\007<K\374\005=J\232\001>&f\342>\310\223|?: X=\323\270L>\016\313#?e\373k?\030\237\223>\027\036R?\326\242\026?o\376w?\007/\370=\242\033\332>1dz??\213\257=I\177\240>8_\\?d[\365>\272\216\177?\334\'\342;G\230\340<\360o\332=\226#\303>\360\207q?ZkZ>\231\324+?\220\373a?0\373\323>Xnx?\263\013\353=\344\021\320>\264\006w?E\214\n>\307\232\357>1\363~?r\332\205<\214\252\203=\031gv>\206\034;?]gI?\215\317+?y\002b?\331\320\323>\302_x?\317\302\354=\327c\321>\202\203w?\231G\003>\004\346\344>\202!}?\231\2205==\204->=\035\020?T\361{?j\215\177=\271\233o>\261\2127?t\314O?\265\200\034?_Ns?\357\007A>\261\244\034?=.s?\312\326B>;\304\035?\321\'r?6\210Q>J\250&?m\246h?\327\302\251>\332\362b?W\t\316>\246?v?5\024\026>I\025\000?\371\377\177?T\210\3425;\210\3426\327\207\3427F\206\3428\003\200\3429\366f\342:\331\002\342;\307s\340<pM\332=q\010\303>\006{q?\237\"[>\217=,? ka?\'m\327>\310\221y?\277\233\310=H\365\264>\270\000j?@\333\240>\264\243\\?n\317\363>ik\177?\250@\024<=\351\022=O\244\r>i\031\364>_r\177?IR\r<:\032\014=oO\007>n\334\352>%A~?l\347\335<\241\344\327=f\"\301>\352\217p?)\034h>f\1773?\370\217V?\321\353\n?\352\"~?\215\316\354<!\366\345=\331#\314>\213~u?g1!>\234\321\007?w\013\177?\375\236s<\240\377o=\253\357a>\340\0250?(\337[?\270<\370>\275\303\177?\324\322p;H\360o<\276ll=3\307^>\255O.?\024}^?A\377\350>\336\356}?\'7\003=\035\006\376=\031\204\336>\322\236{?\346\277\211=\010|\200>\313{@?z\007??H\355A?\226\026<?\236\225G?\254\356/?\371\031\\?\221\352\366>|\255\177?\003\322\244;\307\375\243<^\265\240=\367\030\224>\016\205R?\367\231\025?\203\265x?\205\252\342=T\224\311>fnt?<\2740>e;\022?`\316z?\274\324\242=~\342\225>\215\003T?\255\266\021?\353\030{?\205\341\231=\232Q\216>\223\204M?\353\033\"?J\322m?\002\032\207>\223\347F?(r1?g\314Y?\365\000\002?\361\357\177?lr\200:3R\200;\034\243\177<\002\246{=\0230l>\350\2655?\263\354R?\013\216\024?\376ey?\253\315\315=J\037\271>W`l?\223\364\220>\027\325O?*k\034?\210as?\261\363?>N\370\033?\272\306s?\244=:><^\030?\310\270v?\037\022\017>\236)\366>:\237\177?\264C\301;\345\037\300<f\236\273=Mn\252>\354ec?\026@\313>y!u?.\206&>\233q\013?)\364}?\315\351\001=\354\225\373=\001\256\334>z {?\321\370\230=\304\213\215>F\324L?\032\305#?\r\002l?+r\223>\005\370Q?q\004\027?\316\270w?\256*\000>\001@\340>\360\017|?\212#x=<\033i>\227\n4?\312\256U?\333I\r?\252=}?X\256.=@;\'>\251\353\013?\232\307}?\374\335\014=\303\005\010>w\350\353>Pl~?\206\231\310<\004\260\303=P\375\260>W\235g?\031\200\260>\317Og?ru\262>\\\203h?\021\250\252>}\214c?OP\312>\310\275t?]7,>\301@\017?d]|?EYe=\270\201X>\356\272*?\206xc?~\314\312>\242\361t?\023B)>\377G\r?o>}?\t~.=\020\017\'>\346\315\013?\243\322}?\374\'\n=\n\177\005>t/\350>\335\310}?\246\216\014=\341\273\007>\351{\353>\030[~?\327\031\321<}\303\313=\211}\267>[vk?\313\036\227>?\010U?\030\006\017?$y|?\342\232^=\322\201R>\202;\'?B\363g?\320R\256>\362\360e?\360?\273>g\211m?\242\r\211>\254\273H?\226W-?]\340_?\264\275\340>\340.|?\203\243p=S\200b>\236f0?ne[?\337\365\372>\232\346\177?\204\031\313:\363\310\312;\260\207\311<}\222\304=h\264\261>\331\rh?\366\245\255>2\202e?\025\000\276>\013\374n?\354&~>\233\022??X\327A?\300C<?\261@G?6\2540?\337\373Z?{O\375>\304\370\177?\013s\3479\343X\347:Z\360\346;\261O\345<s\344\336=S\242\306>\'%s?\236YC>4\025\036?\030\334q?[\277U>\\!)?1\221e?\352\240\275>\325\312n?\201h\200>Wh@?\251.??\002\240A?l\265<?\323iF?\323\2072?\246\032X?\254\266\006?\266K\177?\301\3123<\255\3211=s\031*>\377\327\r?g\001}?Ch==\021\2464>\224\307\024?\325@y?\3064\322=r\241\274>_En?\177\002\204>k\362C?\332\3347?o=O?\032\344\035?\034\nr?\361/S>\355\241\'?\rug?\316\204\261>\262\360g?qc\256>\216\373e?X\374\272>\007em?\177\006\212>\375\241I?\335H+?\303\271b?\374i\317>g\307v?\0379\016>\211\360\364>\253\205\177?r5\364;\206c\362<\2037\353=\2453\320>S\023w?r\320\t>\202\210\356>\352\316~?u\325\227<\t\005\225=--\212>\236\305I?\316\366*?Y(c?%\276\314>\262\274u?\247\237\035>Z\\\005?\r\215\177?L\177\345;\322\343\343<\343\214\335=Q\225\305>|\253r?$-J>SB\"?C\251m?h3\210>\'\360G?\244#/?\223G]?\\\027\360>\351\002\177?o\034|<O;x= 0i>\367\0254?G\234U?f{\r?\360(}?\246\2773=M\334+>J\004\017?\375y|?3f^=\335RR>\331\037\'?\037\025h?\247v\255>\272ce?F\301\276>\026_o?x\306x>/V<?\363\035G?\177\3710?\365\205Z?M\354\377>\376\377\177?#\r\3024\036\r\3025\014\r\3026\302\014\3027\234\013\3028\003\007\3029\241\364\301:(\253\301;!\206\300<\325\377\273=\335\275\252>\004\233c?\352\365\311>\276\227t?\031b.>\271\257\020?A\246{?6\332\210=Fj\177>\r\265??\216\225@?\207\323>?oSB?~C;?H\037I?\224t,?\340\036a?\266<\331>q!z?y\203\267=\322\021\247>c\033a?\343Q\331>\331\'z?\342\277\266=5q\246>g\253`?\375\367\333>\277\355z?(\021\237=^\266\222>7XQ?<\234\030?V\211v?\266\321\021>\316\033\372>K\335\177?\253\302\n;tw\n<\340K\t=\273\261\004>\224\377\346>\353\216}?\260\307\032=c\356\024>\205\212\376>\337\375\177?\2736\010932\010:\026 \010;\264\327\007<_\267\006=\027I\002>\007k\343>\023\317|?\225\257I=B\301?>\306\330\033?;\342s?p\2578>F`\027?=vw?\313\r\004>y\014\346>\210^}?\030\243&=\231\333\037>\370\346\006?pA\177?%\002><\t\316;=\23613>\003\326\023?#\332y?/\002\300=\307\001\256>#\275e?\264\211\274>\3358n?\250X\204>\304ED?s+7?6qP?2\344\032?j\263t?\245\316,>\020\245\017?\367,|?6\032q=\020\351b>\373\2400?\363\014[?V\356\374>\225\366\177?\301\255\026:\225\227\026;\377>\026<H\336\024=,u\017>I\270\366>\341\251\177?\372\003\254;\320\034\253<\324\211\247=0\325\231>\3339W?\200\036\t?]\263~?,y\245<\201!\242=\263K\225>1\206S?\327\376\022?\261\\z?\304p\260=\\=\241>|\354\\?e)\362>\200@\177?b\360><\274\266<=\355\0044>2_\024?\363\203y?\000@\312=\336F\266>\345\304j?\333\302\233>,\300X?E\355\004?\350\236\177?\360\346\301;4\301\300<!8\274=\321\353\252>\227\271c?s7\311>\307Ft?\177\3742>x\263\023?y\357y?\352w\275=\241\360\253>\351ed?\316\001\305>\325gr?\303\365M>\342\210$?\335$k?NA\231>|\303V?N`\n?WQ~?n\352\325<oT\320=E#\273>\376ym?\034w\211>\204\035I?\235x,?E\031a?\271^\331>\271+z?\201I\266=\356\017\246>2g`?\204\223\335>\001_{?4r\221=\342\035\207><\353F?\014j1?\355\330Y?\315\335\001?\021\362\177?\365\344^:p\264^;\263\362]<\377\360Z=\n=O>\031L%?\251Cj?1\037\237>\237V[?lJ\373>\323\351\177?\377[\261:\217\036\261;x)\260<\260_\254=\231\335\235>\245aZ?\314\\\000?y\377\177?\326\215\0068\273\214\0069O\210\006:\243v\006;\0020\006<\251\026\005=\240\303\000>%%\341>\372G|?y\214j=(\036]>\343^-?\005\326_?\256\373\340>\364=|?\'\373l=&E_>\303\226.?\344\025^?V_\353>\201V~?\027^\323<\365\351\315=\3445\271>\331ll?\323\237\220>u\213O?\207\"\035?\243\274r?>7I>K\255!?uGn?\032\364\203>y\344C?s\3727?\265\tO?\007d\036?\236\221q?\001\342Y>\306\205+?&gb?\350f\321>\240\204w?\3546\003>7\315\344>@\034}?\266\3316=\021\260.>\035\343\020?L\213{?5\033\214=|\205\202>!\177B?\320\350:?\271\306I?B\364*?\305+c?\361\250\314>2\264u?\263\034\036>\327\262\005?\033~\177?i\243\001<\320\234\000=\372%\371=\236\326\332>\003\233z?n\374\250=\345\n\233>\230/X?\373|\006?\235W\177?T\364\'<\222;&=}|\037>\205\245\006?KO\177?\004;0<\277U.=4\352&>\020\265\013?\302\333}?\342\351\007=Zg\003><\025\345>y+}?\037!3=\252K+>\037\244\016?\216\246|?\237\216S=Y\241H>9R!?\314\246n?\340a\201>\367_A?\2038=?\025pE?\217\2514?\267\252T?\031\376\017?\363\000|?\007\305{=HKl>\217\3045?\027\324R?\306\315\024?\317<y?\304\256\322=^\002\275>=xn?\227\243\202>\240\234B?v\253:?o7J?\237\357)?{\205d?\224;\304>\337\013r?\311\026S>$\223\'?Y\207g?t\016\261>\353\247g?\226;\260>0%g?r\210\263>\314(i?\023l\246>\320\247`?\260\r\334>\331\363z?\247U\236=\354\027\222>\215\320P?\371\363\031?\304yu?\223w!>\253\001\010?\225\377~?\023j\177<\301n{=\233\377k>\311\2335?\177\030S?m\034\024?/\256y?\027<\305=f=\262>[ah?\005\206\253>\271\037d?\232\271\306>\223/s?\217\303B>P\270\035?\3452r?&\352P>\321J&?\320\026i?8\342\246>G\372`?\257\032\332>\351cz?\326\223\257=g\206\240>\207d\\?\275<\365>*\214\177?\205C\347;\257\241\345<\3321\337=\335\336\306>:@s?\270\323A>}#\035?\303\273r?\312CI>\351\264!?p?n?^+\204>\374\031D?\277\2107?\324\317O?Ix\034?\336Us?\334\233@>Ra\034?Djs?\252u?>x\251\033?B\013t?\265\\6>\271\342\025?\024\204x?+}\350=\310\030\316>\254Ev?.\273\025>\246\254\377>\345\377\177?m\033\3316\021\033\3317\241\031\3318\340\023\3319\336\374\330:\350\240\330;H2\327<\034\213\321=\216\032\274>\031\376m?\026\355\205>\370\311E?\004\3463?.\352U?\234\252\014??~}?-\336\036=\275\264\030>\365\356\001?\014\361\177?Y/o:{\367n;i\030n<\244\242j=\3101]>\tj-?4\306_?`Z\341>\303T|?\251qg=\304]Z>\317\314+?;\006b?\330\271\323>\317Wx?\375\261\355=\234\033\322>\351\305w?\014\315\376=\233\031\337>\227\305{?\377\020\205=T\327x>\332^<?\232\rG?\317\0351?NNZ?e\223\000?\255\376\177?\216\272\2518\n\267\2519\371\250\251:\301p\251;u\220\250<\205\030\245=r\311\227>\241\223U?\211\222\r?)\037}?\210#6= \n.>\257u\020?P\304{?\2148\205=%\034y>4\202<?\325\312F?\313\2611?\324iY?\374\024\003?\001\332\177?\233\343\027;}\211\027<\257\"\026=\345\241\020>\205h\370>^\306\177?pUf;2\206e<\rOb=\022\316U>\356))?,\206e?\333\346\275>\006\357n?v\333~>gm??\342#A?\n\263=?\301\204D?\323\2446?3XQ?F\234\030?N\211v?*\322\021>u\034\372>R\335\177?\002\244\n;\355X\n<\335-\t=\273\225\004>\025\326\346>\311\206}?\033\306\034=\372\305\026>\324\222\000?\257\376\177?\244k\2508.h\2509UZ\250:\371\"\250;\036F\247<\271\333\243=\210\277\226>\r\272T?\200\325\017?$\025|?\362\340v=\241\377g>\314o3?\020\251V?\347\247\n?\3179~?s\205\341<\024P\333=\321\323\303>B\333q?;\313U>G()?L\210e?[\331\275>\r\350n?$<\177>\354\235??\221\303@?\211v>?|\tC?#\3109?\017\325K?\337%&?\361Bi?)\300\245>\r/`?m\345\336>#\270{?1\261\206=\343\252{>\300\320=?iKD?h\0377?\366\205P?\001\260\032?\033\337t?\315P*>\363\374\r?V\361|?bTA=\\48>\210\021\027?a\257w?\271\267\000>T\023\341>\255C|?\250\227k=\254\n^>\013\345-?\265\026_?\037q\345>\253>}?\202o.=\306\001\'>\362\304\013?\357\325}?{X\t=~\275\004>\001\021\347>Q\222}?I\362\031=\021)\024>ar\375>{\371\177?o\225\32090\200\320:H+\320;\273\330\316<\257\237\311=*\306\265>\203zj?\204\262\235>\226@Z?\032\272\000?\343\375\177?\037I\0079\247D\007:\3112\007;b\353\006<\365\316\005=\352o\001>\326&\342>\024\205|?\307\263[=\365\352O>\201\263%?{\312i?7B\242>\217\254]?\\\311\355>E\264~?t\006\245<i\263\241=\004\357\224>\3148S?{\310\023?\203\342y?\000\003\277=Q2\255>\2277e?\270\330\277>V\354o?1\023q>\350Q8?ApN?\235\335\037?P\"p?R\037n>\302\2776?+*Q?(\021\031?\224.v?t\020\027>Y\307\000?\223\375\177?\216:\0339\2544\033:&\035\033;*\277\032<\377H\031=z\214\023>\243\223\374>H\364\177?\001x;:\257U;;\230\314:<a\2538=\364W0>\260\371\021?\214\363z?\327^\236=\261\037\222>8\327P?!\343\031?h\207u?0\257 >Sx\007?\314 \177?\274q^<\226l[=f\253O>\276\215%?\343\366i?a\034\241>\014\324\\?;\267\362>\207O\177?\n\377/<\017\033.=\202\264&>\334\220\013?\354\350}?M\255\004=\033a\000>\226\221\340>\023$|?:Bs=\315\317d>\032\2571?\002nY?N\t\003?\037\333\177?\214m\023;\245\030\023<\217\306\021=g\226\014>a\222\362>\257K\177?\016\3223<\320\3301=\370\037*>Z\334\r?\205\377|?\013\336==\361\0205>\264\014\025?\250\023y?B\215\327=p\335\300>\370mp?x\371i>t\2034?U\351T?.X\017?1R|?\203\021h=\207\353Z>\010\036,?\247\226a?\350c\326>\241<y?&\264\322=\244\006\275>zzn?\'\224\202>\200\215B?\357\312:?\254\375I?cu*?\027\325c?\365\213\310>\357\374s?x,7>Qh\026?\236\'x?\267Z\363=\014p\326>\223@y?\236<\322=\256\247\274>\246Hn?\343\353\203>\202\334C?X\0138?$\354N?\002\255\036?\373Kq?`\275]>?\271-?gU_?\007\374\343>!\357|?\020\336A=\007\2618>Ja\027?\177uw?\340\030\004>\353\034\346>\335a}?L\322%=\300\033\037>\341b\006?\335\\\177?\010\273\"<C\035!=\346\306\032>\354a\003?<\322\177?\r\3576;Tl6<[d4=\207r,>\001h\017?\227J|?\023\352i=T\216\\>\030\r-?\223I`?\342E\336>}\216{?\221\270\213=S0\202>\210+B?\031\226;?\342\205H?\254\321-?x2_?\t\314\344>\377\033}?k\3516=`\276.>\212\354\020?Q\206{?\371\264\214=+\n\203>\355\000C?\017\3329?\256\264K?\212r&?/\347h?\311\032\250>g\322a?\007\367\324>\374\303x?\261\365\340=\325?\310>\335\333s?\245\0139>0\233\027?\375Jw?*\223\006>\"\307\351>-\022~?\"\r\365<\221\270\355=\251 \322>\270\307w?\330\226\376=\343\360\336>\032\273{?\230U\206=\301\013{>\276\177=?\177\347D?\315\3205?\203\277R?\003\003\025?\006\032y?q\314\326=#E\300>\177\"p?\311\034n>g\2766?|,Q?G\013\031?/3v?i\314\026>^\227\000?\232\376\177?e\376\2628|\372\2629\330\352\262:R\254\262;\352\262\261<#\330\255=h\026\237>\371O[?`p\373>2\353\177?;_\246:+)\246;xQ\245<g\373\241=\241+\225>qkS?\236D\023?\3712z?\031l\265=\330Y\245>\300\346_?l\227\340>\201%|?L\351r=m\201d>\272\2031?<\261Y?\'M\002?\321\352\177?\202m\251:q5\251;\301U\250<<\340\244=:\232\227>\'mU?W\371\r?\351\362|?\352\361@=.\3337>h\330\026?]\330w?Z\244\374=\332y\335>\030X{?\\G\222=\255\324\207>[\227G?\311\352/?\314\037\\?\n\311\366>\027\253\177?\322\231\251;\031\271\250<}?\245=!\352\227>9\256U?_K\r?\010=}?\315\325.=X_\'>\366\003\014?\204\276}?p\031\017=\231\031\n>d\363\356>S\335~?\242\261\220<`#\216=\367E\204>\2653D?\367Q7?\267.P?\024\213\033?y%t?P\3404>C\355\024?G(y?\337\034\325=\275\357\276>\275vo?\021}w>l\254;?H\\H?\330/.?\026\253^?N\357\347>\336\274}?\023\201\017=\374y\n>\030\200\357>\303\357~?\254\215\207<wO\205=\003Dy>\253\226<?\035\244F?\\\0072?\177\344X?r\210\004?\317\255\177?\204-\244;\357Z\243<\010\031\240=\036\225\223>\245\025R?\202\270\026?\023\357w?\260\373\371=>x\333>\211\311z?Ni\243=f_\226>\335jT?\313\246\020?\350\252{?_J\210=\367p~>\3407??\316\215A?\273\332<?\365\"F?t#3?l#W?\240[\t?\270\241~?k4\256<\020\200\252=FN\234>\016-Y?\220\276\003?\353\307\177?\230\"`;[^_<\305R\\=\337xP>\266\007&?\326fi?\326\323\244>\223\207_?\313\320\342>E\254|?D*R=\256aG>m\217 ?Qoo?t\344w>\313\341;?\225\370G?\260\020/?yc]?\234t\357>H\356~?\337I\210<j\005\206=i\200z>\2468=?\322oE? \2524?\310\251T?\221\000\020?\267\377{?\233\021|=q\216l>\265\3505?F\227R?\366j\025?\034\325x?\224\360\336=\317\253\306>g)s?r\034C>\\\357\035?\226\377q?\352\305S>\364\371\'?\217\007g?XG\264>H\232i?\236\200\243>2\224^?\251v\350>\t\326}?$R\t=\224\267\004>=\010\347>\234\220}?\221]\032=F\214\024>M\377\375>\375\373\177?\233W\2009\220O\200:i/\200;\023^\177<!c{=i\365k>J\2265?\264!S?\203\004\024?.\275y?\340s\303=\250\314\260>F\177g?\265B\261>\032\310g?\362j\257>\201\242f?\322\320\266>\017\024k?\316\261\231>\231\035W?{k\t?\021\235~?\216\201\260<\372\263\254=\260#\236>M\227Z?!\212\377>\312\377\177?\355\025Y75\025Y8T\022Y9\323\006Y:\324\330X;&!X<FGU=K,J>\317A\"?\320\251m?\243/\210>\240\354G?\223+/?\343;]?{[\360>O\013\177?g\307s<\326&p=I\022b>6)0?\024\302[?\225\343\370>o\315\177?\026\034J;\205|I<2\002G=\354V=>\216T\032?\335*u?\261\374%>\304\024\013?\326\024~?\336\275\363<N}\354=f.\321>\001pw?\343j\004>\222\226\346>=z}?x\331\037=z\234\031>`\221\002?\240\345\177?\326\353\322:\362\224\322;\200:\321<|\342\313=]\226\267>i\204k?a\300\226>\300\272T?\250\323\017?\r\026|?Z\250v=\332\315g>\221T3?\312\324V?_1\n?l`~?\201x\316<OD\311=\304|\265>\336Oj?\030\316\236>$\031[?\355\250\374>\330\364\177?\020y2:\365Y2;\264\3351<b\357/=\320`(>\003\261\014?\265{}?@}\037=sG\031>\324U\002?0\352\177? t\256:\2578\256;\215K\255<\023\241\251=Q\224\233>\262\233X?[R\005?\270\216\177?<,\342;\230\234\340<\004t\332=\313&\303>w\211q?\265UZ>0\310+?\216\014b?\030\223\323>bJx?\321E\357=cQ\323>\2033x?_\365\361=b_\325>\347\346x?\334\326\334=\234\006\305>\014jr?\027\326M>\362u$?v:k?\237\260\230>\007OV?<\233\013?+\345}?\272\231\005=(>\001>w\334\341>\247s|?\202\360_=4\262S>d\356\'?\376\025g?_\352\263>\'ci?\036\354\244>\334\230_?\215i\342>\222\224|?-\357W=\363\214L>\267\260#?\320\030l?r\330\222>KuQ?DR\030?\344\301v?\366\212\016>\262f\365>\252\217\177?:I\340;:\300\336<\252\261\330=!\304\301>\362\336p?\242\302c>\362\0311?;TZ?\255\202\000?\365\376\177?\323f\2058\247d\2059\367[\205::9\205;\221\256\204<m\210\202=%mt>\026\025:?\302IK?\315n\'?7\264g?\351\353\257>p\363f?\332\310\264>\244\346i?\355\207\241>\232#]?\354\350\360>J\034\177?\354\353b<W\307_=\210\215S>\341\330\'?\3170g?\203=\263>\362\373h?\235\222\247>\235ta?`3\327>j\177y?\277\311\312=_\265\266>Z\004k?\343\032\232>jqW?\336\206\010?,\335~?\241\304\220<\2625\216=\277U\204>\364BD?s17?\333fP?6\376\032?\202\235t?\021\016.>Ix\020?\371\302{?\370a\205=4dy>/\247<?\323\204F?^L2?RxX?=\264\005?\333}\177?\346\342\001<M\333\000=\030\233\371=6/\333>\235\264z?d\353\245=;z\230>\025#V?\243\021\014?^\271}?\010]\020=|F\013>(\252\360>\324\024\177?\006Tj<\017\372f=\252\363Y>\353\217+?YYb?\306\273\321>i\243w?\303j\001>#\037\342>I\203|?\233#\\=\310NP>\301\356%?w\204i?\221\020\244>\347\373^?Q\020\346>O_}?:r&=\265\256\037>\026\310\006?\nH\177?vq7<\251c5=G[->(\002\020?\354\376{?\320B|=\226\271l>\351\3775?&pR?\331\317\025?\367\220x?\331\370\346=V\354\314>)\317u?\322\217\034>\354\237\004?s\252\177?\363\340\252;\324\374\251<\326u\246=5\356\230>\255\200V?+\025\013?\262\024~?\203\317\363<\346\215\354=(;\321>\253tw?=%\004>D/\346>\221e}?\376\351$=3F\036>\205\317\005?\362x\177?`\306\006<\217\252\005=\344M\001>\375\363\341>/y|?\\\230^=\222\177R>/:\'?\342\364g?BH\256>6\352e?\332j\273>m\240m?\365o\210>\305(H?+\244.?^\002^?\031\322\353>\314h~?PV\312<\355V\305=\020S\262>\203nh?.0\253>\366\346c?m\034\310>m\314s?4\3539>\302)\030?\223\340v?0\303\014>X\323\362>oR\177?2\033-<\373F+=|\035$>\n\320\t?\331~~?\302q\277<k\370\272=\255\346\251>\372\nc?\023t\315>\013\005v?\236u\031>+v\002?\303\347\177?\250\324\301:G\213\301;\240f\300<\317\341\273=Z\245\252>\255\212c?\226[\312>\202\302t?a\362+>\365\022\017?\030s|?P\023`=3\321S>\222\000(?J\377f?\226|\264>\274\271i?\346\260\242>o\375]?\024\357\353>Zm~?W\026\310<@3\303=\\\230\260>\337^g?,\024\262>IHh?\202)\254>7\213d?\216\027\304>\010\373q?\312\006T>\372\037(?\367\327f?\207y\265>\373Mj?\241\332\236>\251\"[?\272r\374>b\363\177?\214\317I:\306\247I;\356\010I<q\221F=\035\361<>[\024\032?o_u?\n\372\">\260\t\t?E\271~?\372\214\242<DS\237=3\356\222>\326\207Q?\t#\030?\246\345v?\317w\014>\375e\362>\377F\177?D{8<~g6=\tH.>\211\236\020?3\257{?\250\305\207=\313\212}>\343\303>?!rB?\321\003;?\366\224I?\324f+?.\221b?3d\320>l%w?\001\303\010>\037\376\354>\271\226~?\312\244\263<K\264\257=K\241\240>\223x\\?\356\310\364>9\202\177?D\023\373;\307&\371<\343\222\361=\'\024\325>\303\315x?o\316\337=EY\307>\242vs?<\303>>\2449\033?*kt?Q\3530>7Z\022?\302\274z?|\361\244=\263\250\227>\364xU?\324\331\r?\234\000}?\322\231==\013\3234>\255\344\024?\343-y?\362r\324= i\276>\t2o?$9{>\335\226=?\006\273D?p06?\036\036R?\304\242\026?{\376w?\226-\370=\213\032\332>\337cz?\037\225\257=x\207\240>Re\\?&8\365>\307\213\177?\206\010\350;\347c\346<*\351\337=(n\307>\337\177s?\342=>>\350\345\032?\372\261t?\234\343,>\363\262\017?*&|?x\300r=q]d>\314o1?\014\320Y?\271\366\001?\223\360\177?\347\277v:r\204v;\017\227u<\245\350q=(\237c>?\0061?orZ?[-\000?\340\377\177?\371\220\0007\270\220\0008\266\217\0009\255\213\000:\212{\000;\016;\000<Dt\376<\354\214\366=\210\336\330>\311\004z?\n\356\272=1\336\251>E\005c?f\227\315>\371\022v?\017\250\030>\017\346\001?\225\361\177?m\252f:wvf;\376\246e<\355nb=m\352U>q:)?\352pe?\254m\276>^4o?\301\030{>^\206=?\303\332D?5\3545?`\221R?/z\025?\350\312x?\260$\340=\251\234\307>c\224s?\212\025=>V+\032?\255Lu?1\r$>\367\304\t?<\202~?0\305\275<\312_\271=W\230\250>a(b?y\350\322>\270\016x?GF\366=\342\250\330>W\364y?\207\343\274=\250w\253>=\026d?\361\364\306>\023Js?\333EA>A\313\034?\241\013s?\311\310D>\305\367\036?\370\003q?\353\267a>\267\366/?\354\r\\?\356/\367>V\262\177?Q%\233;Ei\232<.\200\227=\037K\214>\376\263K?*t&?<\345h?\221\'\250>.\333a?^\301\324>\346\261x?\215\027\343=4\351\311>`\222t?W\260.>K\343\020?3\213{? \036\214=\002\210\202>\231\201B?\255\343:?,\320I?w\336*?\376Hc?\266\363\313>\001ku?@P\">\325\225\010?,\331~?H\300\222<I\037\220=\342\372\205>\037\327E?Q\3113?\256\030V?\244-\014?\302\256}?\322\367\022=\330\261\r>\376,\364>0t\177?\271\203\013<\230S\n=\264\247\005>\220k\350>\376\323}?\240\322\t=o/\005>\264\271\347>\277\262}?J\375\021=;\311\014>\033\334\362>VS\177?\3255,<tf*=\260O#>\013D\t?\225\250~?g\317\252<\246?\247=#\227\231>E\010W?\203\245\t?\307\213~?\344\r\271<\273\337\264=O\346\244>\272\224_??\202\342>E\232|?\'\214V==OK>\214\361\"?\313\353l?\233A\215>\340\221L?>d$?\235Nk?\206)\230>\266\341U?W\301\014?7u}?\235\024!=\356\276\032>]\\\003?\322\322\177?\025\2304;\257\0304<\344\0352=\n_*>s\006\016?-\355|?,XB=\220\0379>\347\247\027?\231Aw?-\037\007>g\225\352>V5~?\337\271\343<Fe\335=Fv\305>M\235r?f\370J>*\275\"?\325$m?\355\274\213>&3K?\367\243\'?\207rg?!\225\261>\264\372g?o\"\256>\013\322e?\272\004\274>\203\362m?\270<\206>\321\025F?@@3?Y\365V?\363\330\t?\034|~?\002\314\300<lB\274=8\364\252>-\277c?\244\024\311>\3357t?:\3253>B@\024?\226\227y?@\353\307=Mg\264>,\255i?\346\003\243>\3259^?\325\213\352>\2743~?+\204\344<M$\336=\356\013\306>g\341r?\231\'G>\363k ?V\223o?c\356u>\331\335:?\345\332I?\270\305*?\033jc?\027&\313>\300\026u?)#\'>p\333\013?\241\315}?\337b\013=\227\244\006>\322\340\351>\240\026~?\030\334\362<\361\250\353=\376\212\320>\3243w?k\354\007><\303\353>sf~?\345~\313<\321p\306={6\263>\272\367h?H\256\247>\267\207a?\371\276\326>\033Zy?S6\317=6?\272>\202\376l?*\302\214>c\037L?eu%?l\023j?K_\240>UG\\?9\345\365>\346\231\177?-\343\313;h\236\312<v\233\305=a\212\262>\t\220h?@U\252>+Uc?$\250\313>1Lu?M\024$>\314\311\t?\302\200~?\001\200\276<\357\021\272=-*\251>\244\213b?T\206\320>\0312w?/\006\010>\025\351\353>il~?J\215\310<b\244\303=\347\363\260>\210\227g?\267\245\260>\'gg?\250\336\261>\252\'h?\377\375\254>\264\025e?\364\256\300>\003Wp?\004<k>425?\262\310S?\375P\022?\013\302z?NO\244=\227 \227>\270\tU?-\002\017?\373z|?\211(^=\343\033R>r\377&?\255<h?+u\254>\257\274d?c\340\302>\353gq?\2041\\>;\330,?\325\223`?Y\206\334>\202\025{?[J\232=\251\252\216>\215\323M?9\\!?`\234n?\356\251\201>)\247A?\300\246<?\246\205F?\216J2?,{X?Z\254\005?B\177\177?l}\000<\353\366\376<t\007\367=\210;\331>\025!z?h\216\267=\313\032\247>\236!a?\016,\331>e\034z?\237\035\270=L\220\247>\003sa?\036=\327>\205\202y?yk\312=\300i\266>\370\330j?\331<\233>\365VX?h\020\006?\350l\177?@\303\022<\263r\021=\201H\014>Q!\362>\241?\177?\343\316?<\n\220==*\3124>\357\336\024?\2421y?i\001\324=\036\017\276>\313\003o?c\273}>h\334>?\377AB?\235g;?N\334H?Z\r-?7I`?\020H\336>\020\217{?\327\246\213=\003!\202>{\034B?6\265;?\344KH?\344T.?\207u^?\327+\351>\331\366}?w@\001=\254X\372=\202\276\333>\204\335z?\322\003\241=\030[\224>\274\274R?1\n\025?N\025y?K[\327=\374\265\300>}Zp?/\013k>\315\0275?\214\364S?\016\336\021?\006\003{?\006\203\234=\010\215\220>\031{O?-K\035?\207\227r?\035KK>\020\357\"?\203\356l?\035/\215>K\201L?\350\213$?i!k?lX\231>\010\326V?\376-\n?\200a~?\237\360\315<E\303\310=\017\025\265>U\023j?\341_\240>\305G\\?\262\342\365>\263\231\177?\"I\314;\031\003\313<)\373\305=\231\327\262>\254\276h?5$\251>\227\207b?E\237\320>W;w?z|\007>\261\036\353>\005L~?\013\212\330<\301\320\322=\\\035\275>[\206n?\032B\202>\001=B?\364q;?\034\311H?\n9-?\227\013`?r\272\337>\212\356{?/\035\200=\0223p>\037\3337?u@O?\237\334\035?\030\021r?_\314R>cg\'?X\275g?\270\260\257>Z\316f?M\267\265>\344qj?\347\353\235>\233lZ?\324=\000?\304\377\177?\204\350n7\245\347n8)\344n9:\326n:\205\236n;\032\300m<\345Lj=\333\345\\>\343>-?S\003`?\017\354\337>\002\373{?y5}=M\216m>\033r6?\247\256Q?\014\300\027?\267/w?\253)\010>0\035\354>\214t~?~\210\304<t\321\277=-\332\255>\277\243e?\023+\275>\205\215n?\237\020\202>\\\014B?\201\326;?\264\rH?(\341.?>\251]?\311\334\355>\007\267~?\361\250\243<\354c\240=J\324\223>\027KR?</\026?dOx?9\257\356=\360\335\322>\002\013x?\270\265\366=\200\375\330>=\016z?\244\315\271=I\362\250>\255eb?\373o\321>\355\207w?\226\005\003>\321\203\344>\222\014}?B\256:=\',2>\314+\023?\341Az?\223\244\263=\241\342\243>\341\332^??\324\346>m\206}?\306\334\034=\351\332\026>\230\241\000?h\376\177?\345\376\3138\321\371\3139\200\345\313:M\224\313;\204P\312<kQ\305=\236N\262>\320kh?\315A\253>\241\362c?\213\323\307>\205\254s?\304\270;>\347N\031?\372\375u?\331\335\031>\035\277\002?\323\341\177?\347G\361:3\326\360;\016\021\357<\010\027\350=\320\311\315>\312&v?\204\203\027>j\030\001?3\373\177?\305\220\2319A\205\231:9W\231;\206\237\230<\227\307\225=Y\323\212>(^J?\272\225)?\314\372d?\332X\301>\234\252p?Y\244f>k\2612?\335\330W?\207k\007?\306#\177?\306|[<\013\214X=A\031M>\344\004$?\177\272k?\217T\225>\224\215S?\217\353\022?\035hz?M\023\257=\341\033\240>\345\024\\?\313\007\367>\214\257\177?^\265\240;\227\353\237<d\314\234=,\313\220>%\261O?\302\304\034?z\021s?\272tD>\375\303\036?\3525q?\273\365^>\364i.?\002W^?\351\337\351>x\026~?\373\357\362<\246\273\353=d\231\320>*9w?\347\234\007>aN\353>\304S~?\347\267\324<\3361\317=\250;\272>\222\374l?]\317\214>D+L?!Y%?v4j?\034\204\237>\331\242[?\222\226\371>\343\326\177?\365W$;u\356#<\216J\"=g\334\033>?#\004?\205\273\177?\324\321\210;\225?\210<x\373\205= oz>\321/=?\265\200E?v\2054?\n\346T?\354`\017?\377M|?Z\026i=\277\322[>/\242,?d\337`?\216\275\332>\272\223z?\262\333\251=8\305\233>\006\302X?\"\350\004?\262\237\177?\361S\300;\3652\277<\215\274\272=\274\265\251>\005\352b?\365?\316>\354Tv?\251\331\024>\037m\376>\206\375\177?\021\200\0369\357y\036:ha\036;l\377\035<_y\034=\035\177\026>\317`\000?n\377\177?\246p\0228Wo\0229\033j\022:,U\022;\206\001\022<p\264\020=\270\227\013>b \361>\307\"\177?zy\\<\366\201Y=\034\365M>~\210$?O%k?R>\231>\027\301V?\314f\n?;O~?\260\364\326<\300P\321=!\354\273>p\345m?\207\226\206> kF?\367\2042?*\037X?>\252\006?PN\177?\01351<aJ/=\365\311\'>\256K\014?E\243}?\206\311\025=CO\020>\344\361\367>\035\277\177?8\244\201;\352 \201<\262/~=\207in>n\3476?1\346P?I\275\031?\357\245u?\202\356\036>\260C\006?\007c\177?W\230\034</\031\033=\2679\025>P\365\376>\352\376\177?|\350\2128!\346\2129\266\334\212:\014\267\212;\271 \212<~\314\207=\251\226}>\340\311>?afB?4\034;?\363gI?5\316+?Q\004b?\217\305\323>\334[x?\0338\355=\375\275\321>6\244w?\311^\001>=\r\342>\032\177|?\006(]=$7Q>_x&?-\340h?\273H\250>\354\361a?76\324>\227\202x?\356\251\350=`;\316>$Sv?\003\364\024>\200\222\376>\366\375\177?Qt\0029)p\002:\214_\002;&\035\002<\240\024\001=\207\006\372=o\200\333>\340\313z?\222!\243=\031#\226>\0149T?\016*\021?\215e{?B\250\220=\213p\206>\023GF?7\3242?\252\241W?\342\002\010?G\377~?2\267\177<x\271{=%Al>\032\2775?C\335R?\007\266\024?6Ly?\325\333\320=\026\217\273>\322\263m?\010\353\207>V\254G?\321\273/?\376e\\?E4\365>s\213\177?q\257\350;t\010\347<r\204\340=q\347\307>?\265s?\221:;>\352\376\030?\331<v?\224=\026>\2062\000?\330\377\177?*\213\0377\307\212\03789\211\0379\002\203\037:)j\037;\344\006\037<\276{\035=\256m\027>\t\t\001?\266\373\177?\363/\2119\302&\211:\005\002\211;_o\210<\253)\206=l\277z>\320X=?82E?\221/5?\025\315S?\201E\022?\234\310z?\302\205\243=Ow\226>\226~T?\275r\020?\324\305{?\260\t\205=\234\312x>PX<?\357\031G?k\0021?MxZ?\306\034\000?\363\377\177?\224\377N6j\377N7\303\376N8%\374N9\260\361N:\335\307N;\327 N<\363\210K=\314kA>\336\342\034?Y\366r?\264\372E>\300\263\037?\345Kp?\023\330k>y\2065?.<S?\261\277\023?\361\347y?\207]\276=\250\253\254>3\340d?\236\000\302>M\374p?E$b>A30?\365\262[?C:\371>\"\322\177?}U7;2\3226<\364\3074=W\315,>3\244\017?c-|?\001\000q=\361\321b>\032\2240?\202 [?\376~\374>\271\363\177?\226gD:\352AD;u\253C<;UA=!58>\006\022\027?\006\257w?\006\275\000>C\033\341>\227E|?\241 k=R\241]>W\251-?\036l_?\240t\343>7\321|?\346)I=\271H?>S\215\033?\212#t?b\3744>i\377\024?c\034y?\347\204\326=\230\014\300>K\006p?\336\247o>&\2217?=\301O?\252\234\034?l5s?aoB>!\204\035?1cr?\0318N>\204\260$?\205\367j?\267p\232>\240\265W?0\314\007?\312\014\177?\374Nr<\227\271n=\275\317`>\260t/?\311\317\\?\372\317\362>\026R\177?\201s-<l\235+=\261l$>\325\005\n?-n~?&\256\307<%\320\302=!H\260>\000-g?\020V\263>\251\ni?\t2\247>\3001a?\025\312\330>\207\376y?\347\254\273=%z\252>\327mc?\347\016\313>+\ru?e\257\'>\3229\014?\035\252}?\235\033\024=\236\300\016>\034\264\365>\374\225\177?\322\260\323;\270R\322<Z\354\314=)k\270>\032\374k?P\232\223>\013\032R?8\255\026?\025\367w?\213\013\371=\234\302\332>2\225z?\241\256\251=\240\237\233>\221\244X?\3139\005?\304\222\177?\264\032\332;\021\247\330<>\354\322=03\275>\301\221n?Z\363\201>\214\357A?\353\021<?b\236G?\017\333/?S7\\?\200A\366>\r\241\177?\014\237\275;#\206\274<y/\270=\360\236\247> }a?\203\377\326>\330ny?\371\300\314=uH\270>\255\350k?\\\035\224>\302\210R?j\220\025?\365\273x?\r\350\341=\326\374\310>\244-t?\267i4>\201\240\024?\035Zy?)6\317=\025?\272>p\376l?\246\302\214>\322\037L?]t%?\241\024j?FW\240>WA\\?\311\007\366>\233\234\177?\356{\306;&H\305<\345\207\300=an\256>\207\002f?\346\317\272>\tMm?y\252\212>\2668J?\251\354)?\\\211d?3#\304>{\000r?%\271S>w\362\'?\351\020g?\035\013\264>\231vi?\000l\244>r=_?\264\212\344>\014\016}?\324Q:=#\3301>\376\364\022?\210bz?\035\276\257=n\251\240>\242~\\?\346\245\364>\"\177\177?\020\235\000<55\377<\335A\367=\330g\331>z.z?u\365\265=\325\312\245>\2236`?3\270\336>i\254{?\342\033\210=[ ~>M\017??\335\335A?W6<?\360YG?\366s0?=Q[?)i\373>\360\352\177?\344n\250:{7\250;jZ\247<1\357\243=\342\317\226>~\307T?\347\261\017?\255&|?\216\240r=OAd>6`1?\035\350Y?%\263\001?q\364\177?X\3418:\367\2778;\242:8<Q(6={\016.>\217x\020?\325\302{?Zf\205=\323ky>\027\253<?k}F?\261\\2?\246^X?,\373\005?\347p\177?\257\310\016<\"\212\r=\013\246\010>\252\323\354>d\220~?E\306\266<Q\262\262=\303\032\243>oJ^?\t*\352>3#~?\245\252\354<L\324\345=\234\t\314>\347su?\244\315!>\221<\010?\243\360~?\350\036\207<\\\344\204=\245\211x>\3466<?\341XG?Qv0?\253M[?\205}\373>\252\353\177?\273\245\242:\020r\242;\347\243\241<ks\236=\0251\222>%\346P?h\275\031?\326\245u?\360\357\036>\254D\006?\326b\177?\212\311\034<qI\033=Qf\025>\2014\377>^\377\177?\321\302!88\301!9\325\272!:J\241!;>;!<\017\245\037=(l\031>\213o\002?E\350\177?\364\306\275:\234\200\275;\016h\274<\306\022\270=f\207\247>\335la?\220b\327>l\216y?\320\001\311=UG\265>\2700j?\365\234\237>\221\265[?P+\371>W\321\177?\314\201:;\354\3719<\177\3357=\230\234/>\272~\021?\2627{?\327-\226=\237*\213>\356\255J?\361\333(?\037\352e?nk\273>\274\240m?\325m\210>\310&H?\246\250.?\325\373]?|\370\353>\323n~?\020\\\307<\016\202\302=\342\010\260>\215\005g?BT\264>\354\241i?2N\243>\270o^? N\351>\362\374}?\364\200\377<\343\210\367=\265\235\331>\254>z?\232\006\264=q3\244>\357\024_?\251{\345>\332@}?\257\346-=\226\204&>\210p\013?\213\364}?\221\321\001=\206h\373=\302\213\334>\002\027{?8\034\232=y\203\216>\324\260M?\230\260!?\374Cn?\014\014\204>\253\373C?4\3117?\266_O?\'\217\035?\004Yr?\230\311N>T\007%?\206\223j?\000\014\235>G\300Y?\370\"\002?\275\355\177?{\n\222:\323\340\221;\222:\221<w\247\216=\260\267\204>o\241D?]g6?\354\300Q?d\221\027?6Rw?y\'\006>F(\351>6\366}?\220h\001=\317\243\372=D\367\333>\213\355z?h\027\237=\245\273\222>\270\\Q?\307\220\030?#\222v?CO\021>\025a\371>*\324\177?\2308/;\251\300.<\177\343,=X\227%><\320\n?H,~?\3120\350<\006\234\341=\222\301\310>\035\024t?<\3345>\361\217\025?F\274x?\203\336\341=g\365\310>r*t?\037\2304>\216\276\024?\260Fy?A\203\321=N\024\274>\310\372m?\340\003\206>\261\337E?\234\2663?\3566V?1\334\013?Z\315}?ot\013=\365\264\006>\361\370\351>\311\032~?\210\317\360<Z\273\351=\207\016\317>\217\244v?&>\020>O\331\367>\217\275\177?V\277\204;\2525\204<o\023\202=\357\240s>4\2529?\017\013L?\273\245%?\262\332i?\370\326\241>\327]]?z\225\357>\203\362~?\2630\206<\373\375\203={\370v>\334g;?\332\333H?a\016-?\304G`?\310P\336>\\\221{?\351_\213=\300\343\201>.\340A?\2221<?\350bG?\363_0?\203o[?A\274\372>I\344\177?\014\243\335:\033C\335;\241\304\333<Q\337\325=\245\211\277>\234\304o?\237>s>\243v9?\322gL?\304\310$?\256\333j?\275*\233>\262HX?\3037\006?[e\177?\314G\032<\342\323\030=\036 \023>H\371\373>\312\357\177?+\247\201:V\206\201;E\003\201<E\366}=:7n>\213\3146?H\024Q?\243H\031?\356\002v?\310\224\031>\375\213\002?\016\346\177?\306z\317:\263&\317;s\327\315<]\253\310=\327\001\265>\024\010j?{\252\240>k\177\\?_\241\364>\273~\177?\220\003\001<\373\376\377<\013\377\367=F\367\331>iYz?\"\325\260=j\220\241>\335)]?t\304\360>\370\027\177?\3735g<\261\362c=-CW>\263\002*?uld?\265\330\304>\335Tr?\352\004O>\255*%?\213jj?\304\034\236>\003\222Z?\025\250\377>\342\377\177?\367\213\3616\206\213\3617\276\211\3618\237\202\3619$f\361:S\364\360;\275.\357<\3722\350=l\337\315>B/v?d\006\027>A\300\000?\276\375\177?\257`\0209\230[\020:>G\020;\356\365\017<\033\262\016=z\271\t>\357f\356>P\312~?\232\034\232<f6\227=?\014\214>\031{K?\221\372&?\237Bh?lN\254>_\243d?\254\177\303>\230\263q?X\377W>\237o*?\275\334c?>\\\310>:\350s?\224X8>\267(\027?\242\236w?,\262\001>\321\211\342>\003\234|?\210\037V=\374\355J>\340\266\"?\247+m?c\216\213>\327\010K?G\007(?\347\366f?\222\262\264>\212\331i?\241\336\241>zc]?\230t\357>G\356~?\035J\210<\246\005\206=\321\200z>\3338=?loE?\375\2524?\\\250T?S\004\020?\326\375{?\"\206|=\235\364l>\242\0376?\217:R?\274Y\026?\3211x?Q(\362=I\206\325>\326\363x?\337O\333=\247\323\303>.\333q?U\314U>\353()?y\207e?\231\336\275>\303\352n?\230\026\177>\027\213??\375\350@?\265*>?$\235C?{\2218?\037\000N?\266\357 ?\311\014o?\227>}>e\235>?\211\275B?\345f:?\333\264J?\305\313(?\300\376e?\366\347\272>\010Zm?\253Q\212>/\347I?Y\251*?\373\217c?\230:\312>\253\264t?\\\274,>\363\230\017?\3412|?\013\253o=\376\244a>\"\354/?\307\035\\?\255\324\366>\355\253\177?\032\357\247;\306\022\247<z\252\243=)\226\226>\002\230T?\222/\020?\024\350{?U\345\200=\"\221q>}\2248?\315\372M?\253\374 ?o\377n?\331\367}>\344\372>?\016\006B?\202\343;?_\365G?\351\027/?\332X]?\231\262\357><\366~?4X\204<\3334\202=I\333s>\307\3109?\350\323K?\232(&?\257?i?\222\325\245>#>`?\263\212\336>\214\240{?\220\212\211=\335M\200>\305M@?\027d??W6A?r\215=?\'\315D?|\t6?\375_R?w\371\025?~tx?\243R\352==\203\317>\372\320v?\354\252\r>\373\"\364>Cs\177?\343o\014<\271;\013=\032\200\006>\007\253\351>I\r~?\300u\367<\034\374\357=\006\335\323>\365cx?cD\354=\236\002\321>\366_w?TZ\005>+\371\347>\270\276}?\232\014\017=\251\r\n>\365\341\356>\377\332~?\326\330\221<\033@\217=\006;\205>\252\037E?\252W5?V\212S?\006\364\022?\032cz?\234\254\257=\356\232\240>\325s\\?V\344\364>\234\204\177?FP\366;Iv\364<\274*\355=\267\263\321>\177\240w?U\226\001>>`\342>j\222|?TuX=\361\004M>\266\370#?2\310k?N\370\224>\221@S?G\264\023?\372\356y?\031\207\275=\001\375\253>\010nd?\321\316\304>KPr?AFO>\225Q%?D=j?\252I\237>\276v[?\361\222\372>\217\342\177?:m\353:\371\000\353;\204Q\351<X\254\342=\300\225\311>\001ot?r\2630>\2435\022?\247\321z?\034p\242=\331\215\225>E\275S?\345n\022?\337\260z?$^\246=]\332\230>\261pV?]@\013?\237\005~?|;\373<\016\207\363=\331\221\326>\210Ky?f\360\320=u\237\273>\222\274m?\007\257\207>\375sG?\32490?\r\251[?\006s\371>\027\325\177?\222\210+;\242\025+<JL)=\355L\">\221\223\010?\310\331~?\034s\222<\340\324\217=\360\272\205>\032\232E?EN4?p@U?\227p\016?\370\275|?\265\332M=5\202C>M.\036?v\304q?\215\017W>\305\344)?\262\223d?A\342\303>\013\342q?\255jU>\001\360(?{\320e?\252\016\274>\311\367m?u\030\206>M\363E?\305\2133?\014|V?\257!\013?Z\020~?\023\363\365<\272\220\356=\214\306\322>\300\002x?r\255\367=m\271\331>\371Fz?\340\010\263=3b\243>3~^?\240\370\350>\255\355}?4\202\003=\230\222\376=\261\355\336>F\272{?\037o\206=\0358{>X\226=?\010\274D?G.6?\307!R?_\231\026?\037\005x?\\f\367=\206\203\331>\3176z?\326\366\264=U\371\244>B\242_?a1\342>\211\207|?\322\032[=dbO>Sb%?\271)j?`\313\237>}\330[?\001c\370>\n\306\177?v\244g;\333\322f<]\222c=\217\355V>\r\321)?|\255d?\n@\303>u\225q?~\253Y>rf+?\263\221b?\003a\320><$w?\255\324\010>\005\030\355>\217\232~?.\277\261<\336\343\255=& \237>YW[?JF\373>\254\351\177?\242\223\262:YU\262;\344\\\261<\327\205\255=\022\322\236>)\034[?\275\227\374>d\364\177?\022\2709:c\2269;\330\0179<\270\3706=O\314.>\267\365\020?u\201{?\005K\215=\216\213\203>\374~C?$\3218?V\217M?\331\001\"?\t\356m?v[\206>\0143F?.\0003?\267[W?\"\302\010?+\315~?\320\262\230<)\332\225=3\343\212>\252lJ?\377s)?\217&e?kD\300>#\"p?\315!n>\026\3016?\345\'Q?\355\026\031?\017*v?4S\027>c\366\000?K\374\177?\217\037m9\325\021m:\362\332l;\316\377k<\217\231h=$d[>\005c,?@7a?\254\250\330>G\364y?\205\345\274=Hy\253>P\027d?:\356\306>\025Gs?\374pA>\031\346\034?o\363r?\232$F>q\315\037?g2p?\303=m>\351F6?\t\370Q?i\004\027?\324\270w?Q*\000>v?\340>\316\017|?\360+x=\236\"i>\234\0164?@\250U?][\r?`6}?\264v0=}\334(>\364\003\r?dZ}?~\246\'=\324\311 >\232\212\007?\202\034\177?\247\263b<\240\220_=\314\\S>E\274\'?bTg?\354W\262>vqh?\360\034\253>4\332c?\017l\310>\031\357s?\001\3657>\365\350\026?\210\314w?\312\006\376=\233\204\336>\364\236{?\314\273\211={x\200>Bx@?\231\016???\337A?~3<?J_G?\006h0?Mc[?\003\002\373>\024\347\177?\253K\307:\030\376\306;\274\310\305<G\002\301=\271\321\256>\257Af?\277<\271>\243pl?%\206\220>\032uO?\022Z\035?\341\211r?\230\016L>\307d#?(ml?\300\235\220>\247\211O?\003\'\035?\215\270r?\322qI>\326\320!?\372!n?G\366\204>\250\335D?\373\3455?\336\233R?\033_\025?\t\335x?\035\001\336=_\360\305>\352\324r?\346\332G>c\331 ?\273#o?\362\377{>\371\373=?\315\367C?k\3217?cQO?\255\262\035? 8r?q\237P>\222\036&?\244Ki?\351\206\245>\243\006`?.\330\337>\005\366{?\240j~=$\235n>\000\0037?\327\266P?\3334\032?\342Du?k\177$>\213\022\n?/j~?\270\246\311<\376\257\304=?\314\261>l\034h?\'G\255>\020Ee?w\203\277>\177\301o?\031js>s\2159?\322>L?\217*%?\256jj?\331\033\236>O\221Z?\017\254\377>\344\377\177?\t/\3346\253.\33470-\3348E\'\3349\233\017\334:\005\261\333;\3647\332<\332g\324=T`\276>\207-o?\312w{>\302\266=?\224}D?0\2646?\364=Q?\362\336\030?\302Uv?D\315\024>\212[\376>M\375\177?\271\242,9r\233,:Z~,; \n,<\251;*=u(#>R)\t?F\260~?\273\000\247<+\231\243=\236\207\226>\007\214T?;O\020?\000\330{?-\327\202=\212\366t>\321\\:??\307J?\322\240(?f5f?=\213\271>\360\233l?s`\217>\001tN?l\324\037?w+p?\013\237m>\023{6?c\237Q?\002\347\027?\265\022w?\246\331\t>\366\225\356>\277\320~?\376\354\226<)%\224=\312m\211>\342\024I?U\214,?\330\375`?\022\005\332>\201]z?\325W\260=\271(\241>2\335\\?%\202\362>\372I\177?\272\2045<\347\2013=\370\243+>\332\336\016?x\213|?\325%Z=\216\207N>\362\337$?\000\301j?\322\334\233>\177\324X?\341\264\004?e\247\177?4\371\260;\205\004\260<S<\254=/\300\235>\024KZ?\177\234\000?\201\376\177?\221T\2778\031P\2779:>\277:\313\366\276;\344\331\275<\211s\271=\203\250\250>k3b?\276\244\322>\312\366w?=\024\371=1\311\332>\034\227z?\372s\251=\257n\233>&~X?\036\244\005?\267\200\177?S\024\376;\373\033\374<\302Y\364=[2\327>\027\177y?\241\323\312=L\275\266>\344\010k?\211\374\231>=YW?\345\310\010?P\313~?\313\235\231<[\274\226=3\244\213>\255\034K?\276\330\'?\3730g?h<\263>H\373h?\366\226\247>\236wa?\023!\327>\224yy?\025{\313=\207C\267>qUk?\267\373\227>\205\274U?\024%\r?\333L}?\336\366*=\021\324#>\"\236\t?\000\216~?\302\364\267<C\323\263=\037\t\244>\216\366^?\0220\346>\273e}?\326\337$=\335<\036>\021\311\005?\036z\177?P\234\005<a\205\004=\304;\000>\237Y\340>H\026|?\003\232v==\301g>\252M3?\333\337V?T\023\n?\360i~?\376\305\311<\272\315\304=D\344\261>\027+h?\263\347\254>;\007e?W\n\301>\026\204p?\205\302h><\3323?I\375U?Mw\014?e\222}?y\355\031=\236$\024>\016l\375>[\371\177?\264\243\3249\240\215\324:c5\324;\222\325\322<yh\315=j\316\270>u3l?W$\222>6\333P?\n\331\031?\220\217u?^7 >\016&\007?\2263\177?\\\306K<\213=I=pZ?>k\230\033?\372\031t?&\2075>\rY\025?\023\341x?\377\206\335=\263\220\305>a\251r?[KJ>\232T\"?\254\225m?\240\271\210>\177mH?\347\010.?3\343^?\347\242\346>\257|}?\010@\037=\376\016\031>C.\002?\372\354\177?\306!\230:\222\364\227;-@\227<Gu\224=M\262\211>GTI?N\373+?t\306a?\021@\325>v\334x?\177\022\336=\374\375\305>\026\333r?I\202G>U\243 ?\n[o?\316\376x>#s<?O\347F?\276r1?\177\313Y?\200\003\002?\310\357\177?\036\271\201:@\230\201;\n\025\201<\261\030~=aUn>\252\3346?\251\370P?\224\216\031?_\313u?\236\307\034>\245\306\004?\303\244\177?69\266;\3135\265<\2423\261=\224\336\241>pc]?\316t\357>N\356~?\243F\210<J\002\206=\373zz>\3405=? uE?\234\2364?\271\274T?n\316\017?\242\030|?\022\010v=\331@g>S\0073?SPW?;\341\010?\231\304~?]\361\234<\245\357\231=\232]\216>;\217M?\031\002\"?\306\355m?F]\206>\3054F?f\3742?\275aW?\260\261\010?\247\321~?\033z\226<\201\266\223=\036\017\211>\r\275H?uT-?\313\344_?$\243\340>a(|?\3516r=,\344c>\217,1?\2457Z?O\323\000?F\375\177?\351h.9|a.:\312C.;*\315-<.\365+=\027\275$>c<\n?\350\\~?\3264\320<\'\352\312=[\317\266>9\023k?h\267\231>\022\"W?L_\t?\245\240~?|\274\256<V\002\253=\322\272\234>l\201Y?\007\323\002?\030\340\177?r\"\377:O\243\376;\276\250\374<\331\335\364=\344\226\327>\374\236y?[\n\307=8\262\263>\272Ai?(\310\245>\2604`?\214\303\336>\\\257{?\270\300\207=;\202}>\220\277>?\233zB?6\362:?i\265I?&\034+?!\366b?\022\365\315>\2737v?>\211\026>\366g\000?W\377\177?\214\340(8\317\336(9\330\327(:\001\274(;\312L(<6\222&=\027\314\037>M\334\006?\273C\177?a\272;<\272\2239=L+1>\023\204\022?\245\244z?\032\325\247=#\024\232>\nlW?\216\225\010??\331~?\320\266\222<(\026\220=\n\363\205>\245\317E?\242\3313?A\376U?\261t\014?i\223}?\256\255\031=\235\351\023>+\030\375>\217\367\177?\022\020\007:A\376\006;\022\267\006<\202\233\005=\322?\001>\364\336\341>=t|?\020\314_=\276\221S>Y\333\'?\274-g?WQ\263>\325\007i?\232D\247>\241>a?\327{\330>w\346y?v\212\276=;\320\254>\376\367d?\215j\301>E\263p?a*f>Vn2?\334BX?\336G\006?6b\177?\026i\035<\356\345\033=\352\366\025>\223\000\000?\000\000\200?L>\2510L>\2511L>\2512L>\2513K>\2514G>\25159>\2516\001>\2517\"=\2518\2439\2519\247+\251:\302\363\250;\300\024\250<\346\241\244=\353e\227>sBU?;k\016?c\300|?\373CM=\234\372B>i\332\035?\'\023r?\372\256R>\030V\'?\237\322g?\264&\257>xwf?\245\344\267>\232\260k?+\227\225>\004\305S?\236Z\022?\207\274z?\227\370\244=\251\256\227>\317}U?\332\314\r?8\006}?N;<=\334\2243>{\026\024?\353\261y?\207\312\304=\257\341\261>\203)h?\365\361\254>\344\re?H\340\300>`op?\276\345i>\275x4?\351\372T?\206)\017?nh|?\234\252b=\201\037V>UY)?\016Ie?/j\277>\300\264o?\036\034t>\267\3529?\215\226K?\303\271&?M\221h?\365L\252>\236Oc?\233\312\313>DZu?\345E#>`=\t?\202\252~?&\333\251<\215U\246=+\323\230>\345jV?\007P\013?\032\000~?\\\363\375<\005\024\366=\265\202\330>\226\350y?\337I\276=\250\233\254>\310\325d?MB\302>\014\034q?\244c`>\0038/?\213)]?P\306\360>0\030\177?\254\375f<\371\273c=\213\022W>\201\346)?l\221d?\206\360\303>\276\350q?I\013U>W\270(?\200\027f?\036J\272>s\004m?\257\231\214>\352\372K?\023\314%?\177\255i?\302\001\243>G8^?\375\224\352>E5~?\223\302\343<~m\335=\266|\305>?\240r?4\316J>\260\243\"?r@m?u\000\213>k\207J?\2735)?\373ve?3G\276>\242 o?\362*|>\315\021>?~\315C?,+8?V\264N?s6\037?\022\307p?R\023e>n\3241?\3673Y?N\253\003?&\312\177?\':W;4\205V<(\266S=\314\304H>\306g!?S\220n?9\375\201>D\371A?\344\375;?\365\303G?\340\206/?\312\264\\?xl\363>\326a\177?\t\310\035<\rC\034=\361L\026>`=\000?\305\377\177?\024pk7<ok8\332kk9R^k:8(k;5Pj<Z\366f=a\360Y>\007\216+?\353[b?\372\253\321>\262\235w?4\300\001>\305\236\342>\324\240|?w\363T=4\341I>Z\024\"?Z\332m?\250\342\206>@\263F?\357\3451?\261\030Y?K\367\003?\025\301\177?\202l{;\224uz<l\241v=\302\307g>;Q3?#\332V?\333\"\n?\te~?\3321\314<\336\032\307=\205\277\263>\247Ii?\000\224\245>\342\017`?\251\240\337>\007\350{?\344\346\200=\332\223q>\355\2258?B\370M?\335\002!?\014\371n?xP~>\206\'??\030\256A?\207\230<?\230\240F? \0172?[\330X?,\252\004?\366\250\177?\246\330\255;\211\354\254<\024F\251=aH\233>\010`X?Z\367\005?\236q\177?\357\022\016<\213\327\014=\304\377\007>\250\337\353>\356j~?uH\311<^V\304=\323\203\261>\030\360g?[g\256>\r\376e?o\354\272>r\\m?*A\212>\002\330I?b\314*?2ac?q]\313>\217-u?:\325%>\026\372\n?\010\036~?m6\357<8:\350=\006\345\315>s1v?\001\346\026>k\251\000?@\376\177?\216;\3408k5\3409\337\034\340:\306\272\337;\2703\336<\312,\330=V[\301>\324\253p?3\223f>\376\2472?\312\347W?\213B\007?,-\177?\014&R<\002tO=5\362D>D\021\037?B\353p?\344\024c>`\2710?\326\347Z?[\301\375>\366\372\177?\024:\2419c-\241:\246\372\240;10\240<O\016\235=\375\002\221>\230\341O?\367K\034?.}s?\267d>>M\376\032?o\235t?+\017.>\003y\020?\232\302{?\217m\205=\\xy>\205\261<?:qF?\211w2?[4X?\333o\006?CZ\177?DQ%<=\246#=k\034\035>s\001\005?\306\233\177?\243%\310;\255\354\306<\025\030\302=\005\263\257>\314\317f?\006\256\265>\201lj?\266\017\236>\007\210Z?\231\340\377>\374\377\177?\321\203v5\302\203v6\207\203v7\231\202v8\344~v9\016pv:\2774v;\366Gu<\353\233q=|[c>\244\3400?\365\253Z?!\025\377>)\377\177?\273{W8\346xW9\220mW:>@W;A\213V<\014\274S=\024\312H>\374j!?\371\214n?c\024\202>\017\020B?\334\316;?\375\033H?\371\300.?T\330]?\344\310\354>\306\216~?\277\222\267<\246u\263=\356\273\243>\001\277^?ey\347>|\246}?\233\377\024=\022\224\017>\304\344\366>\023\255\177?\213\244\245;0\316\244<i}\241=\212\301\224>\272\022S?i+\024?\301\244y?\355Z\306=\324$\263>\"\355h?\305\363\247>\227\267a?\341\232\325>\252\372x?n\201\332=X1\303>z\216q?\211\016Z>Y\237+?TDb?\353<\322>\326\321w?\341g\375=\021\r\336>x\177{?h\210\215=v\300\203>c\262C?\217d8?gON?\023. ?\314\321o?O\206r>\302\0259?7\025M?\355(#?\"\257l?\033\336\216>\020\001N?j\355 ?%\017o?\315\035}>\322\214>?\362\335B?:#:?\0230K?0\253\'?\223ig?\000\317\261>\032\036h?8<\255>\376=e?6\260\277>\002\330o?\201/r>\013\3508?\244fM?ad\"?\273\204m?\235-\211>_\331H?\007\024-?\320?`?\242\200\336>\352\235{?\352\333\211=F\224\200>\360\223@?\311\326>?\tMB?\301P;?\267\006I?\257\254,?\276\320`?=\026\333>l\255z?\372\307\246=\3732\231>\374\267V?z\177\n?,G~?t\356\332<\234\024\325=2\351\276>iso?i\253w>[\304;?\236/H?\272\224.?\333\030^?\346M\353>\260S~?\253\301\324< ;\317=\013C\272>\230\000m?\363\263\214>\226\022L?\327\223%?\272\357i?\307K\241>\'\367\\?k\353\361>\2769\177?w\250E<\004FC=\310\3669>\"1\030?\001\333v?\371\025\r>WK\363>\221^\177?~\t!<Kt\037=0?\031>\nP\002?\233\352\177?\231\027\253:m\336\252;U\372\251<qs\246=4\354\230>\020\177V?\211\031\013?/\023~??\216\364<CA\355=\006\305\321>\301\246w?\3068\001>i\324\341>\301q|?\220f`=V\033T>\003,(?\335\310f?\220\332\265>V\206j?\324c\235>\017\004Z?\225d\001?=\370\177?\211P\3709n2\370:\035\272\367;\254\332\365<\311y\356=\364\264\322>\210\374w?\026h\370=\334F\332>\366pz?\203\004\256=?;\237>\330k[?9\321\372>$\345\177?\030\314\326:\373q\326;\265\n\325<_\200\317=Cz\272>\243\036m?0\347\213>\201YK?\275I\'?\314\341g?3\304\256>\0329f?\222s\271>\347\216l?\355\270\217>\274\301N?|\025\037?)\347p?\271Nc>\214\3310?\313\266Z?\266\327\376>\251\376\177?\270t\2538!q\2539\307b\253:i)\253;\210D\252<\217\272\246=\300\'\231>\366\256V?\353\227\n?\036?~?\217\347\336<\333\326\330=s\341\301>0\355p?\246\371b>7\2520?\351\376Z?2>\375>f\370\177?\2736\3639\331\031\363:l\246\362;n\332\360<\234\305\351=r\026\317>\226\247v?E\021\020>\323\230\367>d\271\177?\323\021\215;Zv\214<\315\r\212=q\277\200>\341\276@?\004\200>?\371\366B?\346\3569?\372\216K?\247\313&?\242{h?\210\332\252>\031\256c?\022\177\311>[et?\332?1>\203\221\022?\333\234z?\335\303\250=\250\333\232>M\nX?\252\343\006?&B\177?\342L=<\367\034;=\302\2202>Zm\023?X\032z?9\\\270=\242\303\247>q\226a?.e\326>\013=y?\243\247\322=\264\374\274>Fun?\017\270\202>\252\260B?\271\201:?\332\203J?\010>)?Ile?\004\213\276>cCo?\352Gz>\310\033=?\377\246E?524?BnU?c\366\r?3\364|?e\241@==\2227>\243\251\026?\236\371w?s\277\370=\003\211\332>d\204z?\223\261\253=\274L\235>B\362Y?\242\226\001?\350\365\177?\210s!:\023Z!;a\364 <\227_\037=\031,\031>\252B\002?\220\353\177?Rs\243:$?\243;\361n\242<m6\237=\330\325\222>\023sQ?\351W\030?\230\275v?\264\312\016>\250\302\365>&\227\177?H]\321;\325\006\320<|\276\312=W\254\266>.\377j?{=\232>\357\214W?\240;\010?\340\360~?8\000\207<\256\306\204=\374Ux>O\034<?\337\212G?\263\0060?\363\365[?\310\271\367>\211\273\177?\342\310\210;\2666\210<\345\362\205=8`z>3(=?E\217E?\323e4?\347\031U?(\327\016?\013\217|?NGY=\256\300M>$i$?\nIk?\344N\230>\001\000V?\376o\014?=\225}?\346:\031=o\177\023>\022\201\374>\307\363\177?\003\177C:\260YC;\236\304B<\344s@=\003i7>0\217\026?O\014x?\264\216\366=\342\337\330>3\005z?n\341\272=\342\323\251>U\376b?U\302\315>\332#v?\335\256\027>\3556\001?\031\372\177?\336\314\2749v\273\274:\344u\274;j`\273<:\027\267=\363\270\246>\205\335`?\344\310\332>\006\227z?\250v\251=\354p\233>\350\177X?B\237\005?\221\201\177?@`\374;\245n\372<\302\306\362=6\377\325>\276\033y?s\230\326=\014\034\300>\003\016p?\316;o>\240W7?\355$P?\232\243\033?T\020t?0\0236>]\263\025?T\244x?\371\260\344=\202\'\313>V\027u?\230\032\'>\253\325\013?\304\317}?\206\334\n=^\'\006>\036(\351>/\366}?Mj\001=\021\247\372=\272\371\333><\356z?#\002\237=\256\251\222>aMQ?\305\267\030?\035tv?\014\014\023>\255\334\373>\341\356\177?\262\362\210:\021\316\210;\331;\210<\334\367\205=\332hz>\235,=?\326\206E?&x4?\341\373T?\362&\017?\247i|?\277^b=\010\334U>\0172)?\265{e?:)\276>;\021o?\330\000}>-~>?\220\372B?c\3479?\224\234K?\206\253&?\205\242h?i\334\251>\021\004c?\324\236\315>\346\025v?\342|\030>\277\307\001?S\363\177?v\314J:L\244J;\344\003J<<\206G=\034\316=>\235\237\032?\302\354t?Q\211)>\253w\r?\203*}?W]3=\235\202+>\255\310\016?\277\225|?\312\245W=LKL>F\211#?\265Dl?\246\257\221>\332vP?\003\326\032?R\277t?\355 ,>\3351\017?zd|?\251\240c=D\372V>l\330)?\332\243d?\251|\303>,\262q?\223\023X>Q{*?8\315c?\017\275\310>+\022t?\200\3705>*\242\025?\371\257x?\252Q\343=l\026\312>t\245t?E\232->\316+\020?\373\351{?W\252\200=\373)q>\367]8?\006[N?\237\021 ?\\\356o?\350\366p>\357B8?\227\212N?\004\235\037?cbp?<\234j>\275\3334?\373WT?\225\330\020?\331\220{?\272o\213=i\361\201>\243\355A?\333\025<?\376\226G?\231\353/?\225\036\\?\014\320\366>\230\253\177?\231\230\250;\210\272\247<aK\244=K\035\227>\004\007U?\\\t\017?\234w|?P\372^=\337\326R>\220m\'?\274\265g?\013\342\257>C\355f?\224\360\264>\366\375i?\204\355\240>G\261\\?\323\200\363>\325c\177?\"\314\033<\337P\032=\210\200\024>\242\356\375>\271\373\177?\241\322\2109}\311\210:\362\244\210;\023\023\210<p\320\205=Q$z>\224\t=?\274\311E?\207\3463?[\351U?\325\254\014?^}}?O\025\037=\230\347\030>\242\022\002?\320\356\177?Hs\211:aN\211;\027\273\210<\335r\206=\235>{>\247\231=?\250\265D?\366;6?\230\nR?\331\324\026?\347\332w?FX\374=\211@\335>\225H{?\203%\224=\027n\211>*\025I?\262\213,?\272\376`?\266\377\331>\352[z?\200\210\260=\001Q\241>\005\373\\?\363\324\361>C7\177?J\037H<\206\255E=>#<>L\222\031?f\310u?\\\363\034>\374\344\004?-\240\177?\314]\277;\262?\276<\235\324\271=\376\367\250>\216ib?\035X\321><\177w?i\207\003>\344D\345>v5}?\001\2600=\331\020)>\t\'\r?\014L}?S)+=P\002$>\222\275\t?}\204~?\000\250\274<\306O\270=n\271\247>h\217a?\030\220\326>\367Jy?\232\001\321=&\255\273>\342\303m?\340|\207>\317DG?\n\2430?\321\t[?\'\000\375>\001\367\177?-\354\017:\362\327\017;\037\207\017<?E\016=0T\t>\305\322\355>\234\265~?\365\\\244<\273\020\241=\371e\224>\342\305R?\212\362\024?\323$y?p\205\325=\206B\277>\267\240o?\3123u>\277|:?\363\214J?\331()?\220\207e?\003\336\275>u\352n?\313\032\177>2\215??\316\344@?33>?\245\214C?R\2648?t\302M?\313\205!?\357pn?\007\326\202>\374\315B?\220D:?q\363J?m9(?\004\270f?\303F\266>\325\304j?@\303\233>|\300X?i\354\004?\n\237\177?H\243\301;X~\300<j\370\273=\317\267\252>\373\226c?\007\017\312>V\242t?\260\307->\320I\020?\303\332{?\266\201\202=mat>\366\016:?\337TK?\245T\'?g\324g?)\033\257>-pf?V\023\270>\337\312k?H\346\224>}1S?}\333\023?\275\326y?\235i\300=\313U\256>\331\362e?\3233\273>\345\202m?.:\211>\t\345H?x\371,?/e`?\247\237\335>Db{?\232\r\221=\215\307\206>\227\231F?\226\0362?\'\300X?T\355\004?\345\236\177?_\353\301;\225\305\300<M<\274=9\357\252>\333\273c?V)\311>\274@t?RT3>\220\354\023? \314y?\342\254\301=\036\\\257>*\231f?\271\014\267>A6k?\321\314\230>\306eV?\333]\013?3\373}?l.\000=\tW\370=\3619\332>&mz?\032y\256=\377\233\237>\330\264[?u/\371>\220\321\177?\326\2379;>\0319<\350\0017=\254\324.>:\373\020?\211~{?8\245\215=K\331\203>{\312C?\21718? \251N?\003R\037?$\254p?\315\216f>\223\2452?\236\353W?\0108\007?\215/\177?\001\311O<f&M=\376\337B>\356\311\035?\203\"r?\346\323Q>\372\324&?Rph?b$\253>$\337c?>M\310>\264\341s?\032\2678>,e\027?\251rw??C\004>\310[\346>\204n}?\350\270\"=\377A\034>\337i\004?\025\262\177?\237\246\233;Y\351\232<l\373\227=\032\264\214>\271\022L?\204\223%?\034\360i?@I\241>H\365\\?H\366\361>\357:\177?\316xD<\251\035B=\232\3528>\025\206\027?\210Zw?W\253\005>\360p\350>\373\324}?a\224\t=_\365\004>\303c\347>U\242}?q\004\026=\335\205\020>K@\370>\365\303\177?y\365o;\215\024o<o\227k=y\n^>\357\344-?\335\026_?-p\345>x>}?\325{.=\014\r\'>\212\314\013?#\323}?y\010\n=\247a\005>\000\004\350>\300\300}?\340\214\016=\327\226\t>H4\356>O\303~?e\224\235<j\214\232=\302\342\216>,\005N?d\343 ?t\031o?\256\216|>`D>?<kC?\306\3728?OEM?\356\264\"?\303-m?\373\177\213>\274\373J?\000&(?i\320f?\022\252\265>6jj?\374\036\236>\265\223Z?{\236\377>\333\377\177?\217\230\02479\230\0248\340\226\0249|\221\024:\356{\024;\316%\024<\337\316\022=\326\213\r>\000\366\363>\020o\177?O\236\020<\205W\017=WS\n>\263G\357>r\350~?|.\213< \321\210=\211Z\177>*\255??B\245@?\322\263>?\237\221B?\\\302:?l\rJ?\364P*?Y\005d?\225^\307>\373xs?R\241>>[$\033??}t?\037\344/>\264\255\021?\341\035{?\310H\231=\306\317\215>\003\021M?\0143#?\002\244l?\251)\217>\301CN?\222J ?\027\265o?a\027t><\3509?\n\233K?(\257&?!\236h?\036\371\251>`\027c?L\'\315>\242\346u?\3765\033>c\257\003?\256\311\177?|\031Y;`aX<\316\205U=OdJ>\262c\"?w\205m?\225(\211>\265\324H?\247\036-?\3270`?\256\332\336>[\265{?6\007\207=F@|>\237\034>?\177\270C?\243W8?+fN?U\366\037?\251\tp?\271xo>\020x7?\303\354O?\0230\034?\313\225s?<\001=>\207\036\032?$Wu?\275s#>\227\\\t?p\241~?0X\256<P\242\252=\321j\234>FCY?\236\200\003?\357\316\177?Y\037D;\031\211C<\2603A=\301\0268>\223\376\026?\006\275w?\016\327\377=J\341\337>O\370{?\333\334}=\367 n>\243\3006?\251(Q?\372\024\031?\225+v?\255<\027>\204\346\000?\302\374\177?\021\217O9\215\204O:\177ZO;\214\262N<\374\026L=\262\353A>c2\035?/\256r?\201\006J>\360*\"?D\302m?\365\207\207>=OG?\316\2130?\032-[?=7\374>\256\361\177?\233\023e:\\\340d;\274\023d<\357\346`=\240\215T>\350n(?\236tf?\352\366\267>\343\272k?\355Q\225>b\213S?L\361\022?\270dz?\'{\257=\363q\240>DU\\?\327\224\365>t\223\177?\005\274\330;\tM\327<u\244\321=\267.\274>\311\010n?\231\243\205>\315\203E?\277~4?\017\361T?\255C\017?\377[|?\356\257e=\253\316X>Q\347*?\"=c?K=\314>\330\210u?\031\232 >\332i\007?)$\177?\353\031[<\325+X=5\303L>I\321#?l\364k?#\316\223>\344ER?\233<\026?\034Fx?R\306\357=\325\263\323>\273Ux?\214\360\355=\243K\322>\030\327w?S\312\374=t\226\335>\313_{?\327Y\221=\372\010\207>|\327F?\313\2251?C\225Y?\202\233\002?\316\344\177?lx\331:\016\034\331;\315\253\327<<\376\321=\031v\274>\207.n?\336\237\204>{\212D?\217\2306?#mQ?\006g\030?\026\262v?\204u\017>\310\270\366>\352\251\177?\221\361\253;\230\n\253<_x\247=\226\306\231>3.W?D>\t?@\252~?\307\373\251<\324t\246=]\355\230>\377\177V?\002\027\013?\017\024~?\317\037\364<j\331\354=7u\321>\325\211w?!\351\002>uY\344>r\003}?\214\350<=&24>\202|\024?<qy?^x\314=]\016\270>\023\310k?\034\371\224>=AS?\206\262\023?\016\360y?,f\275=+\342\253>i\\d?g=\305>?\203r?\216mL>\334\235#?\323-l?qJ\222>\344\373P?h\206\031?\345\321u?\215g\034>\365\203\004?q\256\177?\216\351\242;5\032\242<\013\345\236=\033\221\222>a8Q?\032\355\030?\276Jv?-p\025>xB\377>t\377\177?\360Q\0148\275P\0149\356K\014:\2658\014;\347\353\013<\377\271\n=.\007\006>\232\370\350>\254\355}?v\202\003=\023\223\376=\r\356\336>^\272{?>l\206=\0343{>\313\223=?\360\300D?\275#6?\2353R?\224k\026?V%x?F\237\363=N\244\326>\200Qy?];\320=L\017\273>>om?\245\300\211>\210aI?\354\334+?(\360a?\002A\324>H\206x?\276:\350=n\345\315>\2341v?\250\343\026>\303\247\000?H\376\177?\221\337\3338\252\331\3339\020\302\333:\275c\333;\266\353\331<\252\037\324=\033\'\276>$\020o?\372\017}>\325\205>?\234\353B?\253\006:?\351cK?91\'?\335\377g?\345\000\256>\223\274e?J\215\274>\301:n?\242K\204>/9D?IF7?\346BP?|X\033?\335Pt?\346i2>\nT\023?\254)z?0\210\266=rC\246>Z\213`?\202\271\334>\246#{?)\227\230=\2568\215>\340\211L?dw$?\3218k?\247\273\230>\356WV?8\203\013?\330\355}?\227w\003=\273~\376=\304\336\336>j\266{?\177\346\206=w\007|>\312\377=?h\360C? \3417?\3715O?\223\366\035?\325\370q?$&T>X2(?\353\300f?\233\r\266>\335\243j?#\237\234>\360kY?\026\017\003?\222\332\177?\271\240\025;EI\025<\013\355\023=j\225\016>\307u\365>\351\220\177?\273\315\335;aM\334<\271`\326=\375\357\277>\376\367o?\034pp>\202\3737?\333\007O?\231h\036?E\215q?\255\037Z>/\251+?\3516b?M\217\322>0\357w?J\370\371=\254u\333>\316\310z?\321\177\243=Qr\226>xzT?\233}\020?<\300{?\305\266\205=\260\367y>\277\362<?A\365E?\177\2073?\357\202V?\022\017\013?\316\026~?\205\305\362<\265\223\353=\244z\320>\303-w?\312F\010>\357G\354>){~?!D\301<\343\264\274=\235Q\253>\030\375c?\'\222\307>\302\217s?rX=>\205U\032?\022*u?J\010&>\232\034\013?\036\022~?t\024\365<s\277\355=\362%\322>\235\311w?!^\376=C\306\336>\020\260{?\346\252\207=`\\}>r\254>?\022\240B?K\244:?\222DJ?$\321)?^\255d?\312@\303>\320\225q?l\246Y>\210c+?\246\225b?\251H\320>+\033w?\270[\t>\312\335\355>,\267~?\355\226\243<\241R\240=\264\305\223>\303>R?\357N\026?[9x?\311E\361=:\331\324>\364\271x?\222$\342=\377+\311>\340At?\277C3>\313\341\023?\323\322y?\345\340\300=\241\266\256>}0f?\233\252\271>0\255l?R\353\216>\275\014N?\362\320 ?d,o?\232\207{>\316\276=?\016nD?e\3256?\037\005Q?\no\031?\177\344u?|U\033>T\305\003? \307\177?\202Nc;\256\204b<\364b_=\0334S>_\244\'?\006rg?d\230\261>\263\374g?r\025\256>\273\311e?\2319\274>\214\016n?\364{\205>\340]E?\013\3214?\243iT?\006\252\020?9\251{?c~\210=#\313~>5e?? 4A?\364\221=?{\304D? \0346?~@R?{J\026?u<x?\216\350\360=\363\221\324>\330\241x?\337\373\344=\254a\313>L/u?\277\273%>\334\350\n?\354#~?@O\354<.~\345=\317\306\313>\267Xu?\235\\#>\331L\t?\007\246~?\335\022\254<\222u\250=B\232\232>\217\326W?\333q\007?N\"\177?\177\362\\<\270\367Y=Z^N>[\307$?M\335j?\351\037\233>*@X?MO\006?\277`\177?\221\335\036<8S\035=FH\027>\260\356\000?\206\374\177?\231\210^9\202|^:+L^;#\213]<=\214Z=\n\343N>\177\026%?\365\201j?\366\200\235>}\032Z?u%\001?\276\372\177?\320.\2509\000!\250:\312\351\247;\205\r\247<o\245\243=\355\221\226>\205\224T?\3138\020?h\343{?\376u\201=\364\215r>\310\0319?\n\016M?5:#?!\234l?*_\217>\340rN?0\327\037?\266(p?\252\305m>\305\2176?!|Q?\334@\030?\031\317v?\323\306\r>WK\364>\372v\177?\262\274\010<\215\230\007=i\033\003>J\244\344>\207\023}?5\3738=\224\2400>H)\022?\255\330z?v\230\241=R\330\224>\316%S?\332\371\023?\327\303y?\037\251\302=\207(\260>N\031g?\010\325\263>uVi?\264?\245>:\324_?i\006\341>\215@|?\272Yl=a\266^>,F.?\323\212^?\r\256\350>,\340}?(\324\006=\373c\002>\035\223\343>\000\330|?o\202G=\256\312=>u\235\032?\216\356t?\025o)>\036f\r?\3411}?7\2201=\253\335)>\020\260\r?\225\022}?C69=L\3260>uL\022?\243\304z?\267\377\243=\303\335\226>\345\322T?\257\223\017?q5|?\305\013o=U\030a>c\235/?S\223\\?:.\364>Mt\177?\250f\013<\0067\n=\020\215\005>0D\350>\267\314}?q\234\013==\332\006>\341/\352>2$~?\375,\354<\345]\345=\301\255\313>|Nu?\250\362#>\356\262\t?\271\207~?\n\017\273<\222\311\266=+y\246>\371\260`?X\326\333>B\344z?\2664\240=x\254\223>j)R?\305\205\026?\361\022x?\225\307\365=\241H\330>\236\326y?\\m\300=\325X\256>\312\364e?w\'\273>@|m?\247g\211>4\017I?N\231,?\305\353`?\231r\332>\322}z?\272z\254=\025\364\235>\340rZ?\035,\000?\342\377\177?\253;\36368;\3637j9\363812\3639P\025\363:\347\241\362;\372\325\360<k\301\351=6\023\317>Y\246v?\232#\020>+\263\367>\034\273\177?\252\243\211;\250\017\211<\232\304\206=\233\314{>\344\341=?H*D?\013f7?\373\013P?\n\342\033?)\332s?P$9>\360\252\027?[?w?\227@\007>\226\306\352>\210=~?\313\257\337<-\224\331=\234v\302><5q?X\377^>ao.?\"O^?S\016\352>v\036~?Y\000\357<L\007\350=\245\275\315>\003\"v?\010\312\027>\013J\001?Z\371\177?\323\272\3249\273\244\324:jL\324;M\354\322<\010~\315=\246\337\270>\n=l?\212\343\221>\207\243P?\214e\032?\335\034u?\246\311&>\035\237\013?\302\343}?e\362\005=\t\221\001>SX\342>\225\220|?{\347X=\004kM>\3405$?7\203k?e\310\226>W\301T?4\302\017?\252\036|?\327\221t=q\367e>IR2?\003oX?\366\315\005?;y\177?G~\006<\245c\005=\232\013\001>\333\220\341>\303a|?iId=<\220W>V/*?\2741d?\335H\306>\357\374r?\r\234E>\252y\037?<\205p?d\262h>o\3213?\211\013V?\375P\014?;\241}?\322I\026=(\306\020>\215\234\370>i\311\177?\010-Z;\027sY<F\220V=\355RK>\306\363\"?^\351l?#R\215>\261\240L?\311@$?\334vk?d\033\227>u\005U?\200\r\017?\251u|?\201s_=\332BS>\t\255\'?Jgg?\311\335\261>\"\'h?u\001\255>\362\027e?\306\240\300>\376Op?\213\236k>mg5?\014pS?\2368\023?0:z?\230\217\264=P\244\244>\260e_?\367\232\343>\276\331|?\240\025G=vh=>\234_\032?\303!u?\374\201&>\306n\013?,\365}?\r\252\001=\177\036\373=\345S\334>}\007{?\267\371\233=\254\030\220>\224\025O?\263F\036?j\255q?/WX>`\242*?F\231c?\276\000\312>P\234t?\201\037.>\313\203\020?\013\275{?z\031\206=I\243z>tJ=?\273ME?\005\3644?\325/T?NB\021?\202X{?\215:\222=\263\311\207>\014\215G?\327\0010?>\375[?\333\217\367>\315\270\177???\216;+\241\215<S.\213=\350\270\201>\361\265A?i\210<?\030\277F?\302\3131?vAY?\254\205\003?a\316\177?\241VF;\367\274E<\005ZC=\341\010:>\247<\030?I\322v?}\227\r>\335\006\364>\245p\177?\'\013\017<r\313\r=\326\342\010>\305,\355>\235\235~?\370;\260<dq\254=R\354\235>\355lZ?\354<\000?\306\377\177?\262\365g7\340\364g8\227\361g9u\344g:\361\257g;B\336f<r\235c=h\367V>\304\326)?\004\246d?\007o\303>\271\253q?6oX>?\260*?\310\206c?\323s\312>\250\314t?<^+>z\260\016?\344\240|?\202\357T=\251\335I>4\022\"?\243\334m?\370\322\206>f\244F?\272\0062?|\345X?\264\205\004?2\256\177?xg\243;\336\226\242<\304\\\237=8\366\222>\254\216Q?\240\021\030?\303\362v?\332\264\013>\301J\361>\255\'\177?e\234W<\005\306T=|\270I>\256\373!?\227\364m?p.\206>:\010F?\000^3?\246\305V?oZ\n?=S~?3\372\324<\270p\317=\311m\272>\333\027m?l\025\214>h\203K?\367\346&?yZh?\355\262\253>T=d?=\000\306>\034\334r?\241sG>c\232 ?(do?\334\177x>\3361<?ZbG?2a0?\241m[?\002\307\372>\271\344\177?\202\035\332:\227\300\331;\'N\330<\007\230\322=O\360\274>\310nn?\340\344\202>\200\334B?@&:?\225*K?\026\270\'?\224Yg?^6\262>\026]h?\345\241\253>\0332d?\206F\306>\341\373r?9\253E>\373\202\037?\021|p?U3i>\266\0274?o\231U?\001\203\r?\273%}?Z\2104=Z\223,>\304}\017?\025@|?\360vl=8\320^>\305T.?\264u^?\316*\351>\252\366}?\032L\001={n\372=\374\316\333>-\342z?\235t\240=^\342\223>\374VR?\245\020\026?\212dx?\3262\354=\036\365\320>\000[w?U\244\005>\225f\350>\023\323}?j\014\n=Te\005>o\t\350>\305\301}?\333L\016=E[\t>\"\335\355>\024\267~?\254\242\243<\350]\240=7\317\223>\315FR?D:\026?\274Gx?o\225\357=c\216\323>\300Hx?\365v\357=\nw\323>\242@x?\364j\360=\3351\324>\032\201x?\311\326\350=\t^\316>\231`v?\350,\024>\326w\375>\227\371\177?\206\035\3159\373\010\315:\337\266\314;wo\313<\'b\306=\250*\263>\242\360h?\322\334\247>\313\247a?O\373\325>v\032y?8\277\326=\260:\300>K\035p?\266en>d\3456?\261\351P?q\264\031?\013\255u?\360\205\036>\211\373\005?\326p\177?\002\332\016<\'\233\r=\343\265\010>\344\352\354>\334\223~?\357\016\265<~\016\261=\334\277\241>\326L]?\255\370\357>\025\377~?\262\350\177<l\351{=3kl>\276\3255?3\267R?\201\030\025?\342\013y?|x\330=\013\227\301>\376\310p?=\370d>v\3051?BKY?Wj\003?W\321\177?\215\201:;\254\3719<A\3357=`\234/>\225~\021?\3067{?i+\226=\214(\213>\n\254J?[\340(?|\344e?U\217\273>\363\263m?!\352\207>}\253G?\266\275/?*c\\?\234D\365>\323\214\177?R\362\345;;U\344<\374\367\335=9\351\305>\254\321r?v\tH>\304\365 ?\215\006o?\036\225}>\031\311>?\350gB?\n\031;?\315mI?\311\300+?\255\026b?\014U\323>\3124x?\375\316\361=\021B\325>!\335x?H\376\335=(\356\305>\351\323r?U\351G>0\342 ?\261\032o?{}|>\251;>?1|C?\t\3278?\337\204M?4\033\"?\r\323m?\312\024\207>\245\342F?\025}1?\204\273Y?T0\002?\326\354\177?iB\231:\210\024\231;u]\230<\374\207\225=\n\235\212>e,J?8\t*?\345cd?q\016\305>\247mr?\177\242M>\026W$?\221]k?4\305\227>,\220U?\305\233\r?=\033}?\355\0307=\243\351.>\007\t\021?3w{?\261\207\216=W\234\204>\025\207D?\327\2376?\267`Q?\237\206\030?\355\231v?\313\333\020>\226\273\370>0\313\177?\275\024S;\262fR<\377\262O=\320*E>\0254\037?a\311p?\311\362d>r\3021?\363OY?A]\003?\272\322\177?\353\3674;\376w4<\032{2=#\264*>4?\016?\033\324|?\214uH=\016\246>>T\'\033?\271zt?\331\0100>\316\305\021?\207\020{?\247\343\232=\321,\217>\211FN?\304C ?\364\273o?\211\267s>\r\2669?\264\365K?t\330%?\336\236i?Zb\243>O~^?\374\367\350>\217\355}?{\211\003=7\240\376=\355\367\336>\353\274{?a\035\206=\020\252z>\352M=?\033GE?^\0025?\024\030T?\303\200\021?\2256{?\036P\226=\336G\213>\235\310J?\240\235(?s9f?Yq\271>\255\215l?;\301\217>\005\311N?\216\003\037?\217\370p?\036Yb>\300P0?z\206[?\3638\372>\237\336\177?\273s\005;).\005<\005\031\004=\320\254\377=\231\301\337>W\360{?\256\312\177=X\321o>5\2477?\351\232O?\032\374\034?\210\337r?}BG>a| ?\255\202o?\256\326v>\\V;?S\374H?c\304,?\235\257`?\221\336\333>\224\346z?\\\355\237=Fp\223>j\366Q?\217\010\027?\330\265w?\373V\000>i\202\340>X |?\260)t=\270\233e>\273\0372?]\276X?K\362\004?!\236\177?\211r\303;\032H\302<\217\254\275=\207\033\254>\016\202d?\033Q\304>\353\025r?\221\207R>\344>\'?\034\357g?\302m\256>!\002f?l\322\272>fNm?\'\241\212>+0J?y\000*?aod?_\306\304>cLr?\025~O>\314r%?v\026j? K\240>B8\\?!<\366>\244\240\177?\007p\276;\262T\275<\201\364\270=t@\250>@\354a?\356X\324>s\216x?\245D\347=\006\'\315>\207\346u?\2267\033>\177\260\003?\215\311\177?f\234Y;k\343X<i\004V=\263\325J>7\250\"?\214;m?\351!\213>\372\245J?~\356(?i\322e?a\002\274>C\361m?JE\206>\370\035F?c.3?\360\021W?6\213\t?\252\223~?\261\'\265<(&\261=o\323\241>>[]?\245\244\357>t\364~?(:\205<|\017\203=\301Xu>\001\220:?\272iJ?\323z)?\266\035e?W|\300>\357=p?\374\233l>\376\3575?\377\212R?\245\212\025?\327\277x?\315r\341=m\241\310>:\006t?\267\2456>\264\021\026?\317cx?\330H\354=\013\006\321>8aw?\220G\005>h\335\347>\177\271}?\352T\020=\360>\013>,\237\360>\203\023\177?\007\243k<t?h=C\024[>X5,?{va?\002(\327>\312{y?\3337\313=\247\r\267>\3106k?F\311\230>\353bV?\220e\013?v\370}?\007\333\000=\226\232\371=\323.\333>\200\264z?\312\356\245=\024}\230>c%V?p\013\014?\264\273}?(\312\017=\361\275\n>7\343\357>d\374~?\207J\201<K\200~=\035\260n>!\r7?l\245P?\307`\032?\314 u?\023\220&>Ix\013?\305\361}?R\200\002=\322\257\374=~\202\335>lZ{?\213\377\221=\034\227\207>\177]G?\005l0?B][?\212$\373>h\350\177?\036\255\274:\226g\274;FR\273<\273\t\267=\336\255\246>\312\325`?\260\367\332>\231\244z?\232\326\247=d\025\232>\nmW?\324\222\010?\372\331~?\032Z\222<\303\274\217=5\246\205>K\206E?Ty4?\361\371T?\030,\017?6g|?g\366b=\347bV>\207\200)?Q\026e?\021\253\300>\026Up?\007Wk>\316@5?i\260S?\211\220\022?m\235z?t\262\250=\035\315\232>\317\376W?F\003\007?H;\177?b D<\\\307A=y\2348>%T\027?\026\177w?\240\211\003>/H\345>%6}?\374\2040=\212\351(>\263\014\r?\325V}?\276\205(=\301\226!>\003\027\010?7\372~?\257^\202<\214K\200=0\204p>(\0068?9\365N?\232\226\036?maq?\215\215\\>\247\014-?3J`?!B\336>\200\215{?#\327\213=\271J\202>xEB?m`;?\245\351H?\370\356,?\357s`?\301F\335>EJ{?}\361\223=\226A\211>\350\353H?\320\351,?,{`?\036\033\335>g>{?._\225=0z\212>j\014J?IS*?D\002d?\325q\307>~\201s?u&>>.\327\032?W\276t?6/,>X;\017?\370_|?\367\270d=W\363W>\256h*?\360\345c?\316\"\310>5\317s?\345\3029>\024\020\030?\355\363v?\221\243\013>\2361\361>\307$\177?a}Z<z\223W=\351:L>m\177#?\243Ol?\254e\221>\0037P?Iv\033?X7t?\310\3343>)E\024?|\224y?\230I\310=6\263\264>\353\331i?!\334\241>\243a]?S\177\357>\252\357~?L\232\207<\253[\205=>Yy>\220\241<?{\217F?\34242?3\235X?2N\005?i\217\177?\205\313\340;\273@\337<,+\331=\345#\302>^\rq?$3a>h\254/?\366|\\?\217\257\364>\375\177\177?\371\205\377;\340\207\375<1\257\365=\0306\330>\334\320y?\263\034\301=*\347\256>FOf?\335\345\270>~@l?.\314\221>m\217P?/\230\032?\360\362t?\000/)>:;\r?\272C}?\2722-=\340\337%>J\001\013?\217\033~?Mn\360<\325_\351=\343\307\316>x\211v?\263\317\021>\355\030\372>)\335\177?^J\013;\224\376\n<\266\320\t=\246-\005>\020\267\347>>\262}?\310\034\022={\346\014>\203\006\363>\251W\177?4\350\'<\261/&=\223q\037>\001\236\006?\332P\177?s\256.<\254\321,=\006\207%>1\305\n?\0010~?\337Z\346<\244\340\337=\200g\307>\355|s?bh>>\233\000\033?}\233t?\200+.>\266\213\020?\364\270{?\371\227\206=\026\177{>y\272=?kvD?\202\3036?\277#Q?q!\031?\316!v?\027\315\027>2L\001?D\371\177?\253\202\3279\376k\327:Z\021\327;\376\247\325<v\025\320=\032\361\272>\367^m?\363/\212>+\310I?\354\360*??0c?2\215\314>\017\251u?\222\300\036>\000$\006?,i\177?w{\026<\244\031\025=6\254\017>\200\007\367>\207\257\177?\342\277\240;\001\366\237<e\326\234=\245\323\220>\202\270O?l\262\034?\360!s?\330\207C>\3111\036?-\301q?N>W>\341\377)?)pd?u\301\304>\035Jr?\215\236O>\033\206%?\330\377i?\010\341\240>\000\250\\?\215\266\363>\010i\177?\326\236\026<[<\025=f\314\017>\3165\367>\275\262\177?\001W\232;\350\234\231<\200\273\226=x\243\213>\003\034K?L\332\'?\n/g?\351H\263>\307\002i?\305e\247>\232Ua?$\360\327>\n\273y?\362\264\303=M\001\261>\315\237g?(p\260>\350Eg?b\265\262>\007\252h?J\253\251>\371\342b?\177k\316>\320ev?\270\337\023>\027\n\375><\367\177?\3038\014:\217%\014;\326\330\013<A\247\n=\265\365\005>\316\336\350>\005\351}?X\247\004=\210[\000><\211\340>\005\"|?\220\301s=\377?e>\033\3551?\200\rY?r\026\004?*\275\177?t\211\205;$\376\204<k\325\202=z\363t>8[:?)\312J?\004\232(?\t>f?\020T\271>\205}l?\320.\220>\355(O?\334\026\036?\212\332q?\200\325U>B.)?\232\200e?,\n\276>?\001o?\274\336}><\356>?\365\036B?\027\260;?pUH?Q?.?\275\224^?vs\350>r\325}?(w\t=\034\332\004>e;\347>\214\232}?\206\355\027=\345J\022>\010\311\372>\317\344\177?\276t\331:c\030\331;.\250\327<\316\372\321=_s\274>\027-n?\305\251\204>\007\224D?\033\2046?\001\220Q?9\016\030?R\365v?\324\216\013>t\023\361>F!\177?(\370]<O\366Z=\310AO>\353N%?_@j?\0145\237>(g[?\000\354\372>6\346\177?\2457\316:\226\344\315;g\231\314<@}\307=\301\016\264>\302xi?\301]\244>@3_?a\307\344>\002\033}?T\'7=\300\366.>\251\021\021?\231r{?\261\025\217=\211\026\205>\246\374D?:\2435?\010\014S?\312<\024?\310\231y?\222\250\307=\2411\264>n\215i?l\325\243>^\321^?\234\014\347>v\221}?\r(\032=\311Z\024>\006\271\375>\320\372\177?@\357\2459\316\341\245:\017\254\245;\241\325\244<\216\204\241=\216\307\224>\304\027S?S\036\024?\376\254y?a`\305=\262Z\262>$sh?\366\021\253>\354\322c?|\231\310>\312\002t?\211\3276>\2761\026?\247Mx?\203\343\356=\t\006\323>\037\031x?\021\016\365=\224\273\327>\214\252y?\307\252\305=\276\226\262>\203\227h?`$\252>k4c?Rs\314>\245\236u?\251Y\037>\211\215\006?=T\177?\206O+<\371\204)=\353\200\">\021\267\010?0\320~?\2403\227<0i\224=\367\247\211>\271JI?2\021,?W\250a?\376\367\325>_\031y?3\340\326=\300T\300>D*p?\332\257m>\025\2046?\013\220Q?\037\016\030?f\365v?\261\215\013>\313\021\361>\025!\177?H)^<\031&[=vlO>Qh%?\271\"j?\324\371\237>_\373[?\237\232\367>\202\271\177?\250\325\214;\263:\214<1\324\211=\227\215\200>I\215@?6\344>?\2522B?Z\207;?T\241H?l\223-?]\213_?*\272\342>\032\247|?QlS=\226\202H>\202?!?B\272n?;\333\200>\177\332@?\027H>?\001dC?\001\n9?-*M?h\366\"?}\346l?\267e\215>:\262L?\306\026$?Y\246k?)\334\225>M\376S?v\304\021?F\021{?\252\314\232=N\031\217>T5N?\326m ?m\221o?\014\tv>\263\353:?g\301I?\204\000+?N\033c?\366\016\315>\365\334u?\224\304\033>\254\022\004?\245\275\177?h\223\204;\027\n\204<D\351\201=LWs>\226\2039?\216PL?J\000%?\253\233j?\300\325\234>K\226Y?\235\230\002?\n\345\177?W\227\327:\217<\327;\242\322\325<\340=\320=M\021\273>Rpm?E\271\211>\270ZI?\213\354+?\273\332a?\034\304\324>\323\262x?\236\373\342=w\323\311>.\211t?H6/>x;\021?1\\{?\357\310\221=Gh\207>i1G?9\3160?\022\310Z?\266u\376>\241\375\177?\232\320\0279\371\312\027:y\264\027;\222Z\027<\242\364\025=8w\020>D+\370>\255\302\177?v\021u;\333&t<s\203p=\007db>\326V0?I}[?\207m\372>\363\340\177?\033F\370:\267\315\367;\371\355\365<\357\213\356=\337\302\322>t\001x?m\324\367=\372\326\331>\314Oz?$\373\261=|\203\242>L\334]?\234\261\354>E\213~?\035N\271<\r\035\265=\312\030\245>\235\270_?\261\253\341>\"h|?E\275b=\0310V>\374b)?\224<e?)\271\277>\201\334o?\243\360q>\346\3068?\204\241M?\303\325!?\305\034n?\034\032\205>\025\000E?\324\2335?n\030S?\231\034\024?\024\256y?e?\305=\021@\262>\372bh?r{\253>\276\030d?I\345\306>\030Cs?q\252A>\325\t\035?\026\323r?,\365G>f\351 ?F\023o?x\344|>\322o>?\225\026C?\257\2549?\226\006L?Z\260%?1\316i?\253)\242>\223\232]?\2412\356>\025\303~?\210\261\235<n\250\232=\214\372\216>/\032N?\"\260 ?\371Mo?\237\264y>h\320<?\2276F?g\3702?\032hW?O\240\010?[\326~?\250%\224<\313w\221=\256\"\207>\303\357F?\002`1?l\350Y?F\262\001?}\364\177?c$8:F\0038;\001\1777<\346p5=Yg->#\n\020?\355\372{?\225:}=\307\222m>\201t6?\222\252Q?w\312\027?\372\'w?\367\234\010>Z\306\354>d\216~?\370\302\267<\265\243\263=\352\341\243>]\332^?M\327\346>\007\207}?\032\267\034= \270\026>\r\211\000?\333\376\177?\246\275\2228\005\273\2229\202\260\222:{\206\222;\277\336\221<\317E\217=\355?\205>^$E?\202M5?C\233S?\321\307\022?+}z?\300\216\254=\273\004\236>\237\177Z?\021\010\000?\377\377\177?W&\2024U&\2025M&\2026+&\2027\247%\2028\226#\2029Q\033\202:A\372\201;Ev\201<\003\325~=M\372n>\26647?<aP?V\014\033?\225\221t?\340\273.>\345\352\020?0\207{?\033\232\214=\376\362\202>K\352B?k\t:?\354^K?\372<\'?u\361g?\200^\256>g\370e?l\020\273>\331om?\201\274\211>\266]I?\261\345+?\"\344a?\226\212\324>Y\237x?:G\345=*\234\313>JGu?)\\$>\234\372\t?\257q~?\255\362\305<2*\301=\035\362\256>6Vf?\201\271\270>\322\'l?\005s\222>\244\036Q?a.\031?\243\027v?@c\030>\277\265\001?N\364\177?H\031;:\031\367:;\215n:<yO8=T\0040>\327\302\021?-\022{?\375\260\232=\320\001\217>\231 N?z\240 ?\364]o?D\326x>N^<?\242\016G?\205\0331?\320QZ?~\211\000?\331\376\177?/\260\2238\205\255\2239\337\242\223:Mx\223;f\316\222<\345,\220=\224\006\206>E\342E?\373\2603?\007@V?\256\303\013?f\326}?A;\t=:\242\004>\232\350\346>l\212}?\356\341\033=8\363\025>\355\373\377>\000\000\200?\212\275\2042\212\275\2043\212\275\2044\207\275\2045\177\275\2046\\\275\2047\323\274\2048\254\272\2049\022\262\204:\256\217\204;e\006\204<\260\345\201=\016Qs>O\2009?qVL?>\362$?\345\253j?\227i\234>RBY?F\203\003?\244\316\177?AIE;8\261D<\270TB=p\0349>\351\245\027?\023Cw?2\t\007>\013u\352>\350/~?)g\346<=\354\337=\217p\307>\356\200s?\217.>>F\334\032?\021\272t?\220m,>\266d\017?,L|?\231\207i=\0277\\>h\333,?a\217`?9\241\334>\363\034{?se\231=%\350\215>\277&M?\255\376\"?s\335l?>\243\215>A\351L?\263\222#?<:l?\177\366\221>\324\263P?s<\032?\251>u?\242\332$>kP\n?yV~?\245a\323<U\355\315=\2268\271>Wnl?\273\225\220>\254\202O?]8\035?\272\250r?\254TJ>=Z\"?\240\217m?\013\343\210>\021\224H?\203\261-?s`_?2\272\343>\250\340|?\023fE=\257\342;>ri\031?\361\350u?\367\023\033>\253\227\003?a\314\177?<TN;\360\255M<\360\030K=\347\006A>\r\244\034?\320.s?\205\316B>\033\277\035?\225,r?;DQ>\034\200&?\336\326h?\271\205\250>\252\033b?z6\323>\033*x?\361\017\363=\t7\326>\003.y?\034o\324=\025f\276>z0o?\317N{>\346\241=?\310\245D?\013^6?\304\320Q?\347h\027?\356ow?\377k\004>8\230\346>\221z}?\370\304\037=\223\211\031>$\204\002?\255\346\177?\333\204\312:\3004\312;R\365\310<P\007\304=\351C\261>\330\310g?%f\257>z\237f?9\344\266>%\037k?\230g\231>3\342V?\370\014\n?\360k~?@\311\310<g\335\303=\006\"\261>\373\263g?l\355\257>b\364f?\305\302\264>\021\343i?\226\237\241>\0165]?G\203\360>&\020\177?\301\371n<l}k=t\363]>\344\327-?\217)_?\014\001\345>8\'}?9+4=l>,>pE\017?([|?\'\344e=\010\375X>\n\002+?C\031c?\240\033\315>\377\341u?Xz\033>\000\337\003?\017\304\177?\332\213o;\264\253n<\2451k=b\260]>\341\261-?\355__?S\275\343>Y\341|?\344:E=\251\273;>\274P\031?\207\374u?8\363\031>\020\316\002?\210\340\177?\340\244\373:2)\373;^<\371<*\247\361=\245#\325>\364\322x?\2411\337=\261\336\306>&@s?\327\324A>0$\035? \273r?\346LI>p\272!?\2359n?\200S\204>\310@D?\02567?\337^P?G\022\033?\217\214t?\027\005/>\031\033\021?\217m{?4\261\217=F\234\205>\314|E?\365\2154?\027\330T?\352\205\017?\"<|?7lm=\036\251_>\032\317.?\255\303]?\365A\355>\271\240~?N\262\256<\227\370\252=\264\262\234> {Y?\243\344\002?\205\336\177?p\332\005;s\224\005<\244}\004=\2104\000>\306N\340>\231\023|?\203@w=\252Sh>\272\2353?\032_V?\334o\013?\311\364}?g\302\001=\036L\373=Sv\334>\021\021{?\033\323\232=\305\036\217>\':N?\rb ?]\235o?\216bu>\034\225:?c`J?\213\220)?\210\001e?V.\301>\306\225p?\265\311g>LR3?m\330V?\177\'\n?\220c~?\314\353\314<\207\313\307=\305M\264>\025\236i?\207g\243>\016\202^?\335\341\350>\222\351}?\205\204\004=\366:\000>jX\340>\374\025|?\201\254v=\201\321g>\221V3?\224\321V?\023:\n?\245]~?r\327\317<\201\221\312=C\210\266>~\352j?\307\307\232>\226\372W?\342\016\007?\2738\177?\307\251F<\032AD=\336\331:>\212\301\030?\217lv?\340{\023>\001|\374>\244\363\177?\002\267E:\325\220E;]\370D<(\232B=H[9>\004\316\027?V%w?L\304\010>\004\000\355>\001\227~?/\201\263<@\222\257=\027\205\240>\214c\\?fB\365>\244\214\177?\376P\346;\223\262\344<\037P\336==.\306>\353\360r?\275HF>\227\343\037?]\034p?\274rn>Z\3546?\300\335P?\241\322\031?\275\224u?K\353\037>\303\361\006?\032?\177?}T@<\202\022>=\212@5>u+\025?]\377x?5\363\331=n\301\302>\037Yq?8\003]>\224O-?\264\353_?\271y\340>4\036|?r\256t=\242\020f>)`2?0YX?@\n\006?\022n\177?~\232\021<<O\020=\2519\013>|\227\360>\226\022\177?\355\215l<\225#i=x\336[>\337\250,?\017\326`?\r\366\332>\037\244z?\031\345\247=\202!\232>\257vW?wx\010?\000\341~?^\337\216<za\214=\"\302\202>\206\272B?,m:?f\251J?\204\346(?\234\334e?u\301\273>\267\316m?\2122\207>\274\376F?\317>1?\226\033Z?_\"\001?\333\372\177?\211\252\2449L\235\244:_h\244;3\225\243<\371P\240=O\304\223>\224=R?\370Q\026?<7x?u\205\361=\344\t\325>R\312x?c6\340=|\252\307>z\232s?\227\275<>\326\363\031?\340yu?\372u!>\223\000\010?\333\377~?\211$\177<b+{=\201\304k>\352{5?\325MS?\301\221\023?)\004z?\025\001\273=\303\355\251>\275\017c?\224V\315>b\371u?\234!\032>\177\356\002?\237\335\177?Vp\t;\215&\t<\244\000\010=\231|\003>\3214\345>\0312}?f\2021=\r\321)>\242\247\r?/\026}?\373T8=W\t0>!\306\021?Y\020{?,\351\232=\2001\217>\252JN?\2539 ?!\306o?^)s>zk9?\332{L?\353\230$?\212\022k?\374\273\231>\273%W?VU\t?\216\243~?\345K\255<h\241\251=\230\224\233>\351\233X?\302Q\005?\321\216\177?\230\371\341;\247j\340<\320D\332=\250\001\303>\312wq?|P[>\310W,?\324Fa?\376I\330>\n\327y?{`\300=`N\256>\035\356e?\373Q\273>\027\223m?P\313\210>\371}H?\227\343-?\312\030_?\273d\345>\030<}?\250\020/=,\225\'>.(\014?\325\260}?\\u\022=\2738\r>\261}\363>\206c\177?\030\032\034<Y\235\032=>\307\024>\377R\376>1\375\177?\202\27139\237\2613:\027\2223;!\0243<\r\0371=Nv)>\363j\r?\332/}?\357\0162=cQ*>V\375\r?*\361|?\004_A=\376=8>\263\027\027?\357\252w??\372\000>\344v\341>\224[|?\362\311e=\303\345X>\241\364*?E+c?\010\254\314>p\265u?u\n\036>;\246\005?W\200\177?\204\322\376;7\327\374<t\t\365=\021\270\327>q\251y?^\314\305=\330\261\262>\344\247h?C\271\251>f\354b?>1\316>3Ov?J.\025>\037\345\376>\307\376\177?oI\2348tF\2349\207:\234:\333\n\234;\241L\233<\362Z\230=n\005\215>\341[L?G\345$?\333\272j?\322\005\234>\214\364X?\331[\004?\001\264\177?\260\320\227;\240\034\227<\nS\224=\006\225\211>59I?L9,?\004qa?JI\327>e\206y?\311\365\311=M\013\266>\210\242j?\003\250\234>\324rY?\323\373\002?d\334\177?\225\\\016;j\r\016<\036\322\014=\267\372\007><\330\353>\303i~?\024\334\311<\271\342\304=;\365\261>o5h?T\244\254>m\333d?\263\036\302>\333\nq?\240Va>G\300/?V_\\?\266Z\365>\254\216\177?\230D\342;\236\264\340<\271\212\332=\2508\303>\363\221q?@\335Y>\013\203+?\336jb?\016P\321>L|w?M\263\003>\032\206\345>\003C}?P_-=\260\010&>\337\034\013?\006\022~?D \365<\216\312\355=y.\322>\253\314w?\255\002\376=\203\201\336>%\236{?\316\324\211=\037\216\200>\320\215@?&\343>?\3014B?\006\203;?`\251H?(\201-?[\245_?\333\036\342>7\203|?\277\'\\=zRP>\362\360%?\336\201i?\262!\244>4\010_?K\307\345>oP}?\255\026*=\213\006#>5\022\t?\334\266~?\205\276\243<\244x\240=\303\345\223>\332YR?D\t\026?\240ix?\316\231\353=W\177\320>\201/w?\322,\010>\320!\354>Du~?\242-\304<\363z\277=\335\223\255>\214ve?\366I\276>\016\"o?:\027|>\313\007>?\346\340C?\010\0028?s\374N?\305\204\036?trq?\'\234[>\004\203,?\316\na?~\266\331>\030Fz?\266#\263=Xx\243>7\216^?\005\232\350>\204\334}?>\272\007=\336:\003>\026\323\344>\177\035}?\261\2136=\003i.>H\264\020?\340\243{?\265#\211=\233\351\177>\315\364??d\026@?0\323??\202Y@?\200L??\teA?&.=?\347\203E?\206~4?l\361T?\266B\017?u\\|?H\223e=;\265X>\246\330*?\311Pc?X\303\313>MWu?Yq#>\366Z\t?\351\241~?\355\033\256<\235h\252=\272:\234>\324\035Y?\376\350\003?\330\302\177?pet;\036|s<\313\335o=\315\321a>/\0050?9\370[?\270\254\367>\260\272\177?\267y\212;\350\343\211<\272\221\207=\2640}>`\226>?D\313B??J:?\030\351J?\247Q(?\207\231f?e\n\267>\3554k?\266\325\230>\361lV?\177J\013?\016\002~?7\375\374<\033-\365=0\323\327>\367\261y?\030\311\304=\207\340\261>\316(h?\220\366\254>\341\020e?k\315\300>\021fp?\214hj>\271\2774?5\206T?\234^\020?&\320{?H\312\203=f\236v>39;?X2I?\000I,?L[a?~\315\327>-\260y?\177\377\304=x\014\262>\231Ch?\022H\254>7\237d?\316\231\303>\360\277q?\352OW>\025\n*?\303bd?\216\025\305>\356pr?\247sM>\014;$?\\}k?\274\357\226>\247\341T?\216l\017?eH|?Xrj=\005\007]>\275Q-?\246\350_?\r\214\340>\267\"|?\231\226s=%\032e>3\3301?\030.Y?\255\273\003?A\310\177?\271\311^;\327\007^<\221\005[=hOO>\007W%?\3516j?\332s\237>\226\226[?\304\334\371>T\332\177?{\230\026;\344?\026<)\337\024=\374u\017>u\271\366>\367\251\177?\222\330\253;\334\361\252<\253`\247=\303\262\231>\\\036W?hi\t?\255\235~?&4\260<\350i\254=\031\346\235>(hZ?eJ\000?\252\377\177?>\362\2547T\361\2548\255\355\2549\023\337\254:\265\244\254;\332\273\253<6\"\250=\230T\232>M\237W?Y\t\010?\250\375~?{\251\200<XH}=\327\236m>\370z6?\222\237Q?\212\346\027?\017\023w?q\324\t>Z\216\356>\265\317~?op\227<\301\243\224=\t\332\211>\372xI? \247+?\2709b?\017~\322>\017\351w?\367\257\372=r\000\334> \360z?\007\310\236=\226x\222>h#Q?M\"\031?\"!v?\014\327\027>3S\001?\372\370\177?\261\261\3409\n\231\340:\2046\340;\305\255\336<6\240\330=^\266\301>@\330p?\020!d>VN1?\255\003Z?\251e\001?1\370\177?\372\320\3719\201\262\371:\2738\371;|S\367<\352\333\357=_\304\323>s[x?{D\355=\177\307\321>\245\247w?j+\001>o\300\341>\nm|?\344\213a=q U>\261\304(?\306\007f?m\256\272>\355:m?&&\213>\331\251J?x\345(?\363\335e?\354\270\273>*\312m?\306Q\207>3\034G?b\3750?\001\200Z?\374\006\000?\377\377\177?\2270C4\2250C5\2140C6f0C7\321/C8~-C91$C:\001\377B;zjB<\344\033@=F\0317>\375[\026?>0x?\233W\362=c\252\325>\314\377x?%\346\331=&\267\302>3Tq?\362H]>0w-?\206\263_?#\312\341>Uo|?Q\375`=\215\241T>\217z(?\343ef?7U\270>\323\357k?*\355\223>\032`R?-\371\025?\261tx?\251L\352=\241~\317>;\317v?\333\304\r>~H\364>\267v\177?\025\377\010<\325\331\007=^X\003>\364\376\344>\307&}?\324F4=\231W,>$V\017?+S|?\313\324g=\260\265Z>4\377+?\031\301a?\313`\325>`\347x?\252\310\334=z\373\304>\352dr?}\037N>\321\241$?\\\010k?\030\000\232>\023\\W?(\301\010?o\315~?\366\220\230<\222\271\225=a\307\212>2SJ?0\257)?\253\331d?\312)\302>7\020q?\351\na>\336\225/?\203\236\\?{\355\363>Bn\177?\330j\021<p \020=\'\016\013>\037X\360>\346\n\177?\307/t<\032\214p=\252kb>\031[0?\331v[?T\222\372>\210\342\177?R\242\353:\3405\353;\250\205\351<\204\335\342=\010\274\311>A\177t?\327\306/>z\232\021?z({?\201\002\230=\"\272\214>\'\030L?\231\206%?D\377i?\340\344\240>\334\252\\?\001\246\363>pg\177?\2524\030<\260\312\026=\215=\021>\266G\371>\330\322\177?\236\2004;Y\0014<\021\0072=4J*>\213\370\r?B\363|?,\334@=|\3077>\310\313\026?^\341w?\225\226\373=\201\256\334>\235 {?\227\364\230=+\210\215>\017\321L?\323\314#?j\371k?s\254\223>f)R?\321\205\026?\350\022x?\226\310\365=eI\330>\332\326y?%f\300=\371R\256>\r\361e?H?\273>\r\211m?\r\020\211>\353\275H?{R-?\230\347_?]\222\340>C$|?a6s=\\\305d>S\2511?\371vY?@\360\002?v\335\177?\265\024\n;:\312\t<\222\241\010=\321\022\004>\356\023\346>\013`}?aD&=\225\204\037>\030\253\006?\"N\177?5b1<\221v/=\\\362\'>\326f\014?\313\230}?\277[\030=\356\260\022>\267Z\373>k\352\177?\207\231\254:X_\254;7w\253<s\340\247=\240\035\232>\230sW?\352\200\010?\302\336~?\245\373\217<\314s\215=\264\256\203>$\241C?\006\2118?\020\017N?E\313 ?52o?\2766{>\245\225=?`\275D?d+6?\252&R?\325\214\026?\370\rx?\337\\\366=\013\272\330>\234\371y?\336B\274=\225\364\252>k\277c?#\023\311>77t?\235\3363>YF\024?\273\223y?w`\310=\234\305\264>\274\344i?\215\224\241>\352,]?\260\262\360>\331\025\177?\206Pi<\367\375e=\361\023Y>=\017+?\202\007c?\211\211\315>\203\rv?\252\370\030>\233\036\002?\010\356\177?\277\270\217:g\220\217;b\357\216<\356p\214=x\317\202>\222\307B?\366Q:?\n\333J?\213r(?\005pf?Y\024\270>p\313k?s\342\224>I.S?\322\343\023?\220\321y?I\007\301=\312\325\256>CDf?F,\271>\207gl?\341\303\220>\317\252O?\210\324\034?G\003s?\346@E>\251A\037?!\274p?\221\255e>\222)2?\360\256X?\r\035\005?i\227\177?\371\330\320;6\204\317<~B\312=\336H\266>\013\306j?+\273\233>\'\272X?\367\375\004?Q\234\177?\266\017\307;$\332\305<\330\022\301=+\337\256>5Jf?D\006\271>yRl?xR\221>i&P?\342\237\033?\212\023t?\230\3445>U\225\025?\243\270x?2L\342=\336J\311>\025Ot?\303\2032>\343d\023?z\037z?u\277\267=\014C\247>\215=a?d\202\330>}\350y?\337L\276=\031\236\254>^\327d?H8\302>7\027q?\374\247`>b^/?\325\360\\?&\020\362>\303=\177?\212\251A<\206_?=\213n6>4\356\025?8|x?\363i\351=\262\317\316>y\214v?5\243\021>E\331\371>)\332\177?6D\027;\324\352\026<\364\206\025=\216\021\020><\231\367>j\271\177?\035\004\215;\302h\214<\254\000\212=\025\264\200>\226\263@?\334\226>?S\312B?5L:?\205\345J?\006Z(?\371\216f?\013N\267>k[k?\242\323\227>\354\233U?Z|\r?\212(}?\277\3303=1\363+>\177\023\017?\327r|?\037#`=H\337S>\323\010(?\367\364f?\006\277\264>\335\340i?*\256\241>\315?]?\253D\360>\203\010\177?\316\215v<\372\327r=*rd>F{1?O\276Y?\177(\002?^\355\177?\250\001\225:J\326\224;9)\224<<{\221=\241%\207>\215\362F?\325Y1?\364\361Y?\200\227\001?\335\365\177?\213#\":\337\t\";N\243!<\023\013 =6\312\031>a\261\002?\376\342\177?\343\362\347:\317\211\347;\373\346\345<Cs\337=\003\022\307>\004Ws?O\213@>\376V\034?kss?\233\361>>\271V\033?^Rt?\002T2>\306E\023?F2z?g\201\265=_k\245>)\363_?\006M\340>*\023|?f[w=Nkh>\244\2523?DJV?\022\250\013?\200\340}?o\277\006=\240P\002>Av\343>\224\321|?8\023I=E4?>\202\200\033?\220.t?Q\\4>\324\227\024?\263_y?\231\214\316=\306\267\271>l\264l?-\272\216>I\341M?\320:!?$\277n?u\271\200>\356\270@?\r\214>?u\337B?\023 :?\3165K?\270\235\'?Czg?!c\261>\010\334g?\245\351\256>\331Pf?\316\333\270>\347:l?\372\361\221>\362\257P??F\032?\2406u?fP%>7\240\n?^<~?\256B\340<\010\037\332=\354\343\302>\233iq?\223\031\\>\225\312,?\362\246`?\360\022\334>R\365z?V(\236=\234\361\221>\241\257P?\nG\032?\3715u?\365Y%>\260\246\n?7:~?PR\341<\302\037\333=\327\255\303>b\311q?\215\311V>\'\274)?\305\310d?G\224\302>|Cq?\2475^>a\375-?\305\363^?\231@\346>\017i}?\030\017$=\343|\035>HD\005?\014\221\177?\370\207\335;\220\010\334<\232\037\326=\177\274\277>.\336o?:\331q>\214\2728?k\267M?\232\240!?\316Tn?\025\230\203>*\213C?r\2678?\353\274M?>\223!?\326bn?R7\203>\372,C?\265}9?\036[L?\027\347$?\304\270j?\304\023\234>p\377X?\221=\004?\023\270\177?4\262\217;\343\020\217<D\221\214=]\353\202>\330\342B?\377\030:?\247BK?\202\177\'?\233\237g?oq\260>\263Fg?D\260\262>\360\246h?\177\277\251>\231\360b?G\027\316>\026Ev?\330\303\025>\351\270\377>\354\377\177?0\356\2356\000\356\2357=\355\23581\352\2359\004\336\235:W\255\235;\033\353\234<\240\351\231=}X\216>\261\212M?\032\r\"?\022\342m?\252\255\206>\020\201F?\251T2?GkX?H\330\005?Zw\177?!]\010<\224:\007=\247\303\002>\250!\344>X\367|?\331\334?=%\3406>G7\026?\320Ix?\376V\357=\215^\323>\0338x?Zk\361=\361\365\324>\236\303x?\300\000\341=vH\310>\237\337s?<\3258>nx\027?\216dw?\306\025\005>\273\223\347>\205\253}?:\303\023=\236n\016>\310=\365>@\214\177?\317\026\347;\233u\345<>\010\337=R\276\306>\2601s?&\245B>x\245\035?`Dr?\210\360O>\320\266%?\225\306i?\376[\242>m\277]?\333Z\355>\\\244~?\322\345\254<\245?\251=\002C\233>\316[X?\006\003\006?oo\177?\224?\020<v\372\016=\311\374\t>M\311\356>\261\327~??|\223<\200\324\220=\210\226\206>!kF?\365\2042?-\037X?4\252\006?RN\177?\00331<eH/=$\310\'>uJ\014?\275\243}?\021\254\025=\3653\020>\253\312\367>\240\274\177?^\235\206;\314\017\206<\'\336\203=\007\301v>$K;?\035\021I?\362\224,?\331\361`?\310M\332>\000sz?\022\306\255=h\007\237>\235D[?1\261\373>q\355\177?-k\224:\'@\224;s\224\223<\324\353\220=\217\252\206>\037~F?$[2?\026aX?p\364\005?)r\177?s\210\r<tO\014=\004\201\007>_%\353>\034M~?\217\000\330<\210N\322=\352\265\274>#Pn?F\270\203>p\252C?`u8?\3021N?\222v ?\223\210o?}\204v>\304+;?1KI? \020,?\320\251a?\377\356\325>k\026y?\2519\327=l\233\300>XMp?\301\303k>\202{5?\202NS?\377\217\023?=\005z?C\340\272=\356\322\251>\260\375b?N\306\315>i%v?\326\227\027>\270&\001?\263\372\177?\212\241\2519}\223\251:S[\251;@{\250<0\004\245=c\270\227>\274\205U?\254\267\r?S\017}?\003\002:=\225\2171>\236\305\022?u~z?;g\254=\337\343\235>tfZ?6O\000?\236\377\177?\002\025\3047\326\023\3048$\017\3049_\374\303:Z\261\303;+\206\302<\256\347\275=\261K\254>\226\241d?\351\212\303>\350\270q?\337\263W>\367C*?\203\026d?<\363\306>PIs?\322PA>\025\322\034?|\005s?$!E>#.\037?-\317p?\016\241d>=\2251?\037\226Y?\031\231\002?\000\345\177?\312\347\327:\277\214\327;\303!\326<\337\210\320=\tM\273>p\220m?|\335\210>\344\216H??\275-?\260O_?\027\036\344>\221\366|?e\r@=#\0147>\214S\026?\"6x?\211\246\361=*#\325>\313\322x?{6\337=|\342\306>\330As?s\274A>\007\025\035?\353\310r?\027\207H>@B!?i\267n?\362\356\200>\023\356@?d >?.\261C?\035g8?\347JN?\0259 ?\270\306o?(!s>+g9?\226\203L?n\206$?\252\'k?\213.\231>k\264V?#\211\n?\377C~?K\177\334<\363\217\326=T\025\300>\250\np?\307jo>\244p7?\240\371O?\361\017\034?\t\262s?\372h;>X\034\031?\317%v?\001\222\027>\235\"\001?\330\372\177?:\360\2449\361\342\244:\330\255\244;\371\331\243<\377\222\240=\375\373\223>\235lR?\365\330\025?\300\212x?)\264\347=U}\315>\262\010v?\265?\031>gP\002?\225\352\177?|M\253:,\024\253;\204/\252<k\246\246=\343\026\231>i\241V?\240\274\n?\3422~?\253\357\344<\315\211\336=d[\306>I\005s?\014$E>\354/\037?p\315p?\231\271d>\321\2421?\021\201Y?\003\324\002?\001\340\177?x\324\377:\243T\377;PW\375<\242\201\365=v\023\330>\023\306y?\016e\302=d\361\257>\336\366f?\312\262\264>\253\331i?\304\335\241>\330b]?Jx\357>\301\356~?\213\r\210<\030\313\205=\006\033z>\324\004=?\314\322E?\301\3223?g\tV?\273V\014?\004\237}?\274\324\026=\334F\021>\013U\371>\212\323\177?\240\2671;A<1<oQ/=h\320\'>\004P\014?\232\241}?H2\026=X\260\020>B}\370>\227\307\177?\333ra;P\254`<\230\227]=\246\232Q>.\263&?D\231h?\353\030\252>\273,c?\373\242\314>\316\261u?\337?\036>%\313\005?\275y\177?-\374\005<\255\343\004=\364\223\000>\303\335\340>\2616|?O\276n=\350\323`>\007w/?P\314\\?\031\344\362>\'T\177?-e+<,\232)=]\224\">V\304\010?\220\314~?U\377\230<\324#\226=\024\"\213>!\246J?#\356(?\336\322e?|\377\273>\272\357m?\333O\206>\003(F?_\0303?\0375W?i+\t?\255\257~?\177L\247<\330\341\243=\254\304\226>G\276T?O\312\017?\254\032|?\276\211u=\257\321f>S\3122?_\261W?\332\327\007?\360\t\177?\027#u<&xq=\357;c>\031\3170?\274\306Z?L}\376>\270\375\177?\245\007\0229p\002\022:\236\355\021;o\232\021<.O\020=\2339\013>i\227\360>\224\022\177?B\220l<\331%i=z\340[>\005\252,?v\324`?\271\377\332>\353\246z?W\217\247=\314\331\231>\211=W?x\024\t?8\266~?\314\017\244<\252\306\240=\214\'\224>X\221R?Dz\025?\332\312x?[&\340=\367\235\307>\366\224s?@\r=>\034&\032?\363Pu?\206\316#>]\232\t?\"\217~?|e\267<jJ\263=E\230\243>H\245^?\245\021\350>N\303}?K\354\r=h\001\t>\220Y\355>,\244~?\261\375\254<\202V\251=\027V\233>\321jX?\216\331\005?\036w\177?\207\230\010<\375t\007=4\372\002>\337r\344>\355\010}?\004\222;=\032\3732>\220\262\023?\010\360y?\347f\275=\304\342\253>\315\\d?\360:\305>\035\202r?\302}L>\227\247#?\374\"l?\265\223\222>\233:Q?s\347\030?%Ov?\033/\025>G\346\376>\312\376\177?A\003\2338R\000\2339\227\364\232:\261\305\232;\214\n\232<\007%\227=p\375\213>\256mK?5\032\'?\005\034h?\310I\255>\303Fe?\266x\277>\024\274o?\314\265s>$\2659?X\367K?\216\324%?z\243i?\353C\243>Gh^?\016z\351>\264\004~?:\257\373<\261\363\363=\240\344\326>8fy?\275\306\315=\300\031\271>F]l?V\t\221>\031\347O?9>\034?R\211s?k\265=>\023\220\032?\254\371t?\211\314(>C\371\014?\274^}?O\226&=\332\317\037>\344\336\006?-C\177?\266G<<\320\035:=\333\2501> \326\022?\302tz?>\220\255=\266\332\236>\270\"[?cr\374>`\363\177?J\366I:u\316I;_/I<\361\266F=\371\022=>\270)\032?\377Mu?\315\371#>\312\267\t?@\206~?\206\311\273<\206{\267=K\013\247>\332\026a?gm\331>\'0z?B\302\265=\271\240\245>\337\030`?\265j\337>V\332{?\337\216\202=dxt>\366\032:?\026?K?\345\207\'?@\225g?|\264\260>Npg?~\243\261>\200\003h?C\351\255>m\255e?\226\355\274>[mn?\266\356\202>\035\346B?)\022:?\021OK?Nb\'?\232\303g?(\210\257>\341\264f?\350Z\266>n\320j?\332u\233>\310\203X?\213\224\005?q\203\177?\353\243\370;\357\300\366<4R\357=\341Z\323>\3236x?\320\221\361=U\023\325>}\315x?\273\326\337=\301_\307>\200ys?\320\231>>\245\037\033?=\201t?\365\251/>\201\207\021?\3442{?\315\301\226=\330\250\213>\346 K?\325\316\'?P=g?\327\354\262>x\313h?i\320\250>\236Nb?\266\375\321>-\273w?0\007\000>\310\n\340>\261\002|?\002Y{=\210\354k>\201\2215?\270)S?\257\357\023?.\312y?\024\350\301=\034\214\257>]\267f?\364J\266>?\307j?%\263\233>\336\263X?e\017\005?\225\231\177?\360\204\314;(>\313<J3\306=\336\004\263>\356\331h?\253q\250>\363\rb?\210\212\323>iGx?=\237\357=\346\225\323>[Kx?\212(\357=\363:\323>\254+x?\356\340\362=-\023\326>I\"y?E\322\325=R\177\277>h\277o?E\207s>\300\2349?J#L?\034l%?I\036j?>\027\240>m\021\\?\305\033\367>\361\260\177?r\355\235;\230*\235<\256&\232=\\\214\216>\265\270M?x\235!?\031Xn?_\201\203>\026uC?\004\3468?>jM?\253[\"?\027\216m?\214\355\210>\327\235H?W\233-?\025\200_?\204\375\342>p\266|?e\260O=y(E>\2452\037?\310\312p?\003\337d>\203\2671?\361`Y?\316-\003?\224\327\177?\260\226!;\2610!<\270\232\037=\237b\031>\335h\002?\306\350\177?D\274\271:\343x\271;#l\270<FE\264=\027g\244>\3579_?\235\237\344>\207\022}?\27599=u\3310>\207N\022?t\303z?\r$\244=F\374\226>\362\353T?@Q\017?\203U|?#Cg=\1774Z>#\265+?\231&b?i\363\322>\222\022x?\265\322\365=\026Q\330>=\331y?}\035\300=\366\027\256>W\313e?^/\274>!\tn?8\241\205>\206\201E?\260\2034?\362\350T?4Y\017?\263Q|?\0060h=\225\006[>\204-,?J\201a?%\346\326>\265fy?\360\267\315=\355\r\271>\271Vl?\2675\221>\211\rP?&\336\033?\215\335s??\3638>\233\213\027?xVw?\360\347\005>w\312\350>V\345}?\026\217\005=64\001>\230\315\341>&p|?\231\312`=ftT>&`(?@\207f?\217\177\267>\200wk?\030\027\227>\360\001U?\333\026\017?Aq|?\255\205`=\n7T>=<(?{\264f?t]\266>\345\321j?\022l\233>\030|X?\315\251\005?\266\177\177?2\n\000<\023\024\376<\2642\366=\004\232\330>\305\357y?\360n\275=P\351\253>\032ad?\365\037\305>\267ur?1/M>\n\022$?\260\253k??\270\225>\200\340S?\237\022\022?\201\345z?m\016\240=,\214\223>\020\016R?\363\313\026??\341w?$\232\373=0\261\334>[!{?\313\335\230=\307t\215>\265\277L?s\366#?\275\312k?-\347\224>=2S?\212\331\023?\362\327y?\326D\300=\3537\256>\306\337e?O\255\273>\367\303m?M|\207>EDG??\2440?\374\007[?\224\n\375>?\367\177?\342\n\014:\273\367\013;4\253\013<gz\n=\344\313\005>\t\241\350>\314\335}?\221i\007=\211\357\002>\376b\344>\201\005}?\343g<=W\2753>\3020\024?b\241y?|\301\306=\200w\263>\253\036i?\235\256\246>P\326`?\207\364\332>\257\243z?\237\362\247=\321,\232>\257\177W?\337_\010?y\347~?\361\251\213<bH\211=\220\024\200>\216\024@?\335\326??,R@??[??\333GA?\273i=?\304\021E?\254u5?CXS?\230v\023?\272\024z?\246\007\271=$P\250>\000\367a? \027\324>\361wx?\274\352\351=\0303\317>\205\262v?\017o\017>|\257\366>=\251\177?dJ\255;\311_\254<B\277\250=\317\327\232>C\007X?\007\354\006?X@\177?5\030?<\241\335<==(4>\026v\024?Yuy?\217\373\313=r\252\267>\303\217k?\017t\226>\350{T?\320y\020?0\302{?Lz\205=\205\216y>\341\274<?\254[F?\365\2462?n\351W?\t>\007?2.\177?\037\"Q<\274vN=\210\016D>\367\204\036?Drq?\323\236[>\213\204,?\257\010a?[\303\331>\361Iz?&\256\262=Q\027\243>\357G^?\3038\352>\265%~?6n\353<\032\252\344=,\"\313>\"\025u?\327:\'>c\353\013?\264\307}?\204\327\014=\275\377\007>\235\337\353>\354j~?HI\311<&W\304=t\204\261>{\360g?\327d\256>r\374e?\251\366\272>\367am?r\033\212>J\265I?m\034+?\301\365b?`\367\315>\2418v?\353{\026>\216^\000?t\377\177?V\262\0138%\261\0139a\254\013:T\231\013;4M\013<\000\036\n=\273u\005>\260!\350>M\306}?\346/\r=\tR\010>qX\354>\263}~?\003\003\300<\337\202\273=\320W\252>\342Vc?\177\235\313>\326Gu?\'T$>+\365\t?as~?t\034\305<M^\300=\233L\256>\374\354e?.Y\273>\363\226m?\335\260\210>UeH?`\033.?\233\310^?\211@\347>\213\233}?\013\257\027=\013\021\022>^v\372>V\341\177?\\5\365:\355\277\364;\360\353\362<\330\267\353=w\226\320>\0248w?\017\255\007>!f\353>\231W~?\347\323\322<\344f\315=&\315\270>\3012l?\032)\222>L\337P?\267\316\031?\346\227u?\340\274\037>\325\321\006?\370E\177?\307\2009<\031g7=\3200/>\3377\021?!^{?9\215\221=\0205\207>\036\001G?\20691?\270#Z?w\013\001?\242\373\177?B\266\2139\272\254\213:\240\206\213;\211\356\212<X\223\210=x\357~>tw??\366\017A?\221\333=?\2026D?\376K7?\n9P?5q\033?\263;t?z\2353>\023\034\024?h\256y?i5\305=\0018\262>\024^h?g\233\253>\324-d?Sa\306>\364\007s?\243\375D>L\030\037?n\344p?Fuc>\372\3560?\r\226Z?8\221\377>\320\377\177?1\301?7\241\300?8c\276?9i\265?:\205\221?;*\002?<\031\310<=\261\0244>ki\024?p}y?\335\005\313=\223\345\266>\353\037k?jb\231>\014\336V??\030\n?ch~?\335\211\312<\356\207\305=\237z\262>~\206h?\230\223\252>\325~c?E\245\312>N\341t?\2520*>\177\347\r?\257\372|?H\014?=\022#6>\232\275\025?b\235x?{\202\345=%\312\313>\023Zu?\250H#>A?\t?\367\251~?\357\037\252<{\227\246=b\n\231>Z\227V?\330\327\n?\265)~?\252u\351<o\316\342=J\260\311>Gzt?[\0170>\023\312\021?(\016{?\240,\233=\276j\217>\017}N?6\276\037?\206Ap?\234il>\343\3245?\243\270R?\311\024\025?U\016y?S.\330=\214\\\301>l\254p?\335\212f>i\2432?\013\357W?\235.\007?\2541\177?\377\255M<\377\030K=\364\006A>\025\244\034?\311.s?\361\316B>^\277\035?W,r?\264GQ>*\202&?e\324h?\354\225\250>\272&b?\233\362\322>J\022x?,\333\365=\205W\330>;\333y?\301\340\277=\234\346\255>\271\253e?d\370\274>\004sn?\246\307\202>\354\277B?\353a:?\361\275J?\217\266(?\304\031f?\252;\272>\223\374l?T\317\214>=+L?3Y%?a4j?\251\204\237>D\243[?.\224\371>\305\326\177?m\322$;Oh$<\370\301\"=WJ\034>\253o\004?H\261\177?\372?\235;\313~\234<u\201\231=\365\377\215>\366;M?\177\313\"?B\025m?!\'\214>p\223K?\037\301&?e\210h?*\207\252>\211vc?\333\330\312>\304\366t?\001\367(>\271\025\r?%S}?\234l)=\222j\">\317\247\010?T\324~?{&\225<Lo\222=\350\366\207>y\267G?\335\242/?,\213\\?d]\364>\237x\177?\035\031\007<\357\373\005=\363\231\001>\244e\342>\252\223|?\207\'X=[\277L>\371\316#?\002\367k?\260\274\223>\"7R?\210b\026?\253+x?\023\341\362=I\023\326>S\"y?)\321\325=r~\277>\367\276o?p\215s>\374\2379?x\035L?\366y%?\023\016j?\275\202\240>\313a\\?\207L\365>}\215\177?\037\240\344;\304\007\343<\016\275\334=^\362\304>\267`r?\214[N>\256\305$?9\337j?\020\023\233>\t6X?:k\006?2[\177?Xd$<\025\276\"=\303F\034>/m\004?\240\261\177?5\220\234;\265\320\233<\002\332\230=\216q\215>\324\274L?\\\375#?\370\302k?\203\033\225>\374]S?\260g\023?\310\035z?I\363\267=\222m\247>\001[a?I\317\327>\276\260y?Z\356\304=\237\376\261>);h?\t\177\254>\037\303d?\332\267\302>\212Tq?(D]>xt-?c\267_?\007\263\341>\337i|?+Qb=\364\317U>\007+)?\302\204e?\316\357\275>\245\363n?_\233~>3M??\246cA?\3740=?z~E?N\2124?\026\336T?\004v\017?\325C|?\007\216k=&\002^>7\340-?\241\035_?\372G\345>\0336}?\251\2070=\374\353(>W\016\r?)V}?\237\257(=/\275!>O1\010?\206\363~?\031\260\205<\225\201\203=\262\037v>v\367:?\274\253I?m2+?\025\330b?\312\256\316>\320\177v?\314^\022>v\345\372>\364\345\177?\377K\320:B\367\317;^\245\316<\352n\311=\376\236\265>\306cj?\310I\236>h\264Z??\345\376>\310\376\177? &\2348&#\2349?\027\234:\251\347\233;\304)\233<g9\230=\340\350\214>8BL?x\"%?\023tj?\\\335\235>vaZ?Q]\000?x\377\177?\332\017\0108\271\016\01094\n\010:!\370\007;\351\257\007<=\220\006=\210$\002>\2014\343>\332\302|?\010\252L=\021pB>\216\204\035?\314br?\274=N>\342\263$?\250\363j?\204\212\232>\027\312W?\025\224\007?E\032\177?\363\354d<\030\272a=\215IU>\257\334(?-\351e?tq\273>\366\243m?\273W\210>!\022H?1\327.?\326\267]?T\207\355>\317\252~?+\265\251<&1\246=\255\264\230>MRV?g\222\013?^\350}?p\320\004=\366\201\000>\321\302\340> 0|?\003Vp=\355;b>v@0?\016\237[?I\254\371>\370\327\177?\263\006 ;\253\242\037<}\024\036=\250\372\027>>l\001?\347\367\177?$\214\001:\301{\001;C:\001<T5\000=\373c\370=\300C\332>\013pz?\220 \256=\207R\237>p}[?\252l\372>\352\340\177?7\223\370:\211\032\370;\2429\366<\013\323\356=h\371\322>\257\024x?V\223\365=\353 \330>E\312y?Y\345\301=\345\211\257>\371\265f?\343S\266>d\314j?\322\220\233>\364\230X?\365Y\005?s\215\177?\327\262\344;9\032\343<}\316\334=\013\000\305>\005gr?`\001N>\322\217$?\360\034k?`v\231>\n\356V?\316\354\t?\372u~?\350\323\303<\204%\277=dN\255>\275Ie?\340e\277>\223\262o?\200:t>\233\3729?\306yK?\261\375&?\320>h?;g\254>\225\263d?\256\031\303>:\203q?3\256Z>\352\372+?\376\306a?\307<\325>\\\333x?\2613\336=\373\027\306>\333\346r?H\331F>\023< ?\265\303o?;Ks>A}9?\357[L?$\345$?\003\273j?\305\004\234>\271\363X?\"^\004?\261\263\177?\340o\230;V\272\227<\353\352\224=\334\026\212>\021\261I?\'&+?\245\350b?sH\316>8Xv?\332\250\024>\336\'\376>\231\374\177?P\254Y9\276\240Y:~rY;\313\271X<\342\333U=h\261J>K\222\"?BSm?\371\177\212>\271\021J?\377F*?\203\022d?B\014\307>uTs?3\260@>\002n\034?\001_s?\030\030@>\016\017\034?\320\262s?\305];>=\025\031?a+v?\256?\027>\242\350\000?\262\374\177?UcS9lXS:\315,S;\232~R<J\312O=\276?E>\363@\037?\322\274p?\315\243e>/$2?b\267X?\246\005\005?\036\233\177?zu\311;f8\310<\245S\303=\224\262\260> og?\"\253\261>,\010h?\336\312\255>\353\231e?\201i\275>\016\256n?\256/\201>E.A?\342\235=?\205\255D?pM6?\366\354Q?\305 \027?a\244w?>\\\001>o\t\342>6~|?m_]=\216hQ>\225\225&?\001\275h?\036/\251>\376\216b?\257q\320>o*w?Zx\010>\250\220\354>I\206~?\020\305\273<Dw\267=\315\007\247>l\024a?#|\331>\2274z?\267:\265=51\245>\362\311_?\371C\341>dO|?\212\277h=\316\205[>Av,?\214\034a?\325J\331>\267%z?\377\000\267=\262\246\246>\310\320`?\373\025\333>Y\255z?D\312\246=\3464\231>\206\271V?N{\n?\212H~?\261A\332<\022q\324=\243g\276>F1o?\276C{>D\234=?\241\260D?\303F6?I\370Q?\303\003\027?K\271w?\\#\000>\0105\340>7\r|?~\314x=\261\257i>_[4?\004+U?\241\251\016?\010\244|?\321+T=H.I>\332\247!?/Mn?\245\314\203>6\276C?\212K8?v{N?#\302\037?\242=p?;\240l>G\3625?&\207R?\222\224\025?\'\271x?\244<\342=\300>\311>\347It?\025\3172>\354\225\023?\234\001z?\336N\273=T-\252>m:c?\026N\314>\241\217u?b6 >a%\007?\2753\177?\007\240K<+\030I=\2738?>N\203\033?),t?;\1774>p\256\024?\036Qy?\362F\320=\206\030\273>6tm?\253\236\211> BI?\342$,?4\215a?\205\235\326>OOy?\336}\320=ED\273>\273\213m?\263\375\210>\335\254H?<y-?\235\260_?\213\333\341>os|?\375\375_=5\276S>o\365\'?4\rg?\376\"\264>\302\204i?\240\016\244>\202\372^?\234\030\346>\375`}?\370\010&=\376M\037>\200\205\006?\342U\177?_\255)<\205\353\'=3\t!>\017\266\007?\'\022\177?\024\374l<\215\216i=@=\\>\353\336,?u\212`?\355\276\334>$%{?8i\230=\224\021\215>\312fL?;\313$?\330\330j?\255=\233>\233WX?\235\016\006??m\177?\227l\022<\227\035\021=n\371\013>t\256\361>\3732\177?\034aL<q\324I=|\342?>\215\355\033? \320s?\247\2659>\244\007\030?D\372v?FE\013>f\250\360>\236\024\177?\231\211j<\032.g=\326!Z>m\252+?85b?\261\231\322>\337\362w?\300\211\371=\030\"\333>\326\260z?2_\246=?\333\230>gqV?q>\013?L\006~?{\346\372<C7\363=\004U\326>\3117y?\366F\323=4{\275>B\267n?\000\360\200>\037\357@?D\036>?N\265C?b^8?IZN?o\023 ?\213\354o?O\020q>aP8?\360rN?\007\327\037?\336(p?n\303m>\222\2166?+~Q?\252;\030?\t\323v?]\214\r>\304\366\363>\"o\177?\370\213\020<\201E\017=\225B\n>=/\357>=\345~?\037\305\214<\336Y\212=>\001\201>;\000A?\210\373=?\250\370C?\232\3177?\215TO?\323\252\035?i?r?o7P>\347\340%?\337\224i?U\244\243>\374\255^?$\336\347>\242\271}?9L\020=\3346\013>h\223\360>\030\022\177?\273\nm<\310\234i=\334I\\>\032\346,?a\200`?\267\373\334>\3245{?bg\226=\270[\213>\266\332J?Qs(?\013of?\226\032\270>\361\316k?\327\312\224>\205\032S?-\027\024?|\261y?\306\327\304=c\354\261>\0130h?s\307\254>H\362d?\222\216\301>\335\304p?y2e>\243\3451?&\031Y?\005\366\003?>\301\177?\r\313z;\\\325y<\031\006v=\035?g>`\0063?\327QW?\027\335\010?\277\305~?\324_\234<\255c\231=\243\346\215>g%M?\352\001#?\350\331l?Y\273\215>\311\376L?\354^#?\241sl?\341q\220>rcO?\344\205\035?\221ar?UON>d\276$?\231\347j?\033\333\232>\336\tX?\333\344\006?\344A\177?U\216=<\347\\;=\332\3122>,\223\023?L\003z?~\033\273=X\003\252>?\036c?\274\374\314>\263\325u?\200/\034>\005]\004?\330\263\177?8\"\230;fm\227<\325\240\224=\211\327\211>\254vI?k\254+?\1772b?e\252\322>\313\370w?/\330\370=\275\233\332>\335\211z?\330\t\253=\023\301\234>F\206Y?u\305\002?G\341\177?\222\246\365:\2660\365;\t[\363<Y \354=\344\346\320>\305Uw?]\362\005>\334\331\350> \350}?\230\337\004=\"\220\000>\013\330\340>L5|?\272\024o=? a>\322\241/?\272\214\\?gT\364>\316w\177?\274\351\007<\032\311\006=\250Y\002>\271\203\343>\224\324|?\376WH=d\213>>\227\026\033?\351\210t??:/>\023>\021?\312Z{?C\364\221=o\215\207>eTG?P\2000?\206>[?\352\323\373>\230\356\177?\3248\213:\371\022\213;\335{\212<\217$\210=g/~>\341\026??\355\316A?\021U<?\017 G?\317\3640?\"\215Z?\264\303\377>\362\377\177?\343=c6\261=c7\347<c8\3009c9&-c:\277\372b;\2001b<\022\022_=\n\354R>\004z\'?c\246g?\201E\260>^+g?\232`\263>\370\020i?\233\010\247>\373\024a?\277x\331>\2213z?\347Y\265=\337J\245>%\334_?\372\326\340>\n5|?\320$o=t.a>\310\251/?\340\200\\?\360\230\364>\373}\177?\337\302\001<\307\273\000=\004`\371=\206\002\333>\273\247z?\201v\247=\006\305\231>\364,W?\252A\t?E\251~?3x\252<\024\354\246=4Q\231>>\320V?\265=\n?|\\~?:j\320<\324\034\313=\374\367\266>n*k?\013\034\231>\216\245V?g\261\n?\2446~?o\025\343<\367\311\334=\177\374\304>cer?\300\030N>\312\235$?\367\014k?E\341\231>\177CW?8\004\t?\320\272~?o\311\241<x\227\236=\215O\222>E\000Q?R{\031?\272\332u?l\345\033>\204)\004?\265\272\177?zq\212;\274\333\211<\325\211\207=\000#}>s\217>?\317\330B?\366-:?\220\034K?\001\331\'?\2500g?\200>\263>\212\374h?\271\216\247>\355qa?\275C\327>\241\204y?k+\312=Z6\266>`\273j?X\002\234>\325\361X?dc\004?\371\262\177?q\337\231;x&\231<\200I\226=9B\213>w\303J?\250\251(?,*f?\361\322\271>T\303l?\342T\216>}\207M?\335\024\"?\317\331m?d\346\206>\310\266F? \3361?\334$Y?f\325\003?7\305\177?\227\356j;\376\026j<\306\276f=\020\277Y>\262q+?o\202b?\007\277\320>\024Gw?z\315\006>\024\035\352>\374 ~?\301\301\355<>\333\346=h\325\314>\000\306u?\250\026\035>u\375\004?f\234\177?6\347\306;!\262\305<\304\354\300=D\300\256>\2336f?\206\203\271>\261\227l?I}\217>]\215N?6\226\037?\033ip?\317=j>\214\2504?a\254T?\261\371\017?\'\003|?\204<{=\211\323k>\006\2045?F@S?\n\265\023?\202\356y?]\225\275=\240\010\254>\251ud?\357\236\304>\036:r?\007\203P>\274\r&?\256_i?\372\002\245>\036\251_?c\010\342>\367}|?\263n]=.vQ>\242\235&?K\263h?\255n\251>\n\272b?Jh\317>\302\306v?\260B\016>Z\376\364>\334\206\177?\373\325\361;\022\r\360<N\004\351=3\201\316>7nv?`c\023>\035Y\374>\252\362\177?\251VU:7*U;\270xT<W\267Q=\211\372F>iP ?2\257o?\253it>D\023:?\016MK?\ng\'?\306\275g?\360\255\257>\233\314f?\205\302\265>fxj?\230\300\235>eKZ?\234\233\000?\206\376\177?]*\2758\377%\2759\207\024\275:\263\316\274;3\270\273<\376j\267=\271\375\246>k\ra?\243\246\331>YAz?\314\264\263=\001\360\243>\200\344^?2\233\346>({}?\354\237\037=kg\031>9l\002?\205\350\177?T\303\273:x~\273;\324k\272<\315-\266=(\371\245>0W`?\361\363\335>\313x{?oV\216=\357q\204>-^D?U\3676?\344\312P?C\002\032?*nu?\350!\">,v\010?\233\341~?q\222\216<;\027\214=\r\202\202>\303{B?\316\357:?\327\271I?\361\021+?\337\003c?\n\240\315>`\026v?\327u\030>\316\302\001?\231\363\177?~lF:\013FF;{\254E<\357IC=T\3729>c3\030?L\331v?T/\r>\023p\363>1b\177?\345m\035<\245\352\033=E\373\025>\250\003\000?\000\000\200?\250\306U3\247\306U4\244\306U5\231\306U6l\306U7\272\305U8\360\302U9\310\267U:-\213U;\014\331T<+\025R=\300NG>\336\203 ?\022{o?\260@w>7\215;?k\226H?.\254-?\021h_?\312\214\343>\230\326|?\"\332G=\324\031>>>\317\032?\377\304t?\032\316+>\333\372\016?i~|?\373R]=u]Q>\006\217&?\351\304h?[\373\250>\330kb?\nJ\321>\032zw?\027\324\003>\317\266\345>\rM}?\200\352*=\274\310#>l\226\t?P\220~?\372\317\266<\227\273\262=j\"\243>\375O^?M\t\352>\231\035~?\022m\357<\253m\350=\314\014\316>\377@v?C\000\026>0\007\000?\377\377\177?\203\222N4\200\222N5v\222N6L\222N7\245\221N8\013\217N9\240\204N:\372ZN;\243\264M<x\037K=\311\014A>\267\247\034?\210+s?\303\375B>]\334\035?U\021r?\366\310R>ae\'?\321\277g?\263\240\257>L\304f?\344\367\265>P\227j?\305\362\234>\303\254Y?\256Y\002?\347\351\177?\013\265\260:\016x\260;\303\204\257<\r\302\253=sZ\235>\325\374Y?\351x\001?T\367\177?R\266\n:\210\243\n;sX\n<e-\t=K\225\004>p\325\346>\251\206}?\026\316\034=Y\315\026>\006\230\000?\227\376\177?`\216\2648e\212\2649{z\264:\334:\264;\027=\263<#Q\257=\"O\240>A;\\?\334*\366>R\237\177?\352\022\301;\257\357\277<sp\273=\304H\252>\317Lc?\t\334\313>^au?\252\335\">W\366\010?\266\276~?Z\333\237<\310\274\234=\365\275\220>\251\245O?Z\341\034?\270\367r?\t\347E>\260\247\037?\326Wp?e0k>\354+5?\"\323S?\2475\022?\245\321z?Zp\242=\r\216\225>p\275S?tn\022? \261z?YV\246=\326\323\230>nkV?\223N\013?\235\000~?\302\262\375<l\327\365=\253T\330>Y\332y?\252\373\277=z\374\255>\276\271e?I\237\274><Dn?T\n\204>\001\372C?\274\3147?\215YO?n\236\035?\344Jr?n\223O>~\177%?\231\007j?\254\255\240>\313\201\\?\243\223\364>\202}\177?c;\002<b2\001=J>\372=\223\252\333>\335\327z?q\261\241=[\355\224>i7S?\027\314\023?G\340y?\004G\277=\243i\255>T[e?z\366\276>*zo?ZMw>\303\223;?;\212H?\320\307-?\223@_?\022x\344>\014\n}?\016L;=\213\2732>5\211\023?b\tz?\302a\272=|k\251>\341\267b?\236u\317>\320\313v?\233\367\r>\336\221\364>Z}\177?\243c\002<\376Y\001=\201\210\372=\245\342\333>\273\347z?\003\312\237=qR\223>\032\335Q?[I\027?\363\206w?3\024\003>\217\231\344>;\021}?\277\2129=!#1>\273~\022?\274\247z?dv\247=\356\304\231>\340,W?\337A\t?5\251~?\301\177\252<R\363\246=CW\231>\032\325V?\2040\n?\262`~?,V\316<\266#\311=\223b\265>\234@j?s3\237>\363e[?\344\362\372>|\346\177?\261\t\314:a\270\313;%t\312<Is\305=\365i\262>e|h?\212\325\252>\306\252c?\305\223\311>)nt?\264\2770>\252=\022?\025\315z?{\374\242=\353\003\226>>\037T?\355m\021?\335@{?`\023\225=n9\212>\345\320I?\315\334*?:Kc?\333\345\313>^eu?\374\242\">P\316\010?\323\311~?\255Z\232<#r\227=(?\214>-\251K?\300\215&?s\306h?H\361\250>\376db?,t\321>t\211w?\315\356\002>\346a\344>E\005}?\244v<=\274\3123>s9\024?\344\233y?gh\307=\367\375\263>\313ni?m\237\244>3b_?\302\257\343>Y\336|?\022\366E=\307d<>\274\273\031?.\247u?)\334\036>\t7\006?\177e\177?\315#\032<\221\260\030=n\377\022>\260\312\373>J\356\177?\352\242\215:\274{\215;Y\337\214<1s\212=$\027\201>\364\025A?b\317=?\016ND?\303\0317?\256\217P?\212\227\032?y\363t?,\')>\3755\r?\344E}?\032\253,=\264c%>I\255\n?\0048~?\336g\342<\002&\334=\327{\304>\321)r?\265kQ>r\227&?\302\272h?\317=\251>\364\230b?N4\320>\223\023w?\302\314\t>\036\203\356>-\316~?\3102\230<\345^\225=\362y\212>1\014J?\315S*?\225\001d?\033v\307>a\203s?2\013>>\n\306\032?\263\314t?\242]+>\024\260\016?\023\241|?\026\344T=m\323I>\001\014\"?=\343m?\246\245\206>wyF?fe2?\360PX?\004!\006?\276i\177?\245\351\025<~\212\024=w\'\017>`H\366>\223\241\177?G\224\274;s~\273<\3433\267=|\320\246>\355\355`?\206e\332>\374yz?A\360\254=\312U\236>\222\275Z?G\261\376>J\376\177?;\322\3328b\314\3329\002\265\332:\226W\332;#\343\330<#%\323=[`\275>K\251n?\232P\201>\340NA?h[=?>-E?R:5?4\273S?Ot\022?\300\255z?\331\275\246=\201*\231>-\261V?\356\221\n?\031A~?q\355\335<S\352\327=\345&\301>\037\222p?\032\375g>jn3?H\253V?\344\241\n?\317;~?\022\211\340<\221a\332=G\030\303>\217\202q?\254\267Z>W\000,?\211\277a?Zj\325>\216\352x?\202h\334=\t\260\304>\013Br?\320\021P>\223\312%?E\257i?\014\366\242>\304/^?\030\307\352>\235=~?&\245\337<\035\212\331=\257n\302>m1q?E5_>\317\215.?\355\"^?\254\022\353>\017J~?\371\201\331<\214\273\323=\266\327\275>3\347n?\362G\177>\330\243??\314\267@?X\216>?\370\332B?s):?\306$K?\274\305\'?\240Hg?\325\243\262>m\237h?\243\360\251>\254\021c?\234J\315>\244\364u?\177g\032>S\037\003?\001\331\177?\271\344\033;\313\205\033<\336\013\032=\271@\024>\377\223\375>\"\372\177?P\256\2739\035\235\273:^X\273;)F\272<\331\t\266=\231\333\245>bB`?(q\336>\335\231{?1Y\212=\250\000\201>\247\377@?\265\374=?a\366C?q\3247?\034LO?\300\277\035?\373+r?\315LQ>.\205&?\305\320h?\261\255\250>\3646b?\r\217\322>\031\357w?\365\372\371=\260w\333>a\311z?(n\243=yc\226>:nT?\353\235\020?\205\257{?\273\273\207=\223y}>1\273>?-\203B?g\340:?3\326I?\217\320*?\235[c? \200\313>\315;u?\211\004%>\323l\n?EM~?O\354\327<Y;\322=\253\246\274>\036Hn?\214\357\203>\017\340C?\321\0038?R\371N?|\214\036?\027kq?\211\004\\>\226\276,?\272\267`?\207\255\333>\263\330z?\261\227\241=\254\327\224>D%S?C\373\023?\366\302y?\343\303\302=4>\260>\321&g?\355}\263>\203\"i?b\225\246>\261\304`?\036_\333>[\302z?\253E\244=\200\030\227>\027\003U?\314\023\017?\262r|?\360+`=!\347S>m\r(?5\357f?\020\344\264>\236\366i?$\036\241>[\325\\?\244\257\362>\275N\177?\341\3070<\223\337.=Hh\'>\372\t\014?A\274}?\227\247\017=\315\235\n>Y\264\357>u\366~?\352;\204<{\031\202=~\253s>\275\2579?\025\001L?n\275%?\310\276i?\214\217\242>\033\345]?\355}\354>o\203~?\226-\275<3\317\270=\343!\250>H\327a?6\331\324>\362\271x?\274$\342= ,\311>\356At?\363B3>G\341\023?%\323y?\032\327\300=\256\256\256>p+f?\330\312\271>\343\276l?\017s\216>F\242M?\355\323!?\266\036n?\276\014\205>>\363D?\201\2675?\005\352R?\375\224\024?\207ay?\035U\316=z\213\271>\022\234l?\220_\217>:sN?T\326\037?\221)p?\253\271m>X\2116?\025\207Q?\365$\030?3\344v?^\215\014>E\205\362>NJ\177?\33305<\343/3=#Y+>\026\255\016?r\242|?\210\216T=\302\206I>\211\335!?\214\024n?\261R\205>[6E?\235&5?\365\333S?\211\036\022?\304\336z?f\335\240=\266:\224>|\241R?\232P\025?\265\346x?\277\334\334=:\013\305>,lr?\256\267M>\302c$?*Ok?\322%\230>\265\336U?h\311\014?\377q}?\211\336!=\357x\033>\004\336\003?-\304\177?Q\022o;\0163n<\202\274j=\257H]>\nw-?\274\263_?\343\310\341>\to|?\257\017a=\346\261T>\036\204(?\312Yf?\234\242\270>\021\033l?9\311\222>OhQ?Ms\030?\266\250v?\216\000\020>\315\200\367>\316\267\177?\037<\220;\230\231\217<0\025\215=%]\203>\324QC?B09?\345\345L?\306\232#?A1l?<3\222>\375\347P?\276\270\031?\226\251u?\305\270\036>\237\036\006?4j\177?\305t\025<\301\027\024=\t\275\016>\361\256\365>\221\225\177?#\205\324;I$\323<#\263\315=\026\n\271>\230Tl?\036D\221>\000\032P?\365\276\033?\247\370s?\201j7>%\220\026?\242\013x?\357\242\366==\357\330>\344\tz?UR\272=\335^\251>W\257b?I\252\317>\277\337v?\211\317\014>@\345\362>FT\177?&G+<\305|)=fy\">\356\261\010?\226\321~?|\202\226<\223\276\223=\006\026\211>w\303H?\337E-?s\371_?O\'\340>\316\t|?\032\240y=\215ij>E\3004?O\205T?\373`\020?\360\316{?\315\357\203=\307\337v>\022[;?\226\363H?O\330,?\270\223`?\006\207\334>\263\025{?\223D\232=\301\245\216>5\317M?\313f!?Z\221n?#\366\201>J\362A?E\014<?\375\250G?Q\303/?\315Z\\?\345t\365>\326\220\177?\332\362\335;\377q\334<^\203\326=b\013\300>\260\005p?Z\260o>\251\2257?g\271O?1\260\034?\360#s?\023kC>\000 \036?\360\321q?\341OV>xu)?\247$e?zP\300>$(p?\246\315m>\014\2246?\326tQ?mS\030?\001\301v?\024\230\016>\237y\365>:\221\177?P,\335;%\256\333<\t\312\325=\317x\277> \274o?\037\265s>\311\2649?\374\367K?\010\323%?G\245i?\n8\243>\253_^?\327\254\351>\232\r~?\336M\367<\244\326\357=T\300\323>\rZx?\177n\355=\306\347\321>I\263w?I}\000>\317\273\340>j.|?@\300p=\257\231b>\302t0?\010P[?\np\373>/\353\177?\227w\246:wA\246;\205i\245<|\022\242=\017?\225>\247{S?X\032\023?QLz?}e\262=T\333\242>V\034^?o9\353>_P~?pd\326<\017\310\320=X\177\273>f\253m?\301$\210>p\342G?wB/?\034\032]?( \361>\301\"\177?.\200\\<|\210Y=\361\372M>\372\213$?U!k?\370X\231>y\326V?\315,\n?\341a~?\276\300\315<\314\225\310=\177\360\264>\352\375i?\323\355\240>\202\261\\?\177\177\363>\263c\177?6\355\033<Qq\032=\211\236\024>9\031\376>b\374\177?zbg9hUg:%!g;xPf<\246\023c=\350|V>\244\217)?\264\002e?\362&\301>%\222p?\303\374g>;n3?\225\253V?\025\241\n?\024<~?\025g\340<qA\332=\000\377\302>\206vq?lb[>\tb,?\2358a?e\240\330>\273\361y?\0363\275=\216\270\253>\tAd?\004\351\305>\224\321r?\320\nH>\226\366 ?\264\005o?\343\240}>\n\317>?@\\B?81;?\033AI?8\',?\374\211a?(\261\326>\246Uy?\200\275\317=\000\253\272>\0229m?\3212\213>i\265J?|\312(?d\000f?\201\335\272>cTm??x\212>\242\nJ?hW*?\320\374c?\353\223\307>\211\220s?4M=>nN\032?\346/u?\353\262%>\343\342\n?\365%~?\270N\353<k\214\344=\035\013\313>\232\013u?P\306\'>;I\014?6\244}?k\216\025=y\030\020>-\243\367>\021\272\177?m\267\213;\354\036\213<\027\302\210={@\177>\032\240??=\277@?J\177>?c\370B?\357\3539?X\224K?\372\276&?\375\212h?5v\252>5kc?A\037\313>\355\023u?{L\'>C\367\013?F\303}?I\356\r=C\003\t>G\\\355>\221\244~?\227\313\254<\205&\251=\t.\233>KKX?\2320\006?\276f\177?\017\346\030<\307x\027=\314\336\021>\205.\372>&\336\177?\341V\007;U\017\007<P\362\005=\365\220\001>6X\342>\216\220|?)\351X=\204lM>\3066$?2\202k?=\317\226>\367\306T?N\263\017?\375%|?N\313r=\376fd>\027u1?\337\307Y?\253\r\002?\"\357\177?\020\344\206:\206\300\206;\2522\206<\341\377\203=\312\373v>\222i;?\254\330H?\237\025-?\221=`?#\216\336>r\241{?\313n\211=\3235\200>\3075@?D\224??\303\326@?\252O>?CUC?\n)9?\314\362L?\301{#?\265Sl?\036J\221>1\037P?\367\261\033?\351\003t?S\3076>R\'\026?\340Tx?I\n\356=e_\322>%\336w?!\367\373=O\367\334>\2374{?\177\214\226=a{\213>\213\367J?\321/(?\027\304f?=\371\265>\027\230j?\224\355\234>\277\250Y?\357d\002?\022\351\177?9`\267:\214\036\267;\222\030\266<[\014\262=\265\221\242>\256\346]?\256t\354>\006\202~?\003\340\275<_y\271=J\255\250>\2566b?\273\220\322>\261\357w?\027\351\371=/j\333>\205\305z?\216\344\243=\363\306\226>&\300T?[\305\017?\035\035|?+\362t=BLf>\373\2002?t%X?\353\230\006?\347Q\177?\020\243-<\371\313+=W\227$>\307\"\n?\017e~?\247.\314<\324\027\307=\022\275\263>1Hi?\232\235\245>\252\026`?\362w\337>\264\335{?\235&\202=k\302s>\300\2739?j\353K?\335\360%?\366\201i?\020!\244>\277\007_?\000\312\345>\375P}?\360\363)=\260\346\">\177\374\010?\374\274~?\035\266\240<\374\216\235=\346o\221>\330?P?#`\033?RJt?\005\3112>\373\221\023?\006\004z?D\005\273=.\361\251>\n\022c?XH\315>\277\363u?\271t\032>\220(\003?\031\330\177?\362\203\037;\215 \037<\347\224\035=\350\204\027>d\031\001?+\373\177?m\243\2329\300\227\232:\023i\232;\315\256\231<\272\314\226=(\262\213>])K?\363\272\'?\005Vg?WM\262>\nkh?\331F\253>\371\365c?\252\276\307>Z\243s?Q=<>\312\242\031?4\273u?\225\265\035>\207k\005?~\212\177?\234\227\352;\251\351\350<fJ\342=xI\311>|Nt?s\2142>\214j\023?\014\034z?:(\270=\377\230\247>\006ya?\204\030\327>\330vy?\030\316\313=\010\206\267>+{k?y\376\226>\277\355T?vL\017?\315W|?\311\264f=3\266Y>\232l+?Y\211b?t\224\320>V7w?(\270\007>qv\353>8Z~?\260\210\321<\254,\314=\305\321\267>\366\245k?\303\336\225>u\000T?\315\276\021?j\024{?\004l\232=@\307\216>\332\354M?\247\036!?U\334n?\226\336\177>J\357??g!@? \275??z\205@?\365\363>?\264\023B?W\307;?\013*H?K\241.?\216\006^?|\271\353>\350d~?\356A\314<$*\307=\323\313\263>\373Pi?\306c\245>\310\355_?Fm\340>#\033|?\330lu=?\270f>Z\2742?\211\307W?\024\233\007?\234\030\177?\014\223f<ZTc=n\266V>\016\261)?=\327d?\0369\302>\236\027q?K\242`>1[/?\217\365\\?\257\364\361>\303:\177?b\245D<,IB=\374\0219><\237\027?\001Hw?\263\277\006>\306\010\352>\202\035~?rx\357<ax\350=\024\025\316>:Dv?\205\320\025>\330\312\377>\365\377\177?\201\23306b\23307\350\23208\001\23109d\2210:\362r0;T\371/<x\025.=e\257&>i\215\013?+\352}?\340^\004=\300\027\000>\240#\340>\343\010|?\367\330y={\233j>T\3334?\250XT?\315\326\020?\311\221{?\301R\213=b\330\201>\372\324A?\237H<?\2037G?\245\3000?\304\334Z?>\000\376>\001\374\177?\362\275\1779\373\255\177:$n\177;Go~<\303{z=d*k>\255(5?\207\330S?\205\'\022?\255\331z?\300y\241=t\276\224>%\020S?\0352\024?\207\240y?\203\333\306=z\214\263>4+i??\\\246>\273\234`?\235P\334>\223\006{?\330\025\234=\2040\220>j*O?.\023\036?\377\335q?E\244U>\224\021)?v\245e?2 \275>\326\207n?\3367\202>\3632B?\303\206;?m\242H?\357\220-?\347\216_?\006\245\342>C\242|?\r\232T=\025\221I>\314\343!?\353\rn?H\200\205>\005bE?\016\3104?wxT?\344\202\020?\202\275{?\020\013\206=;\212z>\252==?9fE?\361\2764?~\207T?6[\020?\343\321{?|\224\203=\244@v>\221\010;?3\214I?\370z+?\326ub?\216\014\321>\234cw?\350#\005>\247\250\347>\201\257}?\322\310\022=7\206\r>\337\355\363>Ln\177?qa\021<3\027\020=\221\005\013>\234K\360>]\t\177?)\265u<\330\005r=\347\270c>\213\0241?\204\\Z?Gk\000?L\377\177?\273\32038\302\31639\335\3063:M\2473;:)3<\25731=\'\211)>\217w\r?\216*}?tZ3=\372\177+>\354\306\016?\216\226|?asW=1\036L>(n#?\306bl?\025\344\220>\307\306O?\333\216\034?\301As?\267\275A>\321\025\035?3\310r?Z\221H>~H!?\354\260n?\330\033\201>\235\032A?\346\305=?^`D?\247\3626?\356\322P?\366\355\031?\243~u?\0100!>\253\320\007?\262\013\177?\267ds<\026\307o=\300\275a>\372\371/?\010\t\\?\016L\367>B\264\177?bN\227;\207\233\226<\262\326\223=\252*\211>\243\326H?B\032-?\0107`?p\265\336>\261\253{?\0222\210=\325F~>\255\"??\252\267A?\341\204<?\307\305F?\371\2741?tXY?\203E\003?0\325\177?s\"+;\014\260*<\323\350(=\254\361!>5U\010?A\352~?\237H\212<\014\363\207=\210\331}>\234\353>?\036$B?n\245;?RiH?[\022.?\230\325^?\222\363\346>\222\214}?\027[\033=\240v\025>\231K\377>\201\377\177?j@\3767q>\3768\2156\3769\377\026\376:\346\230\375;w\242\373<\267\347\363=\200\333\326>Jcy?\263\037\316=\322`\271>\220\204l?\017\377\217>-\377N?\t~\036?\340xq?\027A[>\374N,?\005Sa?\334\377\327>\365\277y?T\037\303=<\210\260>\335Tg?\317T\262>\222oh?G)\253>b\342c?\3778\310>\343\330s?\31069>\272\266\027?\2416w?\257\302\007>\351\205\353>\262\\~?\200O\320<v\003\313=\246\343\266>\322\036k?\310i\231>\363\343V?6\010\n?nm~?\201\014\310<\345)\303=\312\220\260>,Zg?\2052\262>\277Zh?%\261\253>(<d?\225\007\306>o\337r?\334CG>7} ?\324\201o?\212\342v>\200\\;?\357\360H?[\336,?>\213`?.\272\334>\326#{?v\221\230=\3243\215>\206\205L?\314\201$?\364,k?$\013\231>\366\227V?2\326\n?D*~?7/\351<\377\213\342=\220|\311>Idt?hO1>\256\233\022?\363\226z?\343x\251=\310r\233>^\201X?7\233\005?G\202\177?}\366\372;p\n\371<Fx\361=\320\377\324>\360\306x?\214\234\340=A\372\307>|\275s?_\303:>@\263\030?\232wv?d\330\022>\003\223\373>j\354\177?|\246\234:\217v\234;M\267\233<\221\301\230=\303\\\215>6\252L?\373)$?\252\220k?\002n\226>\352vT?\375\206\020?e\273{?|L\206=\356\373z>\255w=?\376\366D?j\2575?\230\367R?\316q\024?\025xy?|\250\313=\350g\267>\030jk?\037q\227>\232KU?\327R\016?W\313|?\232\230J=G\223@>\367[\034?\003os?.1?>\223~\033?:0t?\'D4>-\210\024?\302iy?T[\315=\347\303\270>\234-l?\340K\222>\036\375P?L\203\031?_\324u?\013C\034>\231j\004?\373\261\177?\346\331\233;#\034\233<K,\230=\266\335\214>-8L?c:%?HXj?-\226\236>\243\356Z?\272\232\375>C\372\177?\374\240\2679\205\220\267:\265N\267;2H\266<\3349\262=L\267\242>\030\002^?\261\323\353>\014i~?\2136\312<\2728\305=\257:\262>\265_h?\311\220\253>\324&d?%\215\306>\247\033s?N\342C>\253i\036?A\214q?\037.Z>z\261+?\230+b?\302\324\322>\305\007x?\346\026\367=@G\331>\242$z?\031\"\267=\340\301\246>\277\343`?3\243\332>\013\214z?\036\307\252=|\211\234>\037[Y?\020>\003?\362\325\177?\021\033(;\255\254\'<b\365%=\377;\037>\031y\006?fX\177?0,\'<\206w%=Q\310\036>Y)\006?%h\177?H\201\027<\241\032\026=m\232\020>\317]\370>\273\305\177?\301\340h;\351\014h<\213\303d=\275\374W>\035n*?\274\336c?\304O\310>\315\342s?/\2478>\377Z\027?\030zw?>\324\003>\t\267\345>\031M}?\226\347*=\017\306#>\233\224\t?\333\220~?\027\213\266<\307y\262=\025\354\242>\205(^?\275\361\352>\250D~?\005,\334<\'A\326=\007\327\277>}\353o?\r\037q>/X8?5eN?\257\370\037?P\007p?\231\231o>\217\2117?j\316O?\320{\034?\273Rs?\030\311@>\210}\034?3Qs?(\337@>H\213\034?\362Ds?\303\217A>>\371\034?\037\342r?F\035G>\244e ?\272\231o?E\225u>\201\257:?\0040J?\323\000*?\354nd?@\311\304>\270Mr?\016kO>{g%?\263#j?W\363\237>\201\366[?\230\266\367>T\273\177?32\211;%\237\210<\331W\206=\255\017{>\276\201=?\250\343D?\022\3315?\232\261R?\370&\025?U\002y?n\231\331=\277z\302>:7q?5\343^>~_.?,f^?y\206\351>\343\006~?)\234\372<~\361\362=\317\037\326>l&y?\001U\325=/\034\277>M\215o?\227Bv>\224\t;?U\212I?B\177+?\002pb?k0\321>\276pw?\333_\004>7\206\346>\375v}?x\245 =\204X\032>\334\024\003?\005\332\177?N\327\027;>}\027<\252\026\026=\301\226\020>\211X\370>j\305\177?\222\"j;oLi<\376\371e=k\020Y>5\r+?>\nc?\237x\315>\326\006v?$[\031>\237c\002?+\351\177?\t\230\266:\353V\266;+S\265<\266O\261=\313\365\241>\201t]?*\021\357>F\341~?5\274\216<\213?\214=\331\244\202>\333\235B?\347\250:? <J?\276\344)?\274\223d?\001\342\303>\355\341q?VlU>\371\360(?>\317e?\214\026\274>\370\373m?\264\373\205>\347\327E?\235\3073?o\033V?9&\014?\224\261}?\247F\022=\\\r\r>\335>\363>S]\177?\246E\"<5\252 =\342\\\032>\352\027\003?\271\331\177?l\004\031;\366\250\030<\321<\027=E\247\021>\025\337\371>q\332\177?\007\'\026;\365\316\025<Kp\024=*\017\017>[%\366>\346\236\177?\373\352\301;2\305\300<\357;\274=\355\356\252>\250\273c?\224*\311>EAt?\224L3>\211\347\023?A\317y?\225M\301=\323\016\257>`hf?EE\270>\344\346k?h)\224>\351\222R?9v\025?\220\315x?\177\324\337=\002^\307>\272xs?\371\244>>\246&\033?L{t?v\0000>N\300\021?\225\023{?\252\205\232=\007\335\216>\034\000N?\274\357 ?\302\014o?\367>}>\226\235>?*\275B?\253g:?r\263J?\021\317(?\215\372e?\277\002\273>{hm?\344\356\211>9\214I?\352z+?\351ub?\032\014\321>qcw?h&\005>Y\254\347>5\260}?\254\234\022=:]\r>\213\262\363>\246h\177?\363\000\027<\253\234\025=\257%\020>)\266\367>M\273\177?\237@\211;s\255\210<\255e\206=\263\'{>\373\215=?\036\314D?\266\0136?<\\R?\"\003\026?\330mx?\306\032\353=\201\035\320>\r\013w?\227K\n>c<\357>\367\346~?D\352\213<\202\206\211=ZJ\200>EJ@?!k??e(A?\332\251=?u\226D?\345~6?\341\230Q?\230\367\027?M\006w?J\222\n>\216\243\357>P\364~?\333K\205<\234 \203=\237vu>\216\237:?@MJ?\376\274)?\255\307d?+\233\302>\313Fq?\324\006^>\336\342-?\324\031_?\222^\345>\320:}?\343`/=\212\336\'>\203Y\014?\362\235}?*\030\027=R\205\021>}\256\371>\024\330\177?q\227\037;\3643\037<\356\247\035=w\226\027>\301%\001?\274\372\177?\n\206\2509,x\250:\275@\250;\223c\247<\372\367\243=C\327\226>\217\315T?\325\241\017?\213.|?B\270p=\242\222b>\323p0?\374U[?\016N\373>\365\351\177?\266J\260:\003\016\260;\334\033\257<\244]\253=\334\006\235>N\274Y?\035.\002?\375\354\177?\330\014\230:\260\337\227;}+\227<Za\224=D\241\211>\207DI?b\037,?\312\224a?Fo\326>R@y?<D\322=\274\255\274>\326Kn?\357\325\203>8\307C?v88?\000\235N?\316o\037?\355\216p?\022*h>\000\2073?\273\203V?\351\014\013?\215\027~?qg\362<3;\353={6\320>c\024w?\252\300\t>qq\356>\302\313~?\245e\231<P\206\226=\033v\213>\276\362J?\020;(?\365\265f?\372S\266>q\314j?x\220\233>\255\230X?\267Z\005?S\215\177?\236\363\344;\030Z\343<\321\n\335=[/\305>\313|r?\342\311L>J\325#?\360\357k?c\354\223>r_R?\336\372\025?\207sx?\264o\352=\247\231\317>v\331v?\352,\r>\224l\363>\331a\177?U\305\035<f@\034=}J\026>\245;\000?\310\377\177?$X^7bW^8^T^9MH^:\014\030^;_W]<\337YZ=\014\266N>\255\373$?\000\241j?6\262\234>\276zY?\265\345\002?l\336\177?d=\006;\377\366\005<\225\336\004=0\217\000>\240\326\340>\3644|?!*o=&3a>i\254/?\365|\\?\225\257\364>\376\177\177?\317\204\377;\273\206\375<\037\256\365=G5\330>\233\320y?m$\301=o\355\256>?Sf?w\314\270>`2l?\252+\222>\177\341P?)\311\031?`\234u?\023{\037>\214\244\006?\177O\177?\211\0070<_#.=\036\274&>\375\225\013?\021\347}?\036\"\005=V\316\000>.5\341>\326K|?\202\234i=\236I\\>\367\345,?\222\200`?\216\372\334>\2035{?*q\226=\020d\213>O\342J?\210a(?\201\205f?\274\212\267>\324}k?\231\354\226>\024\337T?bs\017?\032E|?\003?k=7\274]>\227\270-?XV_?m\366\343>\350\355|?\245*B=[\3668>\227\215\027?\002Uw?\271\375\005>\242\352\350>\'\353}?\340 \004=\203\273\377=\240\314\337>\036\363{?\247\036\177=\306:o>\023W7?\341%P?8\241\033?c\022t?R\3655>\036\240\025?\\\261x?\345\'\343=\354\365\311>\277\227t?\rb.>\261\257\020?E\246{?\263\331\210=ci\177>\234\264??p\226@?\276\321>?\360VB?;<;?\273,I?\325U,?\210Ia?\2179\330>\360\321y?\343\373\300=\212\314\256>e>f?\304Q\271>@|l?j7\220>q0O?D\004\036?\000\354q?\350\334T>@\235(?\3559f?Pn\271>\001\214l?\225\314\217>\370\322N?\r\353\036?E\020q? \na>m\225/?+\237\\?\262\351\363>\347m\177?\351\305\021<\342y\020=Ma\013>2\321\360>{\031\177?\027\265e<\242|b=\235\366U>\211A)?\305ge?\244\247\276>\003Ro?w|y>\240\263<?;mF?T\2002?|&X?\024\226\006?|R\177?\023\016-<#:+=\267\021$>\n\310\t?L\201~?\377;\276<\026\321\271=\033\365\250>\230gb?0d\321>\242\203w?\265E\003>5\343\344>\352 }?\331\2655=/\246->\2553\020?\000\346{?\263%\201=\245\001r>\336\3178?\231\221M?]\374!?\335\363m?o3\206>\373\014F?\230S3?Y\326V?#-\n?\305a~?4\316\315<\225\242\310=\307\372\264>\361\003j?\346\305\240>\323\223\\?U+\364>\tt\177?\324\252\013<\010z\n=\213\313\005>\206\240\350>\265\335}?lo\007=\001\365\002>\"k\344>C\007}?-\372;=\265Y3>\021\360\023?\362\311y?I\357\301=\363\221\257>\t\273f?c3\266>\253\271j?\300\r\234>\275\372X?\242J\004?U\266\177?0,\223;\370\202\222<+\344\217=\024\310\205>\247\246E?\36524?\tmU?\247\371\r?\306\362|?q\372@=\347\3427>[\335\026?\324\324w?K\016\375=\243\311\335>\204m{?\225\262\217=v\235\205>\356}E?\177\2134?\"\334T?2{\017?SA|?\237)l=\323\213^> ..?\221\255^?\234\340\347>\031\272}?\371.\020=\253\033\013>\317k\360>L\r\177?{\315q<\351;n=\262``>[6/?\374+]?\032\270\360>\177\026\177?1\254h<O^e=1\206X>\203\275*?\023uc?\354\341\312>\210\372t?\366\277(>\326\360\014?&b}?i\300%=O\013\037>\214W\006?\036_\177?\342| <q\352\036=\r\300\030>\345\366\001?\220\360\177?\367\352v:m\257v;\267\301u<\006\022r=\245\303c>\202\0321?^SZ?\032\205\000?\353\376\177?Tg\2128\376d\2129\243[\212:@6\212;\003\241\211<\025Q\207=\203\300|>\236]>?\024:C?0b9?\203\214L?\024q$?\002@k?t\213\230>\0021V?$\354\013?l\307}?9\351\014=:\020\010>\325\367\353>\271n~?\376h\307<[\216\302=\331\022\260>\306\013g?0,\264>5\212i?\261\352\243>\255\340^?\334\261\346>\245\177}?K\206\036=\252c\030>\n\266\001?J\364\177?\317X;:\2116;;\240\255:<\035\2158=j<0>\242\347\021?\253\375z?\246\'\235=q\030\221>0\364O?\206\035\034?\035\246s?_\025<>\206\211\031?h\317u?/\214\034>f\235\004?\320\252\177?\335&\252;\255D\251<O\305\245=QZ\230>B\tV?\035W\014?\337\236}?\374\335\026=mO\021>Ra\371>-\324\177?$,/;G\264.<a\327,=?\214%>\271\310\n?\321.~?\026\361\346<en\340=9\326\307>\262\255s?\301\247;>!D\031?~\006v?:`\031>0g\002?\347\350\177?\032\272\270:tw\270;\235m\267<-R\263=\255\236\243>\347\251^?L\366\347>.\276}?w.\017=(-\n>\364\017\357>\035\341~?\215\320\216<-S\214=\313\265\202>r\256B?Y\206:?e{J?\270Q)?\343Re?\357+\277>H\225o?N\323u>\305\317:?\310\364I?\360\211*?\314\271c?,6\311><Ft?l\0043>\240\270\023?L\354y?\271\330\275=\202?\254>\235\231d?\006\275\303>\212\320q?\314cV>\014\201)?\245\025e?R\257\300>1Wp?x9k>\32405?\373\312S?\000K\022?x\305z?-\346\243=P\310\226>E\301T?b\302\017?\223\036|?`\227t=R\374e>\371T2?\312jX?\242\331\005?\033w\177?4\234\010<\233x\007=\224\375\002>\346w\344>\002\n}?cN;=\251\2752>\226\212\023?\213\010z?r{\272=\177\200\251>\026\306b?\361\035\317>s\252v?\312\346\017>\301[\367>S\265\177?\026/\225;6\201\224<\t\320\221=_n\207>&7G?t\3010?\211\333Z?;\007\376>\035\374\177?M\316x90\277x:\304\202x;\206\221w<\335\323s=\037Pe>\003\3661?\232\377X?\034=\004?\"\270\177?U\223\217;I\362\216<\274s\214=\342\321\202>\357\311B?\007M:?\007\344J?\202](?\225\212f?4j\267>fkk?^h\227>sDU?\346e\016?\311\302|?5\256L=\323sB>\343\206\035?\246`r?z\\N>=\306$?\226\336j?U\027\233>g9X?\362a\006?\r]\177?\244\213\"<\320\356 =\032\234\032>\016D\003?V\325\177?]\212*;\301\030*<\256T(=\272i!>0\370\007?\363\001\177?\315\020}<$(y=2\000j>\033\2074?W\343T?\025h\017?\215J|?s\354i=o\220\\>K\016-?\343G`?\nP\336>*\221{?\363e\213=\367\350\201>Q\345A?\376&<?\315vG?\21530?\203\262[?\322<\371>E\322\177?B\3136;\275H6<\217A4=\313R,>\364R\017?\262T|?\331ug={aZ>\360\316+?P\003b?\266\313\323>\374]x?)\370\354=\332\214\321>j\222w?\325h\002>X\232\343>\233\331|?A\036G=@p=>\204d\032?\267\035u?9\275&>\274\226\013?\314\346}?\0353\005=;\336\000>\370L\341>\215Q|?`9h=\337\016[>B2,?\275za?\016\016\327>\200sy?\2523\314=^\327\267>\036\251k?\210\311\225>\331\356S?\002\355\021?\251\372z?(\204\235=\274f\221>\3567P?\375s\033?Q9t?\"\3003>\2222\024?=\240y?C\344\306=\206\223\263>j/i?\224@\246>X\211`?\245\305\334>\376&{?D0\230=\031\341\214>9;L?\"3%?\270`j?\033^\236>\352\303Z?K\215\376>\347\375\177?\2502\0069B.\006:\255\034\006;k\326\005<\211\276\004=8q\000>\273\251\340>\376)|?\257\322q=\311\213c>|\3730?\351\202Z?\207\375\377>\000\000\200?\026k\3031\026k\3032\026k\3033\024k\3034\020k\3035\375j\3036\263j\3037\210i\3038\337d\3039;R\303:\267\007\303;\216\336\301<\003H\275=\226\311\253>?Ld?\301\242\305>\235\261r?I\325I>!\r\"?\n\342m?\337\255\206>C\201F?9T2?\370kX?_\326\005?\263w\177?h\004\010<V\343\006=)r\002>@\250\343>\260\334|?\325]F=\201\302<>\361\366\031?[wu?\360\232!>\340\031\010?~\371~?\234\272\202<\214\244\200=\332\037q>\233X8?vdN?\202\372\037?}\005p?&\263o>&\2277?\321\266O?\242\266\034?)\036s?6\276C>aS\036?h\241q?\304\001Y>\304\004+?\230\025c?W2\315>\005\353u?`\365\032>W\202\003?\276\316\177?\237\340D;6ID<6\357A=\215\3008>6k\027?>nw?4\205\004>\227\275\346>\366\201}?\350\364\035=\203\335\027>\277W\001?\312\370\177? \302\3469\037\250\346:6@\346;\007\242\344<\177@\336=\002\"\306>d\353r?%\230F>8\024 ?\302\353o?Q\033q>5V8?\260hN?(\360\037?\324\017p?T\"o>\rJ7?e<P?\314h\033?\351Bt?\27543>\n\330\023?\341\330y?z(\300=\342 \256>\r\321e?\013\013\274>\335\365m?\253%\206>\342\377E?Bp3?R\250V?\351\251\n?$9~?\311\331\341<\305\237\333=m\022\304>\242\370q?\374(T>\0024(?\323\276f?\r\033\266>\240\253j?ak\234>\267CY?e\177\003?\021\317\177?\260\226C;A\001C<\025\257@=\244\2367>\230\261\026?\373\363w?\206h\371=\366\010\333>\227\251z?\200=\247=V\225\231>\324\006W?n\251\t?\231\212~?d\243\271<xn\265=\313[\245>\"\350_?$\217\340>y#|?sgs=\232\360d>=\3011?\323QY?\004X\003?G\323\177?p\3062;\227I2<\356X0=G\301(>\267\361\014?\312a}?\307\326%=\336\037\037>\270e\006?L\\\177?pK#<\313\252!=GI\033>\323\274\003?\037\310\177?\236R_;\315\217^<\326\211[=\204\305O>C\235%?\250\344i?\020\225\241>K-]?z\260\360>\226\025\177?\301\223i<H?f=\353MY>\2370+?\205\332b?\274\237\316>\002zv?\305\264\022>2`\373>\236\352\177?a\003\253:B\312\252;_\346\251<P`\246=.\334\230>(rV?i<\013?\003\007~?i\214\372<\264\342\362=\210\024\326>\273\"y?\325\304\325=\260t\277>\014\272o? \322s>\373\3039?\221\334K?\024\024&?#Xi?\2534\245>f\314_?F5\341>\334K|?$\233i=gH\\>F\345,?\213\201`?\264\364\334>\3513{?z\242\226= \216\213>\233\010K?\325\007(?5\366f?\006\267\264>(\334i?L\315\241>\272V]?\375\276\357>\317\367~?\030\220\203<1s\201=\020\211r>5\0279?\241\022M?\'/#?K\250l?\220\014\217>\027*N?M\211 ?\214uo?\251\215w>\376\264;?KLH?\374S.?\330v^?\024$\351>w\365}?\266\227\001=$\374\372=\3669\334>@\000{?J\330\234=@\325\220>\347\271O?\363\256\034?\r%s?\013[C>\026\026\036?C\333q?+\313U>=()?X\210e?\r\331\275>\345\347n?V>\177>\006\237??a\301@?\367z>?\326\000C?@\3329?U\264K?]s&?2\346h?C!\250>\332\326a?\324\333\324>\324\272x?\035\n\342=a\027\311>\n9t?(\3043>/5\024?\227\236y?i\026\307=\356\273\263>\203Gi?\024\242\245>\323\031`?\367d\337>\340\330{?\"\274\202=]\307t>4D:?\031\364J?\3437(?\364\271f?U:\266>\254\275j?\n\363\233>\337\345X?\241\204\004?Y\256\177?\342\031\243;\016J\242<\377\022\237=\354\267\222>\213YQ?\334\230\030?\356\213v?C\253\021>\314\344\371>\267\332\177?\207\017\025;\274\270\024<$_\023=\275\021\016>\243\267\364>\264\200\177?C\032\376;\322!\374<=_\364=\2076\327>l\200y?7\253\312=\342\234\266>S\366j?\264x\232>\367\273W?\322\272\007?\001\021\177?\031 n<\033\252j=d8]>\312m-?\340\300_?Cz\341>b\\|?\365\227e=b\271X>\013\333*?\224Mc?A\327\313>l_u?>\372\">\323\t\t?;\271~?\347\221\242<\377W\237=2\362\222>=\213Q?^\032\030?/\354v?\255\026\014>\362\330\361>\2647\177?\315\256G<\310?E=\024\300;>\211S\031?P\372u?\340\023\032>\345\344\002?\177\336\177?=\362\005;\'\254\005<\366\224\004=WJ\000>wo\340>\255\033|?LKu=\271\232f> \2542?>\341W?\205T\007?\023)\177?Z8V<QkS=\260\201H>\367>!?\324\272n?M\327\200>\230\326@?\000P>?\234TC?h*9?Z\360L?\244\201#?.Ml?Qv\221>cEP?=R\033?3Vt?K\0342>t!\023?\022Hz?[\347\262=\212F\243>-j^?\331n\351>\273\002~?\357\247\374<\026\335\364=P\226\327>\315\236y?\353\017\307=\263\266\263>eDi?\225\266\245>L(`?\006\016\337>\235\302{?0m\205=\270wy>1\261<?\332qF?)v2?\2066X?\340i\006?w[\177?t\037$<\223z\"=\235\010\034>\375A\004?|\267\177?E\336\220;P:\220<C\260\215=\316\342\203>\264\323C?\002\0368?o\313N?\234\375\036?Q\376p?\311\007b>Y#0?\347\312[?\371\260\370>\225\312\177?\216~U;\202\314T<\365\010R=\312CG>,} ?\337\201o?\356\341v>/\\;?\205\361H?\006\335,?\034\215`?\351\256\334>\272 {?&\361\230=>\205\215>p\316L?\034\323#?a\362k?\353\333\223>\211QR?\251\036\026?\335Zx?\025V\355=\005\325\321>\207\254w?i\342\000>9S\341>\rS|?&\334g=5\274Z>\360\002,?\366\273a?.\200\325>\317\361x?-\215\333=\322\003\304>\312\361q?o\212T>\013m(?\371vf?\322\347\267>d\262k?\"\213\225>\003\273S?\316t\022?w\255z?\251\306\246=\3421\231>\032\267V?\337\201\n?cF~?\247Q\333<\201r\325=\2113\277>!\231o?\233\235u>\330\263:?\017(J?C\023*?\262Vd?>a\305>\256\223r?D\202K>N\020#?\'\312l?|&\216>A^M?\251x\"?\351nm?\357\302\211>\245cI?\023\330+?\314\366a?Z\030\324>]xx?\023\336\351=S)\317>\313\256v?X\246\017>\017\377\366>\357\256\177?\225\356\241;\271!\241<^\366\235=Z\307\221>E\213P?\245\242\032?=\352t?&\256)>M\220\r?\033 }?P\3505=+\324->\017R\020?\220\326{?\310\003\203=YDu>`\205:?,}J?\225M)?;Xe?\030\n\277> \204o?\207\302v>\353K;?\254\017I?<\230,?D\355`?\212i\332>*{z?$\314\254=\3067\236>\247\246Z?/3\377>\\\377\177?\016\336#8k\334#9\335\325#:\246\273#;\356R#<#\262!=\nP\033>\211\301\003?\222\307\177?x\206a;\312\277`<\212\252]=\213\253Q>(\275&?1\215h?\322g\252>\227ac?\001[\313>\216,u?\347\343%>\002\004\013?\237\032~?a\344\360<\371\316\351=\254\035\317>X\252v?S\350\017>\367]\367>y\265\177?\340\342\224;\2625\224<A\207\221=\361/\207>I\374F?>D1?8\023Z?\3559\001?\374\371\177?9v\3009#d\300:\330\033\300;\204\373\276<\262\207\272=\203\212\251>\332\314b?)\364\316>w\232v?\315\323\020>\037\260\370>\211\312\177?,\260U;\315\375T<\3708R=\340nG>|\227 ?\036go?\252Vx>\250\034<?7\212G?+\0100?\277\363[?s\306\367>Z\274\177?\274\'\207;\006\231\206<\342b\204=<\250w>\267\302;?\2562H?\321\215.?\351\"^?\302\022\353>\023J~?+\200\331<\327\271\323=[\326\275>\200\346n?\244Q\177>\264\250??!\256@?\345\241>?\272\264B?Ay:?T\223J?\372\031)?\256\232e?\255d\275>\213\253n?\016A\201>{?A?\317z=?\372\360D?a\2745?\325\341R?2\252\024?\334Sy?\314\363\317=F\326\272>{Pm?\360\222\212>!#J?\261\036*?\250Gd?\203\277\305>\267\276r?q\031I>3\233!?{Zn?\364p\203>\034eC?\255\0079?S.M?g\354\"?i\361l?^\033\215>\224oL??\266$?\363\360j?\242\234\232>q\330W?\260l\007?\201#\177?\031\301[<\211\316X=\266TM>\204($?Q\222k?\342b\226>\275mT?4\237\020?\332\256{?]\320\207=^\235}>C\315>?\274_B?\375);?yNI?\233\010,?)\264a?\320\257\325>\227\001y?\337\257\331=k\214\302>\267?q?\013k^>\226\033.?L\310^?ZB\347>\344\233}?\004\231\027=\246\374\021>5Y\372>\017\340\177?\304d\377:_\345\376;\307\351\374<\336\032\365=P\305\327>\234\255y?\247M\305=\224K\262>\370ih?\327M\253>\231\372c?\301\241\307>\242\226s?$\365<>\346\026\032?]]u?p\030#>h\036\t?d\263~?\301u\245<9\036\242=\361H\225>\345\203S?\330\004\023? Yz?\331\335\260=\240\227\241>//]?{\245\360>D\024\177?\220\342j<\204\204g=}nZ>f\326+?\031\371a?H\n\324>\210sx?\206o\352=\204\231\317>h\331v?\261-\r>\264m\363>\365a\177?.\251\035<\312$\034=\3740\026>\240)\000?\345\377\177?\245\223\3306I\223\3307\333\221\3308!\214\3309;u\330:\270\031\330;\342\254\326<\266\014\321=\376\265\273>\231\310m?\202\\\207>R&G?\344\3460?i\242Z?9K\377>\200\377\177?\'Q\3777*O\37785G\3779c\'\377:;\250\376;\227\255\374<e\342\364=Z\232\327>\024\240y?\'\351\306=x\227\263>\3041i?\0321\246>}~`?\036\007\335>\3628{?]\007\226=\311\t\213>\361\217J?\336!)?\211\220e?\020\245\275>\374\314n?\232Y\200>{Y@?\215L??\356dA?].=?}\203E?m\1774?\362\357T?\242F\017?\226Z|?\231\007f=~\034Y>*\024+?\341\000c?\216\262\315>\250\035v?]\n\030>Iw\001?g\367\177?!\205\t:\251r\t;\335(\t<\352\002\010=\271~\003>\3717\345>\3022}?\010Y1=E\253)>`\216\r?\354 }?=\2655=\240\245->O3\020?/\346{?\360\037\201=\223\367q>\216\3128?\006\233M?\202\345!?\033\014n?\302\214\205>\365mE?*\2564?!\243T?)\022\020?\346\366{?14~=wmn>\211\3516?\225\342P?j\306\031?\226\236u?\206Z\037>\"\216\006?\036T\177?\211n+<U\243)=\304\234\">\022\312\010?\375\312~?\313\306\231<\321\343\226=\331\305\213>?;K?\355\220\'?\027\212g?\270\374\260>\372\234g?v\202\260>HQg?\365k\262>\234}h?\236\315\252>\201\245c?\230\264\311>\032|t?\304\364/>\241\270\021?\326\027{?\306\002\232=\333m\216>\250\235M?\037\337!?\336\022n??^\205>nAE?\250\0165?\267\003T?@\266\021?\'\031{??\332\231=lK\216>\026\177M?6)\"?\034\304m?Q{\207>WCG?O\2460?\331\004[?l\034\375>\247\367\177?\306\205\005:]t\005;\313.\005<\244\031\004=\372\255\377=y\302\337>\217\360{?\r\275\177=j\305o>\335\2407?\360\245O?\251\340\034?W\370r?\025\336E>2\242\037?E]p?\037\344j>\252\0025?\226\027T?\014\202\021?\3415{?\310e\226=ZZ\213>w\331J?;v(?\\kf?+2\270>.\334k?\240q\224>\255\317R?3\331\024?_5y?)\220\323=J\265\275>e\325n?^\037\200>Z\037@?=\301??I}@?x\004??3\363A?c\n<?\204\254G?j\273/?\227f\\?\3240\365>)\213\177?\202C\351;j\232\347<*\016\341=\355R\310>-\344s?F\2238>DN\027?`\203w?\234I\003>\003\351\344>$\"}?\365h5=\034`->Z\005\020?S\375{?\362\245|=\200\020m>\234.6?6!R?\324\232\026?\030\004x?2\205\367=\350\232\331>\325=z?A \264=\225H\244>\027$_?\221!\345>\020.}?\366~2=\251\267*>\215A\016?\017\323|?\332\266H=\367\340>>JL\033?G[t?s\3221>G\361\022?\272dz?\331z\257=\263q\240>\024U\\?\353\225\365>\212\223\177?Q\217\330;\355 \327<\252z\321=z\r\274>(\367m?\313\034\206>n\367E?\277\2023?\225\212V?c\372\n?\355\035~?sC\357<{F\350=\200\356\315>)5v?3\257\026>\301\202\000?\365\376\177?\327\220\2058\252\216\2059\364\205\205:\"c\205;\"\330\204<\245\260\202=Q\263t>\2759:?%\007K?@\013(?\356\361f?\215\322\264>W\354i?5b\241>\276\007]?\377\212\361>\376.\177?\366VP<\300\260M=w\\C>\367\026\036?p\332q?\356\326U>\027/)?\210\177e?\372\020\276>\300\004o?\031\256}>\264\325>?)OB?YL;?\341\016I?\014\232,?\275\352`?\332x\332>\250\177z?\217B\254=^\305\235>\017OZ?E\221\000?\266\376\177?\206\334\24485\331\2449\360\313\244:\345\226\244;B\303\243<0}\240=\231\351\223>\027]R?\355\000\026?]ox?\025\355\352=L\372\317>\334\375v?\322\017\013>\215Z\360>2\013\177?M\344s<\340Bp=\t+b>\01070?E\255[?\340Z\371>\330\323\177?\207\2010;\325\0070<\252#.=b\274&>+\226\013?\001\347}?4&\005=(\322\000>\346:\341>6M|?\023Gi=\353\375[>\320\272,?\000\275`?\242\215\333>\242\317z?\030\256\242=\377\301\225>\230\350S?i\375\021?u\361z?\025\237\236=\375U\222>\310\005Q?\\m\031?\325\345u?\321A\033>\240\267\003?\272\310\177?\270\347\\;\031)\\<\2773Y=2\257M>\257^$?\357Tk?\036\377\227>I\277U?\253\035\r?\345O}?r8*=\202%#>P\'\t?\331\260~?\345\267\246<MS\243=\347L\226>\230[T?\r\317\020?\333\225{?\356\324\212=\246k\201>\241iA?\302$=?\331\225E?\204W4?Q1U?\332\230\016?\264\253|?\274MR=\202\201G>\334\242 ?\206[o?\023\370x>\256o<?\327\355F?Ed1?\332\341Y?\276\304\001?}\363\177?\324!H:\267\372G;\177^G<o\361D=Ey;>\254&\031?\262\035v?\306\t\030>\337v\001?l\367\177?\3047\t:`%\t;\347\333\010<>\267\007=\0228\003>\354\316\344>\234\034}?\007\3036=i\233.>\201\325\020?w\222{?\260=\213=/\306\201>\t\303A?\203m<?\356\361F?4[1?\327\357Y?p\235\001?\221\365\177?\033\346&:\350\312&;<^&<\302\255$=\321\016\036>>\251\005?\317\177\177?1\342\377;\250\342\375<Z\004\366=\316v\330>\351\344y?\332\271\276=\315\366\254>\t\021e?o\314\300>\224ep?]oj>k\3034?\035\200T?\263n\020?\347\307{?\201\311\204=\347Zx>\327\036<?\036\206G?T\0210?\375\345[?|\025\370>V\301\177?\315jz;\330uy<\177\251u=\241\355f>\252\3312?\001\231W?\226\032\010?O\371~?\213\321\202<\277\272\200=\255Fq>$m8?H@N?\021S ?\203\254o?\035\217t>\325&:?\206)K?\224\272\'?|Vg?WJ\262>8ih?\275R\253>\327\375c?\201\215\307>\265\215s?\014v=>+h\032?\264\032u?R\351&>w\264\013?\372\333}?(\334\007=\211Z\003>/\002\345>v\'}?8\0344=\2750,>[<\017?|_|?\370\326d=\376\rX>\027x*?\201\321c?X\242\310>\237\006t?\366\2376>\001\016\026?\\fx?\016\374\353=\367\312\320>|Kw?\315\213\006>F\274\351>J\020~?\371\372\365<\'\230\356=>\314\322>\303\004x?\025q\367=\250\213\331>A9z?&\254\264=\325\273\244>wv_?\3456\343>d\303|?t\210L=\330QB>\317q\035?\022tr?\262FM>\037 $?\315\233k?\035#\226>\0179T?\005*\021?\222e{?\273\247\220=\027p\206>\245FF?)\3252?)\240W?\377\006\010??\376~?\202^\200<\032\267|=\212\037m>\26066?\211\023R?\353\275\026?;\353w?\352n\372=P\317\333>E\342z?\302q\240=\366\337\223>\363TR?\340\025\026?\356`x?w\237\354=\252H\321>\232yw?\222\333\003>\352\301\345>UO}?\266[*=\327E#>V=\t?\205\252~?\316\331\251<CT\246=\027\322\230>\006jV?`R\013?E\377}?\006\\\376<0v\366=E\315\330>\201\377y?$\217\273=\326a\252>\227]c?\333s\313>\3046u?ON%>\315\236\n?\326<~?m\007\340<\005\347\331=\326\267\302>\210Tq?FD]>\211t-?K\267_?\230\263\341>\001j|?\320Hb=\205\310U>\263&)?T\212e?y\314\275>d\341n?x\230\177>1\314??sg@?r0??{\234A?\250\274<?\031\\F?\005\2462?\351\352W?\3679\007?\035/\177?28P<\304\222M=~AC>I\006\036?\033\352q?\334\367T>\377\254(?\356%f?\005\356\271>*\322l?\003\360\215>\301-M?\306\355\"?\352\357l?\215%\215>\267xL?i\240$?\370\tk?S\365\231>}SW?\226\330\010?\376\306~?\335\301\233<\272\313\230=ie\215>\364\261L?n\027$?\233\245k?(\341\225>q\002T?\226\271\021?N\027{?\036\023\232=\275{\216>\371\251M?>\301!?q2n?\350\204\204>{pD?4\3206?\003\016Q?\205X\031?]\366u?\032N\032>\227\r\003?\267\332\177?H\016\025;~\267\024<\354]\023=\234\020\016>\000\266\364>\217\200\177?\324c\376;?j\374<4\243\364=Dj\327>\336\220y?\220\267\310=\245\013\265>\322\rj?j\204\240>\013c\\?PE\365>\342\214\177?U\324\345;\2527\344<\020\334\335=Z\323\305>\275\307r?\375\227H>\207L!?\271\254n?\3448\201>f7A?I\213=?N\321D?\216\0006?\020oR?\245\322\025?\016\217x?X2\347=\333\030\315>\345\340u?\222\212\033>L\352\003?\257\302\177?\300\010u;7\036t<\020{p=\241\\b>\265R0?\205\203[?\336I\372>a\337\177?\352j\002;z(\002<\305\037\001=i\033\372=8\220\333>_\320z?\200\227\242=\375\256\225>\320\330S?\307&\022?\031\332z?\327l\241=\225\263\224>\007\007S?\304I\024?\220\221y?X\242\310=\226\372\264>\324\003j?\244\306\240>a\224\\?%(\364>\275s\177?\001\366\013<\355\303\n=p\020\006>D\006\351> \360}?\330\347\002=\246q\375=l\024\336>k\201{?:L\215=\230\214\203>\377\177C?\002\3178?\037\223M?\254\370!?\311\367m?z\030\206>R\363E?\271\2133? |V?z!\013?l\020~?\031\352\365<J\210\356=\024\300\322>w\000x?\017\362\367=o\355\331>|Vz?\237.\261=o\332\241>d`]?\231\206\357>\232\360~?\\#\207<\252\350\204=#\221x>\301:<?\240QG?~\2060?)5[?P\t\374>J\360\177?\376M{:Q\020{;\030\032z<\274Hv=\277yg>\203&3?\211\036W?\356h\t?\321\235~?s\"\260<\367X\254=\002\330\235>[]Z?\347h\000?T\377\177?\177\361+8\261\357+9y\350+:\235\313+;SX+<\227\215)=\323\210\">v\274\010?\270\316~?3\356\227<\334\034\225=\211A\212>Y\330I?\231\313*?@bc?\350V\313>\336*u?\231\374%>\263\024\013?\334\024~?\000\273\363<\233z\354=R,\321>>ow?9v\004>a\247\346>\222}}?_\010\037=\251\333\030>C\n\002?Z\357\177?0&\205:\217\003\205;Vy\204<\353T\202=?\023t>\023\3469?\363\236K?\353\245&?K\251h?\032\260\251>8\346b?oW\316>\n^v?\313R\024>\253\255\375>\234\372\177?dv\2549\336g\254:\320-\254;5F\253<~\261\247=\\\366\231>QTW?T\326\010?\235\307~?\315r\233<\253\177\230=\260$\215>\360wL?D\242$?\330\007k?\212\003\232>\322^W?\250\271\010?|\317~?!\215\227<c\277\224=\250\361\211>\306\216I?\016u+?\337}b?\032\333\320>nQw?\0303\006>l9\351>E\371}?\031\250\000=!;\371=\236\346\332>\247\237z?\"n\250=\n\224\232>\243\321W?_\177\007?&\037\177?\313\024`<:\004]=5\027Q>{e&?\335\366h?\366\263\247>\242\213a?\027\247\326>fRy?\024 \320=\217\371\272>\207cm?\302\020\212>q\253I?\0323+?,\327b?l\264\316>\373\201v?\252>\022>\217\267\372>\027\344\177?\357.\337:\246\315\336;\323I\335<\217O\327=\270\254\300>\347Up?\216Kk>\233:5?\272\272S?\214u\022?\t\255z?\300\323\246=\327<\231>\346\277V?\006j\n?/N~? y\327<:\316\321=\356O\274>^\032n?\247*\205>\366\017E?\222y5?\277QS?\220\207\023?c\nz?!C\272=mR\251>\354\246b?5\336\317>O\363v?\271\254\013>\357>\361>Q&\177?P\366X<\316\026V=,\346J>)\262\"?\3050m?yk\213>\020\351J?\273Q(?n\231f?\005\013\267>H5k?S\323\230>\005kV?\261O\013?8\000~?k\344\375<\001\006\366=\020x\330>M\345y?\006\256\276=-\355\254>\312\ne?\342\363\300>\typ?\364]i>\352.4?\241sU?\n\350\r?s\372|?\375\032?=i06>1\306\025?\212\227x?\2362\346=\276R\314>\202\221u?\301\032 >d\022\007?\3657\177?\345nG<o\001E=\274\207;>\327/\031?}\026v?3t\030>\247\301\001?\251\363\177?\344hE:\325BE;\325\252D<}NB=\314\0269>O\242\027?\274Ew?\210\341\006>\237:\352>\006&~?GF\353<v\204\344=\360\004\313>\013\tu?\271\353\'>`b\014?\205\232}?>\357\027=|L\022>N\313\372>\346\344\177?d\267\330:\251[\330;\363\355\326<^J\321=\016\347\273>\275\342m?\023\251\206>\267|F?=^2?6\\X?\350\001\006?\244o\177?\031\n\020<\354\305\016=\351\313\t>\341\201\356>\002\316~?9H\230<\212s\225=\224\213\212>`\034J?U.*?\0173d?\224@\306>3\371r?\304\321E>\243\232\037?\274dp?8{j>\331\3114?\204uT?\257\212\020?|\271{?\216\207\206=\220b{>\365\253=?g\222D?\226\2076?\023\212Q?W\035\030?\362\351v?\3677\014>L\t\362>\004=\177?wgB<\363\030@=\234\0267>GZ\026?p1x?\2543\362=\365\216\325>\266\366x?\346\370\332=K\217\303>\372\272q?r\226W>\3572*?\376,d?\215f\306>O\ns?\314\333D>y\003\037?\243\370p?\000Xb> P0?k\207[?\2233\372>`\336\177?ll\006;\326%\006<\250\014\005=E\272\000>$\027\341>\231D|?m^k=\005\330]>Y\310-?\317?_?\244|\344>\007\013}?\246\016;=\277\2032>\341d\023?|\037z?L\277\267=\352B\247>u=a?\363\202\330>\251\350y?\227G\276=\314\231\254>\221\324d?\360I\302>\273\037q?\220/`>\277\032/?\255T]?\363\312\357>S\371~?\205\317\202<\312\270\200=@Cq>Tk8?yCN?AK ?f\264o?\001!t>E\3559?\355\221K?\260\304&?\022\204h?i\243\252>b\211c?\243c\312>\342\305t?\'\301+>@\362\016?o\202|?{X\\=\367}P>\273\n&?@ci?{\353\244>h\230_?Cl\342>2\225|?.\310W=\020jL>\303\233#?(0l?\253:\222>]\356P?\237\250\031?\207\266u?`\372\035>\035\233\005?L\202\177?X\355\372;o\001\371<\321o\361=Z\371\324>\304\304x?\"\336\340=r-\310>\332\323s?\255\1779>;\345\027?\010\024w?\354\305\t> y\356>\317\314~?!\340\230<\311\005\226=p\010\213>\266\216J?\274$)?\332\214e?s\274\275>\032\331n?\257\005\200>\257\005@?\242\364??\273\026@?\202\322??\333Z@?\310I??hjA?+#=?\342\230E?\353P4?\035<U?\034|\016?\303\270|?c\037O=\'\246D>q\342\036?\225\030q?\243\224`>\206S/?\346\000]?\311\262\361>w3\177?\344\345K<J\\I=*v?>\307\251\033?\375\nt?\237`6>=\345\025?[\202x?\022\261\350=\345@\316>IUv?G\324\024>}e\376>n\375\177?\243\220$9\006\212$:\226o$;\367\005$<\230a\"=\236\361\033>\3771\004?\231\271\177?B\247\214;\263\014\214<\304\247\211=%g\200>\373f@?d1??\234\232A?}\300<?\323TF?\002\2662?\230\321W?}\177\007?\037\037\177?\252\033`<\350\n]=+\035Q>\002i&?\241\362h?\271\317\247>\306\236a?\\2\326>|,y?T\235\324=\266\212\276>;Co?\030Jz>\345\034=?\336\244E?\33064?\262fU?\221\n\016?_\353|?\363\310B=\240\2059>\006\351\027?3\021w?\030\360\t>\303\266\356>1\325~?\037\271\224<\352\005\222=\222\234\207>\243bG?\217`0?\227n[?\205\301\372>\200\344\177?\337\350\333:k\212\333;\336\021\332<\313C\324=\300C\276>\335\036o?\213C|>H\036>?F\265C?t^8?)ZN?\275\023 ?=\354o?\231\024q>\246R8?\362nN?\321\340\037?\037\037p?\014Ln>\255\3276?6\001Q?\360x\031?\240\334u?z\311\033>\024\026\004?6\275\177?aq\205;C\346\204<Q\276\202=,\313t>1F:?{\360J?\\@(?L\257f?\275~\266>\006\345j?O\354\232>u\027X?w\277\006?\335I\177?x\2415<\001\2363=\234\275+>\345\357\016?\211\203|?\010\024\\=\341@P>\202\346%?<\216i?\036\320\243>\215\315^?=#\347>\335\225}?\224\023\031=\r[\023>BM\374>S\362\177?V\310Z:\230\231Z;\356\336Y<?\371V=\345\260K>d,#?T\253l?\361\367\216>\343\027N?\277\265 ?=Ho?g\004z>A\371<?\334\350E?\227\2423?CWV?\005\205\013?2\355}?o\240\003=,\313\376=2\030\337>;\305{?6\034\205=\326\352x>\341h<?\257\372F?\314G1?\300\rZ?RI\001?a\371\177?j\314\3239\203\266\323:\370^\323;\354\001\322<\263\237\314=\326-\270>\300\331k?\001\202\224>o\335R?\226\265\024?\177Ly?\033\323\320=$\210\273>\033\260m?\177\004\210>7\304G?L\206/?\247\265\\?yg\363>Xa\177?=E\036<\327\275\034=X\276\026>q\215\000?\307\376\177?\260J\2348\265G\2349\310;\234:\033\014\234;\336M\233<#\\\230=q\006\215>\312\\L?\032\343$?\\\275j?\033\365\233>}\347X?$\200\004?\373\256\177?\317\326\241;/\n\241<\301\337\235=:\264\221>\314zP?\027\314\032?\242\307t?\226\247+>B\341\016?Z\212|?vkZ=\303\305N>\013\005%?+\226j?d\372\234>\251\262Y?\'I\002?\032\353\177?\235\"\247:\016\354\246;`\022\246<\201\264\242=c\307\225>\021\355S?\255\361\021?\013\370z?\232\324\235=\313\252\221>\252rP?\210\340\032?}\266t?\304\241,>S\207\017?s;|?\256\226m=\251\316_><\344.?\273\244]?0\367\355>\302\272~?.\320\241<\362\235\236=\007U\222>\366\004Q?ro\031?-\344u?:Z\033>\242\310\003?\274\306\177?2\335d;\227\020d<\341\343`=\350\212T>Qm(?\240vf?\014\352\267>\245\263k?\261\202\225>\375\263S?.\207\022?\331\242z?>\014\250=;B\232>\266\220W?I1\010?\210\363~?d\257\205<\346\200\203=\201\036v>\330\366:?\341\254I?\315/+?\241\333b?\342\230\316>]wv?\354\333\022>\r\230\373>\226\354\177?\270B\233:\243\023\233;\302W\232<To\227=\303<\214>\003\247K?\336\222&?G\300h?\257\031\251>r\200b?@\313\320>\227Kw?8\212\006>\362\271\351>\342\017~?\030.\366<3\310\356=\027\361\322>\301\021x?/\353\365=\257c\330>\000\337y?\372m\277=Q\211\255>\301oe?\tu\276>#8o?U\344z>\244k=?\031\016E?\226}5?\tKS?\t\231\023?\265\377y?\364\210\273=\310\\\252>5Zc?\334\210\313>b?u?\016\320$>?I\n?\310X~?\371=\322<\253\330\314=j[\270>K\363k?\300\325\223>SLR?\020,\026?\227Qx?\024m\356=4\253\322>\024\371w?\234\317\370=?\225\332>\370\207z?\367C\253={\361\234>\305\253Y?x\\\002?\263\351\177?XY\262:8\033\262;d#\261<\324N\255=`\244\236>p\371Z?S]\375>\016\371\177?\231<\3369{$\336:\032\304\335;\341C\334<\273W\326=\342\350\277>o\364o?\347\241p>\351\0258?\241\331N?\245\332\036?\033 q?G*`>\306\027/?\014Y]?t\261\357>\026\366~?\267j\204<\305F\202=\216\372s>&\3319?S\266K?\245n&?\334\353h?\035\374\247>T\275a?\322w\325>\010\357x?\033\341\333=\276E\304>\236\020r?#\323R>^k\'?q\270g?\201\320\257>H\342f?67\265>N\'j?k\333\237>\213\344[?\310\035\370>\331\301\177?\205_x;\214nw<\362\261s==2e>\202\3451?Z\031Y?u\365\003?P\301\177?\360\203z;\312\216y<\256\301u=\351\002g>Y\3452?o\206W?gM\010?I\354~??G\211<U\372\206=\350)|>F\021>?\204\316C?\002)8?\"\270N?\033-\037?.\320p?\341\222d>d\2151?G\242Y?\017w\002?\262\347\177?\010a\302:=\027\302;\356\360\300<\234e\274=\357\020\253>>\322c?\275\235\310>\241\004t?\332\2746>\226 \026?\211Yx?\025~\355=\277\363\321>\230\267w?\321<\000>2[\340>\254\026|?\331\201v=\374\253g>\007B3?\201\362V?\257\340\t?\272y~?\215\371\301<\273a\275=\215\336\253>\010Zd?PL\305>\026\212r?\235\013L>\374b#?#ol?P\220\220>\365}O?\024D\035?\006\236r?\023\356J>\356\266\"?\230+m?\312\216\213>5\tK?k\006(?\372\367f?\244\253\264>v\325i?\227\371\241>Jw]?\343\000\357>\036\337~?\361\315\217<\263G\215=\261\210\203>4|C?\002\3278?\352\204M?\030\033\"?+\323m?\370\023\207>\337\341F?\312~1?\337\270Y?\2767\002?T\354\177?GW\235:\355&\235;\374e\234<\230i\231=\254\353\215>\343)M?\032\367\"?\273\345l?\342j\215>\333\266L?\256\013$?\332\262k?\t\210\225>p\270S?\213{\022?\223\251z?\355=\247=\261\225\231>\035\007W?\250\250\t?\324\212~?\327\205\271<AR\265=\224D\245>\257\327_?\264\361\340>\211;|?m\221m=\003\312_>\237\341.?\220\250]?\304\340\355>\230\267~?\200a\243<V\037\240=p\232\223>&\032R?\364\254\026?E\367w?\335\005\371=P\276\332>\362\223z?\366\324\251=\232\277\233>\240\275X?V\364\004?\321\235\177?\251\023\304;M\347\302<2D\276=\010\227\254>\304\322d?IU\302>3%q?8\342_>?\357.?\227\224]?\237U\356>\356\307~?\361J\233<RY\230=\014\004\215>\243ZL?=\350$?q\267j?\232\034\234>U\006Y?c*\004?\230\272\177?<\253\212;\002\025\212<-\301\207=\006\203}>\367\277>?\322yB?\327\363:?i\262I?\020#+?\317\354b?\261.\316>5Nv?\371<\025>\356\371\376>\364\376\177?d#\20682!\2069i\030\206:J\365\205;\031i\205<\346<\203=\363\247u>:\271:?/\036J?$**?\2258d?\372\035\306>\222\351r?O\262F>;$ ?\260\333o?\n\374q>\351\3148?\330\226M?\245\357!?\\\001n?\245\326\205>\216\264E?\260\0244?\\\236U?\324u\r?I+}?\331,3=]V+>>\253\016?K\243|?\325YT=\207WI>\343\300!?\3212n?S\202\204>\376mD?\206\3256?\345\004Q?\234o\031?\013\344u?&\\\033>\370\311\003?\223\306\177?\034\177e;`\261d<.\200a=\005\026U>\233\276(?\206\017f?\001}\272>  m?\t\335\213>LPK?j_\'?(\307g?\025q\257>^\246f?\n\270\266>\342\005k?\252\020\232>FiW?\034\235\010?7\327~?E\270\223<[\016\221=3\310\206>4\232F?;\0352?G\302X?p\347\004?\315\237\177?\200\035\300;(\375\276<B\211\272=\312\213\251>\267\315b?\325\356\316>l\230v?\024\362\020>\212\333\370>\374\314\177?\365\345K;\217CK<\376\275H=g\347>>TP\033?\325Wt?\224\0042>\375\021\023?MQz?\032\315\261=q]\242>}\300]?\242T\355>t\243~?\254X\255<\244\255\251=\315\236\233>\353\243X?\225;\005?y\222\177?\265\257\332;\026:\331<zw\323=\264\241\275>>\313n?\251e\200>\201e@?]4??\276\224A?\205\314<?\372=F?1\3502?\351\201W?\310Y\010?\020\351~?\372\337\212<H\205\210=\027\327~>6k??;(A?/\252=?\322\225D?D\2006?\214\226Q?\213\375\027?\330\001w?\226\324\n>;\004\360>\207\000\177?\265y~<\336\205z=C3k>y-5?\217\320S?d<\022?\317\315z?5\346\242=0\361\225>\273\017T?\261\226\021?\217*{?o\302\227=\221\203\214>\367\346K?j\373%?qui?\232s\244>\342B_?Uj\344>\026\007}?\372\004<=\205c3>p\366\023?\370\305y?Ah\302=\373\363\257>}\370f?\\\250\264>\210\323i?]\006\242>\254\200]?\022\312\356>\313\327~?!o\223<\332\307\220=\254\213\206>\324`F?\236\2332?^\373W?\275\014\007?49\177?\2151F<\312\313C=\310o:> ~\030?o\240v?P{\020>%1\370>\t\303\177?\\\242s;\177\272r<\352!o=\345+a>Y\250/?\003\203\\?\230\214\364>\341|\177?\315\333\002<=\320\001=\tf\373=\341\211\334>}\026{?<,\232=\024\221\216>\343\274M?O\223!?\303bn?\3217\203>v-C?\261|9?\361\\L?\275\342$?\311\275j?J\362\233>I\345X?B\206\004?\036\256\177?f\217\243;f\276\242<\272\202\237=E\026\223>\365\251Q?\t\314\027?\317&w?]\256\010>\335\337\354>7\222~?J\337\265<\236\325\261={d\242>\243\305]?y6\355>\n\237~?\177\207\257<\252\304\253=\240\\\235>\202\376Y?1t\001?\214\367\177?tC\007:\2261\007;1\352\006<\311\315\005=\321n\001>3%\342>\263\204|?\216\313[=/\000P>\034\300%?\237\273i?r\244\242>Z\364]?k$\354>\254u~?\207\372\303<JJ\277=Ll\255>\014]e?\230\353\276>\242to?k\232w>\225\273;?\000@H?\301o.?\230N^?\204\021\352>\001\037~?n\273\356<f\306\347=q\213\315>C\016v?\225\355\030>\325\026\002?\213\356\177?b\242\213:M|\213;M\344\212<u\211\210=U\336~>\331n??\005!A?\334\270=?\207yD?\333\2746?!/Q?\223\004\031?m8v?\363~\026>\262`\000?n\377\177?\272\030\0228m\027\02297\022\022:a\375\021; \252\021<\227^\020=\356G\013>D\254\360>\025\025\177?\333\023j<\272\273f=\\\274Y>%p+?\212\204b?\014\262\320>IBw?\364\024\007>Z\206\352>\3212~?\024\370\344<\275\221\336=\232a\306>\025\010s?\324\373D>/\027\037?\202\345p?\003fc>~\3460?\004\243Z?\311G\377>{\377\177?\203\217\0048q\216\0049&\212\004:\377x\004;r4\004<Y#\003=\014\341\375=9h\336>\205\227{?\231\241\212=E?\201>\267=A?j~=?\r\352D?M\3135?\303\310R?\026\353\024?\262)y?\317\361\324=\243\315\276>ceo?\303nx>\021)<?\346rG?B<0?d\245[?\002\210\371>(\326\177?3E\';\350\327&<\365$%=k|\036>\367\364\005?\020r\177?r\241\r<\005h\014=\346\227\007>\004G\353>\223R~?QN\325<v\300\317=\\\255\272>Y:m?\027*\213>r\255J?\022\335(?\256\350e?\227t\273>\244\245m?8L\210>^\007H?k\357.?V\224]?\035W\356>\"\310~?\3240\233<3@\230=\252\356\214>kGL?\022\026%?t\202j?\255}\235>\366\027Z?\222,\001?|\372\177?Po\2609\035`\260:[#\260;\3720\257<\332q\253=\260\027\235>P\311Y?\237\t\002?e\357\177?\257\322\204::\260\204;\255&\204<\356\004\202=\234\207s>\355\2349?\370\"L?\337l%?e\035j?\'\035\240>\332\025\\?K\002\367>)\257\177?~z\241;\307\256\240<\357\207\235=\357i\221>\261:P?\017m\033?B?t?\315i3>\205\372\023?m\303y?\304\265\302=\3042\260>\261\037g?\337\253\263>\361=i?\014\341\245>9F`?\021Z\336>\315\223{?{\024\213=\223\242\201>\347\237A?\244\265<?iiF?\275\2102?5\031X?\244\272\006?\341J\177?\317\2364<\021\2412=\313\326*>LV\016?\312\311|?@\371J=[\352@>C\222\034?\267>s?\206\351A>\n1\035?j\257r?\335\364I>B \"?\252\315m?\3009\207>\213\005G?\263/1?\3222Z?\352\340\000?\352\374\177?\025\230E9\215\216E:phE;6\320D<\370rB=\32179>c\267\027?$6w?\370\311\007>\236\220\353>h^~?Mw\317<;6\312=\007?\266>a\300j?\373\340\233>\300\327X?\330\253\004?\270\250\177?^U\256;\356g\255<A\274\251=\376\252\233>z\255X?\032!\005?\303\226\177?\332#\322;\334\312\320<\212x\313=}A\267>ITk?{\003\230>\324\302U?+\024\r?\310S}?\311D)=\013F\">\335\216\010?\n\333~?h\323\221<\337:\217=\2056\205>X\033E?\377`5?\306zS?\242\034\023?\363Jz?I\217\262=\327\375\242>n5^?\301\245\352>\0228~?\030a\342<\233\037\334=\320v\304>z\'r?\016\215Q>&\253&?\371\242h?o\331\251>\021\002c?8\253\315>\306\032v?\3554\030>4\225\001?\373\365\177?\020Q :\3667 ;\260\323\037<\216D\036=\003\'\030>l\213\001?u\366\177?H\254\030:\205\225\030;\223:\030<}\320\026=\355B\021>iO\371>?\323\177?@\3442;=g2<\357u0=\311\333(>|\003\r?\226Z}?x\232\'=\311\276 >\007\203\007?J\036\177?\301\356`<7\330]=F\324Q>4\325&?\014ph?\'&\253>P\340c?\355E\310>\205\336s?7\3458>\244\202\027?\020]w?\233\205\005>*9\350>\253\312}?\037\035\014=!R\007>e\340\352>\315A~?\307\224\335<u\226\327=\263\344\300>\215qp?\"\307i>\034h4?)\026U?\034\341\016?l\212|?\033gZ=\337\301N>\272\002%?\331\230j?\207\350\234>\326\244Y?\344o\002?>\350\177?\217\375\275:\017\267\275;\337\235\274<\035F\270=\202\261\247>\361\211a?h\261\326>\273Uy?\016\273\317=\r\251\272>\0038m?\010:\213>\376\273J?\034\273(?\371\023f?\236`\272>\262\020m?<F\214>\223\257K?\236~&?\252\330h?\362y\250>\234\023b?\325g\323>W;x?\030\n\361=\227\253\324>\211\252x?\275\365\343=\006\226\312>\363\332t?\216\215*>z%\016?\205\337|?\036\255E=\337\"<>\020\222\031?\226\310u?\234\360\034>\024\343\004?x\240\177?\016\311\276;\260\254\275<mH\271=5\205\250>O\033b?\2468\323>\336*x?\037\371\362=\241%\326>S(y?_\033\325=\215\356\276>#vo?x\205w>\303\260;?0TH?&B.?\245\220^?\253\213\350>\344\331}?\203_\010=)\325\003>e\270\345>`M}?\033\326*=\n\266#>\266\211\t?\035\224~?\024\357\264<\013\360\260=\255\246\241>H:]?\323d\360>s\014\177?\241\245r<\253\ro=\002\032a>T\236/?\355\221\\?Q6\364>\014u\177?z\250\n<\022|\t=\262\336\004>/B\347>\334\233}?\020\233\027=\213\376\021>\353[\372>.\340\177?\'p\376:\266\361\375;\346\371\373<\3069\364=\000\032\327>Qwy?\253\277\313=zz\267>\237tk?p*\227>\311\021U?\276\354\016?\001\205|?o\270[=\035\357O>\371\265%?\222\307i?rU\242>\244\272]?\351v\355>o\250~?\310\341\252<CQ\247=\337\245\231>\016\024W?t\205\t?a\225~?\217N\264<\233V\260=\265\'\241>r\334\\?\202\206\362>pJ\177?\243\0175<g\0173=~;+>\\\231\016?x\253|?\'\\R=r\216G>\301\252 ?wSo?3hy><\251<?\361\200F?\356T2?\334jX?q\331\005?$w\177?D\223\010<\321o\007=_\365\002>\256k\344>a\007}?\323\362;=\010S3>\272\353\023?\245\314y?\006\235\301=BO\257>\017\221f?\256@\267>\323Sk?\221\006\230>V\305U?t\r\r?\206V}?\357\230(=]\250!>\020#\010?)\367~?\250\342\203<\032\303\201=\247\024s>\232`9?]\217L?Cj$?\305Gk?lW\230>\352\006V?k]\014?p\234}?\333v\027=\005\335\021>\372+\372>\010\336\177?N\315\007;D\205\007<Mf\006=Y\375\001>\n\372\342>\246\265|?\205\341O=\236TE>\310M\037?H\260p?~Tf>\202\2052?N\036X?\234\254\006?\321M\177?\322\2621<o\305/=w:(>E\227\014?\341\205}?\037\377\034=\240\372\026>\366\267\000?\357\375\177?p0\0049,,\004:\035\033\004;\361\326\003<Z\307\002=\3224\375=\244\346\335>Au{?\274\303\216=\005\320\204>\333\270D?\03056?<\026R?\377\266\026?&\360w?{\333\371=\344_\333>\224\302z?\336>\244=\312\022\227>i\376T?: \017?\325l|?\366\230a=\022,U>{\313(?\037\377e?\227\345\272>\301Xm?hZ\212>8\357I?\312\226*?\263\250c?\260\240\311>\247st?\311o0>P\t\022?\302\352z?\375l\237=\353\003\223>V\232Q?\341\363\027?\025\tw?\347h\n>+g\357>\212\354~?\266&\211<\342\332\206=M\363{>\215\365=?=\004D?\375\2667?r\177O?b@\035?g\241r?\256\275J>\265\231\"?>Km?\266\266\212>\356CJ?\243\322)?k\253d?\020M\303>\242\233q?\301SY>\3733+?\375\325b?\273\273\316>\313\204v?\372\024\022>\375{\372>\224\341\177?\241D\363:\014\321\362;l\004\361<!\355\351=\3614\317>9\263v?\233d\017>o\240\366>$\250\177?d{\257;\320\212\256<\310\322\252=4\223\234>\254bY?\372(\003?\016\330\177?\243\255\037;\nJ\037<\226\275\035=t\252\027>\3233\001?7\372\177?e\r\2719\254\374\270:\326\271\270;?\257\267<\337\220\263=b\322\243>.\317^?\224\031\347>\374\223}?\177\211\031=$\310\023>\216\350\374>q\366\177?z\347\030:\246\320\030;mu\030<?\n\027=mx\021>\010\234\371>)\327\177?\222@#;v\330\"<\034:!=y\341\032>vt\003?A\320\177?j\330>;$J><\\\024<=}q3>\203\377\023?N\300y?\273\024\303=\250\177\260>\212Og?5w\262>m\204h?\032\241\252>\330\207c?7m\312>\345\311t?\233\206+>T\313\016?\205\224|?=\362W=\260\217L>\\\262#?\373\026l?\324\344\222>\332\177Q?a7\030?G\326v?-\\\r>\005\261\363>\200h\177?J&\027<Q\301\025=\250G\020>\367\346\367>m\276\177?u\004\203;Z~\202<5j\200=\322\271p>\226\"8?g\303N?`\021\037?\'\353p?b\026c>5\2720?\223\346Z?\210\310\375>\026\373\177?]9\2359K-\235:\013\375\234;\200<\234<\262A\231=\277\311\215>\243\013M?\377?#?\301\225l?j\212\217>\347\230N?\340y\037?\007\205p?I\265h>\004\3233?\373\010V?\335W\014?\224\236}?<\360\026=U`\021>\210y\371>l\325\177?\2634*;\211\303)<:\001(= \035!>\267\303\007?\332\016\177?DCp<K\275l=s\016_>\347w.?\303B^?=W\352>\341*~?\305\341\350<\365B\342=\254C\311>\002Lt?y\2602>\000\202\023?\310\rz?\237\333\271=\272\375\250>tmb?!@\321>|vw? \n\004>\007\007\346>m]}?P\350&=.\033 >\257\022\007?\3447\177?\\\177G<\177\021E=@\226;>\n9\031?>\017v?%\337\030>\265\014\002?2\357\177?\025f\206:\315B\206;\371\265\205<D\207\203=\233)v>\234\374:?A\242I?AH+?\227\272b?\343d\317>w\305v?\335U\016>\014\032\365>:\211\177?\024\035\355;\326e\353<5\242\344=\013\034\313>\231\022u?\347_\'>V\004\014?_\276}?X\"\017=\342!\n>~\377\356>\357\336~?l\345\217<[^\215=8\234\203>0\217C?\364\2568?\367\313M?\253n!? \211n?\372.\202>5*B?\326\230;?\310\200H?;\335-?\350!_?\214.\345>\3110}?\232\3241=\037\034*>\310\331\r?\242\000}?\200\230==\330\3214>\347\343\024?d.y?\233c\324=\367\\\276>\316+o?\302\217{>\364\302=?\rfD?\202\3466?\306\347P?I\271\031?&\251u?1\277\036>\r#\006?Zi\177?\tM\026<\017\354\024=\362\201\017>\255\312\366>5\253\177?\250]\251;\217}\250<f\006\245=>\272\227>@\207U?\241\263\r?\016\021}?\272\2259=\036-1>C\205\022?\365\243z?4\352\247=\307%\232>\025zW?.o\010?s\343~?%\250\215<\0175\213=\272\276\201>\257\273A?\237|<?d\325F?n\2321?\022\216Y?\241\257\002?$\343\177?l\306\346:g^\346;\314\277\344<\232\\\336=\0028\306>U\365r?U\tF>\271\274\037?\000Cp?\347Tl>\275\3115?b\313R?M\344\024?!.y?\213k\324=Ac\276>\007/o?\362b{>\'\254=?\007\222D?c\2106?\266\210Q?\320 \030?S\347v?\343^\014>\321A\362>\"C\177?\272R<<\224(:=\244\2621>\203\334\022?\376pz?u\003\256=^:\237>.k[?\002\325\372>K\345\177?\307\222\325:\2619\325;~\326\323<$\\\316=\027\221\271>(\237l?\230J\217>\304`N?\220\003 ?p\374o?\3331p>z\3327?\225AO?\326\331\035?\261\023r?Q\247R>\225Q\'?*\330g?\276\002\257>\274`f?-v\270>C\002l?\277p\223>\321\366Q?\207\007\027?\226\266w?\351K\000>\322q\340>B\034|?<\'u=\372zf>\255\2322?\334\374W?\242\010\007?\033:\177?\243KE<m\353B=\322\2449>\352\374\027?Q\002w?\220\315\n>\376\371\357>@\377~?\342\276\177<\353\300{=\255Gl>\236\3025?Z\327R?T\305\024?KBy?x\010\322=;~\274>\3212n?Q\202\204>\374mD?\213\3256?\336\004Q?\256o\031?\375\343u?\375\\\033>\216\312\003?\202\306\177?\301\305e;\205\367d<^\304a=\262RU>\004\342(?]\342e?\326\234\273>+\273m?\243\270\207>\005}G?\251%0?l\307[?\361\304\370>\270\313\177?-\367P;\232LP<\250\246M=bSC>Z\021\036?\267\337q?\313\213U>P\003)?\301\267e?\355\253\274>\343Jn?{\334\203>\222\315C?\002+8?\240\264N?\2745\037?\305\307p?~\te>\377\3161?l<Y?\273\223\003?\321\314\177?K\221L;\323\355K<\007dI=#}?>%\256\033?7\007t?e\2276>}\010\026?)jx?\273\211\353=\366r\320>\351*w?Fq\010>F\206\354>\265\204~?\276\214\274<\3065\270=\033\244\247>\261\200a?\306\351\326>\340gy?\217\224\315=\246\361\270>\tGl?\342\237\221>CiP?-\370\032?\231\242t?\333\303->HG\020?\r\334{?\331Y\202=\331\033t>\223\3529?\316\226K?)\271&?\007\222h?5H\252>oLc?Z\336\313>Pbu?\322\317\">\347\354\010?Y\301~?\363\214\236<`{\233=\214\255\217>\300\267N?\r.\037?C\317p?\335\237d>\224\2241?%\227Y?<\226\002?<\345\177?\265\014\326:8\263\325;qN\324<\341\315\316=\341\353\271>\376\320l?\373\367\215>\3334M?\245\334\"?\230\002m?R\246\214>O\006L?\005\261%?i\315i?\331.\242>_\236]?h\034\356>\373\277~?E:\237<\371!\234=\314:\220>e3O?\366\374\035?\331\362q?\\{T>9d(?\034\202f?}\240\267>#\212k?\344\231\226>\025\233T?r\'\020?/\354{?)f\200=\276\262p>\326\0368?\373\311N?/\001\037?\332\372p?\2638b>\251>0?\305\241[?\275\234\371>2\327\177?\222\034#;\245\264\"<\001\027!=\"\301\032>\346]\003?\251\322\177?0=5;\341\2744<x\2762=\241\361*>.h\016?\302\301|?>\356L=u\255B>\236\252\035?\232?r?\2624P>G\337%?\313\226i?\244\227\243>\324\244^?T\024\350>\316\303}?\273\314\r=\010\344\010>\206.\355>\340\235~?P\033\260<$R\254=T\322\235>\000YZ?3u\000?)\377\177?\307\236V8\367\233V9\271\220V:\303cV;8\260U<\276\346R=\310\nH>\222\366 ?\271\005o?\235\240}>\346\316>?\205\\B?\2500;?%BI?\330$,?B\215a?0\235\326>3Oy?\'\201\320=\343F\273>#\215m?\025\364\210>\353\243H?\213\215-?\273\223_?-\210\342>\242\233|?\0277V=\025\003K>\234\303\"?\324\035m?\256\354\213>}^K?\001>\'?3\360g?\253f\256>\234\375e?<\357\272>\365]m?\3246\212>\200\316I?R\342*?\324Cc?\303\023\314>\006xu?+\221!>0\023\010?.\373~?\021\344\201<\247\251\177=q\264o>\326\2277?\237\265O?\233\271\034?~\033s?\234\344C>\027k\036?\347\212q?LAZ>z\274+?\220\034b?\3620\323>,(x?\030J\363=`c\326>u<y?f\271\322=\317\n\275>\250|n?\027\205\202>\275~B?\237\351:?;\305I?\262\367*?(\'c?\213\305\314>\250\277u?\022t\035>->\005?\r\222\177?k\210\333;\346\017\332<\355A\324=EB\276>\032\036o?\030N|>\242#>?\342\252C?ot8?j3N?\205r ?\256\214o?AKv>\023\016;?\n\202I?R\222+?\023Vb?\341\317\321>\254\252w?&\376\000>\273|\341>\371\\|?Zse=\341\230X>K\310*?\253fc?w;\313>\222\037u?\021\242&>l\204\013?i\355}?\335\222\003=\306\261\376=\036\005\337>R\300{?\"\264\205=\031\363y>f\360<?\273\371E?\267}3?\255\222V?\177\344\n?i%~?\275\223\353<y\315\344=\244=\313>w u?\357\224&>\220{\013?\230\360}?`\312\002={:\375=\346\352\335>cv{?\266\240\216=\340\261\204>\325\233D?_s6?\177\254Q?\215\305\027?\241+w?\222f\010>\223v\354>P\202~?w\273\275<\205V\271=\277\220\250>2#b?H\010\323>\351\031x?Z\366\364=\211\251\327>\336\244y?\211W\306=\030\"\263>~\353h?\211\376\247>\376\276a?\247m\325>\247\353x?IG\334=\366\225\304>\3635r?~\276P>\3700&?\2655i?5\027\246>Ol`?\270t\335>\265V{?\020r\222=F\371\207>\261\271G?\343\235/?\224\222\\?\2142\364>\263t\177?\032\001\013<1\323\t=\366/\005>|\272\347>\344\262}?\372\363\021=\225\300\014>\221\317\362>\014R\177?A~-<\361\247+=Uv$>`\014\n? l~?\224\261\310<\345\306\303=\321\017\261>\302\250g?$6\260>\313!g?R\236\263>\3345i?4\026\246>\233k`?\367x\335>\332W{?\303N\222=\005\333\207>O\235G?v\335/?\2753\\?/V\366>\237\242\177?\202~\272;\312n\271<?<\265=w2\245>\327\312_?\237>\341>\033N|?v\017i=\244\314[>\263\236,?A\344`?!\240\332>&\213z?\223\342\252=\\\240\234>\344lY?n\014\003?\323\332\177?2\235\024;\354F\024<c\357\022=\005\252\r>\254!\364>$s\177?\306\216\014<\024Z\013=e\234\006>\275\324\351>\211\024~?\257\343\363<\336\240\354=\277I\321>\377yw?\261\325\003>/\271\345>\212M}?\363\313*=\273\254#>`\203\t?\377\225~?n\000\264<\352\013\260=\335\351\240>\220\256\\?\212\220\363>\\e\177?4F\032<R\322\030=\253\036\023>8\367\373>\271\357\177?\023,\202:\372\n\202;\334\206\201<%\365~=o\026o>\266C7?XGP?TM\033?dZt?X\3371>\262\371\022?\276_z?f\023\260=\020\360\240>+\263\\?\335u\363>\302b\177?;\335\034<\301\\\033=*x\025>\307M\377>\204\377\177?\205%\3707\244#\3708 \034\3709\021\376\367:\363\205\367;K\247\365<~I\356=\347\217\322>f\357w?\350\361\371=\330p\333>m\307z?\036\252\243=\333\225\226>\302\227T?;0\020?\276\347{?\267\357\200=G\243q>\022\2368?\332\351M?\366%!?\304\324n?\266#\200>\261#@?\212\270??\235\216@?\210\341>?\3567B?u|;?\227\265H?je-?\303\314_?\0353\341>WK|?u\273i=\te\\>\225\365,?\245j`?\300~\335>jY{?\245\036\222=\306\261\207>\222vG?\02140?\275\261[?CA\371>\201\322\177?\216\3335;^Z5<zX3=,~+>\271\305\016?\034\227|?\337PW=P\377K>\226[#?Qwl?\341X\220>\246MO?\360\273\035?\207/r?/\032Q>>g&?\300\364h?\321\301\247>1\225a?\322l\326>\207?y?]\\\322=\350\300\274>\352Un?q\220\203>\275\203C?\035\3078?\"\241M?\261\326!?\312\033n?\336 \205>\221\006E?\327\2155?\331/S?\300\337\023?\030\324y?<\272\300=@\227\256>\214\034f?\354)\272>\346\362l?<\021\215>zfL?\371\313$?\376\327j?^C\233>\027\\X?=\002\006?\225o\177?\006\032\020<\221\325\016=w\332\t>\'\227\356>\350\320~?v\330\226<c\021\224=\340\\\211>6\005I?\034\260,?\365\313`?/3\333>\301\265z?S\310\245=\330\\\230>N\013V?\235Q\014?\375\240}?\364X\026=.\324\020>\253\260\370>\221\312\177?`\220U;7\336T<4\032R=DSG>\240\206 ?Exo?\276gw>g\241;?\322pH?`\001.?\006\356^?\260b\346>\346o}?4b\"=-\362\033>c2\004?\214\271\177?h\301\214;\240&\214<\316\300\211=\320|\200>\223|@?\347\005??`\360A?7\020<?\226\241G?\344\323/?\013B\\?\270\003\366>J\234\177?\301\035\307;\003\350\305<\013 \301=\341\351\256>\376Pf?\336\332\270>b:l?\202\365\221>\373\262P?\230>\032?\350<u?\\\364$>\334a\n?\325P~?-*\326<\331\220\320=bS\273>\330\223m?&\306\210>+yH?{\356-?+\t_?\217\301\345>BO}?G`*=\007J#>0@\t?\262\251~?\037B\252<@\270\246=\321%\231>h\255V?\"\234\n?\271=~?\257\227\337<b}\331=\251d\302>\232,q?\203y_>H\264.?\335\352]?\"\\\354>D~~?U\273\277<\215>\273=\377\037\252>{1c?\212\205\314>\373\245u?\326\355\036>:C\006?\037c\177?P\201\034<\231\002\033=\326$\025>\271\327\376>\251\376\177?\364p\2538^m\2539\004_\253:\250%\253;\322@\252<\001\267\246=\306$\231>\222\254V?g\236\n?\370<~?\317\366\337<P\327\331=x\253\302>\233Nq?*\230]>%\244-?\207s_?oH\343>U\307|?\262\222K=\223tA>T\350\034?k\361r?\220AF>1\337\037?\276 p?V5n>\210\3136?\003\026Q?BD\031?d\006v?\272a\031>=h\002?\322\350\177?\321[\271:\266\030\271;\r\r\270<w\352\263=?\034\244>K\004_?\205\336\345>/U}?\010\355(=\210\365!>\330W\010?\221\351~?\341\237\212<[G\210=\275k~>?5??\000\223A?\026\320<?27F?\023\3672?8jW?\207\232\010?\351\327~?$`\223<g\271\220=D\177\206>\rUF?\201\2652?c\322W?O}\007?\241\037\177?\022\232_<\333\214\\=\265\254P>n&&?FBi?\214\304\245>$2`?\327\322\336>S\263{?\007F\207=R\255|>\346S>?\004MC?c:9?\313\323L?A\306#?\303\000l?\334z\223>e\377Q?\216\361\026?_\306w?C\277\376=@\017\337>\356\302{?gc\205=\262fy>v\250<?h\202F?\264Q2?\357oX?l\313\005?\261y\177?\346\010\006<1\360\004=\250\237\000>J\357\340>\363:|?\323\265m=0\352_>\273\363.?\003\216]?\026|\356>7\315~?\255\254\230<A\324\225=)\336\212>\rhJ?\271~)?\250\030e?J\234\300>\305Mp?\271\275k>Ax5?\362SS?\327\201\023?\341\rz?\242\330\271=H\373\250>\313kb?[J\321>8zw?\\\322\003>=\264\345>\206L}?\223\013+=\013\347#>\t\253\t?\034\212~?\312\340\271<\025\251\265=\004\214\245>>\n`?\210\302\337>\223\360{?\025\274\177=\221\304o>j\2407?\270\246O?\266\336\034?\031\372r?\320\304E>\260\222\037?\225lp?\370\014j>\013\2164?\364\327T?H\206\017?\364;|?Iwm=\350\262_>\234\324.?\235\273]?5q\355>\234\247~?rJ\253<\216\265\247=\302\371\231>\006WW?\360\316\010?\247\311~?\200p\232<$\207\227=\rQ\214>Z\271K?{g&?v\364h?\264\303\247>}\226a?\344d\326>\363<y?{\252\322=\366\376\274>uvn?\346\257\202>\255\250B?^\222:?feJ?\343\204)?\252\020e?\310\316\300>\275fp?\032_j>\232\2724?\245\216T?PH\020?\206\333{?\025j\202=/8t>f\3719?\367{K?\205\370&?\035Eh?0>\254>\300\230d?v\302\303>\031\323q?d?V>\341k)?\0211e?\367\001\300>\373\000p?A\362o>\262\2707?x|O?\305G\035?\245\232r?v\036K>!\324\"?\336\013m?&g\214>Q\315K?88&?\014-i?#P\246>@\224`?\324\203\334>\320\024{?\325_\232=\347\274\216>\262\343M?\3614!?;\305n?H\217\200>\370\216@?\320\340>?W9B?\211y;?\005\273H?\023Y-?A\336_?T\312\340>\3651|?:\344o={\327a>\\\0100?u\363[?\032\310\367>u\274\177?z\361\206;7c\206<\326.\204=\230Mw>\343\223;?\000\212H?W\310-?\322?_?\221|\344>\003\013}?\245\017;=\247\2042>xe\023? \037z?6\312\267=\337K\247>\252Ca?8]\330>\000\335y?\360\252\277=\340\272\255>\245\217e?\274\252\275>\354\317n?@E\200>.E@?Zu?? \024A?\030\323=?\341FD?\023)7?NuP?\347\331\032?\017\274t?\210P,>tQ\017?jU|?/Ig=\3349Z>6\270+?e\"b?1\r\323>\242\033x?\226\302\364=%\202\327>n\230y?\256\321\307=\271R\264>\003\241i?3T\243>\021t^?u4\351>b\370}?\276\337\000=k\243\371=\2015\333>l\266z?\333\263\245=\260K\230>i\375U?\366v\014?\207\222}?)\345\031=\355\034\024>\037a\375>\"\371\177?\247\275\3339\023\246\333:\330G\333;0\320\331<\233\005\324=r\022\276>\202\005o?\231\243}>h\320>?\220YB?\3116;?\3166I?\312>,?lia?\206w\327>\021\225y?\3437\310=\367\244\264>\211\321i?\224\023\242>_\212]?a\221\356>\037\320~?\030<\227<Xq\224=\360\256\211>,QI?m\002,?\252\274a?\342{\325>b\360x?J\270\333=\260%\304>\245\001r?\222\250S>\276\350\'?\n\035g?\367\274\263>!Hi?\006\236\245>\366\026`?)v\337>@\335{?\2514\202=\361\332s>\231\3109?;\324K?\326\'&?\231@i?\217\317\245>\3479`?*\244\336>2\247{?\031\275\210=\3247\177>\303\233??\335\307@?\326m>?u\032C?\221\2449?7\025L?\226\215%?\021\367i?.\033\241>)\323\\?`\274\362>\020P\177?\'w/<\027\226-=\324:&>\276>\013?1\006~?\255\363\372<\246C\363=v^\326>\334:y?\323\351\322=D1\275>\300\220n?H\372\201>^\366A?\334\003<?\303\270G?\372\237/?z\217\\?\201D\364>Zv\177?6\\\t<g5\010=\332\255\003>\003~\345>WA}?5\310-=\262h&>\265]\013?@\373}?\034+\000=\324P\370==5\332>\303kz?\224\243\256=<\277\237>\\\317[?d\227\370>\035\311\177?\035^[;#\242Z<A\267W=\354ZL>\252\222#?F:l?;\366\221>\232\263P?\006=\032?1>u?\206\341$>\027U\n?\370T~?\016 \324<\345\241\316=\307\310\271>\301\275l?\306z\216>\036\251M?R\303!?@0n?\001\224\204>\013\177D?\014\2616?RCQ?Q\321\030?V`v?\3000\024>M}\375>\262\371\177?\371\253\3119\035\230\311:\275H\311;6\014\310<\235)\303=\220\220\260>\010Zg?n3\262>M[h?\212\255\253>\3109d?w\026\306>,\346r?\034\343F>\026B ?\246\275o?\327\237s>\241\2519?\027\014L?G\243%?\226\335i?\334\303\241>\310O]?\200\347\357>\356\374~?\030\006\201<\275\373}=\005<n>\033\3176?\344\017Q?\302S\031?#\372u?~\026\032>\271\346\002?U\336\177?\270\233\006;\361T\006<\375:\005=\227\345\000>\374W\341>1T|?E\225g=Z}Z>\353\336+?l\355a?\302Q\324>\001\214x?\\\216\347=\025`\315>$\375u?)\352\031>\272\307\002?\025\341\177?i9\367:\t\302\366;V\346\364<\027\224\355=\246\004\322>\254\275w?\300\303\377=\317\322\337>\254\364{?N\276~=k\346n>\033*7?\206sP?b\336\032?L\270t?g\207,>\331u\017?\351C|?\362\210k=\247\375]>\253\335-?G!_?G2\345>\2211}?\263\2431=w\357)>\364\273\r?}\r}?\324t:=\365\3671>\300\t\023?4Vz?&7\261=|\341\241>\224e]?Th\357>\261\354~?\247\023\211<v\310\206=N\323{>L\345=?\262#D?\022t7?\256\363O?\312\036\034?\001\245s?r%<>\261\223\031?I\307u?\302\003\035>[\360\004?n\236\177?\234\331\302;\377\260\301<\234\034\275=4\246\253>\3634d?\2754\306>\333\363r?\221\036F>\276\311\037?\0246p?2\nm>:+6?\361&R?\036\214\026?y\016x?\276M\366=\216\256\330>\025\366y?g\256\274=SL\253>\231\371c?\005\250\307>d\231s?F\315<>\275\375\031?\326qu?\370\353!>NQ\010?E\353~?\335\307\211<\241v\207=\254\001}>\231~>?\276\371B?\032\3519?x\231K?\336\262&?\245\231h?o\026\252>\020+c?Q\255\314>\364\265u?\337\002\036>\374\240\005?D\201\177?D\373\374;D\007\373<\nV\363=|l\326>k?y?\260_\322=\214\303\274>MWn?\341\206\203>qzC?\271\3328?Q~M?\025+\"?\035\302m?\002\211\207>:PG?\232\2110?q0[?3$\374>\034\361\177?\305*n:`\363m;3\026m<\353\247i=\271S\\>\271\353,?~x`?I+\335>\317B{?\177\327\224=C\006\212>\305\241I?]I+?\027\271b?%n\317>\373\310v?\261!\016>\260\316\364>\272\202\177?$\022\372;\225)\370<\021\245\360=S^\324>J\220x?-\r\347=\024\374\314>p\325u?^3\034>\265_\004?z\263\177?\242\335\230;\022\'\230<\237S\225=Qp\212>Y\003J?Bh*?\200\346c?M\037\310>\256\315s?\n\3319>0\036\030?N\351v?wA\014>\031\027\362>\205>\177?&\351@<\253\243>=6\3045>s\200\025?\263\306x?\311\243\340=\350\377\307>\366\277s?\227\237:>\204\234\030?\036\211v?\353\324\021>d \372>\201\335\177?\004\353\t;\267\240\t<\301x\010=\271\354\003>b\333\345>\213T}?0\025)=`\032\">\007q\010?\367\342~?\372\345\215<\301p\213=M\362\201>\203\356A?\r\024<?a\232G?\004\344/?\355)\\?\266\216\366>\327\246\177?\234\024\262;\333\034\261<\224H\255=.\237\236>|\365Z?\311s\375>\202\371\177?\306\257\3179\266\232\317:\210F\317;\342\366\315<7\311\310=\327\031\265>!\026j?TM\240>\3509\\?\2412\366>\353\237\177?\261\342\277;\t\303\276<\330Q\272=w^\251>\022\257b?\364\253\317>`\340v?2\306\014>\263\327\362>\342R\177?\017\251,<@\327*=\027\267#>l\212\t?\346\223~?\000\n\265<\307\t\261=\366\273\241>\366I]?l\t\360>-\001\177?)\325}<m\346y=L\247j>\273\3414?\024NT?\253\362\020?\022\203{?/\031\215=\227`\203>/UC?4)9?\201\362L?v|#?\355Rl?hO\221>\303#P?\204\246\033?\317\rt?\26776>\346\312\025?V\224x?4\223\346=\231\235\314>\245\257u?\247_\036>\032\341\005?\274u\177?\t\371\t<\227\317\010=\303=\004>\246S\346>\342l}?&\037#=\033\240\034>:\253\004?\317\250\177?4\'\256;A:\255<\203\220\251=\177\206\233>\332\220X?bp\005?\253\211\177?\307;\354;\312\207\352<\346\320\343=by\312>\374\316t?J<+>\343\231\016?:\253|?5kR=\364\233G>\377\262 ?\rKo?S\335y>@\345<?\363\016F?JO3?A\335V?f\032\n?\265g~?\275\337\312<\216\331\305=|\274\262>Q\256h?<\217\251>\013\320b?u\340\316>\351\222v?\321C\021>\260P\371>P\323\177?\026\2402;s#2<\23630=.\237(>\332\332\014?\002k}?\337\224#=q\014\035>`\366\004?\200\235\177?\024\265\304;\310\206\303<\024\334\276=\246\022\255>\026#e?\\Z\300>\016-p?\276\210m> o6?\272\263Q?\032\263\027?P9w?\247\232\007>\021K\353>;S~?\206\373\324<\371q\317=\311n\272>f\030m?\267\021\214>\r\200K?\342\356&?\330Ph?\271\361\253>\241fd?J\375\304>\300er?\206\023N>\253\232$?\212\020k?]\311\231>j0W?:8\t?\376\253~?\017\037\251<?\241\245=\027<\230>\305\360U?\354\230\014?:\205}?\371\'\035=Y \027>\215\322\000?K\375\177?\212*-97#-:\361\005-;\000\221,<\264\277*=\201\241#>\275{\t?D\230~?m\341\262<{\371\256=x\006\240>\332\004\\?\031d\367>\343\265\177?\335\017\224;\230d\223<\263\275\220=\364\202\206>\216XF?\317\2552?\224\336W?\327[\007?e\'\177?\216\343W<N\013U=\221\366I>J!\"?\221\314m?LA\207>\251\014G?\347\0371?\026KZ?y\234\000?\201\376\177?\300F\2778IB\2779l0\277:\010\351\276;J\314\275<\220f\271=\343\235\250>+,b?<\321\322>\207\006x?7<\367=\217c\331>/-z?\355\034\266=H\353\245>mM`?\265.\336>`\210{?mu\214=X\323\202>]\313B?\013J:?w\351J?\312P(?\235\232f?k\003\267>\3630k?^\360\230>j\202V?x\020\013?R\026~?v\002\363<\t\315\353=\307\246\320>\036>w?\023S\007>\312\341\352>\010B~?\304w\335<\004{\327=\t\317\300>\335fp?W]j>\246\2714?8\220T?(D\020?\243\335{?\244(\202=\365\305s>\233\2759?\022\350K?\314\370%?\215xi?\031_\244>74_?\245\301\344>\312\031}?\237s7=7</>_?\021?\027Z{?\306\t\222=\342\237\207>\277eG?\236Y0?\026y[?\207\205\372>\375\341\177?@\376\357:\301\215\357;m\315\355<=\346\346=\355\335\314>h\311u?\214\344\034>\266\332\004?\276\241\177?\376>\274;%*\273<p\343\266=k\216\246>\324\277`?\213|\333>\304\312z?\235C\243=\270?\226>\264PT?\301\353\020?\273\206{?%\250\214=\033\377\202> \366B?\254\3609?\305\213K?9\323&?srh?y\026\253>\352\325c?\322\206\310>\265\372s?\301L7>\014}\026?\023\031x?t\017\365=\242\274\327>\341\252y?\257\240\305=\231\216\262>\226\222h?\223D\252>\001Jc?q\355\313>thu?\256u\">e\257\010?F\322~?\032+\226<fj\223=\372\315\210>u\200H?\367\335-?\333 _?\3144\345>\0302}?\246\2021=G\321)>\311\247\r?\037\026}?\tY8=\007\r0>\215\310\021?\001\017{?\213\022\233=\234T\217>\226iN?\365\355\037?\006\022p?\224\003o>\25197?\262XP?\307!\033?n\177t?K\304/>\316\230\021?f){?0\346\227=\005\242\214>n\002L?;\272%?\215\302i?\241v\242>\347\322]?\261\350\354>\210\223~?y8\265<26\261=\263\340\241>\377d]?\265k\357>!\355~?\n\334\210<\266\222\206=\362u{>\322\265=?c\177D?P\2606?\223DQ?!\316\030?\317bv?0\014\024>TI\375>\243\370\177?\253\232\3539\220\177\353:?\023\353;\206c\351<S\275\342=\371\242\311>\237tt?\251a0>\016\000\022?\370\357z?\316\314\236=\240|\222>\335&Q?\212\031\031?\002(v?~q\027>\271\013\001?\240\373\177?\024\373\2139\203\361\213:C\313\213;\2262\213<\026\325\210=fa\177>\233\260??h\236@?\247\301>?\202vB?\271\372:?\272\245I?B@+?f\305b?,\"\317>\020\254v?\327\316\017>P9\367>\373\262\177?\004\334\231;\022#\231<;F\226=o?\213>\354\300J?\232\257(?\236\"f?+\003\272>\273\335l?N\241\215>\207\347L?\332\226#?\2365l?\276\025\222>\255\316P?\263\370\031?\355uu?\352\257!>:(\010?\330\365~?\230\211\204<\247d\202=\266.t>q\3649?\361\204K?V\343&?\342^h?*\226\253>`*d?\360v\306>\256\021s?\316qD>1\302\036?\2457q?A\335^>\"\\.?\nk^?\276i\351>\324\001~?u\031\375<\233G\365=V\347\327>I\270y?\325\010\304=%E\261>\232\311g?;a\257>c\234f?\016\370\266>x*k?\305\033\231>V\245V?\377\261\n?q6~?q.\343<\226\341\334=\006\017\305>\354mr?\256\236M>\315T$?)`k?\312\263\227>\376\201U?\256\301\r?\007\013}?\252\016;=\303\2032>\343d\023?z\037z?|\277\267=\022C\247>\221=a?L\202\330>u\350y?\301M\276=\320\236\254>\326\327d?U5\302>\312\025q?\035\274`>\256i/?\032\340\\?Hq\362>2H\177?MJ7<`=5=c8->\022\353\017?p\n|?\300xy=\376Fj>\207\2554?.\244T?c\017\020?K\370{?\304\335}=\303!n>\020\3016?\356\'Q?\324\026\031?\"*v?\034R\027>\236\365\000?Q\374\177?\337\244k9P\227k:\034ak;\261\210j<8-g=\016!Z>\372\251+?\3255b?\357\225\322>\212\361w?\270\261\371=Q@\333>\207\271z?\220T\245=\314\373\227>\226\274U?\346$\r?\355L}?B\362*=\330\317#>B\233\t?\335\216~?\202\207\267<\352j\263=\024\263\243>\237\270^?0\237\347>\264\255}?\000:\023=E\357\r>\321\205\364>F|\177?\213v\003<\201h\002=8\203\374=\345`\335>ZQ{?9\027\223=\303\206\210>\020>H? t.??H^?\3516\352>d%~?\346\225\353<\202\317\344=9?\313>\036!u?f\213&>!u\013?\346\362}?.9\002=\227*\374=\033\036\335>8?{?\026F\225=\301d\212>\272\370I?\320\200*?\353\305c?\230\352\310>\314%t?\235\3334>9\352\024?C*y?\257\340\324=\022\300\276>y^o?\000\317x>\222Z<?\256\025G?\336\0131?\322iZ?\263E\000?\264\377\177?\021\317\2277]\316\2278\215\313\2279M\300\227:S\223\227;\324\337\226<|\030\224=\362b\211>\326\nI?E\243,?\340\335`?\273\306\332>e\226z?\345\211\251=\372\200\233>\204\214X?`|\005?\237\207\177?5P\360;\010\215\356<\264\232\347=\242i\315>\353\000v?v\262\031>\302\240\002?`\344\177?\321\347\334:\201\210\334;\213\014\333<\0271\325=\300\377\276>\340~o?\264\013w>\317q;?a\311H?m8-?u\014`?=\265\337>9\355{?\341E\200=Fzp>\346\0008?m\376N?\344\177\036?\033wq?,Z[>R],?\'?a?\251x\330>|\345y?h\250\276=\233\350\254>\322\007e?\236\006\301>B\202p?C\334h>E\3503?\207\346U?k\264\014?[z}?!\322\037=\266\225\031>\243\214\002?\001\346\177?\346\344\317:|\220\317;\346?\316<\217\016\311=\223Q\265>\2626j?Fu\237>\252\227[?\235\326\371>\t\332\177?\311\306\027;\315l\027<\207\006\026=\314\207\020>\022C\370> \304\177?\322Io;\'jn<\001\362j=\014x]>\355\221-?~\215_?p\255\342>1\244|?\333!T=Y%I>n\242!?\342Rn?Y\245\203>\016\230C?9\2348?\037\355M?\000\036!?\002\335n?:\325\177>\233\352??\303*@?^\252??\321\252@?\225\250>?\243\247B?\212\224:?naJ?\036\216)?\256\004e?v\032\301>\003\214p?\013Sh>c\2353?\247_V?`n\013?Q\365}?\014\241\001=\241\r\373=*G\334>\360\003{?\352f\234=7u\220>[fO?\254~\035?9hr?)\360M>\210\205$?\260(k?\261\'\231>\352\256V?\014\230\n?\023?~?\335\354\336<\340\333\330=g\345\301>\033\357p?\216\336b>!\2330?\326\025[?\276\273\374>T\365\177?\350\264*:r\230*;\304&*<fb(=Qv!>\317\000\010?\314\377~?L3\177<\2579{=\r\321k>\257\2025?\204BS?5\257\023?\031\362y?\362\'\275=r\257\253>\t;d?\231\016\306>\234\342r?C\026G>[a ?\021\236o?\301Xu>\001\220:?\272iJ?\323z)?\267\035e?T|\300>\356=p?\020\234l>\t\3605?\355\212R?\323\212\025?\270\277x?qv\341=D\244\310>t\007t?\347\2236>>\006\026?\265kx?,[\353=\034O\320>\222\035w?\3577\t>h\251\355>\265\257~?mH\247<\360\335\243=d\301\226>\225\273T?t\321\017?$\027|?\257dv=U\222g>\37233?\377\010W?\213\243\t?_\214~?\265\302\270<\361\227\264=0\253\244>\230j_?\265}\343>=\323|?\216\253H=\306\326>>\346E\033?\272`t?/\2031>\205\275\022?4\203z?\343\325\253=\365j\235>\215\tZ?#U\001?\346\370\177?\236D\3439f+\343:\233\306\342;\3244\341<\345\003\333=\360\227\303>\016\277q?p\\W>W\021*?9Yd?aQ\305>i\214r?\\\352K>\373N#?<\205l?\200\372\217>0\373N?\340\207\036?}oq?0\306[>\004\233,?c\351`?\006\201\332>\r\202z?5\371\253=Y\210\235>, Z?s\025\001?M\373\177?\262V\2269\251K\226:\212\037\226;xo\225<\241\265\222=+3\210>\356\357G?$$/?\327F]?\243\033\360>q\003\177?z\225{<\200\270w=(\275h>O\3273?\006\002V?\217j\014?Y\227}?t\266\030=\341\004\023>u\322\373>\214\356\177?\024\232\213:\004t\213;\025\334\212<\205\201\210=\223\320~>\360g??\270.A?\371\234=?E\257D?\256I6?U\363Q?s\020\027?)\260w?\005\254\000>\316\001\341>p?|?\377\236l=\246\363^>\307h.?\266X^?\334\325\351>\273\024~?/\313\363<\324\211\354=\0078\321>\206sw?O6\004>\230H\346>\252j}?W\252#=1 \035>\021\004\005?]\233\177?\266\366\310;1\273\307<\214\334\302=,R\260>A3g?\273-\263>z\362h?\271\320\247>v\237a?\'.\326>\035+y?\366\306\324=\262\253\276>\024To?\253_y>\333\244<?<\211F?\246B2?\227\207X?\001\212\005?F\205\177?\344\375\364;\372(\363<D\361\353=\251\302\320>kHw?|\271\006>\235\377\351>\357\033~?\320>\360<\"3\351=^\245\316>.|v?\227\224\022>E2\373>\355\350\177?\325\210\270:SF\270;\010=\267<\306#\263=dx\243>@\216^?\316\231\350>z\334}?\260\274\007=\'=\003>|\326\344>8\036}?\215^6=\344?.>*\231\020?\375\261{?po\207=2\365|>Ix>?\021\006C?L\3179?!\310K?\202D&?]\036i?\243\260\246>\271\327`?\375\353\332>6\241z?n>\250=.l\232>\007\262W?\r\326\007?a\n\177?/\263t<\227\013q=*\334b>\314\2310?\334\027[?8\260\374>\010\365\177?5q/:&S/;\024\333.<Y\375,=\003\257%>>\340\n?\333&~?^\335\352<\223!\344=\030\270\312>&\351t?\024\276)>\363\232\r?\226\033}?%\0037=\315\325.>\367\373\020?$~{?`\261\215=\304\343\203>\243\324C?\t\0348?\344\316N?\027\365\036?\217\006q?S\223a>@\342/?\222,\\?z\177\366>\266\245\177?,T\264;\037V\263<\023i\257=\371b\240>\024J\\?a\325\365>\244\230\177?\241c\316;\330\026\315<l\364\307=\257n\264>\210\261i?\034\347\242>\350$^?\002\007\353>&H~?\007s\332<\306\237\324=\246\214\276>8Do?P<z>\332\025=?R\262E?\217\0314?n\226U?\n\213\r?V\"}?\334\\5=\025U->\016\376\017?\371\000|?\302\303{=+Jl>\366\3035?\031\325R?+\313\024?\200>y?t{\322=\233\331\274>\341bn?\0017\203>\253,C?Z~9?\367YL?\330\351$?\227\265j?\363(\234>\370\017Y?\224\017\004?\n\276\177?z\312\203;\311B\203<](\201=N\006r>S\3228?<\215M?\361\006\"?\237\350m?\247\200\206>_VF?\235\2622?\371\326W?\272p\007?\221\"\177?\230\257\\<\237\266Y=-$N>\236\244$?\'\005k?\212\025\232>(mW?\201\222\010?\020\332~?\tO\222<\027\262\217=\t\235\205>\206}E?a\2144?\257\332T?\n\177\017?w?|?+\235l=\t\362^>\336g.?\tZ^?\020\316\351>a\023~?\212u\364<\010*\355=,\263\321>M\240w?B\231\001>\234d\342>m\223|?e6X=\250\314L>\364\326#?\023\356k?\365\370\223>\017jR?\213\337\025?@\206x?\255;\350=&\346\315>\3441v?\177\337\026>\324\244\000?W\376\177?y?\3248\3729\3249\374#\324:\026\314\323;\242m\322<\341\005\315=\224\177\270>\204\007l?FM\223>\266\330Q?\225T\027?\305~w?]\216\003>9O\345>\2357}?\013)0=\204\225(>_\324\014?\234m}?\274\361\"=Ov\034>5\216\004?\375\254\177?p\317\245;\246\370\244<*\246\241=\334\343\224>w/S?\300\340\023?y\323y?\'\315\300=\234\246\256>O&f?\231\353\271>\326\320l?\007\371\215>\3125M?d\332\"?\014\005m?\234\225\214>>\367K?\313\324%?2\243i?\312E\243>\242i^?\016r\351>L\003~?\273`\374<F\232\364=xc\327>\266\216y?\026\371\310=R@\265>\240,j? \270\237>\004\312[?\r\266\370>\337\312\177?\177VT;`\246S<q\352P=\224BF>\321\337\037?\037 p?\014>n>1\3206?\t\016Q?wX\031?i\366u?mM\032>\035\r\003?\303\332\177?\371\337\024;f\211\024<\2510\023=\232\346\r>Jy\364>%{\177?\227\225\004<\354\202\003=\361\223\376=\264\356\336>\211\272{?\tg\206=\020*{>0\217=?\315\311D?\260\0206?\323SR?\306\030\026?\356^x?\255\333\354=\365v\321>w\212w?\255\337\002>cK\344>g\000}?\300\246==\306\3364>D\354\024?\356(y?\036\t\325=\030\340\276>\310no?\345\353w>\242\345;?f\361G?\330 /?\262K]?S\377\357>\352\377~?u\025\177<\306\034{=\257\267k>\377t5?cYS?\252s\023?\202\026z?A\321\270=\222#\250>o\330a?%\322\324>\220\267x?\245l\342=%d\311>\341Yt?\316\3461>\220\376\022?\333\\z?\276k\260=49\241>h\351\\?F;\362>nB\177?\276\005=<x\327:=\233Q2>6D\023?73z?\233d\265=\256S\245>b\342_?\227\261\340>\352+|?V[q=\205\"c>\366\3000?J\334Z?\366\002\376>\014\374\177?}\010}9\334\370|:]\272|;\336\300{<\217\342w=\037\342h>w\3533?X\341U?U\302\014?\322t}?g-!=\305\325\032>Ll\003?\"\321\177?FW;;-\316:<\354\2548=[Y0>\234\372\021?\010\363z?\277n\236=#-\222>\302\342P?\367\305\031?\362\236u?=U\037>~\212\006?\335T\177?\323\260*<\225\351(=_\362!>\257U\010?\"\352~?aX\212<F\002\210=\362\363}>\355\370>?\355\tB?\205\333;?R\004H?H\366.?E\212]?\371\221\356>4\320~?\3241\227<ug\224=|\246\211>[II?T\024,?\005\244a?V\022\326>\003\"y?\230\332\325=\350\205\277>\272\302o?\351Xs>o\2049?\010OL?\352\003%?y\227j?\262\361\234>\357\253Y?\001\\\002?\274\351\177?S\023\262:d\325\261;R\336\260<\276\014\255=wm\236>\240\317Z?\326J\376>\025\375\177?\330\237:9W\227::Wu:;\210\3559<d\3217=\223\221/>}w\021?\247;{?\376\263\225=\235\302\212>\325NJ?R\271)?v\314d?\001}\302>P8q?\326\323^>\320V.?\277r^?E<\351>\306\371}?.\210\000=M\377\370=X\271\332>\200\222z?D\001\252=\216\344\233>\214\332X?\024\244\004?\331\251\177?E\024\254;\357,\253<F\231\247=\034\342\231>+DW?c\002\t?T\273~?&\210\241<\302X\236=\214\032\222>\316\322P?H\356\031?a~u?\3213!>C\323\007?\020\013\177?\311\005t<]cp=\265Gb>\tG0?#\225[?\021\345\371>\272\332\177?\205\002\025;\311\253\024<mR\023=\361\005\016>\226\246\364>2\177\177?\205\215\000<\233\026\377<+%\367=\023R\331>\350\'z?\"\276\266=\306o\246>f\252`?\020\376\333>t\357z?\240\334\236=\375\211\222>K2Q?\212\374\030?\264>v?-\"\026>)\037\000?\361\377\177?\342\272r6\250\272r7\302\271r8)\266r9\310\247r:Gnr;\263\210q<(\371m=\264%`>4\025/?\325\\]?[\233\357>D\363~?\004\321\205<m\241\203=4Wv>G\024;?\230vI?\233\254+??2b?\361\253\322>W\371w?\306\307\370=P\217\332><\206z?\032y\253=\272\035\235>\372\315Y?\210\374\001?7\360\177?\323{|:\222=|;\tE{<\207jw=\233xh>\347\2613?\212>V?\261\307\013?\354\324}?\017\230\t=\316\370\004>\330h\347>O\243}?\027\307\025=\001M\020>\247\356\367>\351\276\177?o\014\202;M\210\201<\360\367~=\341\030o>\004E7?\030EP?\373R\033?\221Ut?\200%2>u\'\023?zDz?\'U\263=!\241\243>\254\253^?\322\353\347>6\274}?E\252\017=J\240\n>\372\267\357>\353\366~?B\001\204<\267\340\201=_Hs>\301{9?\241^L?\265\336$?m\302j?Q\323\233>\017\315X?\205\311\004?U\244\177?\227\024\267;\272\016\266<\362\002\262=\357\211\242>\001\341]?\372\225\354>\027\207~?\354^\273<\315\025\267=\310\267\246>\264\334`?\323\315\332>u\230z?\257J\251=9L\233>\016cX?\000\357\005?,s\177?\364\206\014<dR\013=;\225\006>-\312\351>\264\022~?|\312\364<\347y\355=\211\360\321>p\266w?\030N\000>\030u\340>\020\035|?4\365t=\356Nf>s\2022?\"#X?O\237\006?\225P\177?2\363.<\364\024-=\237\304%>\334\356\n?\340!~?\243Q\355<\241q\346=\225\203\314>1\245u?j\371\036>5K\006?\216a\177?X\020\036<\367\211\034=p\216\026>\241k\000?K\377\177?\367\00058\367\37649\367\3664:\374\3264;=W4<\022[2=\346\226*>\265+\016?\303\334|?9YF=V\276<>O\364\031?}yu?\233{!>n\004\010?\344\376~?\300\014\200<\264\030|=\252\224l>\016\3545?\242\221R?\205y\025?Z\313x?C\027\340=,\222\307>\304\217s?QX=>oU\032?#*u?L\007&>\356\033\013?Z\022~?\023\367\364<\324\243\355=\274\020\322>\002\302w?\325A\377=Nq\337>\004\334{?\341Z\202=\247\035t>\205\3539?\031\225K?2\275&?&\215h?\034h\252>\311ac?\314Y\313>\017,u?+\353%>\354\010\013?\356\030~?\312\271\361<\317\227\352=\223\270\317>#\345v?g\177\014>\002q\362>*H\177?\235Q7<\205D5=\346>->a\357\017?K\010|?\306\375y=\313\273j>\325\3544?\272;T?\001#\021?Ti{?\2673\220=p\014\206>\332\347E?\312\2443?\265SV?\234\216\013?\275\351}?\037z\004=<1\000>\326I\340>`\022|?f\214w=b\226h>(\3023?D$V?u\016\014?\221\272}?\233\021\020=^\000\013>\nD\360>o\010\177?y\241v<\016\353r=\372\202d>\226\2041?\350\257Y?\340P\002?\214\352\177?7\223\253:\270Y\253;Vt\252<`\350\246=\032N\231>\301\315V?sD\n?SZ~?7{\321<\343\037\314=\210\307\267>0\240k?\233\005\226>\244 T?@j\021?\335B{?\271\325\224=\277\004\212>`\240I?\224L+?\276\264b?\367\210\317>%\323v?\271\212\r>d\364\363>\351n\177?\340\304\020<g}\017=\222v\n>\036{\357>\037\357~?0\337\207<F\236\205=\027\315y>\360\334<?\303\036F?\247,3?\267\024W?\251\203\t?\352\225~?\024\013\264<\027\026\260=K\362\240>\323\264\\?Fl\363>\321a\177?\361\314\035<\335G\034=bQ\026>\204@\000?\277\377\177?\203\022\2027\377\021\2028\356\017\2029\254\007\202:\246\346\201;\321b\201<W\257~=P\331n>\036#7?\222\177P?\026\300\032?\256\321t?\354\024+>\257\177\016?%\267|?[\204O=\346\000E>M\032\037?z\342p?\313\220c>D\3760?\247~Z?\317\n\000?\376\377\177?y\226\3514r\226\3515W\226\3516\355\225\3517B\224\3518\231\215\3519\367r\351:\206\010\351;E`\347<N\327\340=\036(\310>\207\321s?U\2419>\260\372\027?\373\003w?\304\264\n>\326\325\357>\264\372~?\270 \202<\216\017\200=8\033p>u\3167?\215VO?\337\245\035?\000Dr?\345\365O>\000\272%?\324\302i?\322t\242>\225\321]?s\360\354>\260\224~?\037\246\264<O\252\260=\373l\241>\264\017]?\263\\\361>\273)\177?E\221U<\231\310R=\276\357G>\027\346 ?\255\026o?9\265|>\347W>?8EC?\307J9?v\266L?\241\014$?\311\261k?5\217\225>f\276S?\360k\022?\223\262z?\354)\246=\237\256\230>jMV?\225\237\013?\227\343}?\023\375\005=\004\233\001><g\342>\t\224|?\211\020X=\312\252L>\241\302#?\320\004l?\205_\223>3\350Q?\364,\027?\221\233w?\006\340\001>G\316\342>\262\253|?\005NR=\304\201G>\004\243 ?][o?K\372x>\321p<?\260\353F?\ni1?|\332Y?n\331\001?R\362\177?\327\325Z:\023\247Z;R\354Y<H\006W=\217\274K>j3#?\233\243l?d,\217>)FN?\257D ?\007\273o?w\304s>\323\2749?{\351K?s\365%?\206|i?\357D\244>y!_?\0341\345>S1}?\373\2621=k\375)>F\305\r?{\t}?No;=\222\3332>\r\236\023?\242\374y?\260\346\273=U\251\252>U\215c?\020K\312>\225\273t?|W,>\021V\017?4S|?\223\322g=\270\263Z>\023\376+?\246\302a?TW\325>9\344x?\361\'\335=1F\305>G\207r?\3163L>\'{#?`Tl?\231E\221>H\033P?\300\273\033?o\373s?2B7>Ev\026?\326\035x?x\200\364=\323O\327>y\210y?\242\266\311=\230\330\265>2\205j?kk\235>\347\tZ?#T\001?\360\370\177?\343\360\3419\366\327\341:Wt\341;<\347\337<\227\310\331=\341\237\302>\rIq?\331\346]>\300\320-?\3113_?4\304\344>U\032}?\223Q7=7\035/>\372*\021?\016e{?\214\267\220=\254}\206>\212SF?\325\2702?\035\315W?\310\213\007?;\034\177?h\372b<k\325_=\023\232S>=\340\'?\244\'g?\240x\263>W\037i?4\252\246><\323`?\'\007\333>\021\251z?\201M\247=\272\242\231>\212\021W?K\214\t?W\223~?\220P\265<8M\261=\274\363\241>\375r]?\002\032\357>r\342~?\357\'\216<l\260\213=K)\202>\237$B?d\244;?BkH?\370\r.?\351\333^?\"\316\346>9\205}?A(\035=\233 \027>\274\322\000?J\375\177?\226w-9>p-:\335R-;\204\335,<\233\n+=(\346#>o\252\t?K\212~?\265\311\271<\014\223\265=\343y\245>m\375_?o\017\340>\333\003|?\377\020{=Z\255k>lo5?\264bS?e[\023?9%z?\001\020\267=\005\263\246>b\331`?\356\341\332>K\236z?\313\227\250=\331\266\232>2\355W?\2613\007?\2100\177??\320N<\3603L=\303\005B>\224B\035?e\237r?o\332J>\023\253\"?s8m?\0177\213>H\271J?q\301(?\352\013f?\005\224\272>\235,m?\324\207\213>\340\002K?C\025(?e\345f?/#\265>\231\033j?\026)\240>\312\036\\?\333\316\366>\202\253\177?G\304\250;\302\345\247<\326t\244=\031@\227>\204#U?\225\275\016?\335\232|?\373fV=\366-K>{\335\"?\257\001m?\211\254\214>\347\013L?\270\243%?\020\335i?N\307\241>QR]?\267\330\357>\021\373~?\237\362\201<\327\305\177=\033\315o>\364\2447?\324\236O?[\362\034?[\350r?\310\303F>\354. ?\361\320o?A\222r>\013\0349?\000\nM?\357C#?j\221l?\340\247\217>\305\262N?K:\037?R\303p?6He>\245\3611?k\006Y?%*\004?\240\272\177?\031\233\212;\002\005\212<\267\261\207=3h}>k\262>?_\224B?\244\274:?\353\027J?\2508*?q%d?\320\225\306>\212\037s?\\\252C>\035G\036?\005\255q?\304\\X>\231\245*?\373\224c?y\033\312>\224\247t?A{->M\027\020?Q\364{?9\324~=\234\371n>X47?\337aP?\276\n\033?\356\222t?<\250.>\364\335\020?\004\216{?!\307\213=\346<\202>\3437B?\212|;?o\265H?\304e-?C\314_?\0316\341>\017L|?\320\216i=|=\\>\r\337,?E\212`?\016\300\334>t%{?\247_\230=o\t\215>z_L?\260\334$?\301\304j?\313\303\233>\350\300X?<\353\004?8\237\177?\347F\301;\020#\300<k\241\273=\304p\252>\222gc?\3335\313>A\035u?\361\303&>E\233\013?(\345}?\203\232\005=\345>\001>\220\335\341>\351s|?h\340_=\334\243S>\373\345\'?| g?\301\246\263>\343:i?\037\365\245>YT`?\t\005\336>V}{?4\312\215=(\371\203>_\351C?\016\3607?\343\033O?\0337\036?\'\274q?\256\205W>:)*?\3129d?k\026\306>\'\346r?l\343F>GB ?u\275o?\211\242s>\013\2539?\213\tL?T\251%?w\326i?\363\362\241>jr]?a\035\357>\343\342~?\202\357\215<\364y\213=?\372\201>V\366A?\356\003<?\242\270G?D\240/?\013\217\\?\000G\364>\224v\177?\367!\t<!\374\007=cx\003>\217.\345>\3120}?o\3241=\370\033*>\256\331\r?\255\000}?\305\225==^\3174>M\342\024?p/y?\356C\324=\333C\276>\353\036o?\307B|>\345\035>?\007\266C?\333\\8?\371\\N?\331\014 ?%\363o?\366\263p>{\0378?\331\310N?\371\003\037?\'\370p?\327^b>\361S0?\250\201[?\211T\372>\332\337\177?\341\205\000;[E\000<\213\210\376<\361\237\366=\370\354\330>2\tz?zg\272=)p\251>\013\273b?\030b\317>h\304v?\234e\016>\3070\365>(\213\177?\277E\351;\237\234\347<>\020\341=\215T\310>\342\344s?\013\2118>\271G\027?#\210w?t\002\003>\'\177\344>\221\013}?\336\354:=\re2>\342P\023?\224+z?\366M\266=\230\023\246>\305i`?\003\204\335>\325Z{?\353\362\221=I\214\207>PSG?\273\2020?\335:[?\313\350\373>D\357\177?i\325\205:m\262\205;\307&\205<\275\374\202=\0178u>\371~:?\341\210J?R2)?_{e?^+\276>U\022o?\217\361|>rv>?\251\tC?\306\3079?\271\325K?N$&?\317Di?\334\263\245>`&`?\220\031\337>\225\305{?Y\021\205=\360\327x>*_<?\003\rG?\037\0371?JLZ?\025\231\000?\222\376\177?&\022\2678\017\016\2679\262\375\266:K\274\266;k\267\265<\204\257\261=\376D\242>\230\256]?t\275\355>\223\262~?X\335\245<\237\201\242=\225\234\225>\205\311S?\325N\022?G\303z?d)\244=\302\000\227>\237\357T?~G\017?-Z|?\030!f=!3Y>3!+?S\357b?(\037\316>(Hv?p\226\025>\245x\377>\270\377\177?\202\"\2177\342!\2178a\037\2179a\025\217:d\355\216;\314M\216<\371\324\213=\332H\202>\242CB?;d;?\226\342H?\013\377,?X]`?\340\316\335>\352n{?^\207\217=Nx\205>bZE?\234\3304?%]T?\366\312\020?\001\230{?\221\222\212=F2\201>\3270A?\245\230=?\231\267D?\31576?\246\021R?\302\302\026?\312\347w?\014\326\372=4\035\334>3\370z?\322\317\235=\300\246\221>.oP?M\351\032?\037\257t?A\r->\206\316\017?\227\030|?\353\nv=[Cg>\263\0103?!NW?7\347\010?\357\302~?!\304\235<O\272\232=\271\t\217>\225\'N?k\217 ?Soo?W\344w>\274\341;?\261\370G?r\020/?\324c]?\207r\357>\003\356~?\rl\210<u&\206=\331\271z>\370U=?\2547E?\306#5?\255\340S?+\022\022?\303\345z?\206\006\240=\201\205\223>k\010R?n\332\026?\353\326w?\240\317\374=s\232\335>\336`{?\2748\221=\222\354\206>\240\274F?5\3211?\3728Y?U\235\003?\275\313\177?*\340P;\2755P<_\220M=W?C>\363\004\036?\\\353q?\r\346T>\230\242(?%3f?\244\231\271>\335\243l?\250*\217>\241DN?mH ?A\267o?.\371s>n\3309?\240\267K?\221k&?\217\357h?\340\343\247>\247\254a?\252\335\325>\267\020y?6\346\327=\247#\301>\207\220p?\204\023h>\254z3?\223\227V?=\327\n?\351)~?\357[\351<,\266\342=g\235\311>Art?\034\2040>\241\026\022?=\343z?\373S\240=\330\306\223>\272?R?uL\026?\024;x?\346\021\361=\220\261\324>\216\254x?\312\270\343=\243f\312>$\307t?\316\256+>\017\346\016?\037\210|?z\366Z=\356AO>\002O%?D@j?\2755\237>\256g[?\001\351\372>\030\346\177?-+\317:Z\327\316;\033\211\315<\364`\310=\000\306\264>\367\344i?\006\223\241>\312+]??\271\360>\242\026\177?w\211h<\221<e=;hX>7\254*?(\214c?cR\312>\247\276t?\245*,>P8\017?ia|?I_d=\253\243W>\227:*?\344\"d?\306\245\306>\262&s?^CC>q\007\036?\005\351q?W\007U>\t\266(?n\032f?j7\272>B\372l?\036\337\214>q9L?`7%?\311[j?\347~\236>\352\334Z?e\377\375>\376\373\177?bK\2009XC\200:7#\200;\340E\177<\257K{=\327\340k>3\2135?E4S?C\324\023?8\333y?!\341\277=\353\346\255>\354\253e?$\367\274>\\rn?,\314\202>Y\304B?\257X:?\310\316J?5\217(?\275Kf?z\374\270>\014Ml?9w\221>,FP?FP\033?\340Wt?\346\0032>\213\021\023?\220Qz?\n\305\261=\310V\242>\235\273]?2q\355>\233\247~?\254J\253<\305\265\247=\360\371\231>+WW?\214\316\010?\302\311~?\312b\232<\362y\227=\317E\214>1\257K?\206\177&?\223\327h?\033\201\250>\201\030b?\325I\323>\3400x?\242D\362=\350\233\325>\001\373x?$w\332=@)\303>\242\212q?$EZ>\257\276+?\215\031b?mC\323>\243.x?\340\207\362=;\317\325>\366\013y?\034v\330=+\225\301>\024\310p?\037\005e>\224\3141?/@Y?>\211\003?\374\315\177?;\351G;\036MG<z\340D=\362i;>\365\034\031?S%v?\035\231\027>\236\'\001?\253\372\177?{\253\2529B\235\252:hd\252;\225\201\251<\262\377\245=?\213\230>\3270V?\231\354\013?A\307}?\344\363\014=*\032\010>l\006\354>\001q~?\267H\306<\022|\301=\2104\257>3\200f?\267\254\267>\014\221k?pk\226>\313tT?\225\214\020?\201\270{?\350\245\206=J\227{>\311\306=?\250^D?O\3666?\246\314P?\322\375\031?\305qu?\366\354!>\374Q\010?\030\353~?B\336\211<E\214\207=:\'}>\226\221>?\241\324B?\2616:?\261\014K?>\376\'?3\002g?\332i\264>\255\256i?\364\371\242>\2332^?`\266\352>\327:~?\235\003\341<b\325\332=_s\303>\307\255q?\005RX>d\237*??\235c?\003\350\311>\337\221t?\252\267.>\036\350\020?\247\210{?\321l\214=\352\313\202>\030\304B?5Y:?\323\315J?q\221(?\350Hf?\224\016\271>\025Wl?D3\221>k\013P?t\343\033?\356\330s?%69>Q\266\027?\3566w?.\276\007>L\177\353>\243[~?O\325\320<t\202\313=oI\267>\314Xk?3\345\227>7\252U?\032V\r?\2228}?W\355/=\362^(>\302\257\014?5|}?\017^\037=\257*\031>\254A\002?\242\353\177?F\344\242:s\260\242;\253\341\241<\276\256\236=9c\222>\037\021Q?\246P\031?\231\374u?2\362\031>Y\315\002?\230\340\177?\205$\373:T\251\372;v\276\370<\3510\361=E\311\324>\222\264x?\005\307\342=\205\252\311>\324wt?\00330>w\341\021?\036\001{?\231\275\234=\245\276\220>C\246O?\334\337\034?\021\371r?\253\323E>\316\233\037?\225cp?k\213j>\240\3224?\007gT?\350\260\020?\243\245{?L\355\210=X\213\177>\237\305??\215t@?\021\026??\207\320A?\307Q<?C&G?\005\3470?7\242Z?UL\377>\202\377\177?\3321\3747\351/\3748&(\3749\032\t\374:\t\215\373;\255\236\371<}\003\362=*j\325>~\352x?bj\334=\201\261\304>\272Br?\025\010P>\315\304%?\026\266i?\002\311\242>\000\017^?\331\207\353>\002]~?W(\320<J\336\312=\330\305\266>\310\rk?\320\333\231>%?W?\026\020\t?v\267~?Zr\243<\204/\240=\026\250\223>\264%R?K\217\026?;\014x?\370\220\366=\233\341\330>\271\005z?c\321\272=\305\306\251>\200\365b?\367\370\315>@9v?\276r\026>\024X\000?\207\377\177?)k\3627]i\36281b\3629\201E\362:\336\322\361;\000\n\360<j\001\351=\370~\316>Zmv?(p\023>Pk\374>.\363\177?p\035M:Z\364L;DPL<\004\304I=\255\323?>J\344\033?3\330s?\273@9>\023\275\027?\3541w?\324\010\010>\370\354\353>\005m~?0@\310<\r[\303=\222\270\260>\326rg?!\223\261>z\371g?i*\256>$\327e?G\344\273>C\341m?9\263\206>T\206F?\rI2?\210}X?\324\245\005?i\200\177?d\256\376;\247\263\374<\026\350\364=\256\236\327>q\241y?\237\277\306=\000v\263>\305\035i?\205\264\246>n\332`?\232\333\332>u\234z?\025\320\250=\334\345\232>]\022X?{\315\006?\345F\177?\350\2248<\217\2006=\336^.>\230\255\020?]\247{?\340\267\210=\307.\177>9\227??\343\320@?\221[>?\024>C?\312Y9?\222\233L?\014M$?\366hk?\273x\227>\321QU?EB\016?\275\322|?\304\312H=\355\362>>\216W\033?\251Qt?P^2>}L\023?:.z?\t\375\265=\020\321\245>\367:`?\314\235\336>\211\245{?l\360\210=\304\220\177>V\310??$o@?\367 ??\n\273A?\362}<?\343\322F?\371\2371?{\205Y?\254\307\002?\026\341\177?\327/\367:\200\270\366;\362\334\364<B\213\355=\336\375\321><\273w?Y\006\000>\206\t\340>a\002|?yl{=\233\375k>\265\2325?N\032S?\274\027\024?\"\261y?n\342\304=\376\364\261>J5h?C\245\254>\n\334d?\333\032\302>\377\010q?\344pa>\373\316/?bI\\?f\331\365>\366\230\177?\261\300\315;\365u\314<\223[\307=\243\363\263>\250hi?\332\307\244>\t\177_?\304\003\343>\332\267|?\033XO=!\331D>\324\001\037?:\372p?\210Ab>\227C0?V\232[?N\307\371>K\331\177?$\274\032;\235^\032<E\352\030=\3254\023>\316\026\374>\264\360\177?\355\252t:wpt;\021\207s<j\350o=-\333a>m\n0?[\360[?\357\331\367>\231\275\177?\005\253\204;\203!\204<\357\377\201=\342~s>Z\2309?5+L?EY%?L4j?1\205\237>\252\243[?\344\221\371>\247\326\177?\tH%;S\335$<\2424#=\341\263\034>\363\270\004?\313\246\177?\201+\262;\2003\261<>^\255=.\261\236>,\003[?\363%\375>\336\367\177?\301\032\002:9\n\002;+\310\001<\376\300\000=\312i\371=\353\t\333>\335\251z?\0065\247=?\216\231>\'\001W?\335\270\t?\354\205~?\346\362\273<\000\243\267=\262+\247>Z-a?\314\344\330>\263\006z?\241\263\272=p\256\251>\031\345b?\\^\316>\271`v?\013+\024>0u\375>\211\371\177?n\313\3169\215\266\316:\030c\316;Q\026\315<\353\363\307=Gn\264>J\261i?\261\350\242>\017&^?=\000\353>\nG~?3\377\332<v$\325=\300\365\276>\313yo?\200Rw>l\226;?G\205H?\014\323-?\1770_?\302\327\344>}\036}?\257M6=\2060.>\006\217\020?=\267{?\001\315\206=2\333{>N\351=?\360\033D?\225\2047?\r\327O?Ff\034?\340es?\n\265?> \321\033?\341\350s?\034O8>\250\"\027?\004\243w?\241p\001>\351\'\342>T\205|?:\244[=\024\335O>C\253%?1\324i?\002\002\242>z}]?\300\334\356>M\332~?+1\222<J\225\217=F\204\205>\327eE?\306\2774?\037\206T?\325^\020?\t\320{?\314\315\203=\207\244v>_<;?w,I?rV,?\257Ha?\265>\330>\211\323y?.\313\300=\001\245\256>J%f?\032\362\271>e\324l?\322\340\215>7 M?k\016#?8\314l?o\030\216>\301QM?\340\226\"?NNm?\312\241\212>\3000J?\036\377)?)qd?2\273\304>7Gr?\372\307O>\271\236%?\360\342i?p\240\241>\2575]?\236\177\360>\264\017\177?^jo<\277\352k=2T^>\251\016.?\351\332^?\r\324\346>c\206}?3\337\034=&\335\026>,\243\000?`\376\177?R\001\3208\n\374\3179\353\346\317:\177\222\317;\343A\316<r\020\311=\027S\265>\2257j?fo\237>;\223[?\372\357\371>?\333\177?\377\357\022;\251\233\022<\321K\021=a$\014>\333\354\361>\3479\177?2\200E<\270\036C=;\3239>|\032\030?\030\354v?\007\030\014>\351\332\361>\3547\177?\212wG<\335\tE=Z\217;>\2534\031?\257\022v?R\254\030>\r\351\001?g\361\177?E\203i:\005Ni;fyh<\365,e=^ZX>6\244*?\324\226c?\374\017\312>\275\242t?\316\301->\355E\020?\275\334{?\200D\202=\227\366s>\023\3279?\024\272K?\305e&?\205\366h?7\266\247>0\215a?\234\235\326>VOy?\002}\320=\226C\273>]\213m?7\000\211>3\257H?\355s-?)\270_?g\256\341>\306h|?P\225b=\220\014V>PN)?JWe?\016\020\277>&\207o?V\230v>\0166;?(8I?\263;,?\262ma?\177]\327>\321\214y?\2542\311=\230n\265>\235Gj?\354\004\237>\273B[?\355\273\373>\315\355\177?\032\213\221:\272a\221;\233\274\220<\365-\216=\024O\204>\203<D?0?7?(OP?\2729\033?\027kt?i\3540>\356Z\022?Y\274z?\032\376\244=I\263\227>\224\201U?\311\302\r?\216\n}?O,;=\263\2362>nv\023?\324\024z?\223\004\271=\240M\250>F\365a?\256!\324>\217{x?\303}\351=\375\336\316>Y\222v?(L\021>\242\\\371>\357\323\177?Y$0;\'\253/<\371\310-=ei&>/^\013?\025\373}?\2715\000=\272d\370=PD\332>5pz?|\033\256=PN\237>Az[?\335~\372>\264\341\177?CG\362:\236\324\361;\272\013\360<\n\003\351=9\200\316>\326mv?\371h\023>\025a\374>\344\362\177?\334\267Q:\351\214Q;a\341P<\2457N=\314\325C>\362a\036?\227\223q?\366\305Y>\251u+?\r}b?(\340\320>KSw?Y\027\006>x\020\351>\365\361}?\241t\002=\355\231\374=\000r\335>\371U{?\261\210\222=\253\014\210>\337\313G?\037u/?%\317\\?\261\323\362>xR\177?\r\022-<\007>+=I\025$>w\312\t?\216\200~?\316\231\276<\211*\272=N>\251>J\231b?<2\320>\315\022w?F\330\t>\363\223\356>y\320~?\275\017\227<\241F\224=i\212\211>c/I?\304O,?\357Qa?s\006\330>\004\302y?\255\340\302=\204U\260>V5g?N \263>k\352h?\224\005\250>\326\303a?\021P\325>\315\341x?\037q\335=\217\177\305>\214\241r?\222\273J>o\230\"?\237Lm?L\255\212>M;J?\247\346)?;\221d?\275\361\303>P\351q?1\003U>\235\263(?\203\035f?\277#\272>\207\357l?-(\215>\022{L?\310\232$?h\020k??\312\231>\0371W?N6\t?\214\254~?\364\330\250<\010^\245=\275\003\230>\t\303U?\235\023\r?\002T}?\2146)=\3738\">\360\205\010?l\335~?D\245\220<q\027\216=\261;\204>\305)D?!g7?\030\nP?\302\346\033?\r\326s?\334_9>\360\320\027?*#w?\251\344\010>q/\355>\002\236~?<\n\260<\313A\254=\274\304\235>\222NZ?\245\222\000?\260\376\177?\324\377\2478b\374\2479\233\356\247:\206\267\247;\304\333\246<\266u\243=\323i\226>wsT?\030\220\020?\260\266{?\026\336\206=\335\370{>`\370=?\305\376C?\235\3027?2kO?\250r\035?Jsr?\337QM>\320&$?>\224k?\363U\226>\020cT?\\\273\020?.\240{?\374\225\211=\300W\200>\242W@?EP??\224]A?b==?\302fE?\311\2754?g\211T?+V\020?v\324{?\277D\203=\243\265u>X\300:?\036\021J?fH*?\250\020d?\340\027\307>\237Ys?\267e@>\210?\034?*\210s?\"\306=>\230\232\032?\357\360t?ML)>\330N\r?\227;}? 0/=\363\261\'>\211;\014?u\251}?\332D\024=\337\346\016>G\353\365>`\232\177?\240\357\312;\342\255\311<\316\266\304=\300\321\261>\311\037h?H1\255>\3536e?\367\334\277>w\356o?p\365p>)B8?\364\213N?\252\231\037?\262ep?\272mj>\210\3024?\224\201T?\326j\020?\342\311{?\'\214\204=\030\360w>\314\347;?X\355G?\365)/?E>]?\225M\360>\233\t\177?\312wu<P\312q=h\204c>c\3670?0\211Z?\006\332\377>\372\377\177?9C\2645)C\2646\352B\2647\354A\2648\365=\2649\030.\264:\257\356\263;\300\361\262<\027\t\257=j\023\240>\216\016\\?J,\367>\026\262\177?y\245\233;5\350\232<T\372\227=+\263\214>\342\021L?\203\225%?\304\355i?\304X\241>\303\000]?\222\263\361>\2153\177?\206\317K<{FI=\177b?>w\235\033?\240\025t?S\3065>\320\201\025?\310\305x?z\277\340=\205\025\310>i\311s?\332\026:>\214E\030?\213\313v?\234\373\r>\247\227\364>\336}\177?\376\337\001<p\330\000=\274\225\371=(+\333>r\263z?,\017\246=6\230\230>Q;V?_\320\013?\271\321}?[a\n=\212\264\005>\210~\350>{\327}?$\367\010=\253b\004>c\212\346>\321w}?^q =\200(\032>P\363\002?.\335\177?\0225\013;_\351\n<\335\273\t=3\032\005>I\232\347>\305\254}?\264t\023=\300%\016>\215\324\364>=\203\177?\361\014\371;](\367<f\263\357=W\245\323>\266Px?\203\207\356={\277\322>A\000x?a\370\367=9\362\331>\350Wz?\r\003\261=f\266\241>\336E]?N!\360>%\004\177?\303\342z<E\013w=\331$h>%\2043?T\210V?|\000\013?\325\033~?\202K\360<\025?\351=\230\256\316>\274\177v?\350_\022>\014\347\372>\004\346\177?\251\312\317:Tv\317;\023&\316<\010\366\310=\335=\265>1+j?\243\301\237>+\321[?\002\215\370>\202\310\177?\026\306];\366\005]<\251\nZ=GoN>u\321$?\257\321j?}m\233>6}X?\270\246\005?A\200\177?\211\376\376;\215\002\375<\0342\365=\376\326\327>)\263y?\303\244\304=,\303\261>\341\026h?<k\255>\\\\e?\362\357\276>\330vo?\235{w>\254\253;?\257]H?\255,.?\250\257^?@\324\347>\305\267}?\207\301\020=\342\243\013>\0242\361>\325$\177?\312oZ<@\206W=\024/L>Px#?\207Wl?D0\221>\322\010P?\363\351\033?D\323s?*\2109>\244\352\027?\376\017w?\025\002\n>\013\321\356>\273\330~?P\370\222<OU\220=L)\206>V\003F?\264h3?w\264V?\005\211\n?\tD~?mz\334<W\213\326=\257\021\300>\326\010p?B\204o>4~7?\036\342O?\247J\034?V~s?\001T>>\315\363\032?H\246t?\'\216->\313#\020?\006\356{?\020-\200=\331Np>\335\3517?\265&O?Z\034\036?_\325q?\007\037V>\016Y)?jIe?\351g\277>\232\263o?\',t>\033\3639?]\207K?\237\335&?\323eh?\337h\253>y\014d?\0052\307><es?<\276?>\341\326\033?\340\343s?\230\2278>\007Q\027?\\\201w?\254g\003>\267\025\345>\223+}?\326\0323=\355E+>N\240\016?M\250|?\314!S=\300?H>\325\026!?l\344n?sn\177>%\267??c\221@?\360\333>?\354BB?\263e;?\334\337H?A\005-?\234T`?z\003\336>\354|{?\374\326\215=+\004\204>\n\364C?i\3317?qCO?:\325\035?\375\027r?\003jR>}-\'?p\004h?*\343\255>\204\251e?o\006\275>^zn?\346\224\202><\216B?i\311:?y\000J?\351n*?\256\335c?[V\310>\253\345s?\253}8>r@\027?m\215w?e\263\002>r\t\344>\020\362|?\310&A=\020\0138>\026\367\026?g\302w?\0346\377=\201h\337>\307\331{??\240\202=\264\226t>\314*:?Q\"K?\200\313\'?vAg?\026\322\262>Y\273h?\3669\251>X\226b?aD\320>\222\031w?zs\t>\215\000\356>\024\274~?%)\241<\177\375\235=b\315\221>v\220P?\223\225\032?\033\365t?P\017)>\002&\r?yL}?\317\016+=\002\352#>\r\255\t?\200\211~?\340-\272<\253\362\265=\211\310\245>\3654`?\355\301\336>\360\256{?\270\315\207=\310\230}>\362\312>?GdB?\221 ;?\345_I?\257\340+?\000\353a?\222`\324>\016\221x? \366\346=:\352\314>Q\316u?6\234\034>\206\250\004?4\251\177? ^\255;Ps\254<\366\321\250=o\347\232>\233\023X?\020\312\006?\237G\177?4\3347<\002\3145=`\272->\005A\020?<\337{?B\367\201=\275os>h\2209?\2009L?<7%?\363[j?\316}\236>\024\334Z?(\004\376>\021\374\177?>\330{9\301\310{:\331\212{;\257\223z<\234\276v=n\341g>G_3?\231\303V?\000`\n?pQ~?\343\335\325<\213H\320=\314\031\273>\345tm?\372\231\211>\312=I?\320.,?\200\177a?\n\361\326>4jy?\323M\315=\033\271\270>\232\'l?\203t\222>\353\037Q?$+\031?/\032v?\245=\030>T\233\001?\254\365\177?M3%:\246\030%;-\256$<o\006#=\\\211\034>o\233\004?\031\253\177?}\226\251;\315\265\250<T<\245=y\347\227>\020\254U?&Q\r?\242:}?.l/=\335\350\'>t`\014?C\233}?\213\300\027=?!\022>\207\215\372>T\342\177?\356C\355:\372\325\354;\304\037\353<)`\344=\274\350\312>\\\375t?\245\226(> \325\014?Nm}?\303\004#=\322\207\034>^\232\004?@\253\177?\365G\251;\025h\250<\317\361\244=\370\250\227>,yU?=\331\r?\336\000}?\341\211==\223\3044>R\333\024?\3753y?\000\272\323={\326\275>\221\346n?\276P\177>A\250??\006\257@?\026\240>?E\270B?\336q:?\322\240J?\205\372(?\005\303e?Md\274>\"%n?\214\340\204>\303\310D?\354\0226?\014PR?~\"\026?7Xx?\277\245\355=5\022\322>\212\302w?\0002\377=ke\337>\375\330{?\223\270\202=\'\301t>\366@:?\000\372J?\017*(?Q\313f?\317\312\265>5}j?\232\240\235>\3222Z?\351\340\000?\352\374\177?c\225E9\334\213E:\277eE;\212\315D<\\pB=t59>\341\265\027?A7w?T\271\007>*x\353>~Z~?\300e\321<\206\013\314=:\267\267>\374\226k?\202C\226>\326ST?\200\343\020?\027\213{?~!\214=\351\212\202>r\204B?\303\335:?\016\333I?Z\305*?\231jc?\013#\313>~\025u?\2245\'>\330\347\013?\006\311}?\223\204\014=~\262\007>\036n\353>\342X~?\2231\322<\350\314\314=\002R\270>\007\356k?I\371\223>UjR?\325\336\025?\275\206x?\006-\350=\322\332\315>u-v?\006!\027>\010\323\000?H\375\177?P\364-9\355\354-:b\317-;aY-<\331\203+=BU$>\354\365\t?%s~?\020:\305<}z\300=~c\256>\226\373e?#\374\272>\353dm?C\007\212>\261\242I?>G+?\365\273b?q\\\317>B\302v?\177\205\016>\317^\365>\003\217\177?\362\226\341;]\t\340<\332\350\331=G\271\302>8Uq?}:]>\373n-?/\277_?c\204\341>\314^|?\351\001e=\"4X>!\216*?9\264c?\350X\311>\025Ut?\217,2>\017,\023?\271Az?f\251\263=\233\346\243>\275\335^?J\303\346>\026\203}?[\256\035=f\234\027>\356)\001?\225\372\177?\251Y\2559\375J\255:V\020\255;X&\254<;\210\250=\330\251\232>\350\342W?\365O\007?\036*\177?\337.U<\303hR=\302\231G>\250\261 ?kLo?I\312y>\201\333<?~!F?\253&3?H\036W?\236i\t?\235\235~?\014<\260<wq\254=b\354\235>\371lZ?\311<\000?\306\377\177?\256\360f7\336\357f8\235\354f9\230\337f:\212\253f;\261\333e<&\242b=\373\027V>\365T)?\266Ne?bF\277>\253\242o?\213\030u>\214n:?\343\246J?`\354(? \325e?\035\361\273>\027\350m?S\204\206>\333YF?\363\2522?\034\343W?fO\007??*\177?Q\016U<\016IR=O}G>K\240 ?#^o?\254\323x>\371\\<?&\021G?\357\0251?bZZ?Mq\000?7\377\177?6\222H8\301\217H9\357\205H:\253^H;\327\301G<[RE=\335\320;>*^\031?\345\361u?\005\220\032>\237;\003?2\326\177?\210\036\';o\261&<E\377$=\304Y\036>\t\335\005?{v\177?\324:\t<\224\024\010=6\217\003>|P\345>\3417}?\222\0300=u\206(>E\312\014?\247q}?(\364!=\330\214\033>\341\353\003?~\302\177?\301\316u;\274\342t<\2709q=\334\004c>u\2600?k\365Z?.t\375>\204\371\177?Xo\3179UZ\317:\\\006\317;\205\267\315<\n\215\310=t\351\264>\310\371i?1\t\241>\322\305\\?\300\t\363>\375W\177?\223\224\'<\307\335%=L&\037>&j\006?i[\177?g-$<?\210\"=3\025\034>\275J\004?Q\266\177?j3\223;\"\212\222<\023\353\217=\004\316\205>R\254E?\237&4?&\201U?\357\303\r?\017\n}?3K;=\304\2722>\264\210\023?\261\tz?WX\272=\307c\251>\252\262b?\306\225\317>\376\327v?\265B\r>#\214\363>\357d\177?4\263\032<D=\031=\237\201\023>/\204\374>\335\363\177?P#B:\202\376A;\200kA<\363\"?=\24076>\327\312\025?`\224x?\010\222\346=\260\234\314>H\257u?\006e\036>\317\344\005?\016u\177?\364\246\n<\222z\t=K\335\004>\034@\347>u\233}?<\264\027=\332\025\022>=}\372>\242\341\177?\230\326\362:kc\362;k\230\360<z\207\351=}\346\316>9\225v?\200!\021>\205\037\371>\265\320\177?\216\007=;\372{<<\341P:=G\3271>n\364\022?\335bz?\353\263\257=\374\240\240>Xx\\?C\312\364>V\202\177?\247\327\372;\023\354\370<\301[\361=\005\352\324>\234\277x?\320y\341=\345\246\310>\227\010t?i\2036>\242\373\025?\001sx?x\177\352=\317\245\317>\016\336v?\252\350\014>\255\t\363>\373W\177?\205\226\'<\256\337%=\014(\037>[k\006?+[\177?\002k$<\235\304\"=\306L\034>\\q\004?\014\261\177?\345\267\235;\217\365\234<\255\363\231=\010a\216>F\222M?\271\372!?\233\365m?t\'\206>\224\001F?\214l3?I\256V?\302\231\n?\202>~?i4\337<\206\037\331=\267\032\302>\356\010q?\331qa>\205\317/?\225H\\?\005\336\365>T\231\177?\316\005\315;j\275\313<:\254\306=_f\263>l\024i?\357\361\246>7\005a?`\330\331>6Pz?`\356\261=\360x\242>\227\324]?\316\336\354>\016\222~?V\363\265<\306\350\261=Ot\242>5\321]?\242\362\354>\003\225~?\371|\264<\371\202\260=nL\241>\243\367\\?\233\350\361>o9\177?\'\367E<\316\222C=><:>X]\030?v\271v?\017\010\017>\036\033\366>\033\236\177?-~\303;\232S\302<\204\267\275=t$\254>\347\207d?Z,\304>\303\004r?+|S>\260\316\'?~=g?\260\353\262>\306\312h?\362\324\250>\265Qb?\271\352\321>Y\264w?im\000>\006\244\340>\230(|?w)r=P\330c>\373%1?\301AZ?\315\266\000?\366\375\177?d\206\0029;\202\002:\231q\002;!/\002<R&\001=\257\'\372=~\231\333>\002\323z?|F\242=\323j\225> \240S?\034\273\022?\235\204z?\264\252\253=\004G\235>\332\355Y?\007\243\001?I\365\177?\247p+:\363S+;J\341*<\n\031)=\351\035\">qs\010?S\342~?\3436\216<\334\276\213=\3025\202>\3370B?\016\213;?p\232H?\020\243-?\022u_?;?\343>D\305|?\227\023L=\243\350A>}0\035?\352\257r?\254\355I>\347\033\"?O\322m?\341\031\207>t\347F?lr1?\376\313Y?\034\002\002?\336\357\177?\243\006\201:\037\346\200;Qd\200<[\302|=g)m>\373;6?\220\nR?\356\324\026?\330\332w?\006Z\374=\333A\335>\361H{?x\032\224=\244d\211>i\014I?\256\237,?\342\342`?j\250\332>\221\215z?y\230\252=\236b\234>\345<Y?h\222\003?\367\314\177?\021\372K;\212WK<z\321H=\373\370>>Y[\033?jNt?x\2152>6k\023?\244\033z?\2154\270=\032\243\247>\000\200a?\376\355\326>:iy?}k\315=\323\320\270>\3144l?G\033\222>n\323P?\263\354\031?\250\177u?\005!!>b\306\007?4\016\177?\006\350p<7]m=\333\233_>\241\307.?\231\316]?\357\001\355>I\227~?%]\263<\312o\257=\211h\240><N\\?g\275\365>\273\226\177?\0144\322;\331\332\320<\266\207\313=\246M\267>1[k?%\325\227>\'\235U?\017y\r?\355)}?\375\2013=\r\244+>\350\336\016?r\213|?d\'Z=\362\210N>\306\340$?\014\300j?3\343\233>|\331X?\007\247\004?k\251\177?\342\356\254;>\005\254<\206h\250=Z\217\232>\354\315W?\220\211\007?\301\034\177?\207ub<8T_=\372&S>\251\234\'?\223{g?\241Z\261>\317\326g?\210\013\257>Lff?\227R\270>Z\356k?\024\367\223>xhR?\241\343\025?u\203x?\335\217\350=;\'\316>MKv?\354g\025>\3076\377>b\377\177?~*\0368\367(\0369\333\"\036:p\n\036;\337\250\035<}$\034=\2650\026>m)\000?\345\377\177?\362\207\3266\230\207\32671\206\3268\222\200\3269\033j\326:P\020\326;R\252\324<\375$\317=c1\272>\370\366l?\201\365\214>\222ML?h\007%?o\223j?\227\014\235>\274\300Y?\261!\002?\323\355\177?\005\\\221:\3002\221;\013\216\220<\n\001\216=e(\204>\034\027D?\335\2167?6\305O?\303\222\034?E>s?\357\357A>\0055\035?\307\253r?\366(J>\313?\"?\370\253m?\331 \210>\307\336G?\257J/?\370\r]?\312f\361>\342*\177?,lT<\036\253Q=\221\357F>\264I ?\367\265o?\"\013t>\323\3419?\243\246K?\301\223&?6\277h?\255 \251>1\205b?\007\256\320>\314@w?\033+\007>\367\246\352>F8~?\213G\342<x\007\334=\335c\304>\251\036r?\343\nR>l\365&?\343Hh?\230%\254>\246\210d?\250\'\304>\221\002r?q\233S>\n\341\'?\244&g?\022\177\263>2#i?\342\220\246>\215\301`?\036r\333>\312\307z?\370\236\243=}\214\226>\013\220T?\240D\020?g\335{?\0000\202=\316\322s>V\3049?\355\333K?\232\025&?RVi?\234@\245>\336\324_?\220\002\341>\237?|?\225\223l=\216\351^>\024c.?\372`^?\036\245\351>A\014~?\316\367\367<Mv\360=\214:\324>\023\204x?K}\350=\340\030\316>\265Ev?\241\272\025>\337\253\377>\344\377\177?\262-\3356S-\3357\324+\3358\334%\3359\372\r\335:\212\256\334;\0212\333<\233T\325=\337\033\277>$\215o?\317Dv>\273\n;?5\210I?%\204+?^ib?GY\321>\251\177w?\025\201\003>{;\345>~3}?\034+1=R\201)>Rr\r?\303,}?\215\3202=\"\002+>,s\016?\316\274|?c#N=\224\303C>\262V\036?D\236q?b.Y>w\036+?\001\363b?d\010\316>G?v?\262\031\026>*\031\000?\366\377\177?\275P\0366\244P\0367BP\0368\273N\0369\234H\036:%0\036;f\316\035<JI\034=\264R\026>rA\000?\275\377\177?\235\332\2057\021\332\2058\341\327\2059!\317\205:)\254\205;\220 \205<\272\366\202=\222-u>\202y:?\336\222J?\016\033)?K\231e?ym\275>\036\260n?f!\201>\037 A?\262\272=?\375uD?m\3046?-\"Q?l%\031?\256\036v?C\373\027>\253l\001?\342\367\177?i\331\001:\362\310\001;&\207\001<\000\201\000=\330\361\370=)\257\332>\210\217z?4\\\252=b0\234>\303\025Y?r\377\003?\022\300\177?\033y\177;)z~<N\206z=\2453k>\256-5?7\320S?L=\022?K\315z?\006\366\242=}\376\225>\277\032T?\277y\021?k:{?\367\331\225=\t\343\212>\203lJ?Yt)?\032&e?NG\300>\223#p?\244\rn>M\2666?X:Q?\035\350\030?\240Nv?\3016\025>\036\361\376>\341\376\177?\031P\2178\227M\2179\220C\217:y\033\217;z{\216<\020\001\214=\353n\202>\377hB?\305\026;?\375qI?-\267+?\317#b?\202\004\323>\226\030x?-\036\365=\324\307\327>f\256y?\2325\305=)8\262>-^h?\310\232\253>k-d?\341c\306>\033\ts?\032\355D>\037\016\037?O\356p?\325\351b>i\2410?L\014[?\n\362\374>\253\366\177?\333B\025:\031-\025;,\326\024<\013|\023=\217,\016>d\336\364>\030\204\177?\307W\367;\322y\365<\277\036\356=\031o\322>\275\343w?|O\373=\335x\334>\305\021{?j\275\232=\\\014\217>\351)N?\276\211 ?\032uo?\340\223w>4\270;?NFH?\203a.?>c^?\275\227\351>\352\t~?\234\036\371<8\213\361=J\016\325>\314\313x?\312\t\340=\246\207\307> \213s?[\233=>\252\177\032?G\007u?\217\005(>\274s\014?\310\223}?O\226\031=\377\323\023>k\371\374>\330\366\177?ou\022:|`\022;\312\014\022<\200\277\020=\000\242\013>V/\361>\203$\177?z\300Z<\310\324W=WuL>\211\242#?\236(l?\245m\222>\n\032Q?\013:\031?s\016v?\326\352\030>\351\024\002?\253\356\177?\260\241\212:&|\212;R\346\211<\017\224\207=\2774}>l\230>?D\307B?\230R:?\342\331J?Au(?\230lf?D*\270>\277\327k?\203\217\224>\306\350R?5\230\024?u_y?\000\224\316=\257\275\271>\252\267l?#\244\216>\306\315M?Fj!?\267\215n??\017\202>\002\013B?K\331;?|\010H?\347\354.?\007\230]?\207A\356>&\305~?M\253\234<C\254\231=W$\216>Y\\M?F}\"?\361im?\350\344\211>\003\203I?\025\220+?\037Yb?)\275\321>\351\243w?Ac\001>\353\023\342>\252\200|?\307\306\\=c\340P>\tE&?\272\035i?\316\264\246>\241\332`?c\332\332>\033\234z?\335\332\250=\335\356\232>z\031X?\347\271\006?\tK\177?ww4<\226z2=\252\263*>\343>\016??\324|?\320lH=-\236>>b\"\033?\353~t?\304\313/>\266\235\021?\263&{?L9\230=\311\350\214>#BL?\252\"%?\331sj?\337\336\235>\236bZ?\013Z\000?\201\377\177?\350_\3757\363]\3758\035V\3759\3066\375:\213\271\374;\220\306\372<L\031\363=+>\326>W0y?\221(\324=*.\276>\305\023o?\224\335|>Ul>?d\035C?i\2369?L L?;s%?\365\025j?|N\240>\305:\\?\247-\366>\211\237\177?n\245\300;}\203\277<R\t\273=~\364\251>D\024c?\216:\315>G\356u?S\305\032>\323`\003?Z\322\177?ex6;U\3665<\374\3603=N\t,>.\"\017?\350k|?a\322a=)_U>J\351(?\021\331e?\001\330\273>\272\332m?\023\340\206>\316\260F?U\3531?E\020Y?\275\016\004?%\276\177?\030\224\203;\327\014\203<%\364\200=\007\253q>*\2428?\234\342M?\2267!?}\302n?J\242\200>\343\241@?\241\272>?H\204B?\033\336:?m\332I?\316\306*?\250hc?\031/\313>x\032u?\300\354&>\307\266\013?\"\333}?f\021\010=>\214\003>\022L\345>\3656}?4R0=\"\273(>\231\355\014?uc}?\\n%=\345\277\036>\211#\006?Ci\177?\267d\026<N\003\025=\200\227\017>\263\351\366>m\255\177?n\361\244;\341\034\244<9\323\240=\"2\224>C\232R?@c\025?D\332x?\302T\336=\3371\306>\217\362r?+1F>%\325\037?\276*p?%\251m>~\2006?*\226Q?\205\376\027?\034\001w?z\337\n>\033\024\360>\202\002\177?(\203|<\336\236x=\233\207i>\223E4?\246NU?\267J\016?\371\316|?\363\265I=\377\306?>\\\334\033?\033\337s?\261\3348>2}\027?\017aw?\355I\005>\350\340\347>(\272}?y+\020=j\030\013>\021g\360>\271\014\177?.`r<F\312n=z\336`>\364|/?\205\303\\?\030\027\363>VY\177? =&<S\215$=\375\360\035>\236\224\005?n\203\177?\206\252\370;p\307\366<QX\357=\220_\323>u8x?\270`\361=\320\355\324>\343\300x?DS\341=\325\210\310>\224\373s?\034@7>\356t\026?\307\036x?=d\364=U:\327>\242\201y?f\206\312=Z\177\266>a\345j?\364\351\232>\230\025X?\226\304\006?\310H\177?\275\2646<\'\2534=\025\263,>\315\222\017?\3375|?\023\361n=\301\000a>,\220/?\373\246\\?x\274\363>\231i\177?<\016\026<j\256\024=\310H\017>]x\366>/\245\177?(b\265;!a\264<[h\260=f6\241>T\347\\?UG\362>\271C\177?\"\274;<q\2259=\333,1>\030\205\022?\016\244z?3\347\247=D#\232>\026xW?\244t\010?\002\342~?\013_\216<\237\345\213=:W\202>\277QB?\376F;?\316\030I?a\203,?M\na?\214\271\331>\002Gz?\312\007\263=Ma\243>\215}^?u\374\350>]\356}?\314V\003=YA\376=\242\260\336>q\252{?\275X\210=\340\211~>gD??\014uA?j\r=?j\302E?|\3663?u\317U?Q\362\014?\214a}?\374\345%=\330-\037>Yo\006?^Z\177?P7%<\317\214#=\005\005\035>;\361\004?K\236\177?\231\036\303;*\365\301<\215]\275=$\333\253>\313Wd?]Z\305>\207\220r?e\257K>|+#?S\254l?3\361\216>\356\021N?G\304 ?_9o?,\323z>\344b=?\345\036E?TY5?\220\207S?C\373\022?\320^z?\335/\260=\241\007\241>\252\304\\?x\020\363>\253X\177?\200\347&<<4%=v\212\036>\251\376\005?@p\177?\354n\017<w-\016=\020>\t>b\262\355>\376\260~?\260\245\246<\326A\243=9>\226>xOT?\002\357\020?\003\205{?N\335\214=\364,\203>\337\"C?\353\2229?\3744L?\375A%?pOj?\366\320\236>R\033[?\210\234\374>\205\364\177?\373\2567:\010\2167;l\n7<\354\3764=u\377,>d\305\017?\030\035|?A\363t=7Mf>\202\2012?\237$X?5\233\006?nQ\177?J\033.<\246A,=!\003%>\337k\n?\224M~?*\305\327<D\026\322=3\211\274>\2328n?|Z\204>\210GD?\257\'7?\263wP?\340\323\032?\035\301t?\307\006,>\200 \017?\263l|?\003\241a=<3U>\251\317(?\313\371e?\221\007\273>\024km?\"\335\211>\327{I?\216\240+?\256Bb?\nG\322>t\325w?\207\373\374=\202\273\335>\274i{?.\'\220=\252\001\206>\226\335E?4\2733?\201/V?2\360\013?\351\305}?QH\r=\305h\010>\314y\354>\316\202~?5}\275<$\033\271=\035`\250>\360\001b?$\324\323>\345`x?\233\240\354=\212I\321>\354yw?\315\326\003>\324\272\345>\340M}?\307\266*=S\231#>,v\t?\351\231~?\325\020\262<\3721\256=\373`\237>Y\210[??.\372>#\336\177?\271c\007;\036\034\007<\344\376\005=\266\234\001>\305i\342>\236\224|?\023\354W=-\212L>\014\257#?\254\032l?\341\313\222>\223jQ?\212m\030?\035\255v?H\277\017>\357\"\367>p\261\177?\276\357\234;T/\234<\0065\231=\371\276\215>\005\002M?$W#?:|l?\2267\220>\2270O?\347\003\036?W\354q?\014\330T>j\232(?\210=f?JW\271>M\177l?\275\"\220>a\036O?\3620\036?\370\301q?\0073W>W\371)?\275xd?\232\213\304>$1r?$\003Q>\234Y&?\031\005i?\211V\247>\016Ka?I0\330>\016\317y?\256S\301=\305\023\257>\201kf?@1\270>\252\333k?\030u\224>\227\322R?\251\321\024?H:y?[\373\322=0?\275>\003\230n?\026\310\201>\351\304A?\250i<?6\371F?\017K1?\272\010Z?uW\001?\315\370\177?a^\3469wD\346:\347\334\345;\035@\344<\013\344\335=\232\331\305>\224\312r?;oH>\2743!?|\306n?\232\206\200>S\206@?@\362>?\016\027B?j\300;?\3726H?\037\204.?\0021^?\310\277\352>g<~?J>\340<\341\032\332=\250\340\302>\014hq?\257/\\>0\327,?K\225`?\205}\334>\020\023{?\253\225\232=\235\352\216>\035\014N?v\322 ?\325*o?<\235{>\317\311=?\321XD?\311\0027?6\267P?\3533\032?\247Eu?+t$>\350\n\n?\226l~?Iw\310<t\217\303=\371\342\260>\022\215g?n\351\260>\020\221g?\232\317\260>\030\201g?\3576\261>\334\300g?\360\231\257>\r\300f?,\023\266>\024\247j?\264\211\234>J[Y?\227=\003?\377\325\177?5\352\';\021|\'<\305\305%=<\020\037>\361Z\006?r^\177?\211(!<\271\222\037=@[\031>\263c\002?)\351\177?\315\243\266:\246b\266;\305^\265<\314Z\261=\366\376\241>={]?\323\351\356>\014\334~?zS\221<|\277\216=]\314\204>W\265D?\246<6?n\tR?\325\327\026?\306\330w?\014\230\374=\226p\335>\227U{?}\224\222=\306\026\210>X\325G?\336_/?\242\356\\?\350\034\362>&?\177?\225H@<\341\006>=\37555>\244$\025?\337\003y?\341j\331=\025V\302>\225%q?\311\334_>0\354.?\024\231]?b;\356>L\304~?Z\027\235<-\024\232=\244|\216>\305\252M?N\277!?|4n?\327v\204>\351bD?9\3556?A\334P?h\326\031?\261\221u?\030\030 >\220\020\007?\\8\177?(\010G<1\235D= -;>c\366\030?\201Cv?.\333\025>\355\331\377>\372\377\177?\2176\2655\1776\2656?6\2657>5\2658<1\26594!\265: \341\264;\206\341\263<\\\356\257=d\321\240>`\234\\?\334\371\363>lo\177?\347A\020<\277\374\016=\351\376\t>h\314\356>\033\330~?JG\223<r\241\220=\261j\206>\205AF?k\3402?F\216W?\3667\010?\322\361~?\241\210\206<\006S\204=\236\214w>u\264;?LMH?\267Q.?!z^?\255\020\351>\376\361}?Hr\002=\210\225\374=\261n\335>\024U{?C\244\222=J$\210>\000\342G?rC/?\252\030]?\221(\361>\273#\177?\332\207[<\323\226X=\345\"M>\253\n$?\376\263k?[\200\225>\013\262S?C\214\022?\347\237z?\206f\250=\257\215\232>\231\314W?2\215\007?\345\033\177?IOc<\363\'`=\224\343S>X\013(?\320\361f?M\323\264>\307\354i?L_\241>\227\005]?\200\227\361>g0\177?D\360N<&SL=\334!B>\006T\035?l\217r?8\277K>\0045#?\330\241l?[8\217>\264PN?\344* ?\377\324o?\236Yr>:\3768?(?M?\312\303\"?\243\035m?\376\355\213>\255_K?3;\'?\243\363g?VP\256>^\357e?\001J\273>\317\216m?\237\350\210>B\231H?\275\245-?Aq_?\375U\343>^\312|?\037\325J=\317\311@>\371}\034?\316Ps?\333\344@>\325\216\034?\306As?m\275A>\242\025\035?^\310r?\375\216H>\016G!?k\262n?\201\021\201>]\020A?\300\332=?\0278D?\236H7?\337>P?\225b\033?:Ht?q\3472>\306\245\023?\345\367y?2w\274=I\037\253>\303\333c?Wb\310>\340\352s?028>$\020\027?b\260w?\265\250\000>\330\374\340><>|?\234\351l=\2445_>\004\216.?\237\"^?t\024\353>YJ~?1]\331<\270\230\323=\025\274\275>\351\330n?\001\007\200>\001\007@?\376\361??\002\034@?\361\307??\356o@?a\037??*\276A?\205w<?\007\337F?\027\2051?!\257Y?\016S\002?c\352\177?\243\326\254:K\234\254;\206\263\253<;\032\250=\355M\232>\001\232W?\332\027\010?\001\372~?\234y\202<\236e\200=\312\261p>T\0368?\336\312N?\000\377\036?\370\374p?\323\032b>\373-0?\346\272[?\277\014\371>\262\317\177?@\024A;\241\202@<\220?>=ii5>\333E\025?\334\355x?\222\004\334=\227a\304>\231\035r?\377\031R>U\376&?\010>h?Ql\254>\347\266d?\304\004\303>Eyq?t;[>\302K,?{Wa?\266\344\327>v\267y?\336!\304=bY\261>\013\326g?\201\020\257>pif?y>\270>\025\343k?\032C\224>\214\250R?\\>\025?\327\362x?\nn\333=[\353\303>Q\346q?\323-U>\201\314(?\322\375e?\347\355\272>=]m?\277;\212>\006\323I?\342\327*?\320Qc?\371\274\313>\264Tu?z\227#>\352t\t?I\232~?\322\341\261<\002\005\256=\250;\237>\'l[?s\317\372>\021\345\177?\354^\327:S\004\327;#\233\325<G\t\320=d\347\272>\272Ym?\303S\212>\035\351I?\345\244*?\352\225c?\251\025\312>!\245t?\363\236->\346.\020?k\350{?\311\332\200=\261~q>\277\2128?\005\014N?\262\322 ?\230*o?\222\240{>\201\313=?\213UD?\307\t7?0\253P?>R\032?\304,u?\322\340%>\355\001\013?V\033~?\377\211\360<\347y\351=\003\334\316>4\221v?\034]\021>\352t\371>/\325\177?\266%+;K\263*<\000\354(=\227\364!>3W\010?\274\351~?\210\212\212<\2732\210=\372G~>@#??\207\266A?5\207<?_\301F?\270\3061?MIY?\317o\003?\301\320\177?-\330<;\337L<<\333\":=p\2551>\036\331\022?\377rz?1\306\255=\202\007\237>\260D[?\302\260\373>n\355\177?\332\210\224:\303]\224;\312\261\223<\035\010\221=\327\302\206> \225F?n(2?\273\260X?\026\030\005?3\230\177?\340D\317;?\365\315<\252\307\310=\227\030\265>f\025j?-R\240>\207=\\?\277\035\366>O\236\177?\213\026\303;4\355\301<\370U\275=\367\324\253>\273Sd?\327s\305>1\234r?U\010K>\307\306\"?c\032m?)\004\214>\305sK?\331\013\'?\215-h?\253\327\254>\323\374d?\rL\301>X\244p?\235\374f>\344\3412?\356\213W?^>\010?,\360~?\330Y\207<Y\035\205=\322\354x>\346i<?\302\370F?\020L1?-\007Z?\321[\001?\236\370\177?\327A\3549\226&\354:\253\271\353;\216\007\352<\377W\343=Z\033\312>\207\247t?\001|->\314\027\020?\021\364{?\253\343~=\"\007o>\215;7?mUP?\374)\033?xxt?\256)0>Y\333\021?\211\004{?\206T\234=\242e\220>\306XO?]\240\035?\032Ir?\000\255O>\261\216%?\305\365i?\304#\241>\206\331\\?u\227\362>7L\177?\221J3<LT1=\361\246)>{\213\r?&\"}?\234h5=\312_->$\005\020?n\375{?f\237|=\303\nm>\207+6?n&R?p\215\026?\213\rx?\250i\366=\301\303\330>\227\374y?\017\350\273=t\252\252>\024\216c?kF\312>\242\271t?\355s,>\357h\017?$J|?\340\005j=\364\246\\>\034\033-?\3255`?\250\274\336>\221\255{?\020\370\207=<\342}>\377\357>?}\033B?B\267;?\022HH?\207].?\005i^?\254u\351>\357\003~?o\020\374<\354N\364=\033*\327>v|y?\212#\313=]\375\266>\177-k?|\007\231>\006\225V?&\336\n?\221\'~?\205\203\352<\337\314\343=@v\312>\254\315t?gO+>\234\246\016?j\245|?\241\325S=\004\341H>\355x!?g~n?\006y\202>\351rB?2\002;?\364\227I?\364_+?\201\232b?\300*\320>\001\020w?\341\001\n>\276\320\356>\261\330~?b\375\222<3Z\220=\177-\206>U\007F?\364_3?\203\302V?\362b\n?|P~?\220V\326<\351\272\320=\341t\273>\314\245m?(K\210>`\006H?\250\361.?\016\221]?Mj\356>\307\312~?\350\341\231<\351\375\226=\030\334\213>qOK?ma\'?\257\304g?$\201\257>w\260f?:w\266>\266\340j?!\t\233>4.X?\320\200\006?\326V\177?l\272(<\227\375&=\271. >\035 \007?\3514\177?nuJ<\370\364G=\0132>>w\336\032?:\270t?j\210,>\204v\017?\227C|?\026\235k=y\017^>\303\347-?\316\022_?O\210\345>xC}?\302B-=\215\356%>5\013\013?$\030~?H\035\362<m\365\352=\272\000\320>F\000w?\363\353\n>H&\360>\303\004\177?7Fz<\203sv=_\237g>\037;3?\220\375V?\241\302\t?\363\202~?\362j\275<\272\t\271=\330Q\250>*\370a?\374\017\324>~ux?\2124\352=\007l\317>-\310v?\236-\016>\353\337\364>:\204\177?\n\024\367;\0337\365<\007\340\355=\365>\322>\220\322w?\022R\375=\250\374\335>\034{{?\356\016\216=\\4\204>\256\"D?;v7?\360\357O?%(\034?\307\234s?X\234<>\330\336\031?\337\212u?J| >dU\007?\340(\177?\366jV<\232\234S=\342\255H>\330Y!?\333\236n?\310\230\201><\226A?v\311<?\310CF?r\3332?-\226W?U\"\010?X\367~?\017\313\203<C\254\201=\302\354r>\244K9?\353\264L?R\020$?\237\255k?9\253\225>\257\325S?\371.\022?q\325z?\302\373\241=\355+\225>\261kS?\370C\023?]3z?*`\265=\006P\245>\313\337_?\033\301\340>\265/|?\357op=\316Rb>:M0?\314\213[?\210\032\372><\335\177?\252\376\n;3\263\n<\234\206\t=\206\350\004>\276P\347>\254\236}?\206\352\026=\013[\021>\365q\371>\t\325\177?\215\300+;RM+<\320\202)=\361~\">\267\265\010?\216\320~?\375\004\227<F<\224=\216\201\211>0\'I?\202b,?\3667a?]\244\330>\363\362y?\353\r\275=:\232\253>\r-d?-f\306>$\ns?7\336D>\365\004\037?2\367p?[lb>|[0?Dv[?\251\225\372>\254\342\177?\227\201\352:.\026\352;\025j\350<\021\322\341=\263\353\310>F&t?\265\3244>\301\345\024?/-y?>\210\324=\000z\276>\256:o?\372\300z>\234Y=?\2620E?\33325?\235\307S?\323S\022?l\300z?\024\201\244=`J\227>\355+U?4\247\016?$\245|?\232\346S=;\360H>+\202!?\272tn?\324\273\202>[\264B?\010z:?\351\221J?I\035)?m\226e?\257\177\275>\226\271n?\346\337\200>\"\337@?\262>>?IvC?|\3438?\276nM?\307P\"?\307\231m?\202\235\210>ISH?/D.?\264\215^?\t\235\350>\021\335}?\210\227\007=v\032\003>\340\242\344>9\023}?#\0169=\314\2610>\2174\022?D\322z?H]\242=\002~\225>\027\260S?_\221\022?\360\234z?S\301\250=\211\331\232>\241\010X?E\350\006?(A\177?\262I><\354\023<=\030q3>B\377\023?w\300y?\332\017\303=\265{\260>\026Mg?\014\207\262>\004\216h?pb\252>\375]c?]q\313>\2765u?M]%>\363\250\n?v9~?\202\261\341<\266y\333=\207\364\303>\237\352q?\213\360T>\271\250(?\\+f?Z\313\271>*\277l?-q\216>\232\240M?\372\327!?m\032n?:*\205>\215\017E?uz5?DPS?k\213\023?\t\010z?\350\212\272=$\215\251>\241\316b?2\351\316>C\226v?\034\022\021>v\t\371>\204\317\177?\341\312A;-8A<\326\360>=0\n6>\221\255\025?B\250x?j:\344=f\313\312>.\361t?\270H)>rL\r?\226<}?\260\361.=\331x\'> \025\014?\r\270}?\303\257\020=`\223\013>\020\032\361>\013\"\177?[4]<\3167Z=\234\227N>\206\351$?\365\265j?|&\234>\013\016Y?\356\024\004?[\275\177?a&\205;\337\233\204<Vv\202=\223Mt>\225\004:?\262gK?P(\'?\305\nh?\371\271\255>\021\217e?h\256\275>\323\321n?\0238\200>\0078@?\302\217??\270\337@?\203=>?\227xC?\240\3368?bwM?\336;\"?-\260m?\007\004\210>\306\303G?J\207/?.\264\\?\002p\363>/b\177?\206o\035<>\354\033=\277\374\025>\263\004\000?\000\000\200?m\264\2603l\264\2604i\264\2605Y\264\2606\034\264\2607(\263\2608Y\257\2609\032\240\260:,c\260;\033p\257<G\256\253=\376I\235>%\360Y?\223\234\001?\234\365\177?\3463&:\354\030&;(\255%<E\000$=?o\035>\326:\005?\230\222\177?\257q\332;\344\374\330<\206=\323=\267s\275>]\263n?\361\n\201>\333\tA?\371\347=?\204\036D?\031\1777?\220\340O?\211N\034?\350zs?\210\205>>\351\022\033?\006\214t?\344\014/>< \021?\320j{?\364\005\220=\036\345\205>^\302E?\230\3663?H\317U?\312\362\014?[a}?\361\361%=\3258\037>\354v\006?\327X\177?\010\274&<\246\t%=Oc\036>\240\343\005?Eu\177?go\n<\365C\t=Y\252\004>\243\364\346>\307\214}?\377M\033=\206j\025>v:\377>h\377\177?\031m\0308\256k\0309\002f\030:SO\030;\265\364\027<\353\213\026=f\003\021>`\364\370>]\316\177?\250fF;\345\314E<\221iC=\361\026:>\233E\030?\200\313v?D\374\r>\233\230\364>\364}\177?f\312\001<0\303\000=\347m\371=\010\r\333>\304\252z?x\031\247=0w\231>\261\356V?\n\353\t?\206v~?\214\216\303<x\343\276=\252\030\255>\374&e?\273A\300>\315 p?\2154n>\035\3136?\273\026Q?oB\031?\325\007v?|L\031>[Y\002?\356\351\177?\231\204\260:\276G\260;\371T\257<N\224\253=_4\235>w\337Y?p\313\001?\036\363\177?\257\030N:4\357M;\213IM<\020\267J=\271\256@>\026m\034?\323_s?J\014@>\256\007\034?G\271s?E\000;>\354\331\030?\251Yv?\210\223\024>\233\t\376>&\374\177?lxv9\227iv:K.v;\216Au<\264\225q=\001Vc>\230\3350?\234\260Z?\302\372\376>\365\376\177?\344J\2058\271H\2059\014@\205:^\035\205;\357\222\204<\260m\202={>t>\261\3749?\377uK?\230\006\'?\3663h?\352\255\254>\253\341d?[\367\301>\320\367p?\247cb>\241V0?\231}[?\272k\372>\337\340\177?\226\346\370:\226m\370;m\213\366<\353\037\357=W4\323>\\)x?b&\363=&H\326>\2303y?\374\305\323=\375\337\275>z\353n?\242\014\177>\027\206??\351\362@?\224\026>?:\304C?\315>8?\334\221N?,\213\037?\377sp?\310\244i>pU4?\2674U?\316\217\016?\323\257|?\305LQ=\336\232F>\343\025 ?\026\352o?\2642q>\224b8?\345RN?\205% ?e\332o?\'\016r>v\3268?\342\205M?\300\030\"?\252\325m?\325\002\207>\255\321F?\247\2421?S\201Y?K\323\002?\022\340\177?\030R\377:\306\322\376;x\327\374<\260\t\365=?\270\327>\200\251y?\246\312\305=u\260\262>\016\247h?\275\276\251>\026\360b?m\032\316>PFv?\261\261\025>8\237\377>\333\377\177?\232Z\0227FZ\0228\370X\0229\275S\022:\324>\022;H\353\021<\227\236\020=j\203\013>\330\002\361>U\037\177?\217\345_<I\326\\=9\356P>:M&?\356\023i?+\365\246>x\007a?\271\312\331>$Lz?\342j\262=\310\337\242>\223\037^?_&\353>FM~?\376\353\327<\014;\322=n\246\274>\376Gn?j\360\203>\346\340C?\t\0028?p\374N?\313\204\036?nrq?z\234[>4\203,?\213\na?\020\270\331>\220Fz?]\025\263=\201l\243>\250\205^?\231\314\350>\271\345}?\277v\005=u\035\001>\221\253\341>\032h|?\027\277b=\2701V>\355c)?\\;e?\337\300\277>`\340o?\203\272q>V\2528?$\324M?\313Z!?\336\235n?\236\237\201>\373\234A?\241\273<?\013^F?\275\2412?\260\361W?Z\'\007?L3\177?-\020L<\206\205I=V\233?>\014\301\033?\327\366s?\307\2047>\000\241\026?\273\377w?\037\010\370=\'\376\331>t[z?\242\226\260=\263\\\241>\253\003]?\255\242\361>\2511\177?\316\260M<\274\033K=l\tA>\236\245\034?i-s?\276\342B>\242\313\035?\356 r?\201\352Q>R\342&?\037`h?\030\216\253>\r%d?D\230\306>\244 s?\201\232C>R=\036?I\266q?#\331W>\207Y*?\002\372c?r\245\307>B\230s?\250\335<>\024\010\032?oiu?Xg\">\233\245\010?\355\324~?\352\332\224<{&\222=~\270\207>\342|G?\367%0?\367\306[?\221\307\370>\335\313\177?\250_P;\014\266O<\354\023M=^\317B>\241\277\035?\030,r?/KQ>9\204&?\353\321h?%\246\250>\3161b?\247\256\322>M\372w?\375\252\370=\206y\332>\332\177z?\214<\254=_\300\235>9KZ?\030\234\000?\203\376\177?PZ\2768\344U\27693D\276:\177\375\275;~\343\274<\207\210\270=\366\347\247>w\257a?\177\314\325>\017\013y?`\221\330=\254\252\301>\217\322p?^qd>\326z1?\375\276Y?\226&\002?\177\355\177?\247\372\223:\342\317\223;1%\223<\224\200\220=wN\206>\261&F?E\0333?~0W?\0048\t?\016\254~?f\027\251<\347\231\245=\3575\230>\307\353U?T\246\014?\360\177}?\334s\036=\251R\030>\030\252\001?\353\364\177?ZE1:\252&1;\024\2540<_\304.=gO\'>;\371\013?\211\302}?\210\034\016=M.\t>O\233\355>\260\255~?\257H\250<\263\323\244=\266\217\227>\223dU?=\020\016?\341\350|?zdC=V\022:>\255B\030?\271\315v?A\333\r>\342h\364>\252y\177?S\017\006<\203\366\004=\221\245\000>$\370\340>\030=|?t0m=Ht_>V\261.?)\357]?\343B\354>bz~?}\246\301<\231\022\275=\n\236\253>\221/d?mV\306>\014\003s?/DE>\257C\037?\'\272p?d\311e>\35182?\341\226X?\261_\005?}\214\177?H\235\346;\312\375\344<\"\227\336=\323e\306>\373\ts?\202\340D>_\006\037?\323\365p?\261\177b>Df0?\367e[?\317\362\372>{\346\177?Y\020\314:\004\277\313;\263z\312<\204y\305=\374n\262>q\177h?\243\301\252>\207\235c?E\346\311>#\221t?f\302.>0\357\020?\352\204{?E\340\214=\203/\203>]%C?\260\2159?e>L?\224+%?\177ij?\270#\236>T\227Z?\373\211\377>\312\377\177?8\242Y7\177\241Y8\233\236Y9\013\223Y:\320dY;4\254X<\250\316U=\217\245J>#\213\"?\374Zm?\'K\212>1\341I?/\267*?\206}c?d\255\312>\261\344t?7\377)>z\306\r?\367\010}?\233\217;=\351\3702>#\261\023?\351\360y?*L\275=\370\314\253>yNd?\315\224\305>@\253r?\2100J>`D\"?\021\247m?uB\210>=\376G?\367\003/?,v]?j\007\357>\374\337~?\010`\217<\245\335\214=?-\203>(#C?Q\2229?\0216L?k?%?mRj?\027\275\236>:\014[?q\362\374>\256\366\177?\223\033\025:\335\005\025;\035\257\024<\261U\023=\371\010\016>\367\252\364>\225\177\177?\230*\000<\332S\376<\206n\366=s\307\330>\271\375y?\202\305\273==\216\252>B{c?|\273\312>\217\352t?w\251)>+\215\r?o!}?K\2255=\204\210->\021 \020?\347\357{?\257\345\177=\371\350o>\304\2637?\017\205O?o2\035?$\256r?\030\007J>L+\"?\342\301m?\224\212\207>\265QG?N\2060?p5[?\267\007\374>=\360\177?\211\030|:y\332{;\263\342z<5\013w=\313$h>\035\2043?`\210V?[\000\013?\341\033~?\317E\360<\2709\351=t\252\316>$~v?\216w\022>\321\010\373>X\347\177?5.\305:E\342\304;n\263\303<\230\006\277==5\255>z9e?\305\314\277>X\346o?\007gq>>~8?\033\"N?\314\234 ?\264ao?\013\242x>tC<??AG?\372\2520?\301\375Z?\310D\375>\212\370\177?\244\262\3569\322\226\356:\243\'\356;\210l\354<\306\231\345=7\334\313>qau?\227\334\">\234\365\010?\353\276~?[\301\237<\315\243\234=\314\250\220>C\223O? \017\035?H\316r?\036:H>g\023!?\370\347n?H=\177>\177\236??m\302@?\327x>?\373\004C?\221\3219?\007\304K?7N&?\277\022i?\355\374\246>\335\014a?\000\252\331>[Bz?\377\225\263=\233\326\243>9\322^?\214\007\347>y\220}?\006f\032=\027\224\024>f\n\376>)\374\177?\035\261u9`\242u:tgu;5|t<A\326p=\032\255b>\224\1770?\243?[?\221\315\373>c\356\177?p\341\214:\255\272\214;\363\037\214<\\\272\211=<w\200>\004w@?\032\021??P\332A?\244=<?1LG?\230\2220?\314\"[?\361q\374>]\363\177?\271(J:\320\000J;kaI<\302\347F=\r?=>\203E\032?:7u?\220G%>;\232\n?Z>~?;H\337<D2\331=|)\302>\021\020q?\374\014a>\007\227/?\311\234\\?|\367\363>3o\177?\313z\020<\2414\017=\3442\n>T\030\357>9\342~?\027D\216<\232\313\213=\303@\202>\257;B?\257t;?\t\304H?\223D-?H\373_?N\034\340>\020\007|?\374Iz=\263\376j>\014\0215?\300\377S?\250\300\021?c\023{?\270\213\232=+\342\216>\247\004N?\252\344 ?%\030o?\326\240|>\224M>?TYC?{ 9?\024\002M?\001W#?a|l?\2156\220>\260/O?\"\006\036?@\352q?\323\365T>\317\253(?p\'f?b\344\271>\343\314l?\345\023\216>\267MM?\242\240\"?\301Cm?\336\351\212>\303rJ?\320e)?\3548e?H\320\277>\033\350o?_Nq>5q8?\0339N?\233d ?\306\232o?\246\206u>\346\247:?\367=J?y\340)?R\231d?\343\276\303>j\321q?RWV>\313y)?\014\037e?\347s\300>\2779p?\273\326l>\224\0176?\263UR?\362\023\026?Cbx?"
      }
    }
  }
}
node {
  name: "Train/TrainInput/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Train/TrainInput/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "h<\001\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Train/TrainInput/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/TrainInput/strided_slice"
  op: "StridedSlice"
  input: "Train/TrainInput/raw_data"
  input: "Train/TrainInput/strided_slice/stack"
  input: "Train/TrainInput/strided_slice/stack_1"
  input: "Train/TrainInput/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 81000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Train/TrainInput/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000H?\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "Train/TrainInput/Reshape"
  op: "Reshape"
  input: "Train/TrainInput/strided_slice"
  input: "Train/TrainInput/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 16200
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/TrainInput/assert_positive/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1349
      }
    }
  }
}
node {
  name: "Train/TrainInput/assert_positive/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Train/TrainInput/assert_positive/assert_less/Less"
  op: "Less"
  input: "Train/TrainInput/assert_positive/Const"
  input: "Train/TrainInput/assert_positive/x"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Train/TrainInput/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Train/TrainInput/assert_positive/assert_less/All"
  op: "All"
  input: "Train/TrainInput/assert_positive/assert_less/Less"
  input: "Train/TrainInput/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/TrainInput/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "epoch_size == 0, decrease batch_size or num_steps"
      }
    }
  }
}
node {
  name: "Train/TrainInput/assert_positive/assert_less/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x > 0 did not hold element-wise: x = "
      }
    }
  }
}
node {
  name: "Train/TrainInput/assert_positive/assert_less/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Train/TrainInput/assert_positive/x:0"
      }
    }
  }
}
node {
  name: "Train/TrainInput/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "epoch_size == 0, decrease batch_size or num_steps"
      }
    }
  }
}
node {
  name: "Train/TrainInput/assert_positive/assert_less/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x > 0 did not hold element-wise: x = "
      }
    }
  }
}
node {
  name: "Train/TrainInput/assert_positive/assert_less/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Train/TrainInput/assert_positive/x:0"
      }
    }
  }
}
node {
  name: "Train/TrainInput/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "Train/TrainInput/assert_positive/assert_less/All"
  input: "Train/TrainInput/assert_positive/assert_less/Assert/Assert/data_0"
  input: "Train/TrainInput/assert_positive/assert_less/Assert/Assert/data_1"
  input: "Train/TrainInput/assert_positive/assert_less/Assert/Assert/data_2"
  input: "Train/TrainInput/assert_positive/x"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "Train/TrainInput/epoch_size/input"
  op: "Const"
  input: "^Train/TrainInput/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1349
      }
    }
  }
}
node {
  name: "Train/TrainInput/epoch_size"
  op: "Identity"
  input: "Train/TrainInput/epoch_size/input"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Train/TrainInput/input_producer/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Train/TrainInput/input_producer/range/limit"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16187
      }
    }
  }
}
node {
  name: "Train/TrainInput/input_producer/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Train/TrainInput/input_producer/range"
  op: "Range"
  input: "Train/TrainInput/input_producer/range/start"
  input: "Train/TrainInput/input_producer/range/limit"
  input: "Train/TrainInput/input_producer/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16187
          }
        }
      }
    }
  }
}
node {
  name: "Train/TrainInput/input_producer/fraction_of_32_full/RandomShuffle"
  op: "RandomShuffle"
  input: "Train/TrainInput/input_producer/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16187
          }
        }
      }
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Train/TrainInput/input_producer/fraction_of_32_full/fraction_of_32_full"
  op: "FIFOQueue"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "capacity"
    value {
      i: 32
    }
  }
  attr {
    key: "component_types"
    value {
      list {
        type: DT_INT32
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Train/TrainInput/input_producer/fraction_of_32_full/fraction_of_32_full_EnqueueMany"
  op: "QueueEnqueueMany"
  input: "Train/TrainInput/input_producer/fraction_of_32_full/fraction_of_32_full"
  input: "Train/TrainInput/input_producer/fraction_of_32_full/RandomShuffle"
  attr {
    key: "Tcomponents"
    value {
      list {
        type: DT_INT32
      }
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/TrainInput/input_producer/fraction_of_32_full/fraction_of_32_full"
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "Train/TrainInput/input_producer/fraction_of_32_full/fraction_of_32_full_Close"
  op: "QueueClose"
  input: "Train/TrainInput/input_producer/fraction_of_32_full/fraction_of_32_full"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/TrainInput/input_producer/fraction_of_32_full/fraction_of_32_full"
      }
    }
  }
  attr {
    key: "cancel_pending_enqueues"
    value {
      b: false
    }
  }
}
node {
  name: "Train/TrainInput/input_producer/fraction_of_32_full/fraction_of_32_full_Close_1"
  op: "QueueClose"
  input: "Train/TrainInput/input_producer/fraction_of_32_full/fraction_of_32_full"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/TrainInput/input_producer/fraction_of_32_full/fraction_of_32_full"
      }
    }
  }
  attr {
    key: "cancel_pending_enqueues"
    value {
      b: true
    }
  }
}
node {
  name: "Train/TrainInput/input_producer/fraction_of_32_full/fraction_of_32_full_Size"
  op: "QueueSize"
  input: "Train/TrainInput/input_producer/fraction_of_32_full/fraction_of_32_full"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/TrainInput/input_producer/fraction_of_32_full/fraction_of_32_full"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Train/TrainInput/input_producer/fraction_of_32_full/Cast"
  op: "Cast"
  input: "Train/TrainInput/input_producer/fraction_of_32_full/fraction_of_32_full_Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Train/TrainInput/input_producer/fraction_of_32_full/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03125
      }
    }
  }
}
node {
  name: "Train/TrainInput/input_producer/fraction_of_32_full/mul"
  op: "Mul"
  input: "Train/TrainInput/input_producer/fraction_of_32_full/Cast"
  input: "Train/TrainInput/input_producer/fraction_of_32_full/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "queue/Train/TrainInput/input_producer/fraction_of_32_full/fraction_of_32_full/Train/TrainInput/input_producer/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "queue/Train/TrainInput/input_producer/fraction_of_32_full/fraction_of_32_full/Train/TrainInput/input_producer"
      }
    }
  }
}
node {
  name: "queue/Train/TrainInput/input_producer/fraction_of_32_full/fraction_of_32_full/Train/TrainInput/input_producer"
  op: "ScalarSummary"
  input: "queue/Train/TrainInput/input_producer/fraction_of_32_full/fraction_of_32_full/Train/TrainInput/input_producer/tags"
  input: "Train/TrainInput/input_producer/fraction_of_32_full/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Train/TrainInput/fraction_of_32_full_Dequeue"
  op: "QueueDequeue"
  input: "Train/TrainInput/input_producer/fraction_of_32_full/fraction_of_32_full"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/TrainInput/input_producer/fraction_of_32_full/fraction_of_32_full"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "component_types"
    value {
      list {
        type: DT_INT32
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "Train/TrainInput/Slice/begin/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Train/TrainInput/Slice/begin/2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Train/TrainInput/Slice/begin"
  op: "Pack"
  input: "Train/TrainInput/Slice/begin/0"
  input: "Train/TrainInput/fraction_of_32_full_Dequeue"
  input: "Train/TrainInput/Slice/begin/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Train/TrainInput/Slice/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000\014\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/TrainInput/Slice"
  op: "Slice"
  input: "Train/TrainInput/Reshape"
  input: "Train/TrainInput/Slice/begin"
  input: "Train/TrainInput/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 12
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/TrainInput/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Train/TrainInput/add"
  op: "Add"
  input: "Train/TrainInput/fraction_of_32_full_Dequeue"
  input: "Train/TrainInput/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Train/TrainInput/Slice_1/begin/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Train/TrainInput/Slice_1/begin/2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Train/TrainInput/Slice_1/begin"
  op: "Pack"
  input: "Train/TrainInput/Slice_1/begin/0"
  input: "Train/TrainInput/add"
  input: "Train/TrainInput/Slice_1/begin/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Train/TrainInput/Slice_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000\014\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/TrainInput/Slice_1"
  op: "Slice"
  input: "Train/TrainInput/Reshape"
  input: "Train/TrainInput/Slice_1/begin"
  input: "Train/TrainInput/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 12
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/pack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Train/Model/zeros"
  op: "Fill"
  input: "Train/Model/pack"
  input: "Train/Model/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/pack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Train/Model/zeros_1"
  op: "Fill"
  input: "Train/Model/pack_1"
  input: "Train/Model/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice"
  op: "StridedSlice"
  input: "Train/TrainInput/Slice"
  input: "Train/Model/RNN/strided_slice/stack"
  input: "Train/Model/RNN/strided_slice/stack_1"
  input: "Train/Model/RNN/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 65
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 65
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "A\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10000000149
      }
    }
  }
}
node {
  name: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 65
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/Initializer/random_uniform/sub"
  op: "Sub"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/Initializer/random_uniform/max"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/Initializer/random_uniform/mul"
  op: "Mul"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/Initializer/random_uniform/RandomUniform"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 65
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/Initializer/random_uniform"
  op: "Add"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/Initializer/random_uniform/mul"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 65
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/Assign"
  op: "Assign"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 65
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  op: "Identity"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 65
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/RNN/strided_slice"
  input: "Train/Model/zeros"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/Assign"
  op: "Assign"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/read"
  op: "Identity"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/add"
  op: "Add"
  input: "Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10000000149
      }
    }
  }
}
node {
  name: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/Initializer/random_uniform/sub"
  op: "Sub"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/Initializer/random_uniform/max"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/Initializer/random_uniform/mul"
  op: "Mul"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/Initializer/random_uniform/RandomUniform"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/Initializer/random_uniform"
  op: "Add"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/Initializer/random_uniform/mul"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/Assign"
  op: "Assign"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  op: "Identity"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Tanh"
  input: "Train/Model/zeros_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/Assign"
  op: "Assign"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/read"
  op: "Identity"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/add"
  op: "Add"
  input: "Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_1"
  op: "StridedSlice"
  input: "Train/TrainInput/Slice"
  input: "Train/Model/RNN/strided_slice_1/stack"
  input: "Train/Model/RNN/strided_slice_1/stack_1"
  input: "Train/Model/RNN/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/RNN/strided_slice_1"
  input: "Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/add"
  op: "Add"
  input: "Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Tanh"
  input: "Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/add"
  op: "Add"
  input: "Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\003\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_2"
  op: "StridedSlice"
  input: "Train/TrainInput/Slice"
  input: "Train/Model/RNN/strided_slice_2/stack"
  input: "Train/Model/RNN/strided_slice_2/stack_1"
  input: "Train/Model/RNN/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/RNN/strided_slice_2"
  input: "Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/add"
  op: "Add"
  input: "Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Tanh"
  input: "Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/add"
  op: "Add"
  input: "Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\003\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\004\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_3"
  op: "StridedSlice"
  input: "Train/TrainInput/Slice"
  input: "Train/Model/RNN/strided_slice_3/stack"
  input: "Train/Model/RNN/strided_slice_3/stack_1"
  input: "Train/Model/RNN/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/RNN/strided_slice_3"
  input: "Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/add"
  op: "Add"
  input: "Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Tanh"
  input: "Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/add"
  op: "Add"
  input: "Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\004\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\005\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_4"
  op: "StridedSlice"
  input: "Train/TrainInput/Slice"
  input: "Train/Model/RNN/strided_slice_4/stack"
  input: "Train/Model/RNN/strided_slice_4/stack_1"
  input: "Train/Model/RNN/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/RNN/strided_slice_4"
  input: "Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/add"
  op: "Add"
  input: "Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Tanh"
  input: "Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/add"
  op: "Add"
  input: "Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\005\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_5"
  op: "StridedSlice"
  input: "Train/TrainInput/Slice"
  input: "Train/Model/RNN/strided_slice_5/stack"
  input: "Train/Model/RNN/strided_slice_5/stack_1"
  input: "Train/Model/RNN/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/RNN/strided_slice_5"
  input: "Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/add"
  op: "Add"
  input: "Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Tanh"
  input: "Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/add"
  op: "Add"
  input: "Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\007\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_6"
  op: "StridedSlice"
  input: "Train/TrainInput/Slice"
  input: "Train/Model/RNN/strided_slice_6/stack"
  input: "Train/Model/RNN/strided_slice_6/stack_1"
  input: "Train/Model/RNN/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/RNN/strided_slice_6"
  input: "Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/add"
  op: "Add"
  input: "Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Tanh"
  input: "Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/add"
  op: "Add"
  input: "Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\007\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\010\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_7"
  op: "StridedSlice"
  input: "Train/TrainInput/Slice"
  input: "Train/Model/RNN/strided_slice_7/stack"
  input: "Train/Model/RNN/strided_slice_7/stack_1"
  input: "Train/Model/RNN/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/RNN/strided_slice_7"
  input: "Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/add"
  op: "Add"
  input: "Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Tanh"
  input: "Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/add"
  op: "Add"
  input: "Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\010\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\t\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_8"
  op: "StridedSlice"
  input: "Train/TrainInput/Slice"
  input: "Train/Model/RNN/strided_slice_8/stack"
  input: "Train/Model/RNN/strided_slice_8/stack_1"
  input: "Train/Model/RNN/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/RNN/strided_slice_8"
  input: "Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/add"
  op: "Add"
  input: "Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Tanh"
  input: "Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/add"
  op: "Add"
  input: "Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\t\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\n\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_9"
  op: "StridedSlice"
  input: "Train/TrainInput/Slice"
  input: "Train/Model/RNN/strided_slice_9/stack"
  input: "Train/Model/RNN/strided_slice_9/stack_1"
  input: "Train/Model/RNN/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/RNN/strided_slice_9"
  input: "Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/add"
  op: "Add"
  input: "Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Tanh"
  input: "Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/add"
  op: "Add"
  input: "Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\n\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\013\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_10"
  op: "StridedSlice"
  input: "Train/TrainInput/Slice"
  input: "Train/Model/RNN/strided_slice_10/stack"
  input: "Train/Model/RNN/strided_slice_10/stack_1"
  input: "Train/Model/RNN/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/RNN/strided_slice_10"
  input: "Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/add"
  op: "Add"
  input: "Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Tanh"
  input: "Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/add"
  op: "Add"
  input: "Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\013\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\014\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/RNN/strided_slice_11"
  op: "StridedSlice"
  input: "Train/TrainInput/Slice"
  input: "Train/Model/RNN/strided_slice_11/stack"
  input: "Train/Model/RNN/strided_slice_11/stack_1"
  input: "Train/Model/RNN/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/RNN/strided_slice_11"
  input: "Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/add"
  op: "Add"
  input: "Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Tanh"
  input: "Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/add"
  op: "Add"
  input: "Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Train/Model/concat"
  op: "Concat"
  input: "Train/Model/concat/concat_dim"
  input: "Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Tanh"
  input: "Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Tanh"
  input: "Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Tanh"
  input: "Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Tanh"
  input: "Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Tanh"
  input: "Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Tanh"
  input: "Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Tanh"
  input: "Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Tanh"
  input: "Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Tanh"
  input: "Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Tanh"
  input: "Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Tanh"
  input: "Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 12
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 768
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/Reshape"
  op: "Reshape"
  input: "Train/Model/concat"
  input: "Train/Model/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Model/softmax_w"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Model/softmax_w/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/softmax_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Model/softmax_w/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/softmax_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10000000149
      }
    }
  }
}
node {
  name: "Model/softmax_w/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/softmax_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "Model/softmax_w/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Model/softmax_w/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/softmax_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Model/softmax_w/Initializer/random_uniform/sub"
  op: "Sub"
  input: "Model/softmax_w/Initializer/random_uniform/max"
  input: "Model/softmax_w/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/softmax_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Model/softmax_w/Initializer/random_uniform/mul"
  op: "Mul"
  input: "Model/softmax_w/Initializer/random_uniform/RandomUniform"
  input: "Model/softmax_w/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/softmax_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Model/softmax_w/Initializer/random_uniform"
  op: "Add"
  input: "Model/softmax_w/Initializer/random_uniform/mul"
  input: "Model/softmax_w/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/softmax_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Model/softmax_w/Assign"
  op: "Assign"
  input: "Model/softmax_w"
  input: "Model/softmax_w/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/softmax_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Model/softmax_w/read"
  op: "Identity"
  input: "Model/softmax_w"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/softmax_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Model/softmax_b"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Model/softmax_b/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/softmax_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Model/softmax_b/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/softmax_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10000000149
      }
    }
  }
}
node {
  name: "Model/softmax_b/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/softmax_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "Model/softmax_b/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Model/softmax_b/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/softmax_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Model/softmax_b/Initializer/random_uniform/sub"
  op: "Sub"
  input: "Model/softmax_b/Initializer/random_uniform/max"
  input: "Model/softmax_b/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/softmax_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Model/softmax_b/Initializer/random_uniform/mul"
  op: "Mul"
  input: "Model/softmax_b/Initializer/random_uniform/RandomUniform"
  input: "Model/softmax_b/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/softmax_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Model/softmax_b/Initializer/random_uniform"
  op: "Add"
  input: "Model/softmax_b/Initializer/random_uniform/mul"
  input: "Model/softmax_b/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/softmax_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Model/softmax_b/Assign"
  op: "Assign"
  input: "Model/softmax_b"
  input: "Model/softmax_b/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/softmax_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Model/softmax_b/read"
  op: "Identity"
  input: "Model/softmax_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/softmax_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/MatMul"
  op: "MatMul"
  input: "Train/Model/Reshape"
  input: "Model/softmax_w/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/add"
  op: "Add"
  input: "Train/Model/MatMul"
  input: "Model/softmax_b/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "<\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "Train/Model/Reshape_1"
  op: "Reshape"
  input: "Train/TrainInput/Slice_1"
  input: "Train/Model/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/SquaredDifference"
  op: "SquaredDifference"
  input: "Train/Model/add"
  input: "Train/Model/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/Mean"
  op: "Mean"
  input: "Train/Model/SquaredDifference"
  input: "Train/Model/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/Variable/initial_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Train/Model/Variable"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Train/Model/Variable/Assign"
  op: "Assign"
  input: "Train/Model/Variable"
  input: "Train/Model/Variable/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/Variable"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Train/Model/Variable/read"
  op: "Identity"
  input: "Train/Model/Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/Variable"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Fill"
  op: "Fill"
  input: "Train/Model/gradients/Shape"
  input: "Train/Model/gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/Mean_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/Mean_grad/Reshape"
  op: "Reshape"
  input: "Train/Model/gradients/Fill"
  input: "Train/Model/gradients/Train/Model/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/Mean_grad/Tile/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "<\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/Mean_grad/Tile"
  op: "Tile"
  input: "Train/Model/gradients/Train/Model/Mean_grad/Reshape"
  input: "Train/Model/gradients/Train/Model/Mean_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/Mean_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "<\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/Mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/Mean_grad/Prod"
  op: "Prod"
  input: "Train/Model/gradients/Train/Model/Mean_grad/Shape"
  input: "Train/Model/gradients/Train/Model/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/Mean_grad/Prod_1"
  op: "Prod"
  input: "Train/Model/gradients/Train/Model/Mean_grad/Shape_1"
  input: "Train/Model/gradients/Train/Model/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/Mean_grad/Maximum"
  op: "Maximum"
  input: "Train/Model/gradients/Train/Model/Mean_grad/Prod_1"
  input: "Train/Model/gradients/Train/Model/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/Mean_grad/floordiv"
  op: "Div"
  input: "Train/Model/gradients/Train/Model/Mean_grad/Prod"
  input: "Train/Model/gradients/Train/Model/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/Mean_grad/Cast"
  op: "Cast"
  input: "Train/Model/gradients/Train/Model/Mean_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/Mean_grad/truediv"
  op: "Div"
  input: "Train/Model/gradients/Train/Model/Mean_grad/Tile"
  input: "Train/Model/gradients/Train/Model/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/SquaredDifference_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "<\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/SquaredDifference_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "<\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/SquaredDifference_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "Train/Model/gradients/Train/Model/SquaredDifference_grad/Shape"
  input: "Train/Model/gradients/Train/Model/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/SquaredDifference_grad/scalar"
  op: "Const"
  input: "^Train/Model/gradients/Train/Model/Mean_grad/truediv"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/SquaredDifference_grad/mul"
  op: "Mul"
  input: "Train/Model/gradients/Train/Model/SquaredDifference_grad/scalar"
  input: "Train/Model/gradients/Train/Model/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/SquaredDifference_grad/sub"
  op: "Sub"
  input: "Train/Model/add"
  input: "Train/Model/Reshape_1"
  input: "^Train/Model/gradients/Train/Model/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/SquaredDifference_grad/mul_1"
  op: "Mul"
  input: "Train/Model/gradients/Train/Model/SquaredDifference_grad/mul"
  input: "Train/Model/gradients/Train/Model/SquaredDifference_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/SquaredDifference_grad/Sum"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/SquaredDifference_grad/mul_1"
  input: "Train/Model/gradients/Train/Model/SquaredDifference_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/SquaredDifference_grad/Reshape"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/SquaredDifference_grad/Sum"
  input: "Train/Model/gradients/Train/Model/SquaredDifference_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/SquaredDifference_grad/Sum_1"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/SquaredDifference_grad/mul_1"
  input: "Train/Model/gradients/Train/Model/SquaredDifference_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/SquaredDifference_grad/Reshape_1"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/SquaredDifference_grad/Sum_1"
  input: "Train/Model/gradients/Train/Model/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/SquaredDifference_grad/Neg"
  op: "Neg"
  input: "Train/Model/gradients/Train/Model/SquaredDifference_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/add_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "<\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "Train/Model/gradients/Train/Model/add_grad/Shape"
  input: "Train/Model/gradients/Train/Model/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/add_grad/Sum"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/SquaredDifference_grad/Reshape"
  input: "Train/Model/gradients/Train/Model/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/add_grad/Reshape"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/add_grad/Sum"
  input: "Train/Model/gradients/Train/Model/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/add_grad/Sum_1"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/SquaredDifference_grad/Reshape"
  input: "Train/Model/gradients/Train/Model/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/add_grad/Reshape_1"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/add_grad/Sum_1"
  input: "Train/Model/gradients/Train/Model/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/MatMul_grad/MatMul"
  op: "MatMul"
  input: "Train/Model/gradients/Train/Model/add_grad/Reshape"
  input: "Model/softmax_w/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Train/Model/Reshape"
  input: "Train/Model/gradients/Train/Model/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\000\003\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/Reshape_grad/Reshape"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 768
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/concat_grad/Shape_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/concat_grad/Shape_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/concat_grad/Shape_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/concat_grad/Shape_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/concat_grad/Shape_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/concat_grad/Shape_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/concat_grad/Shape_8"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/concat_grad/Shape_9"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/concat_grad/Shape_10"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/concat_grad/Shape_11"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "Train/Model/concat/concat_dim"
  input: "Train/Model/gradients/Train/Model/concat_grad/Shape"
  input: "Train/Model/gradients/Train/Model/concat_grad/Shape_1"
  input: "Train/Model/gradients/Train/Model/concat_grad/Shape_2"
  input: "Train/Model/gradients/Train/Model/concat_grad/Shape_3"
  input: "Train/Model/gradients/Train/Model/concat_grad/Shape_4"
  input: "Train/Model/gradients/Train/Model/concat_grad/Shape_5"
  input: "Train/Model/gradients/Train/Model/concat_grad/Shape_6"
  input: "Train/Model/gradients/Train/Model/concat_grad/Shape_7"
  input: "Train/Model/gradients/Train/Model/concat_grad/Shape_8"
  input: "Train/Model/gradients/Train/Model/concat_grad/Shape_9"
  input: "Train/Model/gradients/Train/Model/concat_grad/Shape_10"
  input: "Train/Model/gradients/Train/Model/concat_grad/Shape_11"
  attr {
    key: "N"
    value {
      i: 12
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/concat_grad/Slice"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/Reshape_grad/Reshape"
  input: "Train/Model/gradients/Train/Model/concat_grad/ConcatOffset"
  input: "Train/Model/gradients/Train/Model/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/concat_grad/Slice_1"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/Reshape_grad/Reshape"
  input: "Train/Model/gradients/Train/Model/concat_grad/ConcatOffset:1"
  input: "Train/Model/gradients/Train/Model/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/concat_grad/Slice_2"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/Reshape_grad/Reshape"
  input: "Train/Model/gradients/Train/Model/concat_grad/ConcatOffset:2"
  input: "Train/Model/gradients/Train/Model/concat_grad/Shape_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/concat_grad/Slice_3"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/Reshape_grad/Reshape"
  input: "Train/Model/gradients/Train/Model/concat_grad/ConcatOffset:3"
  input: "Train/Model/gradients/Train/Model/concat_grad/Shape_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/concat_grad/Slice_4"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/Reshape_grad/Reshape"
  input: "Train/Model/gradients/Train/Model/concat_grad/ConcatOffset:4"
  input: "Train/Model/gradients/Train/Model/concat_grad/Shape_4"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/concat_grad/Slice_5"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/Reshape_grad/Reshape"
  input: "Train/Model/gradients/Train/Model/concat_grad/ConcatOffset:5"
  input: "Train/Model/gradients/Train/Model/concat_grad/Shape_5"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/concat_grad/Slice_6"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/Reshape_grad/Reshape"
  input: "Train/Model/gradients/Train/Model/concat_grad/ConcatOffset:6"
  input: "Train/Model/gradients/Train/Model/concat_grad/Shape_6"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/concat_grad/Slice_7"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/Reshape_grad/Reshape"
  input: "Train/Model/gradients/Train/Model/concat_grad/ConcatOffset:7"
  input: "Train/Model/gradients/Train/Model/concat_grad/Shape_7"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/concat_grad/Slice_8"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/Reshape_grad/Reshape"
  input: "Train/Model/gradients/Train/Model/concat_grad/ConcatOffset:8"
  input: "Train/Model/gradients/Train/Model/concat_grad/Shape_8"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/concat_grad/Slice_9"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/Reshape_grad/Reshape"
  input: "Train/Model/gradients/Train/Model/concat_grad/ConcatOffset:9"
  input: "Train/Model/gradients/Train/Model/concat_grad/Shape_9"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/concat_grad/Slice_10"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/Reshape_grad/Reshape"
  input: "Train/Model/gradients/Train/Model/concat_grad/ConcatOffset:10"
  input: "Train/Model/gradients/Train/Model/concat_grad/Shape_10"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/concat_grad/Slice_11"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/Reshape_grad/Reshape"
  input: "Train/Model/gradients/Train/Model/concat_grad/ConcatOffset:11"
  input: "Train/Model/gradients/Train/Model/concat_grad/Shape_11"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Tanh"
  input: "Train/Model/gradients/Train/Model/concat_grad/Slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/add_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/add_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/add_grad/Sum"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/add_grad/Reshape"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/add_grad/Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/add_grad/Sum_1"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/add_grad/Reshape_1"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/add_grad/Sum_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  op: "MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/add_grad/Reshape"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/concat"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/concat_grad/Slice"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/concat_grad/Slice_1"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset:1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Tanh"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/concat_grad/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/AddN"
  op: "AddN"
  input: "Train/Model/gradients/Train/Model/concat_grad/Slice_10"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/concat_grad/Slice_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/concat_grad/Slice_10"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Tanh"
  input: "Train/Model/gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/add_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/add_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/add_grad/Sum"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/add_grad/Reshape"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/add_grad/Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/add_grad/Sum_1"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/add_grad/Reshape_1"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/add_grad/Sum_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/add_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/add_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/add_grad/Sum"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/add_grad/Reshape"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/add_grad/Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/add_grad/Sum_1"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/add_grad/Reshape_1"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/add_grad/Sum_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  op: "MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/add_grad/Reshape"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/concat"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 65
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  op: "MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/add_grad/Reshape"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/concat"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/concat_grad/Slice"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset:1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/concat_grad/Slice"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/concat_grad/Slice_1"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset:1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/AddN_1"
  op: "AddN"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/concat_grad/Slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Tanh"
  input: "Train/Model/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/AddN_2"
  op: "AddN"
  input: "Train/Model/gradients/Train/Model/concat_grad/Slice_9"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/concat_grad/Slice_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/concat_grad/Slice_9"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Tanh"
  input: "Train/Model/gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/add_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/add_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/add_grad/Sum"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/add_grad/Reshape"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/add_grad/Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/add_grad/Sum_1"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/add_grad/Reshape_1"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/add_grad/Sum_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/add_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/add_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/add_grad/Sum"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/add_grad/Reshape"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/add_grad/Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/add_grad/Sum_1"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/add_grad/Reshape_1"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/add_grad/Sum_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  op: "MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/add_grad/Reshape"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/concat"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 65
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  op: "MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/add_grad/Reshape"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/concat"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/concat_grad/Slice"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset:1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/concat_grad/Slice"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/concat_grad/Slice_1"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset:1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/AddN_3"
  op: "AddN"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/concat_grad/Slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Tanh"
  input: "Train/Model/gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/AddN_4"
  op: "AddN"
  input: "Train/Model/gradients/Train/Model/concat_grad/Slice_8"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/concat_grad/Slice_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/concat_grad/Slice_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Tanh"
  input: "Train/Model/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/add_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/add_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/add_grad/Sum"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/add_grad/Reshape"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/add_grad/Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/add_grad/Sum_1"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/add_grad/Reshape_1"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/add_grad/Sum_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/add_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/add_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/add_grad/Sum"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/add_grad/Reshape"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/add_grad/Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/add_grad/Sum_1"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/add_grad/Reshape_1"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/add_grad/Sum_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  op: "MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/add_grad/Reshape"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/concat"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 65
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  op: "MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/add_grad/Reshape"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/concat"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/concat_grad/Slice"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset:1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/concat_grad/Slice"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/concat_grad/Slice_1"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset:1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/AddN_5"
  op: "AddN"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/concat_grad/Slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Tanh"
  input: "Train/Model/gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/AddN_6"
  op: "AddN"
  input: "Train/Model/gradients/Train/Model/concat_grad/Slice_7"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/concat_grad/Slice_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/concat_grad/Slice_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Tanh"
  input: "Train/Model/gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/add_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/add_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/add_grad/Sum"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/add_grad/Reshape"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/add_grad/Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/add_grad/Sum_1"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/add_grad/Reshape_1"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/add_grad/Sum_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/add_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/add_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/add_grad/Sum"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/add_grad/Reshape"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/add_grad/Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/add_grad/Sum_1"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/add_grad/Reshape_1"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/add_grad/Sum_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  op: "MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/add_grad/Reshape"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/concat"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 65
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  op: "MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/add_grad/Reshape"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/concat"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/concat_grad/Slice"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset:1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/concat_grad/Slice"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/concat_grad/Slice_1"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset:1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/AddN_7"
  op: "AddN"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/concat_grad/Slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Tanh"
  input: "Train/Model/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/AddN_8"
  op: "AddN"
  input: "Train/Model/gradients/Train/Model/concat_grad/Slice_6"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/concat_grad/Slice_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/concat_grad/Slice_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Tanh"
  input: "Train/Model/gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/add_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/add_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/add_grad/Sum"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/add_grad/Reshape"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/add_grad/Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/add_grad/Sum_1"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/add_grad/Reshape_1"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/add_grad/Sum_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/add_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/add_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/add_grad/Sum"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/add_grad/Reshape"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/add_grad/Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/add_grad/Sum_1"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/add_grad/Reshape_1"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/add_grad/Sum_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  op: "MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/add_grad/Reshape"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/concat"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 65
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  op: "MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/add_grad/Reshape"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/concat"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/concat_grad/Slice"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset:1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/concat_grad/Slice"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/concat_grad/Slice_1"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset:1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/AddN_9"
  op: "AddN"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/concat_grad/Slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Tanh"
  input: "Train/Model/gradients/AddN_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/AddN_10"
  op: "AddN"
  input: "Train/Model/gradients/Train/Model/concat_grad/Slice_5"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/concat_grad/Slice_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/concat_grad/Slice_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Tanh"
  input: "Train/Model/gradients/AddN_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/add_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/add_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/add_grad/Sum"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/add_grad/Reshape"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/add_grad/Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/add_grad/Sum_1"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/add_grad/Reshape_1"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/add_grad/Sum_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/add_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/add_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/add_grad/Sum"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/add_grad/Reshape"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/add_grad/Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/add_grad/Sum_1"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/add_grad/Reshape_1"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/add_grad/Sum_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  op: "MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/add_grad/Reshape"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/concat"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 65
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  op: "MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/add_grad/Reshape"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/concat"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/concat_grad/Slice"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset:1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/concat_grad/Slice"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/concat_grad/Slice_1"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset:1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/AddN_11"
  op: "AddN"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/concat_grad/Slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Tanh"
  input: "Train/Model/gradients/AddN_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/AddN_12"
  op: "AddN"
  input: "Train/Model/gradients/Train/Model/concat_grad/Slice_4"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/concat_grad/Slice_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/concat_grad/Slice_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Tanh"
  input: "Train/Model/gradients/AddN_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/add_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/add_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/add_grad/Sum"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/add_grad/Reshape"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/add_grad/Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/add_grad/Sum_1"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/add_grad/Reshape_1"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/add_grad/Sum_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/add_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/add_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/add_grad/Sum"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/add_grad/Reshape"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/add_grad/Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/add_grad/Sum_1"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/add_grad/Reshape_1"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/add_grad/Sum_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  op: "MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/add_grad/Reshape"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/concat"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 65
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  op: "MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/add_grad/Reshape"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/concat"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/concat_grad/Slice"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset:1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/concat_grad/Slice"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/concat_grad/Slice_1"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset:1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/AddN_13"
  op: "AddN"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/concat_grad/Slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Tanh"
  input: "Train/Model/gradients/AddN_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/AddN_14"
  op: "AddN"
  input: "Train/Model/gradients/Train/Model/concat_grad/Slice_3"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/concat_grad/Slice_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/concat_grad/Slice_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Tanh"
  input: "Train/Model/gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/add_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/add_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/add_grad/Sum"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/add_grad/Reshape"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/add_grad/Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/add_grad/Sum_1"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/add_grad/Reshape_1"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/add_grad/Sum_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/add_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/add_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/add_grad/Sum"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/add_grad/Reshape"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/add_grad/Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/add_grad/Sum_1"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/add_grad/Reshape_1"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/add_grad/Sum_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  op: "MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/add_grad/Reshape"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/concat"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 65
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  op: "MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/add_grad/Reshape"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/concat"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/concat_grad/Slice"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset:1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/concat_grad/Slice"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/concat_grad/Slice_1"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset:1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/AddN_15"
  op: "AddN"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/concat_grad/Slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Tanh"
  input: "Train/Model/gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/AddN_16"
  op: "AddN"
  input: "Train/Model/gradients/Train/Model/concat_grad/Slice_2"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/concat_grad/Slice_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/concat_grad/Slice_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Tanh"
  input: "Train/Model/gradients/AddN_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/add_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/add_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/add_grad/Sum"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/add_grad/Reshape"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/add_grad/Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/add_grad/Sum_1"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/add_grad/Reshape_1"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/add_grad/Sum_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/add_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/add_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/add_grad/Sum"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/add_grad/Reshape"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/add_grad/Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/add_grad/Sum_1"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/add_grad/Reshape_1"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/add_grad/Sum_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  op: "MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/add_grad/Reshape"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/concat"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 65
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  op: "MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/add_grad/Reshape"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/concat"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/concat_grad/Slice"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset:1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/concat_grad/Slice"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/concat_grad/Slice_1"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset:1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/AddN_17"
  op: "AddN"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/concat_grad/Slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Tanh"
  input: "Train/Model/gradients/AddN_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/AddN_18"
  op: "AddN"
  input: "Train/Model/gradients/Train/Model/concat_grad/Slice_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/concat_grad/Slice_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Tanh"
  input: "Train/Model/gradients/AddN_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/add_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/add_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/add_grad/Sum"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/add_grad/Reshape"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/add_grad/Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/add_grad/Sum_1"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/add_grad/Reshape_1"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/add_grad/Sum_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/add_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/add_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/add_grad/Sum"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/add_grad/Reshape"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/add_grad/Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/add_grad/Sum_1"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/add_grad/Reshape_1"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/add_grad/Sum_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  op: "MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/add_grad/Reshape"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/concat"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 65
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  op: "MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/add_grad/Reshape"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/concat"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/concat_grad/Slice"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset:1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/concat_grad/Slice"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/concat_grad/Slice_1"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset:1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/AddN_19"
  op: "AddN"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/concat_grad/Slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Tanh"
  input: "Train/Model/gradients/AddN_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/AddN_20"
  op: "AddN"
  input: "Train/Model/gradients/Train/Model/concat_grad/Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/concat_grad/Slice_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Tanh"
  input: "Train/Model/gradients/AddN_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/add_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/add_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/add_grad/Sum"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/add_grad/Reshape"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/add_grad/Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/add_grad/Sum_1"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/add_grad/Reshape_1"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/add_grad/Sum_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/add_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/add_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/add_grad/Sum"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/add_grad/Reshape"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/add_grad/Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/add_grad/Sum_1"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/add_grad/Reshape_1"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/add_grad/Sum_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  op: "MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/add_grad/Reshape"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/concat"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 65
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  op: "MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/add_grad/Reshape"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/concat"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/AddN_21"
  op: "AddN"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/add_grad/Reshape_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/add_grad/Reshape_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/add_grad/Reshape_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/add_grad/Reshape_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/add_grad/Reshape_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/add_grad/Reshape_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/add_grad/Reshape_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/add_grad/Reshape_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/add_grad/Reshape_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/add_grad/Reshape_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/add_grad/Reshape_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/add_grad/Reshape_1"
  attr {
    key: "N"
    value {
      i: 12
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/concat_grad/Slice"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/concat_grad/ConcatOffset:1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/concat_grad/Slice"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/concat_grad/Slice_1"
  op: "Slice"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/concat_grad/ConcatOffset:1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/AddN_22"
  op: "AddN"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  attr {
    key: "N"
    value {
      i: 12
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/AddN_23"
  op: "AddN"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/concat_grad/Slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Tanh"
  input: "Train/Model/gradients/AddN_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/add_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/add_grad/Shape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/add_grad/Sum"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/add_grad/Reshape"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/add_grad/Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/add_grad/Sum_1"
  op: "Sum"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Tanh_grad/TanhGrad"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/add_grad/Reshape_1"
  op: "Reshape"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/add_grad/Sum_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul"
  op: "MatMul"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/add_grad/Reshape"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/concat"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 65
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/gradients/AddN_24"
  op: "AddN"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/add_grad/Reshape_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/add_grad/Reshape_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/add_grad/Reshape_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/add_grad/Reshape_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/add_grad/Reshape_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/add_grad/Reshape_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/add_grad/Reshape_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/add_grad/Reshape_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/add_grad/Reshape_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/add_grad/Reshape_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/add_grad/Reshape_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/add_grad/Reshape_1"
  attr {
    key: "N"
    value {
      i: 12
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/gradients/AddN_25"
  op: "AddN"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  input: "Train/Model/gradients/Train/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
  attr {
    key: "N"
    value {
      i: 12
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 65
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/global_norm/L2Loss"
  op: "L2Loss"
  input: "Train/Model/gradients/AddN_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Train/Model/global_norm/L2Loss_1"
  op: "L2Loss"
  input: "Train/Model/gradients/AddN_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Train/Model/global_norm/L2Loss_2"
  op: "L2Loss"
  input: "Train/Model/gradients/AddN_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Train/Model/global_norm/L2Loss_3"
  op: "L2Loss"
  input: "Train/Model/gradients/AddN_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Train/Model/global_norm/L2Loss_4"
  op: "L2Loss"
  input: "Train/Model/gradients/Train/Model/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Train/Model/global_norm/L2Loss_5"
  op: "L2Loss"
  input: "Train/Model/gradients/Train/Model/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Train/Model/global_norm/pack"
  op: "Pack"
  input: "Train/Model/global_norm/L2Loss"
  input: "Train/Model/global_norm/L2Loss_1"
  input: "Train/Model/global_norm/L2Loss_2"
  input: "Train/Model/global_norm/L2Loss_3"
  input: "Train/Model/global_norm/L2Loss_4"
  input: "Train/Model/global_norm/L2Loss_5"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Train/Model/global_norm/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Train/Model/global_norm/Sum"
  op: "Sum"
  input: "Train/Model/global_norm/pack"
  input: "Train/Model/global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/global_norm/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "Train/Model/global_norm/mul"
  op: "Mul"
  input: "Train/Model/global_norm/Sum"
  input: "Train/Model/global_norm/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Train/Model/global_norm/global_norm"
  op: "Sqrt"
  input: "Train/Model/global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Train/Model/clip_by_global_norm/truediv/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Train/Model/clip_by_global_norm/truediv"
  op: "Div"
  input: "Train/Model/clip_by_global_norm/truediv/x"
  input: "Train/Model/global_norm/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Train/Model/clip_by_global_norm/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Train/Model/clip_by_global_norm/truediv_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Train/Model/clip_by_global_norm/truediv_1"
  op: "Div"
  input: "Train/Model/clip_by_global_norm/Const"
  input: "Train/Model/clip_by_global_norm/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Train/Model/clip_by_global_norm/Minimum"
  op: "Minimum"
  input: "Train/Model/clip_by_global_norm/truediv"
  input: "Train/Model/clip_by_global_norm/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Train/Model/clip_by_global_norm/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Train/Model/clip_by_global_norm/mul"
  op: "Mul"
  input: "Train/Model/clip_by_global_norm/mul/x"
  input: "Train/Model/clip_by_global_norm/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Train/Model/clip_by_global_norm/mul_1"
  op: "Mul"
  input: "Train/Model/gradients/AddN_25"
  input: "Train/Model/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 65
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/clip_by_global_norm/Train/Model/clip_by_global_norm/_0"
  op: "Identity"
  input: "Train/Model/clip_by_global_norm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 65
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/clip_by_global_norm/mul_2"
  op: "Mul"
  input: "Train/Model/gradients/AddN_24"
  input: "Train/Model/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/clip_by_global_norm/Train/Model/clip_by_global_norm/_1"
  op: "Identity"
  input: "Train/Model/clip_by_global_norm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/clip_by_global_norm/mul_3"
  op: "Mul"
  input: "Train/Model/gradients/AddN_22"
  input: "Train/Model/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/clip_by_global_norm/Train/Model/clip_by_global_norm/_2"
  op: "Identity"
  input: "Train/Model/clip_by_global_norm/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/clip_by_global_norm/mul_4"
  op: "Mul"
  input: "Train/Model/gradients/AddN_21"
  input: "Train/Model/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/clip_by_global_norm/Train/Model/clip_by_global_norm/_3"
  op: "Identity"
  input: "Train/Model/clip_by_global_norm/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/clip_by_global_norm/mul_5"
  op: "Mul"
  input: "Train/Model/gradients/Train/Model/MatMul_grad/MatMul_1"
  input: "Train/Model/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/clip_by_global_norm/Train/Model/clip_by_global_norm/_4"
  op: "Identity"
  input: "Train/Model/clip_by_global_norm/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/clip_by_global_norm/mul_6"
  op: "Mul"
  input: "Train/Model/gradients/Train/Model/add_grad/Reshape_1"
  input: "Train/Model/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Train/Model/clip_by_global_norm/Train/Model/clip_by_global_norm/_5"
  op: "Identity"
  input: "Train/Model/clip_by_global_norm/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/gradients/Train/Model/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Model/global_step"
  op: "Variable"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Model/global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "Model/global_step/Assign"
  op: "Assign"
  input: "Model/global_step"
  input: "Model/global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Model/global_step/read"
  op: "Identity"
  input: "Model/global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Train/Model/GradientDescent/update_Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix"
  input: "Train/Model/Variable/read"
  input: "Train/Model/clip_by_global_norm/Train/Model/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 65
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/GradientDescent/update_Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias"
  input: "Train/Model/Variable/read"
  input: "Train/Model/clip_by_global_norm/Train/Model/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/GradientDescent/update_Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix"
  input: "Train/Model/Variable/read"
  input: "Train/Model/clip_by_global_norm/Train/Model/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/GradientDescent/update_Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias"
  input: "Train/Model/Variable/read"
  input: "Train/Model/clip_by_global_norm/Train/Model/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/GradientDescent/update_Model/softmax_w/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "Model/softmax_w"
  input: "Train/Model/Variable/read"
  input: "Train/Model/clip_by_global_norm/Train/Model/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/softmax_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/GradientDescent/update_Model/softmax_b/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "Model/softmax_b"
  input: "Train/Model/Variable/read"
  input: "Train/Model/clip_by_global_norm/Train/Model/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/softmax_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/GradientDescent/update"
  op: "NoOp"
  input: "^Train/Model/GradientDescent/update_Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/ApplyGradientDescent"
  input: "^Train/Model/GradientDescent/update_Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/ApplyGradientDescent"
  input: "^Train/Model/GradientDescent/update_Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/ApplyGradientDescent"
  input: "^Train/Model/GradientDescent/update_Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/ApplyGradientDescent"
  input: "^Train/Model/GradientDescent/update_Model/softmax_w/ApplyGradientDescent"
  input: "^Train/Model/GradientDescent/update_Model/softmax_b/ApplyGradientDescent"
}
node {
  name: "Train/Model/GradientDescent/value"
  op: "Const"
  input: "^Train/Model/GradientDescent/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "Train/Model/GradientDescent"
  op: "AssignAdd"
  input: "Model/global_step"
  input: "Train/Model/GradientDescent/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Train/Model/new_learning_rate"
  op: "Placeholder"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "Train/Model/Assign"
  op: "Assign"
  input: "Train/Model/Variable"
  input: "Train/Model/new_learning_rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/Variable"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Train/Training_Loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Train/Training_Loss"
      }
    }
  }
}
node {
  name: "Train/Training_Loss"
  op: "ScalarSummary"
  input: "Train/Training_Loss/tags"
  input: "Train/Model/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Train/Learning_Rate/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Train/Learning_Rate"
      }
    }
  }
}
node {
  name: "Train/Learning_Rate"
  op: "ScalarSummary"
  input: "Train/Learning_Rate/tags"
  input: "Train/Model/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Valid/ValidInput/raw_data"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 9000
          }
          dim {
            size: 1
          }
        }
        tensor_content: "cw\354=\330)\321>Vnw?\301\203\004>p\273\346>\212\201}?\213\017\036=\030\366\027>\ti\001?\013\370\177?\224\214\3769\361l\376:\203\356\375;\300\366\373<\3226\364=\300\027\327>\231vy?\201\325\313=\367\213\267>\207~k?\350\347\226>:\333T?\230}\017?*@|?\311ql=\251\313^>2R.?ny^?\314\024\351>\273\362}?\322C\002=\205>\374= -\335>OC{?\017\310\224=\021\371\211>\234\225I?We+?2\223b?\310W\320>\315 w?\323\007\t>\366b\355>\212\245~?jP\254<\211\260\250=\203\313\232>\213\375W?\302\006\007?\205:\177?\277\342D<\020\205B=0H9>\326\301\027?c.w?v=\010>=:\354>\014y~?OO\302<l\263\275=\037!\254>\270\205d?\024:\304>,\013r?\304 S>\002\231\'?\030\200g?f=\261>\326\304g?!\200\257>\325\257f?O{\266>\016\343j?w\371\232>\327!X?\336\242\006?\330O\177?\306\256/<\204\314-=\243l&>_`\013?N\372}?\267f\000=\221\300\370=\334\211\332>\243\204z?\374\251\253=kF\235>d\355Y?R\244\001?8\365\177?T\200,:Dc,;/\357+<I!*=F\020#>\327\030\t?\372\264~?\021\255\244<\237]\241=\302\246\224>G\374R?\246e\024?\326\177y?\355\274\312=\027\253\266>w\376j?FB\232>\277\220W?21\010?\216\363~?y\254\205<\023~\203=\225\031v>J\364:?\225\261I?\366$+?@\352b?\206>\316>]Tv?\344\341\024>\314x\376>\252\375\177?dr\0259\360l\025:\"W\025;\003\000\025<\037\245\023=\256R\016>s\025\365>\326\210\177?\353\344\355;\310*\354<\320[\345=$\254\313>\323Mu?U\374#>\202\271\t?\272\205~?\250\013\274<\237\272\267=\024?\247>\315:a?\034\223\330>\244\355y?\310\257\275=\'\036\254>\306\203d?JF\304>\337\020r?\201\317R>;i\'?\023\273g?q\277\257>\227\327f?\364{\265>eOj?>\321\236>\211\033[?P\233\374>|\364\177?\21338:h\0228;\016\2167<\234\1775=\301t->\000\023\020?z\366{?UN~=]\204n>\305\3656?\225\315P?x\373\031?\256su?\352\320!>\316>\010?\017\360~?\035h\207<%+\205=\324\004y>;v<?x\341F?\260\1771?|\267Y?\242;\002?\016\354\177?\017\201\237:_O\237;\027\211\236<\253w\233=g\252\217>\376\264N?\3264\037?\245\310p?(\375d>-\3101?\010GY?\"v\003?\023\320\177?\005\221?;\253\001?<\235\307<=A\0244>!i\024?\236}y?T\000\313=#\341\266>b\035k?ds\231>\246\353V?M\363\t?\365s~?\355\322\304<P\030\300=\300\023\256>\246\310e?\177@\274>3\022n?\324b\205>\322EE?\'\0055?w\023T?\342\214\021?\362/{?\231\034\227=A\366\213>*gK?\217)\'??\th?\344\303\255>p\225e?\363\205\275>\327\274n?`\311\200>\301\310@?\010l>?\373\035C?,\2359?\207\"L?\355m%?)\034j?T%\240>\372\033\\?\013\337\366>\253\254\177?\264t\246;=\234\245<\'C\242=\005h\225>\312\235S?7\301\022?\n\201z?8\030\254=&\242\235>\0034Z?\216\335\000?\001\375\177?\032\274?9 \263?:=\217?;\346\377><\342\305<=\257\0224>\035h\024?E~y?\234\354\312=T\321\266>Y\024k?\337\257\231>\014\034W?\262o\t?\323\233~?\257\036\261<SJ\255=\242\240\236>\227\366Z?\201m\375>b\371\177?\256\264\3239\314\236\323:TG\323;\227\352\321<\220\211\314=\037\034\270>\316\317k?\007\305\224>\246\025S?\322#\024?\211\251y?\225\311\305=\231\257\262>\211\246h?#\302\251>`\362b?F\014\316>\313@v?I\003\026>S\t\000?\377\377\177?A\335\2554=\335\2555.\335\2556\363\334\2557\007\334\2558V\330\2559\225\311\255:\230\216\255;C\243\254<\345\377\250=\312\r\233>\3401X?\260v\006?\343X\177?\026\260&<\362\375$=\215X\036>2\334\005?\243v\177?\237\023\t<\007\356\007=9k\003>\375\032\345>\257,}?r\3252=\232\006+>%v\016?v\273|?9wN=\367\016D><\205\036?\002rq?x\242[>\240\206,?\311\005a?\354\324\331>/Oz?\336\r\262=\365\222\242>\227\347]?Uo\354>5\201~?aG\276<\361\333\271=\375\375\250>\242mb?\n?\321>\026vw?\020\020\004>\330\017\346>7_}?Ax&=>\264\037>\345\313\006?;G\177?1?8<\305,6=\212\022.>={\020?t\301{?\004\221\205=\010\266y>!\321<?75F?k\3732?NcW?k\255\010?\317\322~?\036\347\225<\347(\223=\347\225\210>1LH?7T.?\203v^?\n&\351>\320\365}?\250\201\001=\323\322\372=\305\032\334>\205\367z?\313\344\235=~\270\221>x~P?\332\302\032?]\317t?\2676+>.\226\016?\353\254|?\312\001R=[=G>>y ?\334\205o?U\252v>b?;?\344&I?/c,?\0057a?\022\252\330>\264\364y?o\330\274=\234n\253>D\020d?Q\032\307>\265Zs?\021V@>\3035\034?\310\220s?\247I=>1L\032?\2751u?\370\227%>\250\320\n?#,~?\324B\350<\n\255\341=\326\316\310>\327\031t?/\2115>^Z\025?3\340x?z\241\335=t\245\305>\331\262r?\243\303I>p\002\"?i\355m?\306_\206>$7F?1\3672?\tjW?\010\233\010?\306\327~?^q\223<\003\312\220=\207\215\206>\226bF?\300\2272?|\001X?\353\373\006?\344<\177?\361\206B<\2567@=u27>)l\026?\355$x?\231\253\363=\262\255\326>\211Ty?`\337\317=\000\306\272>\257Gm?\010\317\212>4ZJ?\352\236)?\332\356d?7\244\301>j\317p?\271\235d>d\2231?\373\230Y?\031\221\002?\245\345\177?S\276\322:\224g\322;\270\r\321<\375\267\313=St\267>#qk?\331A\227>\363$U?\305\271\016?\237\234|?\235\371U=\010\314J>`\242\"?\336Am?\301\366\212>\214~J?aJ)?]\\e?\350\357\276>\323vo?\342{w>\320\253;?l]H?D-.?\316\256^?L\331\347>\270\270}?\245\205\020=;l\013>\033\341\360>]\033\177?S\326c<<\253`=zXT>\320O(?\331\233f?\205\373\266>r,k?\213\016\231>\263\232V?\311\316\n?\305,~?\"\363\347<\335a\341=8\224\310>\202\000t?\234\3706>\000G\026?\341>x?\262\237\360=8Z\324>\343\216x?b7\347=\302\034\315>r\342u?\267s\033>b\332\003?\236\304\177?\203Rm;\201vl<\326\014i=P\312[>_\235,?\033\346`?\352\224\332>\337\207z?\360F\253=\365\363\234>\257\255Y?\032W\002?\030\352\177?\2062\257:\223\366\256;j\007\256<\372T\252=[*\234>\020\021Y?\207\014\004?m\276\177? \005\203;\004\177\202<\332j\200=\362\272p>.#8?\\\302N?\362\023\037?\247\350p?\2459c>\323\3150?\255\310Z?Gr\376>\226\375\177?\272x\0329\346r\032:\233[\032;\210\376\031<\377\213\030=\227\335\022>n\232\373>\253\354\177?R\233\232:\243l\232;U\262\231< \320\226=\016\265\213>\377+K?\305\264\'?\262]g?\305\033\262>\351Lh?]\013\254>twd?\253\223\304>\3434r?\261\315P>\3709&?\365*i?\334]\246>\334\235`?\315I\334>\254\004{?JP\234=\014b\220>\245UO?\037\250\035?\353Ar?\242\023P>\250\313%?\376\255i?|\376\242>\3465^?\374\242\352>\2337~?o\233\342<\271V\334=\024\242\304>\223;r?:nP>f\001&?Vni?m\242\244>Wd_?\377\242\343>\206\333|?\177\246F=\037\004=>Z \032?\247Uu?\215\211#>pk\t?\024\235~?\363\177\260<q\262\254=i\"\236>S\226Z?\250\217\377>\317\377\177?\2662E7\0362E8\277/E9@&E:K\000E;\262hD<\360\rB=^\3348>\375|\027?6aw?\253G\005>\220\335\347>\206\271}?\022S\020=9=\013>\255\234\360>6\023\177?:\357k<v\211h=\337U[>\335Z,?\217Ba?\361c\330>\024\337y?\217k\277=Z\207\255>}ne?\021}\276>?<o?-\253z>{N=?\004FE?\272\0045?,\024T?\006\213\021?\3670{?3\375\226=}\333\213>\344NK?\270b\'?\027\303g?u\213\257>\364\266f?\226M\266>\303\310j?\007\251\233>\360\253X?^%\005?\024\226\177?4\201\323;\267#\322<\302\277\314=}G\270>\"\350k?\007!\224>\332\213R?p\210\025?S\301x?\371E\341=w~\310>\026\367s?C\2017>\277\236\026?S\001x?H\330\367=\346\331\331>\253Pz?}\340\261=wm\242>5\314]?\367\017\355>^\231~?\376U\262<!t\256=\337\227\237>\275\261[?DA\371>\201\322\177?d\3335;4Z5<QX3=\007~+>\240\305\016?(\227|?\034NW=\327\374K>\032Z#?\365xl?\277M\220>\360CO?\000\324\035?\"\031r?\264YR>\341#\'?1\020h?\271\226\255>cxe?J>\276>\017\034o?~j|>\t2>?\347\216C?\215\2578?\350\312M?>q!?p\206n?\212A\202>s<B?\032s;?\371\306H?\345=-?\272\004`?\246\343\337>\346\370{?/\270}=\326\000n>r\2576?\016FQ?`\312\030?\270ev?\033\341\023>\021\014\375>H\367\177?\t~\013:\tk\013;\034\037\013<\260\360\t=xK\005>0\343\347>\226\272}?o\020\020=G\377\n>rB\360>=\010\177?,\323v<B\033s=v\255d>\032\2341?{\213Y?\341\266\002?\207\342\177?\346\251\353:m=\353;\031\215\351<\210\344\342=\177\301\311>\222\201t? \245/>U\204\021?\2414{?E\214\226=0{\213>^\367J?:0(?\223\303f?\213\374\265>\001\232j?\327\340\234>\343\236Y?\220\200\002?\365\346\177?0F\310:\331\367\307;s\277\306<\r\355\301=$\220\257>\346\271f?\261:\266>\341\275j?\251\361\233>\313\344X?\240\207\004?\355\255\177?\031\362\243;\035 \243<\215\340\237=we\223>?\355Q?\t \027?\351\244w?OT\001>\225\375\341>o{|?J\014^=\265\002R>\231\360&?\302Nh?Q\377\253>\215od?K\305\304>\343Kr?5\205O>\tw%?\201\021j?\002l\240>\324P\\?o\256\365>\207\225\177?\n\232\324;\3538\323<\264\306\315=\271\031\271>B]l?r\t\221>0\347O?\376=\034?\206\211s?\177\262=><\216\032?3\373t?5\266(>K\352\014?\312d}?\302\032%=\ns\036>}\356\005?Ds\177?\315n\014<\247:\013=\033\177\006>\217\251\351>\007\r~?\022\226\367<{\032\360=F\364\323>\367kx?PS\353=\016I\320>P\033w?\204Y\t>\221\332\355>\267\266~?\301\320\243<%\212\240=\206\364\223>PfR?.\351\025?\250\177x?X\002\351=\257\177\316>\241mv?\016l\023>ye\374>\004\363\177?f\274O:A\222O;\363\351N<\376LL=Q\034B>\226P\035?\223\222r?\024\222K>\324\031#?\265\277l?|m\216>S\235M?\355\337!?\004\022n?\031d\205>\tGE?\206\0025?\321\027T?r\201\021?66{?\237[\226=\257Q\213>\220\321J?\265\210(?\371Sf?\316\307\270>\310/l?3=\222>\211\360P?!\243\031?\357\272u?\226\271\035>Ln\005?\006\212\177?\031\207\353;\267\325\351<\001)\343=\311\366\311>\035\230t?\274\\.>0\254\020?\031\250{?6\241\210=\200\007\177>\204\203??\007\370@?2\014>?]\330C?!\0248?\300\334N?\363\322\036?\205\'q?h\301_>\307\334.?\250\257]?9\267\355>\257\261~?\rN\246<\302\355\242=\211\367\225>\375\024T?\340\210\021?$2{?\345\330\226=\211\274\213>\3122K?\316\244\'?}qg?\332\233\261>\322\376g?\254\007\256>\352\300e?\261q\274>3,n?\341\257\204>\352\231D?~w6?}\245Q?p\327\027?R\036w?\277,\t>\010\231\355>\\\255~?0r\250<\177\373\244=\031\261\227>\314\177U?\213\307\r?\201\010}?a\254;=\014\0233>#\302\023?n\346y?\210\213\276=\033\321\254>\217\370d?\372f\301>\205\261p?\003Cf>\344{2?|-X?\313\202\006?oV\177?\027!)<%b\'=\022\213 >\211_\007?\213&\177?\347\273X<\361\335U=@\263J>h\223\"?\016Rm?/\210\212>C\031J?\2135*?\214)d?\036|\306>\001\024s?UPD>\216\255\036?tKq?\326\304]>z\275-?[O_?\014 \344>\377\366|?\275\362?=\373\3636>\007D\026?\363@x?pa\360=\225*\324>\234~x?\334!\351=\007\230\316>\twv?\314\340\022>\002\237\373>\323\354\177?\032Z\231:,,\231;\340t\230<\210\236\225=J\260\212>\013>J?J\340)?\217\231d?a\275\303>\264\320q?maV>\253\177)?n\027e?\010\244\300>\233Qp?\344\207k>3[5?q\204S?h\003\023?\372Yz?\272\303\260=\003\202\241><\037]?S\002\361>F\037\177?\023\365_<_\345\\=\257\373P>2U&?c\ni?\3213\247>\3752a?\224\302\330>:\374y?\r\363\273=m\263\252>\020\224c?2!\312>\375\251t?\"X->\023\000\020?\367\377{?H\002|=\001\201l>z\3415?s\243R?\207K\025?\027\352x?\233v\334=\031\273\304>+Gr?\241\310O>\034\237%?|\342i?r\243\241>\3477]?\262r\360>#\016\177?\226\370p<Jmm=\021\252_>\242\317.?\345\302]?\212F\355>e\241~?]]\256<E\247\252=\362n\234>}FY?\246w\003?\351\317\177?\3038@;n\250?<{j==\024\2504>\341\310\024?\375?y?iN\322=\321\265\274>\026Pn?\240\270\203>\307\252C?\247t8?\0103N?us ?\273\213o?xXv>\357\024;?auI?c\257+?s.b?<\303\322>\225\001x?\222\320\367=\016\324\331>\354Nz?\310\025\262=\177\231\242>]\354]?RS\354>\352|~?\212f\300<\272\341\273=H\245\252>\242\212c?\336[\312>\241\302t?\250\360+>\317\021\017?\242s|?\272\361_=J\263S>\007\357\'?2\025g?\177\357\263>2fi?\017\330\244>\225\212_?\325\276\342>,\250|?\320)S=\361FH>6\033!?\345\337n?5\255\177>\224\326??\276R@?\031Z??\037JA?\033e=?\246\032E?\200b5?ExS?,#\023?\nGz?\315\006\263=|`\243>\366|^?\363\377\350>\376\356}?G/\003=a\367\375=\005y\336>\354\233{?\210\031\212=\226\311\200>\370\310@?\231k>?\322\036C?j\2339?\262%L?df%?\371$j?\345\352\237>*\360[?\006\333\367>\253\275\177?\200\207\204;H\376\203<\326\335\201=XCs>\035y9?^cL?f\323$?s\317j?d|\233>\352\210X?W\206\005?\350\205\177?\263\272\363;\233\352\361<\276\305\352=\373\333\317>y\362v?*\271\013>\007Q\361>e(\177?>\345V<\256\023T=\244\030I>\267\232!?\375Zn?qm\203>\262aC?\336\0169?\200!M?R\013#?\234\317l?]\001\216>7=M?z\310\"?\213\030m?\273\020\214>)\177K?\374\360&?INh?e\002\254>\222qd?\234\270\304>\004Fr?\024\331O>\342\250%?\374\326i?\203\357\241>\343o]?!,\357>\325\344~?\374\370\214<\362\213\212=\214,\201>,+A?2\244=?[\241D?\210g6?\243\300Q?!\222\027?\253Qw?\220/\006>74\351>W\370}?|\342\000=\220\250\371=e9\333>\212\267z?\224\221\245=\365.\230>\036\346U?\204\265\014?\354y}?t\355\037=\347\256\031>E\236\002?\224\344\177?TF\333:l\350\332;\nr\331<v\254\323=\276\313\275>\003\341n?\265\235\177>\321\316??8b@?\370:??\261\207A?A\347<?\"\013F?\243W3?\333\317V?\277>\n?\'\\~?Y\224\320<\316D\313=\010\030\267>\262<k?\245\241\230>\360BV?\325\273\013?H\331}?\345\205\010=\375\370\003>\227\355\345>AX}?o,(=\311D!>\343\336\007?6\010\177?\034\332v<\374!s=d\263d>b\2371?e\206Y?\034\305\002?O\341\177?[i\365:\272\363\364;\367\036\363<\330\347\353=i\273\320>\276Ew?c\341\006>h:\352>\375%~?\332J\353<\306\210\344=I\010\313>n\nu?s\327\'>\300T\014?\310\237}?\310\244\026=p\032\021>e\025\371>*\320\177?J5?;y\246><\213n<=b\3033>\2564\024?\350\236y?\312\014\307=-\264\263>\344Bi?y\300\245>E/`?\032\344\336>\314\267{?\312\273\206=L\275{>\034\332=?S9D?\374E7?kCP?.W\033?\372Qt?\261Y2>{I\023?\0130z?\226\305\265=v\243\245>\316\032`?\030_\337>a\327{?x\352\202=2\030u>^n:?8\247J?\232\353(?\034\326e?\325\352\273>\300\344m?C\233\206>\236oF?\024{2?\304.X?D\177\006?&W\177?gj(<8\257&=\275\346\037>\241\356\006?\310?\177?\244\247?<\266i==b\2474>n\310\024?H@y?\207E\322=\302\256\274>`Ln?7\322\203>\235\303C?\032@8?\222\217N?\311\220\037?vnp?\225\362i>\267\1774?x\357T?\345G\017?\374Y|?\013-f=\274=Y>N\'+?\027\347b?\rR\316>\363[v?\265q\024>\224\331\375>a\373\177?\376\353\2239O\341\223:\231\266\223;#\014\223<kh\220=\2679\206>\365\022F?\202F3?S\353V?0\364\t?\257s~?\304\365\304<z9\300=\262.\256>\341\331e?\327\322\273>\372\327m?\367\362\206>\254\302F?\327\3031?\310MY?Mc\003?\027\322\177?\022\2047;\204\0007<=\3654=\240\366,>\213\277\017?\371\037|?\224@t=\341\257e>\331*2?\361\254X?\227\"\005?\206\226\177?\253\235\322;\035C\321<\250\352\313=\350\234\267>\034\210k?\201\247\226>I\246T?\320\t\020?\027\373{?}0}=\357\211m>\303o6?\243\262Q?\340\265\027?B7w?J\271\007>\034x\353>|Z~?\345f\321<\234\014\314=\031\270\267>z\227k?5@\226>\034QT?\260\352\020?K\207{?\310\226\214=\037\360\202>~\347B?H\017:?JTK?\003V\'?\271\322g?\017&\257>\020wf?@\347\267>\022\262k?L\215\225>\317\274S?\031p\022?-\260z?ms\246=0\354\230>\r\177V?\220\031\013?,\023~?\204\217\364<uB\355=\361\305\321>\026\247w?\3163\001>\373\314\341>\001p|?\222\323`=c|T>\323d(?Z\201f?Z\245\267>\342\214k?j\207\226>\334\213T?\254O\020?\307\327{? \336\202=\253\002u>$c:?\265\273J?\306\273(?!\023f?\377e\272>\237\023m?I2\214>\210\235K?F\251&?=\245h?\234\312\251>\026\370b?\367\350\315>\3772v?4\317\026>V\231\000?\221\376\177?\240\255\2678\202\251\2679\t\231\267:3W\267;\227P\266<\342A\262=\354\275\242>\354\006^?R\267\353>\220d~?Sm\314<_S\307=\010\355\263>\273di?\265\341\244>s\221_?\317\225\342>\305\236|?\266sU=\032TJ>\345Y\"?\377\217m?\202\340\210>\265\221H?\335\266-?\317X_?\276\347\343>\257\352|?\311\363B=c\2549>\274\001\030?\263\376v?[\003\013>dH\360>\370\010\177?\245\031v<Pgr=\330\016d><D1?<\023Z?\3419\001?\375\371\177?\344g\3009\321U\300:\220\r\300;h\355\276<>z\272=\202\177\251>k\305b?\017\"\317>\005\254v?y\317\017>9:\367>\013\263\177?!\274\231;|\003\231<\323\'\226=}%\213>?\251J?\337\346(?(\334e?Z\304\273>B\320m?\364\'\207>\277\364F?\367T1?u\371Y?f\202\001?\343\366\177?\245\310\021:\344\263\021;\367`\021<\273\026\020=!\005\013>\372J\360>I\t\177?\374\310u<\023\031r=\334\311c>\365\0351?\022NZ?\r\224\000?\252\376\177?\032=\2538\2069\25395+\253:\374\361\252;\257\r\252<\376\205\246=\274\373\230>\222\213V?\270\367\n?\330\036~?\016\320\356<\322\331\347=x\232\315>/\024v?8\226\030>\211\331\001?P\362\177?\200\357Z:\261\300Z;\304\005Z<\r\037W=\272\322K>\302@#?\352\224l?\034\220\217>\350\235N?\225m\037?\034\221p?S\013h>2v3?\307\236V?\300\303\n?}0~?\265\035\346<\352\246\337=c:\307>\363hs?\260\210?>`\265\033?\365\000t?\"\3626>\326B\026?\307Ax?\231H\360=\222\027\324>\030xx?!\346\351=\212/\317>*\261v?+\203\017>o\314\366>U\253\177?\'\035\251;\270=\250</\311\244=\343\206\227>_]U?t#\016?j\340|?3uE=Y\360;>\030r\031?\022\342u?Cy\033>?\336\003?&\304\177?\301.o;IOn<\353\327j=\364`]>\321\204-?&\240_?\375=\342>x\212|?&dZ=:\277N>&\001%?\254\232j?a\334\234>n\233Y?=\212\002?2\346\177?L^\316:\036\013\316;r\277\314<e\241\307=\333+\264>\002\212i?\375\353\243>\234\341^?T\254\346>\215~}?\356\312\036=\374\242\030>\177\342\001?\312\361\177?\nLc:\226\031c; Pb<\332/_=\223\006S>\235\211\'? \223g?<\302\260>\322xg?ml\261>\276\341g?\223\304\256>W9f?\014r\271>\020\216l?\236\276\217>\272\306N?2\t\037?\027\363p?X\246b>\320{0?YE[?\001\255\373>M\355\177?\002\214\225:T`\225;\001\262\224<\017\377\221=\261\226\207>\033]G?\345l0?\360[[?\024,\373>\261\350\177?re\272:\226!\272;\354\022\271<\211\344\264=D\352\244>\212\227_?mq\342>c\226|?\330}W=\216\'L>\312s#?\212\\l?S\016\221>k\353O?n3\034?\326\222s?\362+=>w9\032?\033Au?\306\266$>\0328\n?G^~?\342\207\317<\372E\312=\251K\266>\250\307j?l\260\233>\274\261X?N\025\005?\245\230\177?>c\316;w\026\315<\017\364\307=dn\264>\\\261i?@\350\242>\274%^?#\002\353>ZG~?\350\327\332<E\377\324=L\330\276>\320jo?-#x>\"\002<?\000\274G?\267\230/?F\232\\?\005\006\364>\220p\177?Q\037\017<A\337\r=F\365\010>\312G\355>\224\241~?CF\256<&\221\252=\203\\\234>%8Y?\250\237\003?z\313\177?\324\354Q;\260@Q<\205\224N=O)D>}\225\036?~bq?u~\\>\017\004-?KV`?V\371\335>;z{?(*\216=\317K\204>Z9D?\356E7?\203CP?\362V\033?.Rt?\302V2>\221G\023?21z?h\242\265=\206\206\245>]\006`?\321\331\337>o\366{? Q~=\316\206n>\023\3676?W\313P?!\001\032?\025ou?m\024\">\366l\010?\t\344~?\000^\215<{\355\212=\336\200\201>\234~A?\331\371<?\271\347E?\022\2453?BSV?\324\217\013?L\351}?\310\225\004=\033K\000>\236p\340>\366\033|?\2509u=2\213f>\230\2432?\301\356W?h/\007?~1\177?X\333M<4EK=\307.A>\343\274\034?\214\030s?\373\016D>?\205\036?\000rq?\225\242[>\260\206,?\262\005a?v\325\331>XOz?\360\010\262=\342\216\242>\236\344]?\306\200\354>\336\203~?\256\366\274<\324\232\270=\366\366\247>\311\271a?x\215\325>8\366x?\324\007\333=\007\233\303>\204\300q?\261GW>Q\005*?\005id?F\356\304>\323^r?\216vN>\315\325$?\257\314j?\333\216\233>i\227X?9^\005?\274\214\177?a\037\346;\251\201\344<\357!\336=\023\n\306>\220\340r?\2513G>Rs ?\336\213o?\221Vv>\362\023;?4wI?4\253+?)4b?2\240\322>.\365w?\225D\371=\306\355\332>\272\241z?\225.\250=\360^\232>\204\247W?\334\362\007?F\003\177?\032\300{<\321\341w=x\341h>\034\3533?\353\341U?\311\300\014?pu}?\273\006!=#\262\032>pS\003?\301\323\177?Y\3360;&d0<\377}.=\007\017\'>\340\315\013?\245\322}?o\'\n=\206~\005>\261.\350>\271\310}?\221\227\014=/\304\007>\036\210\353>\r]~?\350\"\320<\"\331\312=\266\301\266>j\013k?\244\353\231>\305KW?\247\355\010?$\301~?\201\247\236<\347\224\233=3\303\217>\276\312N?O\377\036?\253\374p?\t\037b>U00?\\\267[?\014!\371>\312\320\177?\217\263<;w(<<I\3779=\032\2151>\377\303\022?h\177z? J\254=\252\313\235>\343SZ?\242\203\000?\361\376\177?\207^\2078K\\\2079XS\207:\224/\207;\315\240\206<gj\204=U\265w>z\311;?\014&H?N\252.?j\371]?\260\006\354>\013q~?vC\306<\023w\301={0\257>\244}f?\032\275\267>M\232k?3-\226>fAT?\021\024\021?Qq{?J=\217=\2318\205>V\035E?\261\\5?\365\201S?\344\t\023?\037Vz?\2449\261=\214\343\241>\030g]?z_\357>\213\353~?l\245\211<XU\207=\351\307|>]a>?\3072C?\207q9?\377pL?\334\262$?\325\364j?\256\202\232>\340\303W? \245\007?7\026\177?z\363h<\221\243e=\260\303X>\374\340*?\236Ec?\250\010\314>\204su?R\323!>s@\010?\242\357~?\360\235\207<0_\205=^_y>\264\244<?\207\211F?\001B2?\232\210X?6\207\005?\302\205\177?t\007\364;76\362<\343\014\353=\316\022\320>\014\007w?-\207\n>X\223\357>=\362~?iS\206<\216\037\204=\3702w>\037\206;?\236\243H?:\216-?\303\222_?\374\215\342>\370\234|?\322\343U=\204\270J>\226\226\"?\236Nm?\254\237\212>\317.J?\237\003*??kd?P\340\304>aXr?\257\322N>\277\014%?@\215j?\3075\235>\215\340Y?e\310\001?I\363\177?\214_K:\'7K;\327\225J<\224\024H=\221N>>c\360\032?(\251t?9d->\022\010\020?\366\373{?p\372|=\220Zm>\\V6?\320\335Q?\212G\027?E\210w?t\000\003>-|\344>\356\n}?\343\024;=k\2112>\222h\023?>\035z?\253\003\270=\002{\247>Lda?\267\226\327>\356\236y?\r\014\307=\225\263\263>\212Bi?\315\302\245>\3510`?=\332\336>>\265{?\301\n\207=mF|>\276\037>?p\262C?ud8?\226ON?\240- ?@\322o?\001\200r>q\0229?\"\033M?\252\032#?\312\276l?\270s\216>\334\242M?\201\322!?7 n?f\002\205>N\351D?\347\3145?\022\306R?\r\362\024?$%y?\315{\325=\345:\277>\333\234o?\242iu>\313\230:?\244YJ?8\240)?\'\355d?\360\256\301>\242\324p?\024Td>\234j1?\017\330Y?<\340\001?\354\361\177?\333+a:W\372`;\2404`<0#]=\3232Q>\322u&?>\343h?\2364\250>\"\344a?\232\212\324>Z\237x?\020G\345=\t\234\313>=Gu?\355\\$> \373\t?\206q~?\034\007\306<\244=\301=\344\001\257>2`f?\236y\270>/\004l?\303c\223>\315\353Q?\273#\027?=\242w?B|\001>I9\342>`\211|??\250Z=\020\374N>g%%?\253pj?\t\364\235>\326rZ?7,\000?\341\377\177?\301b\3646Lb\3647z`\36480Y\3649\010<\364:\207\307\363;>\367\361<\243\321\352=&\345\317>\353\365v?\356\205\013>\201\006\361>\303\037\177?\243x_<Vl\\=\257\217P><\025&?\302Vi?\276=\245>\326\322_?\274\016\341>\221B|?\237\334k=\262G^>\227\007.?\026\345^?\267\227\346>wz}?B\313\037=`\217\031>4\210\002?[\346\177?d\024\315:?\302\314;\262z\313<\324l\306=C3\263>\314\365h?\361\272\247>s\220a?\271\211\326>\347Hy?&@\321=\354\336\273>i\336m?\313\306\206>\337\230F?+ 2?\254\275X?5\364\004?\326\235\177?\177\t\304;B\335\302<\241:\276=?\217\254>\261\315d?Du\302>\2274q?x\010_>\210t.?\251G^?a:\352>\373%~?mK\353<P\211\344=\264\010\313>\232\nu?\350\324\'>\nS\014?p\240}?g{\026=\031\364\020>p\336\370>&\315\177?\253@K;K\237J<\314\035H=\343V>>\235\365\032?\302\244t?h\244->\2012\020?\230\346{?L\023\201=z\341q>\347\2768?\263\257M?W\263!?\030An?\366\037\204>\363\016D?9\2407?\r\247O?\345\335\034?\326\372r?3\272E>-\214\037?\002sp?\257\262i>\377\\4?Z(U?\267\260\016?\310\240|?P\366T=\302\343I>\346\025\"?\265\330m?\366\355\206>\361\275F?L\3161?\202=Y?\262\220\003?(\315\177?\3446K;\224\225J<S\024H=VN>>>\360\032?G\251t?ub->\347\006\020?\214\374{?\035\326|=\271:m>GE6?\315\372Q?S\375\026?\354\275w?)\274\377=\034\315\337>=\363{?\025\027\177=&4o>\213S7?\373+P?\355\221\033?\223\037t?\35555>\232$\025?\346\003y?\024j\331=tU\302>G%q?\027\341_>\234\356.?\206\225]?,P\356>-\307~?Z\252\233<\034\265\230=*R\215>\267\240L?\271@$?\357vk?\352\032\227>\021\005U?\212\016\017?,u|?\355\221_=\364]S>\363\274\'?\212Sg?_]\262>\304th?^\007\253>\344\313c?W\305\310>\276\025t?\236\3045>\266\200\025?\205\306x?\037\251\340=\023\004\310>\310\301s?9\205:>\302\213\030?\375\225v?(\026\021>B\017\371>\325\317\177?\356\210@; \370?<P\270==\265\3564>\222\366\024?/\"y?`\325\325=\310\201\277>\246\300o?\367us>\255\2239?\2403L?;E%?\250Kj?\022\352\236>`.[?\375/\374>w\361\177?&\204h:ZOh;\212|g<B7d=\032\200W>\377%*?\n>d?\306\373\305>\026\332r?\255\220G>\035\254 ?\024Ro?\211{y>&\263<?#nF?U~2?\242)X?h\215\006?DT\177?\245H+<<~)=\276z\">\331\262\010?V\321~?\030\242\226<\005\335\223=\0230\211>\250\333H?\324\016-?#G`?\217T\336>Z\222{?9A\213==\311\201>\014\306A?Rg<?\237\375F?HA1?\310\027Z?\026-\001?x\372\177?F\n\2619\370\372\260:\313\275\260;\300\311\257<\024\004\254=e\221\235>!\'Z?\332\001\001?\361\373\177?\303\331\2019\207\321\201:\235\260\201;6-\201<\202G~=c~n>\223\3626?\020\323P?\237\355\031?\351~u?\377+!>\350\315\007?_\014\177?C\271r<\270 o=\327*a>\301\247/?\344\203\\?\201\207\364>l|\177?\013P\003<\237B\002=F<\374=o+\335>\331B{?@\326\224=3\005\212>\313\240I?\236K+?\n\266b?\365\200\317>\035\320v?\305\267\r>\2215\364>\372t\177?&\272\n<q\215\t=\346\356\004>-Z\347>}\240}?Nx\026=;\361\020>S\332\370>\353\314\177?H+L;s\210K<,\001I=\377#?>Pv\033?R7t?\034\3353>_E\024?Y\224y?\264M\310=\204\266\264>\334\333i?D\317\241>,X]?\213\266\357>\274\366~?e\030\204<\034\367\201=yos>E\2209?\3009L?\2446%?\244\\j?8y\236>\225\330Z?\377\027\376>^\374\177?R\215h9\036\200h:TKh;\213xg<`3d=\247|W>\000$*?\254@d?J\353\305>\234\322r?\000\374G>\220\355 ?\376\016o?\354\037}>\345\215>?\332\333B?\233\':?\037(K?\335\275\'?gRg?\265d\262>6yh?S\352\252>\231\270c?\242=\311>mIt?\010\3262>r\232\023?\327\376y?X\243\273=Vr\252>\237hc?S/\313>\220\032u?a\353&>\332\265\013?x\333}?\036\374\007=`x\003>\212.\345>\3110}?\253\3241=/\034*>\322\331\r?\235\000}?\237\231==\334\3224>\217\344\024?\366-y?\243p\324=Kg\276>\0311o?/F{>\202\235=?<\256D?\347K6?\221\357Q?\030\032\027?4\251w? \024\001>\232\235\341>\312d|?\022\215c=\332\350V>R\316)?\016\261d?\230)\303>\314\212q?\321BZ>Y\275+?`\033b??8\323>\272*x?[\375\362=\334(\326>b)y?d\373\324=9\325\276>@io?\3668x>\\\r<?\361\246G?\345\307/?\370S\\?T\234\365>\020\224\177?y\205\327;\226\032\326<\022\202\320=\236G\273>\207\215m?e\361\210>k\241H?8\223-?\246\213_?u\270\342>\267\246|?\247\204S=h\230H>\310L!?u\254n?\271:\201>69A?\227\207=?j\330D?D\3615?\332\210R?-\220\025?\036\274x?B\343\341=\032\371\310>\t,t?\005\2014>\231\257\024?^Py?\261]\320=\245*\273>\366}m?\365[\211>]\004I?\013\262,?A\311`?\211C\333>t\272z?>8\245=\r\344\227>G\251U?\233X\r?\2067}?\254.0=\250\232(>\322\327\014?:l}?\204H#=-\306\034>\245\305\004?\351\244\177?\032\355\265;\207\352\264<\262\353\260=\024\243\241>\2417]?Ft\360>T\016\177?\353\307p<\r>m=N\200_>\034\270.?G\345]?\353|\354>H\203~?\001A\275<\271\341\270=\0211\250>\262\341a?\200\231\324>h\244x?\233\256\344=\254%\313>\224\026u?\261%\'>$\335\013?\377\314}?\233\212\013=\236\311\006>d\027\352>\003 ~?\202<\356<\335N\347=\360.\315>\253\351u?F\t\033>8\220\003?6\315\177?n\000K;t_J<\211\337G=\265\036>>O\322\032?m\302t?\231\363+>\303\023\017?\266r|?\001+`=M\346S>\360\014(?\321\357f?&\340\264>R\364i?\\-\241>\242\340\\?2n\362>\336G\177?z\2357<\260\2165=\177\202->\026\034\020?\350\361{?\200i\177=J|o>\367y7?x\351O?L8\034?\214\216s?\363i=>\214`\032?\375 u?L\215&>iv\013?q\362}?\nV\002=\245`\374=\330F\335>KJ{?\300\360\223=\364@\211>S\353H?%\353,?My`?e&\335>zA{?\202\000\225=O)\212>\016\302I?\003\377*?S\035c?q\002\315>\371\327u?\004\016\034>\276E\004?\374\266\177?\356\335\221;\2647\221<\262\244\216=N\265\204>$\237D?Il6?\216\270Q?\305\246\027?pBw?\250\022\007>\371\202\352>@2~?\266?\345<^\325\336=\206\226\306>\334\037s?\305\245C>HD\036?\264\257q?\2476X>\225\217*?J\262c?\366d\311>:Zt?\274\3411>A\373\022?\321^z?\256/\260={\007\241>\215\304\\?\037\021\363>\274X\177?\274\326&<\317#%=\\{\036><\364\005?3r\177?\330~\r<\004F\014=:x\007>q\030\353>\000K~?\361\n\331<\324J\323=F~\275>\333\270n?\366\344\200>)\344@?\2004>?\034\212C?\253\2718?\372\270M?\320\234!?\312Xn?\237|\203>wpC?\301\3578?\354XM?\215\205\"?\003am?\364!\212>I\273I?\236\016+?X\010c?[\204\315>x\013v?\320\026\031>\2763\002?\232\354\177?*\"\233:)\363\232;\2267\232<_P\227=a\"\214>$\217K?D\313&?\032|h?y\327\252>\020\254c?\301\213\311>\301jt?P\3610>$^\022?\201\272z?\2336\245=\255\342\227>)\250U?\231[\r?G6}?\315|0=\020\342(>\261\007\r?\337X}?\305\005(=L!!>\223\306\007?(\016\177?\271\363p<\221hm=\345\245_>I\315.?U\306]?f2\355>q\236~??\323\257<+\r\254=\365\230\235>\362,Z?x\361\000?q\374\177? \300c9v\263c:\325\200c;\247\266b<\213\223_=e_S>\314\275\'?}Rg?(d\262>\341xh?~\354\252>\n\272c?\2474\311>\225Et?\342\r3>\307\276\023?\201\350y?XL\276=\253\235\254>\027\327d?\t:\302>\017\030q?\005\234`>\253W/?\305\372\\?f\326\361>l7\177?v\366G<\262\205E=A\377;>\207{\031?\220\332u?\337\347\033>9+\004?|\272\177?\311\342\212;\027L\212<f\366\207=Y\337}>\213\356>?Z\036B?W\261;?\034SH?\225D.? \215^?t\240\350>\261\335}?>p\007=\305\365\002>El\344>\201\007}?\332\352;=\313K3>\006\347\023?\223\317y?\344C\301=\366\006\257>hcf?\026e\270>\265\370k?;\261\223>r-R?m{\026?7\032x?2\355\364=\222\242\327>\253\242y?Q\232\306=\357W\263>\310\013i?\256*\247>\246,a?\026\351\330>\003\010z?\250\213\272=\301\215\251>\n\317b?\245\346\316>I\225v?\241 \021>D\036\371>\244\320\177?XL=;^\300<<\261\223:=\002\0242>\r\034\023?LKz?\257\204\262=\026\365\242>\021/^?5\313\352>L>~?#O\337<\3138\331=\240.\302>\215\022q?\337\351`>X\203/?\t\272\\?\024N\363>\326^\177?Y\304 <\2010\037=\254\000\031>9$\002?\250\355\177?\344\265\222:\332\213\222;\023\344\221<\361J\217=WD\205>\232(E?[D5?\201\252S?\374\237\022?r\224z?\237\305\251=\316\262\233>\232\263X?!\020\005?w\231\177?K\300\314;\305x\313<\377j\306=\3111\263>\351\364h?\302\300\247>u\224a?Gq\326>\371@y?|0\322=\t\236\274>\223Cn?\334\016\204>e\376C?j\3037?\315iO?\037v\035?\032pr?~\177M>\"B$?Uuk?\247%\227>\335\rU?)\367\016?$\200|?W\347\\=p\375P><V&?$\ti?\376;\247>\2518a?\036\240\330>\245\361y?\2705\275=\254\272\253>nBd?E\340\305>\234\315r?\305CH>H\031!?\344\341n?\212\221\177>\271\310??^n@?\206\"??\365\267A?E\204<?\356\306F?m\2721?j\\Y?s:\003?P\326\177?\223\245&;\0309&<`\211$=[\355\035>\034\222\005?\336\203\177?_\313\367;\253\353\365<\304\211\356=5\301\322>\335\000x?\020\346\367=X\344\331>\307Sz?^\201\261=\331\036\242>\244\222]?\ta\356>\201\311~?s\203\232<`\231\227=\226`\214>d\307K?AF&?F\034i?_\276\246>M\341`?\377\261\332>\\\220z?\342B\252=E\033\234>K\005Y?G-\004?7\272\177?\273k\213;\337\323\212<\226y\210=\322\302~>\007a??g<A?\025\201=?\354\344D?W\3265?1\266R?\033\033\025?+\ny?g\254\330=\373\277\301>\356\334p?\026\337c>\275)1?\373;Z?\027\307\000?\225\375\177?\220\322\0329\266\314\032:O\265\032;\321W\032<\231\343\030=\250.\023>\002\016\374>o\360\177?1\374x:\247\277x;\363\315w<w\016t=\275\203e>\200\0222?\022\323X?\326\270\004?\317\246\177?\353\"\262;\002+\261<\036V\255=n\252\236>\013\376Z?#C\375>\201\370\177?l\322\3579W\266\357:\034F\357;\324\206\355<\275\243\346=i\252\314>\311\264u?\010\024\036>\331\254\005?+\177\177?\366\223\000<I#\377<\0171\367=\030[\331>\241*z?\360j\266=i+\246>~z`?5\037\335>\205?{?\331<\225=\334\\\212>y\361I?\224\221*?\243\257c?}u\311>Fat?>{1>U\270\022?>\206z?\336x\253=\207\035\235>\323\315Y?\366\374\001?0\360\177?\337\350|:h\252|;\t\261{<6\323w=\242\324h>\034\3443?F\355U?O\242\014?\207\201}?B\020\036=\301\366\027>\200i\001?\006\370\177?\2564\3779\341\024\377:\313\225\376;p\233\374<]\321\364=d\215\327>\374\233y?\225e\307=\263\373\263>rmi?N\250\244>\211h_?\372\211\343>\370\325|?%\001H=\010=>>_\345\032?m\262t?\r\335,>\233\256\017?K(|?;<r=\334\350c>*/1?\2453Z?\225\336\000?\372\374\177?1\205A9\014|A:}WA;x\305@<\325\200>=\235\2445>\021l\025?^\324x?\357\006\337=L\275\306>:1s?\300\253B>\217\251\035?\225@r?\262&P>\370\326%?\237\240i?\306V\243>\357u^?t)\351>l\366}?N[\001=\367\212\372=\200\344\333>A\350z?\345\271\237=\327D\223>\215\321Q?\346f\027?fqw?\026V\004>\273w\346>\032t}?\204Z!=T\377\032>H\211\003?\373\315\177?\360\355G;\314QG<\013\345D=\022n;>\223\037\031?F#v?n\267\027>\364<\001?\336\371\177?\0361\3049S\036\304:3\323\303;\235\247\302<\211\007\276=\243e\254>\213\262d?: \303>W\206q?\004\202Z>\230\341+?\301\351a?5h\324>\250\223x?\263\247\346=z\255\314>\004\266u?\354\001\036>T\240\005?a\201\177?Q\300\374;:\315\372<\217\037\363=\361B\326>\3461y?h\371\323=\305\010\276>\206\000o?\304\350}>J\363>?\004\025B?\242\304;?\032/H?\343\225.?+\027^?\323W\353>KU~? \367\323<\025{\316=\313\251\271>\276\254l?Y\356\216>i\017N?l\312 ?\0243o?\246*{>|\217=?:\311D?\353\0216?\276QR?\"\036\026?;[x?\rK\355=\213\314\321>x\251w?(\020\001>\253\227\341>bc|?\271\344c=\3036W>\201\373)?\346ud?n\235\304>k9r?\004\215P>\247\023&?\244Xi?V1\245>\n\312_?lC\341>BO|?\312\307h=\037\215[>oz,?\276\026a?\022n\331>Z0z?\036\274\265=\254\233\245>N\025`?\037\200\337>\310\337{?J\346\201=\033Rs>\335\2009?tUL?\233\364$?+\251j?\306{\234>wPY?\320[\003?\341\322\177?/]4;\034\3363<\232\3441=\274**>\212\343\r?g\374|?\314\240>=\233\3015>\305~\025?\324\307x?\267\201\340=O\345\307>P\264s?\027H;>~\007\031?%6v?\251\240\026>~x\000?\035\377\177?(\331b8\004\326b9t\311b::\227b;\253\316a<\367\261^=e\226R>\237G\'?f\344g?T\263\256>d.f?\375\267\271>\212\264l?c\271\216>\226\340M?\204<!?_\275n?\264\305\200>\034\305@?is>?\224\017C?_\2739?\032\354K?;\357%?\345\203i?O\024\244>\227\376^?_\000\346>\023\\}?\377<\'=\365h >\036H\007?\350+\177?\021hS<\276\255P=\022\014F>g\276\037?VAp?All>P\3265?>\266R?\371\032\025?A\ny?\276\251\330=\342\275\301>\350\333p?}\355c>\27311?\263/Z?\266\351\000?\253\374\177?UYU98NU:\312!U;XpT</\257Q=7\363F>\357K ?\267\263o?\224*t>H\3629?\333\210K?\033\332&?\031jh?\377L\253>\n\372c?=\245\307>+\230s?\364\336<>\346\010\032?\304hu?\037q\">H\254\010?\036\323~?\017\300\225<F\003\223=\256u\210>\035.H?\037\230.?\353\023^?\361j\353>_X~?\005r\322<\013\n\315=\350\202\270>`\tl?\270@\223>\014\316Q?\332o\027?\330jw?\350\267\004>\273\010\347>\264\220}?\215W\032=\266\206\024>g\367\375>\335\373\177?\260S\2049#K\204:\364(\204;\200\240\203<\023\203\201=\316\244r>\316%9?\222\370L?\337m#?\027cl?\360\341\220>\353\304O?\177\223\034?\235=s?]\371A>\341:\035?n\246r?\231uJ>&n\"?:zm?\202u\211>\t\034I?\000|,?\220\024a?I{\331>U4z?\212B\265=\2457\245>\203\316_?\242(\341>\321H|?@Xj=\351\357\\>\232D-?=\373_?\217\034\340>!\007|?\rFz=>\373j>-\0175?\331\002T?\205\270\021?\345\027{?\354\000\232=Hl\216>B\234M?\202\342!?H\017n?\353v\205>\017YE?|\3334?fXT?{\327\020?m\221{?\316]\213=\356\341\201>b\336A?C5<?\366[G?so0?\021X[?+B\373>\205\351\177?\201\313\263:^\214\263;\202\220\262<\030\254\256=L\306\237>\254\324[?\352x\370>V\307\177?\313wb;s\257a<\233\223^=V{R>\2617\'?\360\367g?f4\256>\207\335e?\240\273\273>\233\313m?\343G\207>\341\022G?\030\0221?F`Z?\252`\000?n\377\177?\343\000\0228\226\377\0219b\372\021:\223\345\021;m\222\021<PG\020=K2\013>\303\214\360>K\021\177?{\326m<\240bj=\031\371\\>\324I-?\331\363_?\344H\340>$\022|?\342\232w=\036\243h>\033\3113?\006\031V?\267,\014?\034\257}?\263\341\022=O\235\r>J\017\364>nq\177?\233B\016<d\006\r=c+\010>\266\037\354>\360t~?\362V\304<H\242\277=\326\263\255>\036\213e?s\307\275>\313\336n?z\274\177>8\336??}C@?\276x??f\rA?\305\340=?r,D?na7?\366\023P?\023\316\033?\211\353s?\251(8>\013\n\027?\307\264w?\374f\000>e\232\340><&|?\376\273r=~Yd>\234m1?m\323Y?>\355\001?\'\361\177?,\210m:\022Qm;\023ul<s\013i=\025\311[>\253\234,?\025\347`?\375\216\332>#\206z?\000|\253=$ \235>\327\317Y?N\367\001?\212\360\177?\304Qw:\010\026w;\214\'v<\314tr=\274\032d>\323J1?\025\tZ?uV\001?\330\370\177?|\007\3459\340\355\344:\203\207\344;\200\357\342<\"\246\334=c\340\304>jXr?3\322N>u\014%?\226\215j?\2133\235>\323\336Y?<\315\001?\004\363\177?*\266O:\010\214O;\305\343N<\367FL=\344\026B>7M\035?\251\225r?\344eK>4\377\"?\337\334l?(\247\215>\301\354L?I\212#?\225Cl?C\267\221>i}P?\204\305\032?#\315t?=W+>\322\253\016?\007\243|?ojT=hfI>\352\311!?J)n?\360\303\204>;\255D?\016N6?\351\353Q?s#\027?q\242w?7y\001>\2754\342>Q\210|?#\352Z=\3526O>sH%?\351Gj?\371\002\237>AA[?Z\304\373>\025\356\177?\260N\217:\224&\217;{\206\216<\260\013\214=\027x\202>\376qB?\031\004;?q\224I?\006h+?\217\217b?2n\320>#)w?\250\213\010>\371\254\354>\222\212~?\235\246\271<\213q\265=S^\245>\354\351_?i\204\340>\326 |?/\013t=\332\200e>\350\0202?\221\325X?\352\261\004?\324\247\177?\350\032\260;\236(\257<\331i\253=\007\021\235>*\304Y?\021\030\002?v\356\177?{G\214:\014!\214;\244\207\213<?\'\211=\274\357\177>\336\367??C\020@?u\337??\005A@?\265}??\216\003A?\310\364=?\272\005D?\324\2637?\362\204O?\2662\035?\343\255r?\277\nJ>\201-\"?\206\277m?\303\232\207>\357`G?[d0?\333h[?L\342\372>\324\345\177?sN\321:\342\370\320;\267\243\317<f`\312=\335`\266>\333\323j?\370^\233>\315qX?C\306\005?\237z\177?\031\033\005<E\006\004=\272\211\377=E\247\337>\262\351{?%\263\200=b9q>\034f8?\254LN?\3014 ?\023\313o?E\344r>-G9?\350\274L?+\375#?/\303k?\016\032\225>\305\\S?\333j\023?\334\033z?\356-\270=\254\235\247>@|a?\327\004\327>\215py?/\215\314=\005\037\270>o\321k?\016\272\224>u\014S?\257;\024?{\232y?S\223\307=\207 \264>L\203i?B\030\244>m\001_?\206\357\345>\246X}?\276\023(=\037.!>\\\317\007?\004\014\177?\203\023s<Kxo=.xa>\020\323/?IC\\?\216\374\365>\273\233\177?Y;\310; \002\307<},\302=\216\303\257>+\332f?`k\265>\275Ej?b\021\237>+L[?\024\206\373>\367\353\177?\364>\240:\314\014\240;\254D\237<\371+\234=FC\220>\313:O?\244\352\035?\377\003r?\022\207S>\026\325\'?\2075g?\016\037\263>\253\351h?\177\n\250>7\307a?l;\325>\351\332x?ZA\336=\255\"\306>\262\353r?\316\223F>\220\021 ?k\356o?\020\366p>}B8?`\213N?\027\233\037?Jdp?\203\201j>B\3154?\343oT?\211\231\020?\313\261{?mu\207=\226\377|>\212}>?\316\373B?\311\3449?H\241K?h\240&?\363\257h?\216\204\251>\324\310b?\000\r\317>\371\243v?\321F\020>\303\345\367>Z\276\177?N+\203;\343\244\202<\204\217\200=\023\373p>$E8?\265\206N?\212\246\037?\371Xp?v k>O#5?r\341S?\'\020\022?\346\346z?\214\343\237=\376g\223>d\357Q?\214\032\027?\340\250w?\003\031\001>\352\244\341>\206f|?/!c=\361\210V>\242\226)?\236\371d?J`\301>@\256p?\023qf>;\2252?x\005X?\366\360\006?G?\177?S(@<a\347==j\0315>-\022\025?\r\020y?O\372\327=\2023\301>P\230p?\372\245g>\275>3?\305\367V?_\322\t?\"~~?=\314\277<\251N\273=)-\252>P:c?\312N\314>\352\217u?82 >\204\"\007?`4\177?\212\375J<\266yH=\320\251>>\257)\033?\271xt?\370%0>\352\330\021?\345\005{?\302*\234==B\220>\3449O?\340\354\035?\351\001r?\314\244S>\210\346\'?\314\037g?,\253\263>\206=i?\311\343\245>&H`?wN\336>\300\220{?\302r\213=\007\364\201>7\360A?\213\020<?\366\240G?I\325/?\367?\\?\266\017\366>9\235\177?=A\305;B\021\304<\357_\277=\345}\255>ehe?\257\243\276>\375Oo?\225\230y>\n\302<?\341QF?z\2742?V\307W?\241\233\007?z\030\177?b\264f<\277tc=;\323V>\306\301)?p\301d?t\302\302>\235Yq?E\374\\>\241K-?L\361_?2X\340>\356\025|?\326\257v=p\324g>+X3?\002\317V?\016A\n?i[~?\310\361\320<z\235\313=\026_\267>\027ek?\266\222\227>\005gU?\265\t\016?\277\353|?]\261B=Ip9>j\333\027?\\\033w?\340X\t>\240\331\355>\225\266~?\255\341\243<d\232\240=9\002\224>\340qR?h\313\025?\375\223x?\233\235\346=\251\245\314>\341\262u?\0200\036>9\300\005?\266{\177?\337\005\004<\207\365\002=E\213\375=\263\'\336>\205\206{?\247\256\214=\267\004\203>\233\373B?4\3459?\207\240K?2\242&?\312\255h?\257\222\251>_\322b?\023\322\316>c\215v?\252\225\021>\343\305\371>9\331\177?\273\002\033;\337\244\032<4/\031=\234t\023>\250q\374>[\363\177?CIJ:M!J;\264\201I<@\007G=|[=>oW\032?\177(u?\\\037&>0,\013?\261\014~?\227\300\367<nB\360=\332\022\324>zvx?\350\026\352=,U\317>\177\277v?\202\256\016>\374\231\365>\337\223\177?\231\346\327;oz\326<\347\334\320=\360\217\273>G\264m?\347\347\207>f\251G?e\302/?.\\\\?\360l\365>.\220\177?\304A\337;\\\274\335<\346\273\327=A\002\301>\034\200p?s\372h>\272\3703?\321\313U?\023\374\014?\230]}?\337\335&=\227\021 >\030\014\007?Y9\177?L\rF<j\250C=\312O:>\307i\030?\374\257v?\261\224\017>\250\345\366>#\255\177?)\204\245;\"\256\244<\245^\241=\240\247\224>\001\375R?\306c\024?\t\201y?\217\230\312=\353\215\266>\275\355j?\023\262\232>k\351W?\021>\007?0.\177?\331#Q<kxN=\013\020D>\346\205\036?`qq?r\253[>\300\213,?\247\376`?+\000\332>\r\\z?S\204\260=\215M\241>w\370\\?\314\343\361>\3478\177?\374}F<_\026D=;\263:>\377\250\030?\202\177v?Ec\022>\331\353\372>5\346\177?\013D\316:\363\360\315;\233\245\314<\330\210\307=\027\030\264>K~i??9\244>\030\031_?\354b\345>\267;}?;(/=\272\252\'>\2566\014?P\253}?L\320\023=\276z\016>IO\365>\270\215\177?\230*\344;\340\223\342<\225O\334=y\234\304>\3718r?[\223P>i\027&?+Ti?\311N\245>\352\336_?_\306\340>\3760|?! p=]\014b>\350%0?\016\307[?\013\307\370>\326\313\177?\314}P;\377\323O<\0351M=\242\351B>\346\317\035?\364\034r?7#R>\304\003\'?i7h?y\227\254>\r\323d?|S\302>U$q?\200\356_>(\366.?t\212]?\345\220\356>\016\320~?\200D\227<qy\224=\335\265\211>\222WI?\303\363+?\321\320a?\272\000\325>?\307x?H\223\340=\006\363\307>R\272s?/\361:>X\320\030?\030av?\225%\024>nm\375>b\371\177?\023\301\3239.\253\323:\254S\323;\306\366\321<\037\225\314=_%\270>\000\325k?\007\242\224>O\370R?\362o\024?Eyy?d\204\313=\375J\267>\256Yk?G\337\227>f\245U?\376b\r?/3}?X>1=\344\222)>\023~\r?\320\'}?*\0064=\237\034,>\001/\017?\325e|?KLc=E\257V>\345\254)?\247\334d?\371\026\302>\037\007q?j\213a>\323\335/?13\\?TY\366>\333\242\177?j\005\272;\022\367\270<\361\311\264=^\324\244>\363\207_?\212\316\342>\302\253|?FJR=g~G>\367\240 ?u]o?,\335x>\333a<?\357\007G?d*1?\373:Z?\347\311\000?\203\375\177?!;\0379\3604\037:0\034\037;L\271\036<\247/\035=o\'\027>\214\327\000?*\375\177?\346z59\334r5:\265R5;G\3224<f\3232=\273\004+>\347t\016?\006\274|?\036TN=f\357C>\301q\036?\221\204q?7\233Z>\t\360+?\360\325a?k\341\324>\266\274x?;\321\341=\r\353\310>\376%t?\306\3304>c\350\024?w+y?P\274\324=B\243\276>\306Oo?\230\233y>\225\303<?\363NF?\353\3022?\037\275W?\245\267\007?\305\021\177?Z]m<\002\355i=\355\220\\>\223\016-?~G`?kR\336>\312\221{?\240R\213=E\330\201>\336\324A?\331H<?\0277G?\226\3010?U\333Z?d\010\376>!\374\177?\300\251w9\306\232w:\347^w;\337ov<\362\272r=\222Xd>\032m1?7\324Y?\010\353\001?I\361\177?&hk:\0102k;\363Yj<\321\377f=\306\370Y>\332\222+?ZUb?T\324\321>G\254w?\'\346\000>\323X\341>dT|?\305\210g=CrZ>\220\330+?\"\366a?n\034\324>\303yx?\364\263\351=\322\010\317>`\242v?\207^\020>\321\007\370>}\300\177?\315\315};,\322|<r\353x=\342\312i>&j4?\322\022U?\374\351\016?J\206|?hh[=\253\247O>\206\213%?}\371i?#\013\241>D\307\\?c\001\363>$W\177?\233l(<`\261&=\270\350\037>\376\357\006?|?\177?\277\362?<\017\263==\360\3514>|\363\024?4$y?<\230\325=fQ\277><\250o?\331\312t>\005F:?\312\360J?\243?(?5\260f?\343x\266>\252\341j?\303\002\233>.)X?\247\216\006?\003T\177?\321\211+<\013\276)=D\265\">\311\332\010?b\306~?\376\016\234<\354\025\231=\205\244\215>f\352L?\364\217#?J=l?\331\341\221>\023\242P?7i\032?\327\031u?\363\365&>\372\274\013?\334\330}?V\240\010=\252\021\004>7\022\346>\262_}? Z&=\220\230\037>\330\270\006?BK\177?\330>4<6C2=\036\201*>/\035\016?.\343|?b\310D=+T;>&\017\031?&0v?9\371\026>\371\266\000?\365\375\177?n\305\0029A\301\002:\217\260\002;\327m\002<\010d\001=R\233\372=\333\360\333>\275\353z?\346N\237=\203\352\222>\262\204Q?\013+\030?\233\337v?\241\321\014>H\350\362>\225T\177?\025\370*<[/)=b2\">o\201\010?\237\336~?%\r\220<\257\204\215=A\275\203>F\257C?&k8?\312CN?}J ?,\265o?3\026t>\236\3479?(\234K?\206\254&?P\241h?L\344\251>`\tc?\374}\315>\364\010v?\346;\031>\274M\002?\306\352\177?x\303\251:/\213\251;\235\252\250<\2321\245=z\336\227>\277\244U?\275d\r?u2}?\374k1=\224\274)>\363\231\r?\003\034}?x\3506=\202\275.>\370\353\020?\236\206{?\255\253\214=&\002\203>\031\371B?s\3529?\010\227K?\241\270&?\255\222h?\376C\252>\235Ic?\335\357\313>qiu?8g\">\205\245\010?\363\324~?\372\327\224<\247#\222=\021\266\207>\233zG?\016+0?N\277[?}\363\370>P\316\177?u\230F;e\376E<\337\231C=\243B:>ia\030?]\266v?\0106\017>\\]\366>)\243\177?dj\271;\316]\270<\2267\264=\317[\244>\3341_?\250\317\344>\304\034}?G\2716=\207\222.>\246\317\020?\213\225{?\240\336\212=\007t\201>\353qA?\320\023=?5\266E?\030\0214?5\244U?-f\r?\3321}?\275\2211=\017\337)>\376\260\r?/\022}?\034O9=\345\3540>?[\022?*\274z?\256\003\245=\366\267\227>d\205U?\231\270\r?\356\016}?\312\032:=\033\2461>T\324\022?\321uz?\337o\255=\322\277\236>M\016[?\242\346\374>e\366\177?\224\245\031:\206\216\031;k2\031<\265\303\027=.$\022>\267\221\372>\202\342\177?\242\327\353:\000k\353;\004\272\351<\343\016\343=v\342\311>\207\217t?\332\331.>\243\376\020?\272|{?\036\335\215=t\t\204>(\371C?\212\3167?hVO?:\246\035?\254Cr?\217\372O>\305\274%?\217\277i?i\212\242>Z\341]?\362\223\354>\310\206~?\354\205\273<\005;\267=W\326\246>\002\362`?\320L\332>\267rz?\315\316\255=\250\016\237>\033J[?\335\221\373>`\354\177?\327\367\234:\270\307\234;\260\007\234<\345\016\231=\213\236\215>\017\345L?\312\234#?\003/l?dB\222>\375\364P?\336\227\031?\362\303u?\3574\035>q\022\005?\031\231\177?4{\315;W1\314<a\032\307=!\277\263>kIi?\212\225\245>\371\020`?#\232\337>`\346{?\013\032\201=E\355q>\037\3058?\253\244M?\036\316!?\332$n?}\342\204>\240\312D?\352\0166?\322VR?\021\021\026?@dx?\227;\354=\332\373\320>z]w?i\177\005>\0000\350>\367\310}?<\210\014=\347\265\007>!s\353>\260Y~?\330\313\321<dl\314=\306\004\270>\257\302k?k\035\225>\224_S?\212c\023?K z?\205\246\267=\225.\247>[/a?\241\330\330>\373\002z?\023%\273=-\013\252>\202#c?%\334\314>\262\310u?\002\357\034>\370\341\004?\243\240\177?}r\276; W\275<\322\366\270=[B\250>\215\355a?\365P\324>\272\213x?\236\226\347=yf\315>\253\377u?\345\304\031>\251\255\002?N\343\177?\205t\345:\260\r\345;\315s\343<\030#\335=eB\305>\211\205r?\303LL>(\212#?\272Cl?F\266\221>\217|P?\250\307\032?Y\313t?dq+>9\275\016?\010\233|?\242\\V=\262$K>\344\327\"?\305\007m?\r\203\214>\200\346K?\205\374%?\"ti?;|\244>\016I_?\223E\344>%\377|?c\365==\037&5>c\032\025?\244\ny?\026\236\330=\261\264\301>p\327p?\220,d>\266T1?\331\371Y?L\201\001?\360\366\177?\030\364\020:\223\337\020;\227\215\020<\030G\017=\020D\n>g1\357>\206\345~?\026\241\214<\0227\212=$\343\200>[\342@?*8>?\375\202C?\262\3108?S\236M?\200\335!?\226\024n?nR\205>\0336E?(\'5?\r\333S?\347 \022?m\335z?\224\006\241=k]\224>\261\276R?#\005\025?\240\030y?\302\366\326=\223f\300> 3p?\2303m>sA6?J\001R?\262\354\026?\332\311w?\373V\376=\344\300\336>\253\256{?\n\326\207=7\247}>;\322>?\373UB?7>;?\017)I?<^,?\343=a?Z\200\330>\334\347y?\003`\276=\256\255\254>\205\341d?N\370\301>F\370p?#]b>\376R0?\027\203[?SL\372>}\337\177?\355\372\001;\356\270\001<\376\261\000=\256M\371=\247\364\332>\270\243z?\203\361\247=\344+\232>\362~W?\343a\010?\362\346~?\344\354\213<\013\211\211=\214L\200>uL@?\273f??\0341A?\032\230=?\244\270D?\21656?t\025R?\000\271\026?\271\356w?\"\006\372=#\200\333>\312\313z?($\243=F%\226>\331:T?Q%\021?\027h{?\350Y\220=?-\206>\030\007F?z`3?\253\301V?9e\n?\276O~?\017\264\326<\202\023\321=g\273\273>|\313m?\264H\207>\245\023G?c\0201?\344bZ?GY\000?\203\377\177?\317\022\3717\352\020\3718X\t\3719\017\353\370:\013r\370;\321\217\366<\013$\357=\2017\323>w*x?%\005\363=\314.\326>R+y?\226\300\324=\245\246\276>\201Qo?\210\203y>@\267<?\\fF?s\2172?\234\016X?\321\327\006?\261D\177?\350\305:<\330\2448=\002R0>\313\365\021?\274\365z?\220\033\236=\317\346\221>W\246P?v^\032?\265\"u? t&>le\013?\202\370}?\363\327\000=\320\224\371=v*\333>?\263z?N\025\246=Y\235\230>x?V?/\305\013?\330\325}?\001^\t=\245\302\004>\243\030\347>\315\223}?\377\224\031=\310\322\023>\260\367\374>\316\366\177?\337\034\023:\275\007\023;K\263\022<\007c\021=\3629\014>-\014\362>T=\177?\246\027B<\007\313?=\375\3176>\344,\026?\004Qx?]~\356=w\270\322>\306\375w?\321B\370=\240*\332>\240hz?\213\003\257=\320\016\240>\033\013\\?!@\367>r\263\177?\263\355\230;\3756\230<\362b\225=h}\212>^\017J?rL*?O\013d?P9\307>yhs?\221\217?>\256\271\033?:\375s?/(7>\221e\026?\213)x?\327 \363=\354C\326>72y?\275\357\323=\033\001\276>\222\374n?\230\037~>\353\016??\237\336A?\3104<?\336\\G?lm0?#[[?\2440\373>\335\350\177?\321\005\271:\364\302\270;B\270\267<{\231\263={\331\243>K\324^?I\373\346>\024\216}?_\374\032=\026\037\025>\222\317\376>\226\376\177?\331\001\2658\331\375\2649\332\355\264:\353\255\264;\340\256\263<\360\275\257=I\251\240>\207~\\?\205\246\364>0\177\177?\003\217\000<\213\031\377<\354\'\367=*T\331>\211(z?\335\252\266=\360_\246>Q\237`?\000A\334>8\002{?\321\233\234=\010\242\220>a\215O?\301\035\035?\374\300r?\346\370H>p\207!?6on?\350\341\202>\231\331B?P,:?\221\037K?\365\321\'?l9g?\360\005\263>\222\332h?vm\250>\022\013b?,\234\323>\210Mx?\031\347\356=\310\010\323>\026\032x?\023\361\364=\205\245\327>\232\243y?\005~\306=\037A\263>\034\376h?f\204\247>\312ja?0o\327>m\222y?$\210\310=\204\345\264>y\367i?\177\030\241>,\321\\?\354\307\362>BQ\177?\007G.<ul,=V*%>o\206\n?\343D~?\036\017\334<\316%\326=g\301\277>\244\340o?\311\266q>_\2508?\237\327M?RR!?\262\246n?\226b\201>\253`A?\0237=?\325rE?\227\2434?\210\264T?\036\344\017?\345\r|?]\242x=\255\212i>>G4?\353KU?\375Q\016?\270\313|?\337\200J=\345}@>\240N\034?\324zs?\256\206>>\242\023\033?i\213t?\313\025/>\027&\021?\255g{?\273f\220=D8\206>\224\021F?\207I3?|\346V?V\001\n?\225o~?=\374\306<\344&\302=\005\277\257>S\327f?\250}\265>cPj?\250\312\236>\210\026[?\311\267\374>:\365\177?iS,:i6,;\220\302+<\232\365)=7\350\">\211\375\010?\261\274~?*\333\240<\224\262\235=\003\216\221>\330YP?\346\036\033?\337\201t?\274\240/>r\201\021?56{?\245[\226=\264Q\213>\225\321J?\252\210(?\010Tf?o\307\270>\223/l?\227>\222>\272\361P?\035\240\031?X\275u?\022\226\035>\270U\005?(\216\177?\313I\343;3\266\341<%~\333=\003\370\303>A\354q?H\331T>\"\233(?\236<f?!]\271>\206\202l?\340\014\220>D\013O?/`\036?D\225q?5\256Y>\002h+?\225\217b?\016n\320>\026)w?o\214\010>\035\256\354>\276\212~?\332\220\271<\304\\\265=:M\245>\320\335_?\372\314\340>\2322|?\026\274o=\013\264a>\214\364/?,\021\\?<\035\367>\013\261\177?|\271\235;\"\367\234<1\365\231=Qb\216>k\223M?\364\367!?\214\370m?;\023\206>S\356E?\246\2263?\205jV?\nQ\013?\276\377}?{ \376<W>\366=\333\242\330>}\362y?\t\034\275=\274\245\253>\2444d?\2536\306>\272\364r?\006\022F>\r\302\037?\267=p?\023\237l>\250\3615?2\210R?\336\221\025?\372\272x?\252\005\342=\352\023\311>\2157t?\302\3313>2C\024?\272\225y?\321#\310=\322\224\264>\006\310i?vR\242>t\270]?\267\203\355>I\252~?=\367\251<zp\246=\270\351\230>\020}V?\360\036\013?O\021~?\271z\365<\230\037\356=\300o\322>\370\343w?\211H\373=\237s\334>P\020{?7\352\232=c2\217>rKN?\3027 ?\r\310o?\200\016s>^]9?(\225L?e\\$?\211Wk?\256\355\227>\034\261U?\243C\r??@}?\265\014.=a\247&>\001\210\013?\037\354}?\027\344\003=\307I\377=Ew\337>\210\335{?\353+\202=\256\313s>\232\3009?\252\342K?\240\005&?Rii?{\303\244>\353{_?[\026\343>\017\274|?\343QN=e\355C>\204p\036?\276\205q?\200\212Z>u\346+?\025\343a?\003\221\324>\207\241x?v\005\345=\035i\313>[2u?\356\216%>\212\312\n?4.~?Y>\347<L\267\340=#\017\310>\236\306s?:?:>>_\030?\004\270v?\202\035\017>\007:\366>{\240\177?\341\301\276;\230\245\275<\250A\271=\252\177\250>\205\027b?\340O\323>\3742x?4\005\362=yk\325>\356\352x?7]\334=,\247\304>\357=r?|LP>d\355%?\024\206i?\354\005\244>B\364^?\267=\346>zh}?\1773$=_\236\035>v[\005?3\215\177?`3\345;\366\230\343<1F\335=\350]\305>\'\222r?!\230K>z\035#?\265\273l?\252\210\216>o\265M?k\245!?\276On?\000\273\203>\025\255C?\310o8?\237;N?u^ ?\377\240o?\324/u>\257z:?\270\220J?\017 )?\334\222e?O\226\275>U\305n?\227\216\200>G\216@?5\342>?\2326B?3\177;?|\260H?\001q-?N\274_?\232\225\341>\344b|?A\003d=\344QW>:\013*?Bad?\376\036\305>Fur?\2065M>\325\025$?i\247k?\005\325\225>a\370S?\000\324\021?\242\010{?\210\326\233=\331\372\217>~\373N?\"\207\036?3pq?\035\274[>D\225,?g\361`?{P\332>\313sz?\301\255\255=7\363\236>O5[?u\010\374>C\360\177?q\272{:\217|{;\201\205z<\335\260v=W\325g>\252X3?6\316V?5C\n?\271Z~?\365H\321<3\360\313=Y\241\267>\237\212k?\241\226\226>e\230T?\215.\020?\230\350{?_\325\200=:uq>\277\2058?\332\024N?%\275 ?\254@o?\251mz>\022/=?$\202E?Z\2024?$\353T?`S\017?~T|?s\202g=\251lZ>Y\325+?\211\372a?y\001\324>\201px?\246\312\352=\303\337\317>\345\363v?\007\244\013>I2\361>\333$\177?\257iZ<O\200W=\302)L>\035u#?\022[l?E\030\221>\n\364O?\346\035\034?\311\245s?\036\032<>\206\214\031?\002\315u?z\257\034>\345\265\004?>\247\177?\217E\261;\014P\260<\233\204\254=L\374\235>*yZ?T\032\000?\365\377\177?\035G-6\377F-7\212F-8\265D-9a=-:\022 -;\375\252,<$\331*=\323\270#>\232\213\t?\214\223~?\2026\265<Q4\261=%\337\241>\333c]?`r\357>\376\355~?\207n\210<\332(\206=\002\276z>\030X=?\2323E?\223,5?\r\322S?}8\022?\010\320z?\355\241\242=\302\267\225>\031\340S?\260\023\022?\347\344z?\343 \240=\277\233\223>B\033R?\034\252\026?I\371w?y\311\370=\232\220\332>\234\206z?\217m\253=\035\024\235>\215\306Y?_\021\002?\345\356\177?5\314\210:\251\247\210;\303\025\210<\n\323\205=\327(z>\344\013=?R\305E?&\3603?\276\331U?\272\326\014?\252l}?\001-#=\333\254\034>\023\264\004?\203\247\177?\007\275\260;\376\310\257<[\003\254=\313\220\235>\253&Z?(\003\001?\347\373\177?\016+\2039\247\"\203:\021\001\203;\375z\202<\363f\200= \264p>\221\0378?\262\310N?X\004\037?\313\367p?\355cb>\310V0?_}[?\013m\372>\356\340\177?cq\370:\325\370\367;p\030\366<\331\263\356=|\341\322>B\014x?2\220\366=\004\341\330>\214\005z?\335\326\272=@\313\251>\204\370b?O\346\315>\3641v?\224\336\026>.\244\000?[\376\177?\235\224\32284\217\3229\216y\322:\010#\322;\r\312\320<\305w\313=\340@\267>\357Sk?\324\005\230>\274\304U?\020\017\r?\336U}?)\302(=3\316!>\362<\010?\211\360~?_+\207<h\360\204=\236\236x>\261A<?\221DG?\224\2430?\000\t[?\320\004\375>\035\367\177?\246.\016:\350\032\016;\006\314\r<\335\221\014=\337\276\007>O\200\353>\315[~?\321\300\320<\001o\313=\3329\267>\361Ok?\233 \230>z\332U?\302\324\014?tm}?t\373\"=@\177\034>k\224\004?\032\254\177?\037\224\247;\272\270\246<\031T\243=\223M\226>&\\T?\227\315\020?\240\226{?4\275\212=#W\201>WUA?5N=?\213FE?\226\0035?\020\026T?\016\206\021?\2603{?T\251\226=\370\223\213>\354\rK?]\373\'?\313\005g?\262R\264>\377\240i?NT\243>%t^?\0004\351>N\370}?\336\344\000=\007\255\371=\305<\333>\203\270z?\320s\245=\000\026\230>\336\321U?\332\353\014?)d}?#B%=>\227\036>|\007\006?\230n\177?w\025\021<\222\314\017=/\300\n>}\346\357>\315\374~?B\026\201<\016\033~=sWn>\305\3356?\303\366P?`\223\031?\211\307u?\r\000\035>\311\355\004?\323\236\177?|\017\302;E\351\300<O^\274=\372\n\253>J\316c?g\266\310>K\017t?3\"6>\t\275\025?\303\235x?\362v\345=1\301\313>mVu?9~#>\272c\t?X\237~?\003a\257<\325\237\253=\367=\235>\336\346Y?\245\266\001?B\364\177?c\335;:\354\272;;B1;<\276\r9=p\2610>S4\022?g\322z?$Y\242=\206z\225>2\255S?\363\230\022?\212\230z?1H\251=$J\233>kaX?\205\363\005?Ur\177?\372\\\r<\274$\014=9Y\007>\326\352\352>\205C~?\177\273\334<\351\310\326=YB\300>\033!p?@0n>\320\3106?\253\032Q?s8\031?\264\017v?O\330\030>\352\007\002?\200\357\177?F\364\203:D\322\203;\203J\203<\330/\201=`\023r>7\3318?\376\200M?\230$\"?\n\311m?~Y\207>z#G?6\3550?\277\230Z?\363\201\377>\302\377\177?\276Dx7\316Cx8\013@x9\3770x:\327\364w;\255\004w<EKs=\305\327d>\202\2631?*gY?n\034\003?I\331\177?7\304\032;\246f\032<(\362\030= <\023>3!\374>\005\361\177?=\235o:,eo;N\205n<]\014k=b\217]>*\237-?\241z_?\r\036\343>\314\275|?\210\345M=\361\213C>R4\036?\311\276q?M`W>\223\023*?HVd?\322c\305>\334\224r?XqK>\033\006#?R\325l?\210\332\215>\233\032M?\357\033#?f\275l?-}\216>?\253M?&\276!?\2645n?on\204>\314ZD?\215\3766?}\276P?\220!\032?\251Tu?\025\230#>Tu\t?)\232~?9\361\261<\276\023\256=\343G\237>fu[?\237\232\372>\342\342\177?\365\324\350:\024k\350;\017\305\346<\332D\340=\310\265\307>r\237s?\305u<>y\306\031?\212\236u?=[\037>\237\216\006?\004T\177?%\210+<h\274)=\303\263\">\303\331\010?\252\306~?\024\353\233<`\363\230=#\207\215>\"\320L?\013\317#?\356\366k?7\275\223>\2257R?ca\026?x,x?\366\310\362=\344\000\326>K\034y?\302\207\326=\332\016\300>l\007p?\025\230o>\301\2107?\320\317O?Sx\034?\325Us?X\234@>\237a\034?\000js?\203y?>\340\253\033?-\tt?\353z6>*\366\025?\301vx?u\016\352=\247N\317>\004\275v?N\323\016>\017\317\365>$\230\177?\022d\317;\014\024\316<\352\344\310=\0330\265>\'#j?\371\366\237>;\371[?\356\246\367>P\272\177?U:\213;\344\242\212<DJ\210=\310p~>\3117??\374\215A?\\\332<?\252#F?\350!3?\344%W?\345T\t?\257\243~?\223;\255<\306\221\251=\215\207\233>\255\221X?\027n\005?\017\212\177?`u\353;?\304\351<\210\030\343=\370\351\311>\263\222t?\240\253.>0\340\020?\327\214{?\207\353\213=S\\\202>\300VB?\236<;?\004,I?yW,?CGa?^G\330>9\326y?Py\300=\212b\256>\373\372e?\002\000\273>\001gm?\375\370\211>\211\225I?\201e+?\371\222b?&Y\320>O!w?>\000\t>\333W\355>\354\243~?.\035\255<\252t\251=Bo\233>\232~X?\336\242\005?\357\200\177? \244\375;\204\255\373<\026\362\363=g\343\326>\324ey?\251\322\315=G#\271>\215bl?\233\345\220>\031\310O?\220\213\034?\262Ds?^\223A>|\373\034?\027\340r?o:G>vw ?\253\207o?\032\221v>N2;?\031?I?\321+,?\243\203a?\330\327\326>\035by?aC\316=Q}\271>E\224l?|\224\217>\300\241N?$d\037?`\232p?\355\210g>\324.3?=\021W?\037\215\t?\030\223~?\320o\265<\026k\261=n\014\242> \205]?\r\260\356>I\324~?-,\225<\311t\222=\234\373\207>\342\273G?\373\230/?\342\231\\?I\010\364>\307p\177?M\351\016</\252\r=\340\303\010>f\377\354>\351\226~?\303\214\263<R\235\257=C\216\240>cj\\?\343\032\365>M\211\177?z\370\354;\303A\353<5\200\344=\241\001\313>\255\007u?\276\377\'>\324o\014?M\225}?\3406\031=\266{\023>\304{\374>\242\363\177?\231\321E:b\253E;\301\022E<\351\263B=\226r9>\342\334\027?C\032w?0i\t>\177\361\355>\365\271~?\3245\242<\222\377\236=\203\247\222>\207KQ?x\274\030?{pv?\330A\023>Y)\374>D\361\177?\303\260k:\204zk;\352\241j<\270Eg=\3126Z>s\266+?\315$b?k\376\322>r\026x?o^\365=\263\370\327>\270\275y?{c\303=d\277\260>\020wg?\321w\261>\273\350g?1\227\256>\202\034f?\'*\272>\007\363l?^\020\215>\263eL?\324\315$?\333\325j?\236Q\233>MgX?F\343\005?Vu\177?\372^\n<\3203\t=H\233\004>P\336\346>g\210}?\243`\034=Dh\026>\256P\000?\232\377\177?\024g\3137\321e\3138\304`\3139\222L\313:\330\373\312;\364\271\311<G\302\304=\005\333\261>r%h?p\014\255>\020\037e?\315s\300>\2629p?u\327l>\370\0176?\nUR?\245\025\026?\027ax?\252\232\354=\371D\321>Axw?\264\357\003>\317\337\345>rU}?\215\334(=i\346!>\201M\010?B\354~?\232J\211<\222\375\206=\210/|>!\024>?\372\310C?\27648?\210\243N?\302_\037?\255\236p?dLg>\247\r3?;FW?\304\374\010?\351\274~?\261\277\240<0\230\235=\257w\221>\222FP?EO\033?\273Xt?v\3671>n\t\023?eVz?F1\261=\241\334\241>\001b]?-}\357>c\357~?p\275\207<\245}\205=W\224y>\335\277<?\002VF?i\2632?\266\325W?1t\007?\302!\177?\255|]<+~Z=y\326N>\001\017%?\243\212j?/G\235>\373\355Y?\252\242\001?M\365\177?\377$+:d\010+; \226*<q\317(=b\332!>HE\010?c\356~?B<\210<A\370\205=\211iz>\366,=?+\206E?\232y4?~\371T?I-\017?\246f|?\221\031c=+\202V>\263\222)?\273\376d?\004@\301>r\236p?\243Og>o\0173?dCW?\201\004\t?\273\272~?\250\323\241<I\241\236=\332W\222>a\007Q?Ri\031?\n\351u?\205\022\033>\251\226\003?}\314\177?\237\340M;\016;M<\357\250J=\377\241@>&e\034?\337fs?\241\246?>\035\310\033?\266\360s?\244\3357>\374\331\026?=\327w?\031\306\374=E\223\335>\360^{?=t\221=\241\037\207>\342\354F?df1?\223\336Y?\360\315\001?\372\362\177?\032XP:\266-P;l\204O<\216\343L=\327\243B>\250\244\035? Er?\320\345O>s\260%?\025\316i?i*\242>\036\233]?s/\356>\243\302~?\227\351\235<T\336\232=L(\217>\215BN?\203M ?\037\262o?\325@t>\353\3759?\305sK?\331\013\'?\216-h?\245\327\254>\317\374d?\'L\301>e\244p?\346\373f>\200\3412?\216\214W?\252<\010?\234\360~?-\"\207<\205\347\204=%\217x>\2739<?\216SG?1\2020?\256;[?#\344\373>\036\357\177?\203\006\207:\347\342\206;\302T\206<\333 \204==5w>K\207;?o\241H?/\223-?\264\213_?!\270\342>\243\246|?X\211S=\235\234H>XO!?\313\251n?(M\201>vKA?_b=?\344\037E?,W5?)\213S?\340\361\022?`dz?\256\205\257=\255z\240>\307[\\?Ao\365>_\220\177?\036\340\336;\013\\\335<\313`\327=S\272\300>\242\\p?\n\355j>~\0075?\227\017T?\017\227\021?[*{?\246\310\227=\334\210\214>\276\353K?\027\360%?\341\202i?\002\033\244>g\003_?\315\343\345>BV}?\200\251(=\222\267!>w-\010?\202\364~?U3\205<\342\010\203=>Mu>\002\212:?\263tJ?Na)?\300>e?j\253\277>\231\325o?4Qr>\314\3718?\014GM?\274\260\"?P2m?\361`\213>x\337J?/h(?\034}f?\203\300\267>:\234k?C \226>\2636T?;0\021?<b{?\216\016\221=_\310\206>]\232F?\337\0342?\326\302X?\343\345\004?\n\240\177?I\244\277;\\\205\276<\n\027\272=Z.\251>y\216b?\341t\320>\237+w?\255f\010>\272v\354>V\202~?\201\270\275<\262S\271=p\216\250>\235!b?\371\021\323>P\035x?1\220\364=\313[\327>F\214y?\033C\311=\315{\265>NOj?\325\321\236>\373\033[?\302\230\374>k\364\177?\327H9:P\'9;f\2418<\304\2146=\375i.>\355\264\020?\212\243{?\037.\211=\245\373\177>\322\375??[\004@?I\367??l\021@?#\335??\250E@?et??\006\026A?=\317=?UND?*\0317?\265\220P?\364\224\032?\237\365t?\305\007)>\364 \r?\214N}?\327\214*=\341r#>\002\\\t?\233\241~?\230B\256<\243\215\252=\226Y\234>\3365Y?\002\246\003?\301\312\177?\352\316T;\003\036T<\374^Q=8\253F>\345\037 ?\013\340o?%\277q>\310\2548?\317\317M?Te!?\341\222n?\220\353\201>\340\347A?\270!<?\264\200G?m\0350?\317\323[?\334}\370>\240\307\177?\352Na;\236\210`<\340t]=\260{Q>\344\240&?]\257h?c\210\251>k\313b?\004\375\316>\334\235v?\203\241\020>\372g\370>U\306\177?\225vf;\034\247e<\nob=\206\352U>\200:)?\327pe?&n\276>\2344o?_\025{>\244\204=?\024\336D?\024\3455?c\235R?/[\025?\247\337x?\366\261\335=^\262\305>\273\270r?BoI>H\317!?\236#n?\373\352\204>\313\322D?Z\3755?xtR?\270\304\025?\213\230x?_\024\346=L;\314>\t\210u?\370\245 >\377q\007?E\"\177?\341\372\\<\340\377Y=\244eN>\265\313$?L\330j?QA\233>yZX?\262\006\006?\276n\177?\260\357\020<v\247\017=\256\235\n>+\264\357>o\366~?\312>\204<C\034\202=Y\260s>H\2629?\177\374K?S\310%?\355\261i?\200\344\242>\002#^?-\022\353>\372I~?1\214\331<9\305\323=c\337\275>+\353n?\363\020\177>B\210??\234\356@?M\037>?K\263C?\246b8?\306RN?\322% ?\030\332o?V\022r>\253\3308?\370\201M?=\"\"?\215\313m?>H\207>6\023G?Z\0211?jaZ?r]\000?x\377\177?\215p\0108jo\0109\337j\010:\262X\010;\024\020\010<\320\356\006=\342|\002>:\270\343>9\340|?.\201E=-\373;>\363x\031?\236\334u?\231\311\033>)\026\004?3\275\177?\320v\205;\246\353\204<\207\303\202=D\324t>\360J:?\326\347J?\231T(?\320\225f?2\"\267>|Bk?\330z\230>\224#V?M\020\014?\337\271}?W=\020=\006)\013>B\177\360>\251\017\177?Zuo<h\365k=\241]^>\000\024.?:\323^?\227\001\347>O\217}?\016\257\032=\235\327\024>8j\376>}\375\177?5\313 9\345\304 :\247\253 ;\320F <n\265\036=&\217\030>\223\324\001?\231\362\177?%_V:E2V;\014\177U<\332\266R=\322\337G>c\334 ?\246 o?\273*|>\261\021>?\264\315C?\272*8?\036\265N?\2064\037?\363\310p?\340\370d>\320\3051?\267JY?\334k\003?.\321\177?\216\';;\273\236:<\217~8=,/0>\363\336\021?\206\002{?X\222\234=\002\232\220>e\206O?\034/\035?,\261r?\240\333I>\370\020\"?\363\335m?\362\311\206>\333\233F?\225\0312?\375\307X?\227\327\004?7\242\177?\233M\273;\206;\272<\262\377\265=@\323\245>\201<`?\210\224\336>\036\243{?,;\211= \t\200>\037\t@?\300\355??{$@?\365\266??\303\221@?.\333>?gDB?\241b;?\216\345H?H\370,?\331f`?\237\225\335>\222_{?\304`\221=\354\016\207>\032\335F?[\2111?\205\250Y?\222e\002?\006\351\177?\025\302\267:!\200\267;\020y\266<\215h\262=\334\335\242>-\036^?\234.\353>\235N~?\243B\327<\233\232\321=\341&\274>\242\004n?(\300\205>\027\237E?lC4?*RU?XA\016?\'\323|?\025\261H=\302\333>>\006I\033?\020^t?\363\2511>\327\326\022?Vtz?!\235\255=i\345\236>\327*[?\"D\374>\017\362\177?\004\005_:q\324^;|\022^<\354\017[=\250XO>\210\\%?}0j?}\236\237>\271\266[?\261$\371>\374\320\177?\336\353;;\354a;<K=9=\261\3340>\244P\022?>\302z?2I\244=w\033\227>\204\005U?X\r\017?\274u|?\363n_=\313>S>\247\252\'?>jg?\260\312\261>x\033h?ZM\255>\021Ie?\035j\277>\267\264o?\241\034t>\373\3529?\022\226K?\346\272&?\355\217h?\367U\252>\245Uc?,\245\313>\372Ju?\033&$>\345\325\t?\r}~?:U\300<:\321\273=\320\227\252>\245\201c?\303\223\312>\001\332t?Y\233*>\255.\016?r\333|?@\253F=k\010=>\017#\032?pSu?\002\252#>\206\201\t?\214\226~?\270\272\263<C\311\257=\252\262\240>\203\205\\?#~\364>\225{\177?Z&\004<|\025\003=\030\307\375=\264T\336>d\222{?\017@\213=;\310\201>\016\305A?]i<?\304\371F?\324I1?\236\nZ?!R\001?\006\371\177?$H\3379\314/\337:\202\316\336;\254J\335<\\P\327=Y\255\300>7Vp?)Gk>;85?\255\276S?7k\022?\376\262z?\"\035\246=\351\243\230>\304DV?\346\266\013?\026\333}?<\024\010=\344\216\003>\001P\345>\3077}?\325\0360=/\214(>\034\316\014?\036p}?|T\"=\214\345\033>\232)\004?\262\272\177?/w\212;f\341\211<M\217\207=~,}>@\224>?m\317B?\217A:?\352\370J?\233,(?\037\310f?U\337\265>\031\211j?qQ\235>\343\365Y?o\214\001?h\366\177?Ft\031:G]\031;f\001\031<\234\223\027=\244\367\021>\rR\372>\276\337\177?\220\366\000;\230\265\000<\200e\377<%o\367=0\212\331>\3208z?\246\271\264=\363\306\244>d~_?\234\007\343>\271\270|?\323!O=X\250D>\313\343\036?G\027q?\016\247`>\335]/?\232\361\\?\253\013\362>F=\177?\275%B<\311\330?=u\3346>\3504\026?uKx?\216%\357=\2518\323>\337*x?\371\370\362=\204%\326>J(y?\201\034\325=s\357\276>\227vo?\037\177w>|\255;?NZH?R4.?\240\244^?\206\025\350>\007\304}?\264\276\r=\372\326\010>e\033\355>\016\233~?\"\200\261<\216\247\255=\022\356\236>h1[?\263\036\374>\362\360\177?C\323p:\240\232p;~\270o<\2266l=K\227^>\2334.?6\244^?\370\027\350>|\304}?\362\241\r=5\274\010>)\364\354>>\225~?4`\264<xg\260=\2525\241>\311\346\\?{J\362>\020D\177?Kf;<\220A9=\223\3400>/S\022?\311\300z?\340u\244=\370@\227>;$U?\257\273\016?\275\233|?\2060V=3\375J>\017\300\"?\257!m?b\322\213>\240FK?*v\'?#\253g?\276&\260>1\030g?2\334\263>\271Zi?\243#\245>Q\300_?\234}\341>.]|?^fe=Y\215X>\244\301*?\217oc?6\004\313>\276\010u?\031\360\'>Qe\014?a\231}?\3056\030=\264\216\022>\335)\373>\234\350\177?\227\020\273:>\314\272;\243\273\271<\235\205\265=\326n\245>\234\365_?R>\340>\205\017|?|=x=\t2i>\002\0274?\225\232U?\356\177\r?\010\'}?.74=TI,>\255L\017?\263W|?\022\273f=\307\273Y>\317o+?\377\204b?@\257\320>@Aw?[$\007>\010\235\352>\2356~?\340\030\343<7\315\334=\013\377\304>\217fr?\365\007N>\302\223$?q\030k?y\224\231>$\006W?O\253\t?\007\212~?2\353\271<\004\263\265=0\224\245>\004\020`?\336\237\337>\323\347{? \355\200=\301\236q>\257\2338?\024\356M?\253\033!?l\337n?\305\263\177>\335\331??/L@?Gg??\0060A?P\232=?d\264D?\257>6?\373\005R?\255\340\026?u\322w?SU\375=\033\377\335>\303{{?\324\372\215=\014#\204>\357\021D?\340\2317?\025\262O?m\302\034?\222\023s?\217VD>e\261\036?\305Gq?\372\370]>\005\333-?\023%_?\265\033\345>\325,}?\001\3142=\374\375*>hp\016?\r\276|?\221\325M=\225}C>r+\036?(\307q?;\351V>\212\316)?\305\260d?b+\303>\246\213q?\2736Z>j\266+?\331$b?$\376\322>Y\026x?Za\365=\353\372\327>i\276y?^N\303=N\256\260>zlg?>\274\261>\244\022h?\316\206\255>#ne?J\177\276>c=o?X\233z>fF=?\200UE?3\3434?\247KT?\020\371\020?\256\177{?\325\201\215=\314\272\203>\343\254C?2p8?\344:N?>` ?1\237o?\002Iu>\316\207:?\273xJ?\353W)?\342Je?\237^\277>\352\256o?\232mt>S\025:?RIK?\323o\'?\363\262g?\032\364\257>\220\370f?\341\247\264>@\323i?<\010\242>\014\202]?\t\302\356>\266\326~?K\370\223<\022L\221=*\375\206>Q\314F?\202\2561?\355nY?\274\006\003?^\333\177?7t\022;n \022<\312\322\020=\355\263\013>iI\361>\205\'\177?\245\303W<<\354T=\272\332I>m\020\"?\210\336m?\370\305\206>\030\230F?\343!2?\373\272X?\252\373\004?\255\234\177?\311X\306;n%\305<\331f\300=\213S\256>j\361e?\370<\273>\317\207m?\216\030\211>\321\305H?\205@-?\003\001`?\354\371\337>{\376{?D^|=\251\321l>\332\0146?NZR?\032\010\026?mjx?\247\201\353=\275l\320>\231(w?\267\223\010>\312\270\354>Z\214~? \305\270<A\232\264=\030\255\244>\364k_?\233u\343>o\321|?B\034I=l<?>\236\205\033?,*t?\031\2344>!\301\024?\005Ey?\334\265\321=\216<\274>\035\020n?1q\205>\223SE?^\3474?\303DT?6\013\021?\nv{?\213\253\216=3\273\204>\321\244D?\034`6?@\315Q?\344q\027?Yiw?;\316\004>\315)\347>#\227}?\235\303\030=\017\021\023>\322\343\373>\033\357\177?z\033\207:\323\367\206;\202i\206<\3554\204=2Xw>^\231;?\313\177H?y\337-?\261\036_?\246A\345>\3104}?j\3320=\2317)>\374@\r?XA}?\355\307-=ph&>\211]\013?P\373}?=\'\000=\222I\370=\276/\332>$jz?D\325\256=q\350\237>R\356[?\235\345\367>W\276\177?/0\203;\272\251\202<4\224\200=E\003q>{I8?\025\177N?A\271\037?pFp?\245$l>\300\2575?\010\367R?Cs\024?\'wy?\303\304\313=\217~\267>\357vk?\351\032\227>\020\005U?\214\016\017?+u|?(\222_=)^S>\022\275\'?cSg?Y^\262>\\uh?}\003\253>Q\311c?h\325\310>\253\034t?\027`5>\326?\025?\334\361x?\257\213\333=\246\002\304>>\361q?D\222T>\237q(?/qf?\342\014\270>?\307k?\264\376\224>\352ES?\\\246\023?\211\367y?\036\202\274=2(\253>\253\341c?u=\310>\325\332s?\237\0329>\300\244\027?\356Cw?l\374\006>;b\352>\274,~?a\367\347<\336e\341=W\227\310>\335\001t?\001\3456>f:\026?\244Gx?;\230\357=\210\220\323>~Ix?\227`\357=\347e\323>\253:x?R\036\361=\017\273\324>\304\257x?\344W\343=D\033\312>~\247t?\205|->#\030\020?\346\363{?A\356~=f\020o>~@7?\346LP?e?\033?Dft?\23121>\331\210\022?\342\241z?\324)\250=\366Z\232>\\\244W?\200\373\007? \001\177?\223\342}<m\363y=\266\262j>\351\3474?\334CT?\226\r\021?\306t{?\232\322\216=\320\334\204>+\305D?\245\0326?\377BR?\rD\026?\356@x?\376a\360=\002+\324>\301~x?{\035\351=\245\224\316>\272uv?#\364\022>\226\272\373>\302\355\177?\262\346\221:\036\275\221;/\027\221<U\205\216=O\232\204>\037\205D?\t\2446?\215YQ?\327\230\030?\362\213v?\n\253\021>z\344\371>\263\332\177?&\037\025;I\310\024<hn\023=\350\037\016>\033\314\364>\200\202\177?D\205\372;\363\232\370<\216\017\361=\305\257\324>\363\253x?\030\313\343=\336t\312>\031\315t?\330W+>:\254\016?\327\242|?\363uT=\272pI>-\320!?\255\"n?w\361\204>\010\331D?\357\3575?\030\213R?e\212\025?\003\300x?\256m\341=o\235\310>\200\004t?\303\2766>\320!\026?\257Xx?\246\227\355=b\007\322>\247\276w?\\\246\377=\301\274\337>\037\357{?(\013\200=\205\023p>^\3127?\256]O?2\224\035?\\Tr?*\014O>\377.%?\207ej?\">\236>\203\253Z?\247\027\377>-\377\177?#\341R8l\336R9\221\323R:)\250R;\321\372Q<\343IO=Z\314D>\367\371\036?\330\001q?\356\325a>~\0070?\302\364[?\241\300\367>\372\273\177?\016\347\207;\303V\207<^\032\205=\241\347x>;g<?\313\375F?\345@1?`\030Z?i+\001?\207\372\177?r\023\2579{\004\257:\247\310\256;\374\331\255<z)\252=\026\006\234>\301\364X?E[\004?\025\264\177?\221\250\227;\341\364\226<\302,\224=It\211>\347\032I?\226~,?\367\020a?\035\221\331>\345:z?\023z\264=\227\222\244>\010Y_?g\346\343>d\352|?#\006C=\375\2749>Q\014\030?\301\366v?\203y\013>o\364\360>\245\035\177?T\223a<Cx^=\366bR>V)\'?\205\th?\035\302\255>K\224e?4\215\275>\234\300n?K\257\200>\323\256@?|\240>?~\267B?\177s:?\332\235J?s\001)?$\272e?\300\234\274>\346Bn?\207\023\204>\351\002D?\320\2717?\207zO?\227L\035?;\226r?\263]K>D\372\"?E\342l?o\202\215>\356\313L?\"\331#?\242\353k?m\t\224>\364wR?\277\273\025?\244\236x?\204\\\345=\257\254\313>\014Nu?\024\371#>K\267\t?f\206~?\221\266\273<pi\267=r\374\246>\210\014a?\005\254\331>\366Bz?~\203\263=Y\307\243><\307^?\251H\347>\034\235}?zL\027=\305\265\021>\326\363\371>m\333\177?]5\022;\334\341\021<V\225\020=\320z\013>T\366\360>\335\035\177?\311Za<FA^=\3621R>s\014\'?\321,h?q\334\254>\354\377d?}8\301>\301\232p?\234\203g>\352+3?\345\025W?r\200\t?\336\226~?F\222\263<\227\242\257=\241\222\240>\244m\\?\027\010\365>\262\207\177?\212+\360;\347h\356<\255x\347=MO\315>\200\366u?\031L\032>0\014\003?\331\332\177?\250\205\024;}/\024<a\330\022=\251\224\r>\305\002\364>Bp\177?\324l\017<i+\016=&<\t>\225\257\355>\230\260~?s\330\246<\207r\243=&g\226>BqT?\353\225\020?\254\263{?b;\207=\330\232|>\212J>?>_C?\t\0249?I\030M?\206!#?D\267l?\336\246\216>1\320M?ed!?\332\223n?\333\344\201>E\341A?S/<?!gG?\211V0?\276}[?\351j\372>\326\340\177?\212/\371:C\266\370;\000\323\366<.c\357=\343g\323>\\;x?\207\t\361=)\253\324>d\252x?(\372\343=u\231\312>a\334t?\240x*>\205\027\016?\255\345|?\213,D=G\307:>\273\265\030?\257uv?\303\364\022>z\273\373>\311\355\177?\367\251\221:\207\200\221;!\333\220<gK\216=oh\204>\001UD?\355\n7?8\251P?6W\032?\255(u?\260\034&>b*\013?R\r~?<q\367<\336\367\357=\306\331\323>\326bx?\032f\354=\215\034\321>yiw?h\314\004>\030\'\347>\235\226}?\222\344\030=\217/\023>J\017\374>y\360\177?\177Zx:C\036x;\310-w<#ss=\346\372d>\356\3061?\371HY?\271p\003?\250\320\177?J<=;h\260<<\032\204:=\326\0052>\317\022\023?\320Pz?\021\334\261=\317i\242>\210\311]?\242\037\355>\256\233~?\3630\261<\315[\255=&\257\236>\242\001[?\271.\375>\020\370\177?\033\376\3759\233\336\375:\272`\375;*k\373<\317\263\363=\364\263\326>\216Vy?\035\242\317=+\225\272>=-m?\223\203\213>\001\377J?V\036(?\006\332f?Jl\265>EFj?\332\r\237>\177I[?V\225\373>~\354\177?\027\002\234:\216\322\233;\335\024\233<K%\230=\301\327\214>\3212L?(G%?kIj?\362\370\236>\2479[?\262\357\373>}\357\177?R\023\204:@\361\203;>i\203<\227M\201=\\Gr>\234\3648?GPM?p\232\"?uJm?\030\274\212>\334HJ?0\307)?_\272d?\361\356\302>\336nq?\005\317[>\016\240,?\\\342`?\227\253\332>~\216z?\027|\252=\366J\234>z*Y?\300\305\003?\023\307\177?\243\201c;s\267b<R\224_=\026`S>4\276\'?\373Qg?kg\262>\333zh?\226\337\252>u\261c?!j\311>n\\t?\254\3011>T\346\022?4kz?\257\264\256=k\315\237>\006\332[?/Z\370>\203\305\177?\364\275i;\210\350h<\357\230e=@\272X>\213\333*?\351Lc?h\333\313>\035au?g\341\">\344\370\010?\377\275~?\3615\240<\326\023\235=\253\007\221>\246\345O?\326A\034?!\206s?\202\343=>\024\255\032?\214\341t?--*>+\345\r?\262\373|?\020\315>=\277\3515>\250\230\025?f\266x?\325\217\342=\214\177\311>\217et?\346<1>\225\217\022?\372\235z?\201\241\250=\365\276\232>\235\363W?\016\"\007?{4\177?n\343J<?`H=\327\222>>D\033\033?\363\204t?\352s/>\376c\021?EF{?\327l\224=\026\253\211>\234MI?\225\n,?q\261a?k\300\325>\023\007y?\360\t\331=\265\t\302>\263\000q?\035\346a>\212\0200?-\347[?\250\016\370>\352\300\177?D\033|;\377\"{<\210Iw=\230[h>\017\2423?\035XV?\267\202\013?\006\356}?7l\003=pi\376=\303\316\336>E\262{?\265f\207=\n\346|>\235p>?\t\025C?\357\2579?\273\000L?D\276%?\313\275i?\023\226\242>\336\351]?\371a\354>)\177~?\rJ\277<\220\322\272=\274\307\251>&\366b?\364\364\315>\2577v?\352\211\026>ph\000?V\377\177?\236l*8\330j*9\301c*:gG*;$\326)<s\023(=\332-!>-\317\007?\020\014\177?\t\010s<(mo=Xna>\216\315/?\203K\\?\035\315\365>\374\227\177?\035\263\317;\027b\316<\007/\311=\253k\265>\351Ej?B\020\237>QK[?\364\212\373>\"\354\177?\313\342\236:}\261\236;\276\354\235<\\\341\232=\337*\217>\321DN?\367G ?\270\267o?\256\362s>\007\3259?\307\275K?\003]&?\005\001i?Lq\247>\225]a?\227\277\327>\317\253y?\\\204\305=\275w\262>\277\204h?\377\236\252>p\206c?\364u\312>\215\315t?9Q+>\322\247\016?\334\244|?2\370S=\001\000I>\300\213!?\260jn?\037\001\203>\030\370B?\214\3549?<\223K?\231\301&?\321\207h?\363\212\252>\020yc?&\311\312>>\360t?hV)>\234U\r?\3068}?s\340/=(S(>\330\247\014?W\177}?\203\231\036=fu\030>~\302\001?\235\363\177?$&F:\315\377E;\251fE<\314\005C=\257\2749>\037\014\030?\346\366v?Vw\013>E\361\360>E\035\177?\360\361a<D\324^=\366\264R>\235Y\'?K\316g?\315B\257>4\211f?\007s\267>fpk?\312F\227>\376(U?\003\257\016?\220\241|?\240\305T=!\270I>w\373!?\321\364m?\336,\206>\274\006F?Da3?h\300V?\247h\n?\241N~?\306@\327<\327\230\321=z%\274>\343\003n?E\305\205>\371\243E?\31484?\203cU?\022\023\016?\242\347|?D\262C=\263X:>ro\030?\250\253v?\332\324\017>\366A\367>\222\263\177?\272\255\230;\235\367\227<\354%\225=GI\212>y\337I?)\273*?7xc?f\316\312>l\362t?\2026)>A@\r?\245A}?\377\264-=\035W&>\327Q\013?u\377}?7D\376<\333_\366=P\274\330>N\372y?\245-\274=C\343\252>\347\263c?\347Z\311>\357Ut?\' 2>\370#\023?\220Fz?^\025\263=\202l\243>\250\205^?\225\314\350>\270\345}?\360v\005=\243\035\001>\326\253\341>*h|?!\273b=2.V>\341a)?\002>e?\034\260\277>\365\327o?20r>h\3508?\376eM?\362e\"?\014\203m?&9\211>\024\344H?\246\373,?\036b`?\035\262\335>8g{?\326t\220=aD\206>\032\035F?J03?\346\016W?{\223\t?2\221~?o`\266<\005Q\262=m\312\242>\010\020^?\313\201\353>\t\\~?\322\242\320<\212R\313=\n#\267>\367Bk?\242w\230>\374 V?J\027\014?<\267}?\'\343\020=\"\303\013>\206_\361>\016*\177?%?U<\234xR=\373\247G>U\272 ?\214Co?\251Ez>\241\032=?3\251E?k-4?\022vU?\207\341\r?F\375|?Yj>=9\2205>\350^\025?+\335x?\030\375\335=9\355\305>|\323r?g\357G>\342\345 ?\344\026o?E\262|>hV>?\"HC?\250D9?k\301L?[\362#?W\317k?)\310\224>F\030S?\001\035\024?\322\255y?,G\305=XF\262>\313fh?\221b\253>O\010d?\023L\307>\312ps?\222\027?>\207n\033?\377=t?\030|3>f\006\024?\377\273y?\317\227\303=\273\351\260>@\221g?d\316\260>X\200g?\306;\261>\326\303g?\235\206\257>\350\263f?\"a\266>\003\324j?\357]\233>\374pX?\203\310\005?7z\177?\264\202\005</l\004=3$\000>K6\340>\207\r|?\027\271x=\245\236i>\032R4?,:U?G\201\016?l\266|?W\261O=R)E>+3\037?F\312p?1\346d>{\2731?\306ZY?\010?\003?\331\325\177?\213\177(;\243\020(<LW&=\366\225\037>\016\267\006?\242K\177?4\3373<\255\3451=\266+*>1\344\r?\037\374|?\210\262>=\260\3215>$\211\025?\332\300x?DT\341=\234\211\310>\352\373s?7;7>\312q\026?\373 x?\r\"\364=\357\007\327>\212qy?\033o\314=\363\006\270>\350\303k?/\025\225>\263XS?tu\023?l\025z?t\362\270=\307>\250>\031\353a?\370_\324>\331\220x?I\374\346=\377\356\314>9\320u?/\200\034>\021\225\004?\003\254\177?t\303\247;\223\347\246<\n\201\243=Ws\226>P{T?`{\020?b\301{?.\223\205=\314\271y>\017\323<?\2151F?v\0033?|VW?k\320\010??\311~?\017\244\232<\301\270\227=Q{\214>\206\337K?\020\r&?z`i?\274\375\244>d\245_?\252\036\342>,\203|?\202*\\=\360TP>h\362%?\"\200i? -\244>g\020_?\225\226\345>kF}?\021\212,=tE%>\316\230\n?\323>~?x\014\337<\303\371\330=\365\374\301>\207\372p?P=b><A0?\344\235[?\367\262\371>L\330\177?\322\265\036;mS\036<\301\313\034=1\313\026>\202\226\000?\236\376\177?\034\367\2608I\363\2609\377\343\260:\342\246\260;\026\263\257<d\356\253=Y\177\235>?\031Z?\364(\001?\236\372\177?\3526\2549o(\254:\213\356\253;\232\007\253<\201u\247=0\304\231>I,W?|C\t?\276\250~?\336\272\252<\370+\247=\253\206\231>\027\373V?Y\311\t?\346\200~?\221n\276<O\001\272=\222\034\251>h\202b?/\277\320>#Gw?\235\314\006>\316\033\352>\304 ~??\335\355<$\365\346=w\351\314>\003\316u?\263\240\034>\243\253\004?\277\250\177?\357E\256;\250X\255<\241\255\251=\312\236\233>\351\243X?\233;\005?x\222\177?\317\261\332;(<\331<py\323=C\243\275>\r\314n?\023`\200>\357_@?\223???\230~A?\341\371<?\252\347E?3\2453?\014SV?c\220\013?\030\351}?\213\242\004=\nW\000>\200\202\340>^ |?Q(t=\203\232e>\020\0372?h\277X?e\357\004?\224\236\177?&\216\302;nf\301<\222\325\274=Fl\253>\270\016d?\370#\307>\000_s?2\030@>\037\017\034?\302\262s?\222^;>\277\025\031?\373*v?\223E\027>\312\354\000?\224\374\177?o\001[9\271\365Z:\347\306Z;\360\013Z<\017%W=\032\330K>\376C#?Z\221l?O\250\217>\'\263N?[9\037?=\304p?G;e>\200\3521?\220\021Y?#\013\004?\232\276\177?\026\253\202;\261%\202<_\024\200=\246#p>\357\3227?\276NO?9\271\035?\0142r?5\366P>\365Q&?E\016i?W\032\247>N!a?\365-\331>\370\034z?\376\013\270=\326\201\247>\005ia?\371y\327>\330\225y?J \310=\373\221\264>Z\306i?\205]\242>\213\300]?PT\355>h\243~?\237^\255<W\263\251=\216\243\233>\246\247X?A1\005?(\224\177?(U\327;\350\352\325<\342T\320=\241#\273>0zm?\311u\211>K\034I?i{,?b\025a?Pv\331>\3262z?Kp\265=K]\245>1\351_?\307\210\340>\351!|?\207\310s=\"Fe>\177\3601?5\010Y?*%\004?E\273\177?\335P\211;\216\275\210<?u\206=\300B{>\303\233=?\232\261D?\254D6?\324\373Q?\261\372\026?\320\277w?\234\203\377=\255\242\337>\211\350{?\033\327\200=Bxq>Y\2078?\006\022N?\014\304 ?\2339o?\346\317z>9a=?\030\"E?jR5?\027\223S?+\335\022?\234pz?F\017\256=.D\237>\230r[?\243\252\372>\216\343\177?rw\343:d\022\343;\220\177\341<\205J\333=r\317\303>4\331q?z\350U>N9)?`re?fd\276>\235/o?\315Z{>\001\250=?\005\232D?Cw6?\340\245Q?s\326\027?\017\037w?\314!\t>\377\210\355>\r\253~?\253\226\251<\351\023\246=.\234\230>\206>V?\272\307\013?\351\324}?\335\230\t=\216\371\004>\365i\347>\206\243}?\262\271\025=\227@\020>\321\334\367>\310\275\177?EM\204;\205\304\203<\360\245\201=\265\341r>\325E9?Q\277L?e\367#?\255\311k?R\356\224>78S?\377\311\023?\223\341y?\214\037\277=\212I\255>\232Fe?\270y\277>\225\274o?\267\256s>m\2619?\t\376K?\252\304%??\266i?\362\307\242>9\016^?i\214\353>\274]~?/\314\317<\320\206\312=\257\177\266>\222\345j?\255\350\232>\226\024X?\\\307\006?2H\177?<J7<O=5=S8->\010\353\017?u\n|?\177wy=\344Ej>\356\2544?*\245T?\310\014\020?\231\371{?\320\214}=\326\332m>\033\2336?\312hQ?\025r\030?\245\251v?\270\362\017>\350l\367>z\266\177?\333\341\222;O9\222<#\235\217=\005\213\205>LlE?\305\2614?1\235T?\334!\020?\000\357{?\333\016\200=\000\032p>\317\3157?\256WO?\022\243\035?\230Fr?\324\320O>\373\243%?\301\334i?Z\311\241>\322S]?\357\317\357>\365\371~?t\177\202<Fk\200=\257\273p>\223#8?\253\301N?\244\025\037?\002\347p?\341Pc>\277\3320?\366\264Z?\033\342\376>\301\376\177?Y\243\2378<\240\2379\313\223\237:\017b\237;\231\233\236<u\211\233=~\271\217>;\302N?D\024\037?X\350p?\002>c>@\3200?\372\304Z?G\207\376>\326\375\177?\212\226\n9\332\221\n:\031\177\n;,4\n<\273\t\t=\004t\004>\034\244\346>\354|}?\0061\037=\'\001\031>\217$\002?\242\355\177?\021\344\222:\355\271\222;\273\021\222<\372v\217=5j\205>\343LE?\332\3654?\316,T?DJ\021?5T{?\037\277\222=M;\210>\212\367G?\010\023/?\007`]?\266\210\357>\337\360~?\320\000\207<A\307\204=\375Vx>\323\034<?\350\211G?\335\0100?\263\362[?t\314\367>\275\274\177?\366b\206;\337\325\205<\037\246\203=b_v>\205\030;?\301nI?\230\276+?\254\031b?\256B\323>`.x?\267\217\362=6\325\325>\357\ry?u:\330=\037f\301>\033\261p?\345Hf>!\1772?`(X?\336\220\006?\217S\177?O\375+<\036/*=\364\034#>|!\t?\204\262~?\355\344\245<\346\210\242=\264\242\225>\233\316S?\202A\022?\344\312z?\310?\243=\177<\226>\013NT?\305\362\020?\005\203{?\323\032\215=\001b\203>\217VC?O&9?\255\367L?\007p#?\264`l?\035\362\220>\365\322O?}p\034?\315\\s?\3417@>\352\"\034?a\241s?\331Y<>\323\264\031?\274\254u?|\212\036>\255\376\005?@p\177?\257o\017<7.\016=\302>\t>g\263\355>$\261~?:\223\246< 0\243=V/\226>*CT?j\017\021?\314s{?\270\360\216=\272\366\204>\027\336D?\r\3455?o\235R?\020[\025?\274\337x?\222\257\335=~\260\305>\341\267r?~{I>\264\326!?\306\033n?\371 \205>\253\006E?\237\2155?80S?\314\336\023?\260\324y?+\250\300=\225\210\256>7\023f?xe\272>U\023m?@4\214>O\237K?\022\245&?Q\252h?e\251\251>\263\341b?as\316>\336hv?\207\262\023>\314\311\374>\257\365\177?p\004%:\330\351$;\234\177$<\315\330\"=[_\034>E~\004?>\257\177?rP\241;%\205\240<\357_\235=\026H\221>n\035P?_\266\033?\031\000t?\234\3766>\333J\026?2<x?g\360\360=\362\227\324>\341\243x?\200\276\344=\0042\313>\254\033u?\036\333&>\344\252\013?y\337}?\'\000\007=\025\215\002>^\320\343>\214\345|?\2714D=\254\316:>n\272\030?\016rv?\177*\023>\023\010\374>@\360\177?\'\353{:-\255{;\300\265z<\242\337v=y\376g>*o3?\024\252V?\'\245\n?\272:~?\365\021\341<\361\342\332=\007~\303>\322\262q?b\nX>\001v*?F\324c?\021\221\310>%\377s?a\0147>\264S\026?\0066x?\320\251\361=\253%\325>\242\323x?(\035\337=\256\316\306>\0009s?\324;B>%d\035?\241\200r?\371\222L>U\264#?\307\024l?\260\363\222>\203\214Q?\037\027\030?\241\356v?X\362\013>\'\244\361>\3231\177?\227\206M<\223\362J=X\344@>\204\216\034?\017Bs?W\271A>\030\023\035?\254\312r?\340mH>\3502!?X\307n?\253\200\200>j\200@?*\376>?\235\377A?\314\360;?~\334G?\320O/?c\006]?\340\222\361>\342/\177?\332tO<a\324L=/\226B>1\234\035?\367Lr?\325uO>\344m%?4\034j?\016%\240>\305\033\\?:\340\366>\300\254\177?\230I\246;\221q\245<4\032\242=\217E\225>\022\201S?4\014\023?\277Tz?\306c\261=b\006\242>\260\200]?\373\311\356>\310\327~?\256p\223<Y\311\220=\364\214\206>\013bF?\361\2302?\232\377W?\030\001\007?\303;\177?\331\246C<\272PA=\r18>j\017\027?\350\260w?\341\240\000>\036\361\340>d;|?9\232m=\312\321_>\000\346.?&\242]?M\006\356>\343\274~?\273\302\240<\033\233\235=\'z\221>\264HP?\354I\033?L]t?\026\2651>\034\336\022?\016pz?? \256=DR\237>=}[?\313m\372>\366\340\177?~.\370:1\266\367;\317\326\365<(v\356=+\262\322>\213\373w?\246\205\370=?]\332>\215wz?\276:\255=\257\223\236>\275\354Z?\201\245\375>v\372\177?\';\2619\320+\261:\201\356\260;\360\371\257<22\254=\303\267\235>\235DZ?\276\256\000?#\376\177?\332\212\3568\350\203\3569!h\356:\036\371\355;\260>\354<\223n\345=\262\272\313>\306Su?\036\245#>3~\t?\211\227~?\302=\263<\307Q\257=\252O\240>\247;\\?\223(\366>%\237\177?\234l\301;RH\300<\356\304\273=\305\215\252>\362zc?q\275\312>`\353t?\220\235)>6\205\r?\315$}?\254\3024=\207\310,>\002\241\017?\362.|?G\237p=\227|b>\211d0?\225h[?\335\343\372>\344\345\177?7\316\320:\017y\320;\205%\317<\227\350\311=\265\000\266>i\234j?\315\320\234>v\222Y?X\243\002?*\344\177?\022\233\336:J:\336;w\270\334<\013\306\326=\024@\300>\372\037p?\022@n>F\3216?.\014Q?(]\031?\261\362u?C\204\032>j3\003?\005\327\177?\264\322#;\336i#<\236\310!=\277d\033>\365\317\003?\335\305\177?\027Vh;;\203g<\303=d=\342\205W>X)*?\2429d?d\027\306>\227\346r?\034\335F>j> ?Y\301o?1ls>\215\2169?\330<L?E/%?6ej?=@\236>\037\255Z?\213\016\377>\034\377\177?g\274c8=\271c9\224\254c:\365yc;\323\257b<\350\214_={YS>S\272\'?\314Vg?QH\262>\375gh?\304Z\253>&\003d?Tl\307>\020\177s?\216I>>=\355\032?\317\253t?\216=->~\356\017?\274\010|?P\342y=\260\243j>\306\3374?OQT?(\352\020?\223\207{?\027\216\214=\240\350\202>*\340B?\230\036:?}8K?i\227\'?\022\202g?\2340\261>\367\274g?.\263\257>\346\317f?a\255\265>\"lj?4\022\236>\357\211Z?\316\325\377>\371\377\177?\307\211\3365\257\211\3366N\211\3367\313\207\3368\300\201\3369\223i\336:\365\010\336;\316\207\334<\001\230\326=\261\033\300>\326\rp?E>o>\360X7?\250\"P?H\251\033?k\013t?gZ6>=\341\025?\030\205x?\227^\350=$\001\316>r<v?\211C\026>\2736\000?\321\377\177?\2757;747;8\0205;9\202,;:K\n;;\243\201:<!b8=M\0250>\372\315\021?\374\013{?go\233=d\243\217>\326\256N?\370C\037?\340\271p?S\315e>\024;2?z\223X?\035i\005?\347\212\177?2\307\351;:\034\350<\241\210\341=r\262\310>\226\rt?\374:6>\001\315\025?\347\222x?n\276\346=\026\277\314>\022\275u?\027\232\035>\200X\005?\262\215\177?\2676\344;\324\237\342<\337Z\334=U\245\304>\025=r?\251XP>\235\364%?\204}i?a>\244>\307\034_?\013M\345>)7}?~E0=\204\257(>\316\345\014?\231f}?A\251$=\254\n\036>a\246\005?P\200\177?\371\337\376;w\344\374<\342\025\365=\206\301\327>j\254y?\347q\305=\327h\262>\270{h?\366\331\252>\270\255c?q\201\311>]ft?+11>\352\207\022?l\242z?A\031\250=\034M\232>[\231W?\241\031\010?\215\371~?\303\262\202<\362\234\200=\220\022q>\223Q8?\327pN?-\334\037?\277#p?=\013n>\004\2656?\212<Q?\212\342\030?\367Rv?\236\366\024>2\226\376>\001\376\177?\337\251\3778\345\241\3779\374\201\377:z\002\377;n\006\375<\3015\365=\303\331\327>\007\264y?S\212\304=\320\255\261>\320\th?3\300\255>\021\223e?\003\225\275>\251\304n?>\223\200>\351\222@?\335\330>?\365HB?4Y;?\014\367H?k\320,?\306\236`?JD\334>#\003{?\223\177\234=\034\212\220>\216xO?\177Q\035?\275\221r?\013\236K>\t!#?\315\267l?:\243\216>\367\314M?=l!?\252\213n?k\035\202>\362\030B?\202\274;?D>H?\252s.?\353H^?\3652\352>\270$~?\315\352\353<\205\037\345=X}\313>\251:u??\025%>&x\n?\223I~?A\277\331<\223\365\323=\274\005\276>\365\376n?~\376}>>\376>?v\377A?\034\361;?\350\333G?!Q/?q\004]?-\236\361>\'1\177?b1N<\024\231K=RzA>\347\353\034?0\356r?\370oF>\237\373\037?a\004p?\260\302o>j\2377?u\250O?d\332\034?\377\375r?\310\214E>Jp\037?t\216p?\2700h>\242\2123?\341}V?\274\034\013?\022\022~?R\032\365<\366\304\355=-*\322>!\313w?\2710\376=\"\244\336>0\247{?^\275\210=M8\177>\377\233??e\307@?\311n>?\233\030C?r\2509?9\016L?6\236%?\213\343i?n\234\241>\2722]?\325\220\360>\311\021\177?\234Ym<`\351i=\265\215\\>\276\014-?\022J`?\346B\336>\264\215{?\342\320\213=RE\202>*@B?ik;?C\325H?d\035-?\2372`?\371\317\336>\225\262{?\006]\207=<\325|>\034h>?\240%C?\"\2159?d?L?5)%?Alj?f\021\236>Q\211Z?N\331\377>\372\377\177?\244-\2735\223-\2736O-\2737=,\2738\366\'\2739\334\026\273:\177\322\272;\322\301\271<\204\213\265=\261s\245>\014\371_?\270)\340>g\n|?\356zy=\350Hj>"
      }
    }
  }
}
node {
  name: "Valid/ValidInput/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/ValidInput/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(#\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/ValidInput/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/ValidInput/strided_slice"
  op: "StridedSlice"
  input: "Valid/ValidInput/raw_data"
  input: "Valid/ValidInput/strided_slice/stack"
  input: "Valid/ValidInput/strided_slice/stack_1"
  input: "Valid/ValidInput/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Valid/ValidInput/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000\010\007\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "Valid/ValidInput/Reshape"
  op: "Reshape"
  input: "Valid/ValidInput/strided_slice"
  input: "Valid/ValidInput/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1800
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Valid/ValidInput/assert_positive/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 149
      }
    }
  }
}
node {
  name: "Valid/ValidInput/assert_positive/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Valid/ValidInput/assert_positive/assert_less/Less"
  op: "Less"
  input: "Valid/ValidInput/assert_positive/Const"
  input: "Valid/ValidInput/assert_positive/x"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Valid/ValidInput/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Valid/ValidInput/assert_positive/assert_less/All"
  op: "All"
  input: "Valid/ValidInput/assert_positive/assert_less/Less"
  input: "Valid/ValidInput/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Valid/ValidInput/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "epoch_size == 0, decrease batch_size or num_steps"
      }
    }
  }
}
node {
  name: "Valid/ValidInput/assert_positive/assert_less/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x > 0 did not hold element-wise: x = "
      }
    }
  }
}
node {
  name: "Valid/ValidInput/assert_positive/assert_less/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Valid/ValidInput/assert_positive/x:0"
      }
    }
  }
}
node {
  name: "Valid/ValidInput/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "epoch_size == 0, decrease batch_size or num_steps"
      }
    }
  }
}
node {
  name: "Valid/ValidInput/assert_positive/assert_less/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x > 0 did not hold element-wise: x = "
      }
    }
  }
}
node {
  name: "Valid/ValidInput/assert_positive/assert_less/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Valid/ValidInput/assert_positive/x:0"
      }
    }
  }
}
node {
  name: "Valid/ValidInput/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "Valid/ValidInput/assert_positive/assert_less/All"
  input: "Valid/ValidInput/assert_positive/assert_less/Assert/Assert/data_0"
  input: "Valid/ValidInput/assert_positive/assert_less/Assert/Assert/data_1"
  input: "Valid/ValidInput/assert_positive/assert_less/Assert/Assert/data_2"
  input: "Valid/ValidInput/assert_positive/x"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "Valid/ValidInput/epoch_size/input"
  op: "Const"
  input: "^Valid/ValidInput/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 149
      }
    }
  }
}
node {
  name: "Valid/ValidInput/epoch_size"
  op: "Identity"
  input: "Valid/ValidInput/epoch_size/input"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Valid/ValidInput/input_producer/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Valid/ValidInput/input_producer/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Valid/ValidInput/input_producer/range"
  op: "Range"
  input: "Valid/ValidInput/input_producer/range/start"
  input: "Valid/ValidInput/epoch_size"
  input: "Valid/ValidInput/input_producer/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Valid/ValidInput/input_producer/fraction_of_32_full/fraction_of_32_full"
  op: "FIFOQueue"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "capacity"
    value {
      i: 32
    }
  }
  attr {
    key: "component_types"
    value {
      list {
        type: DT_INT32
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Valid/ValidInput/input_producer/fraction_of_32_full/fraction_of_32_full_EnqueueMany"
  op: "QueueEnqueueMany"
  input: "Valid/ValidInput/input_producer/fraction_of_32_full/fraction_of_32_full"
  input: "Valid/ValidInput/input_producer/range"
  attr {
    key: "Tcomponents"
    value {
      list {
        type: DT_INT32
      }
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Valid/ValidInput/input_producer/fraction_of_32_full/fraction_of_32_full"
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "Valid/ValidInput/input_producer/fraction_of_32_full/fraction_of_32_full_Close"
  op: "QueueClose"
  input: "Valid/ValidInput/input_producer/fraction_of_32_full/fraction_of_32_full"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Valid/ValidInput/input_producer/fraction_of_32_full/fraction_of_32_full"
      }
    }
  }
  attr {
    key: "cancel_pending_enqueues"
    value {
      b: false
    }
  }
}
node {
  name: "Valid/ValidInput/input_producer/fraction_of_32_full/fraction_of_32_full_Close_1"
  op: "QueueClose"
  input: "Valid/ValidInput/input_producer/fraction_of_32_full/fraction_of_32_full"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Valid/ValidInput/input_producer/fraction_of_32_full/fraction_of_32_full"
      }
    }
  }
  attr {
    key: "cancel_pending_enqueues"
    value {
      b: true
    }
  }
}
node {
  name: "Valid/ValidInput/input_producer/fraction_of_32_full/fraction_of_32_full_Size"
  op: "QueueSize"
  input: "Valid/ValidInput/input_producer/fraction_of_32_full/fraction_of_32_full"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Valid/ValidInput/input_producer/fraction_of_32_full/fraction_of_32_full"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Valid/ValidInput/input_producer/fraction_of_32_full/Cast"
  op: "Cast"
  input: "Valid/ValidInput/input_producer/fraction_of_32_full/fraction_of_32_full_Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Valid/ValidInput/input_producer/fraction_of_32_full/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03125
      }
    }
  }
}
node {
  name: "Valid/ValidInput/input_producer/fraction_of_32_full/mul"
  op: "Mul"
  input: "Valid/ValidInput/input_producer/fraction_of_32_full/Cast"
  input: "Valid/ValidInput/input_producer/fraction_of_32_full/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "queue/Valid/ValidInput/input_producer/fraction_of_32_full/fraction_of_32_full/Valid/ValidInput/input_producer/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "queue/Valid/ValidInput/input_producer/fraction_of_32_full/fraction_of_32_full/Valid/ValidInput/input_producer"
      }
    }
  }
}
node {
  name: "queue/Valid/ValidInput/input_producer/fraction_of_32_full/fraction_of_32_full/Valid/ValidInput/input_producer"
  op: "ScalarSummary"
  input: "queue/Valid/ValidInput/input_producer/fraction_of_32_full/fraction_of_32_full/Valid/ValidInput/input_producer/tags"
  input: "Valid/ValidInput/input_producer/fraction_of_32_full/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Valid/ValidInput/fraction_of_32_full_Dequeue"
  op: "QueueDequeue"
  input: "Valid/ValidInput/input_producer/fraction_of_32_full/fraction_of_32_full"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Valid/ValidInput/input_producer/fraction_of_32_full/fraction_of_32_full"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "component_types"
    value {
      list {
        type: DT_INT32
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "Valid/ValidInput/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 12
      }
    }
  }
}
node {
  name: "Valid/ValidInput/mul"
  op: "Mul"
  input: "Valid/ValidInput/fraction_of_32_full_Dequeue"
  input: "Valid/ValidInput/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Valid/ValidInput/Slice/begin/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Valid/ValidInput/Slice/begin/2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Valid/ValidInput/Slice/begin"
  op: "Pack"
  input: "Valid/ValidInput/Slice/begin/0"
  input: "Valid/ValidInput/mul"
  input: "Valid/ValidInput/Slice/begin/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Valid/ValidInput/Slice/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000\014\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/ValidInput/Slice"
  op: "Slice"
  input: "Valid/ValidInput/Reshape"
  input: "Valid/ValidInput/Slice/begin"
  input: "Valid/ValidInput/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 12
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Valid/ValidInput/mul_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 12
      }
    }
  }
}
node {
  name: "Valid/ValidInput/mul_1"
  op: "Mul"
  input: "Valid/ValidInput/fraction_of_32_full_Dequeue"
  input: "Valid/ValidInput/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Valid/ValidInput/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Valid/ValidInput/add"
  op: "Add"
  input: "Valid/ValidInput/mul_1"
  input: "Valid/ValidInput/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Valid/ValidInput/Slice_1/begin/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Valid/ValidInput/Slice_1/begin/2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Valid/ValidInput/Slice_1/begin"
  op: "Pack"
  input: "Valid/ValidInput/Slice_1/begin/0"
  input: "Valid/ValidInput/add"
  input: "Valid/ValidInput/Slice_1/begin/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Valid/ValidInput/Slice_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000\014\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/ValidInput/Slice_1"
  op: "Slice"
  input: "Valid/ValidInput/Reshape"
  input: "Valid/ValidInput/Slice_1/begin"
  input: "Valid/ValidInput/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 12
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/pack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Valid/Model/zeros"
  op: "Fill"
  input: "Valid/Model/pack"
  input: "Valid/Model/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/pack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Valid/Model/zeros_1"
  op: "Fill"
  input: "Valid/Model/pack_1"
  input: "Valid/Model/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice"
  op: "StridedSlice"
  input: "Valid/ValidInput/Slice"
  input: "Valid/Model/RNN/strided_slice/stack"
  input: "Valid/Model/RNN/strided_slice/stack_1"
  input: "Valid/Model/RNN/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Valid/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Valid/Model/RNN/strided_slice"
  input: "Valid/Model/zeros"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Valid/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/add"
  op: "Add"
  input: "Valid/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Valid/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Valid/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Valid/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Tanh"
  input: "Valid/Model/zeros_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Valid/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/add"
  op: "Add"
  input: "Valid/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Valid/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_1"
  op: "StridedSlice"
  input: "Valid/ValidInput/Slice"
  input: "Valid/Model/RNN/strided_slice_1/stack"
  input: "Valid/Model/RNN/strided_slice_1/stack_1"
  input: "Valid/Model/RNN/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Valid/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Valid/Model/RNN/strided_slice_1"
  input: "Valid/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Valid/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/add"
  op: "Add"
  input: "Valid/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Valid/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Valid/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Tanh"
  input: "Valid/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Valid/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/add"
  op: "Add"
  input: "Valid/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\003\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_2"
  op: "StridedSlice"
  input: "Valid/ValidInput/Slice"
  input: "Valid/Model/RNN/strided_slice_2/stack"
  input: "Valid/Model/RNN/strided_slice_2/stack_1"
  input: "Valid/Model/RNN/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Valid/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Valid/Model/RNN/strided_slice_2"
  input: "Valid/Model/RNN/MultiRNNCell_1/Cell0/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Valid/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/add"
  op: "Add"
  input: "Valid/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Valid/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Valid/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Valid/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/add"
  op: "Add"
  input: "Valid/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\003\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\004\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_3"
  op: "StridedSlice"
  input: "Valid/ValidInput/Slice"
  input: "Valid/Model/RNN/strided_slice_3/stack"
  input: "Valid/Model/RNN/strided_slice_3/stack_1"
  input: "Valid/Model/RNN/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Valid/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Valid/Model/RNN/strided_slice_3"
  input: "Valid/Model/RNN/MultiRNNCell_2/Cell0/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Valid/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/add"
  op: "Add"
  input: "Valid/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Valid/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Valid/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Valid/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/add"
  op: "Add"
  input: "Valid/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\004\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\005\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_4"
  op: "StridedSlice"
  input: "Valid/ValidInput/Slice"
  input: "Valid/Model/RNN/strided_slice_4/stack"
  input: "Valid/Model/RNN/strided_slice_4/stack_1"
  input: "Valid/Model/RNN/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Valid/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Valid/Model/RNN/strided_slice_4"
  input: "Valid/Model/RNN/MultiRNNCell_3/Cell0/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Valid/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/add"
  op: "Add"
  input: "Valid/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Valid/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Valid/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Valid/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/add"
  op: "Add"
  input: "Valid/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\005\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_5"
  op: "StridedSlice"
  input: "Valid/ValidInput/Slice"
  input: "Valid/Model/RNN/strided_slice_5/stack"
  input: "Valid/Model/RNN/strided_slice_5/stack_1"
  input: "Valid/Model/RNN/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Valid/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Valid/Model/RNN/strided_slice_5"
  input: "Valid/Model/RNN/MultiRNNCell_4/Cell0/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Valid/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/add"
  op: "Add"
  input: "Valid/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Valid/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Valid/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Valid/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/add"
  op: "Add"
  input: "Valid/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\007\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_6"
  op: "StridedSlice"
  input: "Valid/ValidInput/Slice"
  input: "Valid/Model/RNN/strided_slice_6/stack"
  input: "Valid/Model/RNN/strided_slice_6/stack_1"
  input: "Valid/Model/RNN/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Valid/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Valid/Model/RNN/strided_slice_6"
  input: "Valid/Model/RNN/MultiRNNCell_5/Cell0/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Valid/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/add"
  op: "Add"
  input: "Valid/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Valid/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Valid/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Valid/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/add"
  op: "Add"
  input: "Valid/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\007\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\010\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_7"
  op: "StridedSlice"
  input: "Valid/ValidInput/Slice"
  input: "Valid/Model/RNN/strided_slice_7/stack"
  input: "Valid/Model/RNN/strided_slice_7/stack_1"
  input: "Valid/Model/RNN/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Valid/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Valid/Model/RNN/strided_slice_7"
  input: "Valid/Model/RNN/MultiRNNCell_6/Cell0/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Valid/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/add"
  op: "Add"
  input: "Valid/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Valid/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Valid/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Valid/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/add"
  op: "Add"
  input: "Valid/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\010\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\t\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_8"
  op: "StridedSlice"
  input: "Valid/ValidInput/Slice"
  input: "Valid/Model/RNN/strided_slice_8/stack"
  input: "Valid/Model/RNN/strided_slice_8/stack_1"
  input: "Valid/Model/RNN/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Valid/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Valid/Model/RNN/strided_slice_8"
  input: "Valid/Model/RNN/MultiRNNCell_7/Cell0/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Valid/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/add"
  op: "Add"
  input: "Valid/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Valid/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Valid/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Valid/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/add"
  op: "Add"
  input: "Valid/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\t\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\n\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_9"
  op: "StridedSlice"
  input: "Valid/ValidInput/Slice"
  input: "Valid/Model/RNN/strided_slice_9/stack"
  input: "Valid/Model/RNN/strided_slice_9/stack_1"
  input: "Valid/Model/RNN/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Valid/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Valid/Model/RNN/strided_slice_9"
  input: "Valid/Model/RNN/MultiRNNCell_8/Cell0/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Valid/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/add"
  op: "Add"
  input: "Valid/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Valid/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Valid/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Valid/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/add"
  op: "Add"
  input: "Valid/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\n\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\013\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_10"
  op: "StridedSlice"
  input: "Valid/ValidInput/Slice"
  input: "Valid/Model/RNN/strided_slice_10/stack"
  input: "Valid/Model/RNN/strided_slice_10/stack_1"
  input: "Valid/Model/RNN/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Valid/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Valid/Model/RNN/strided_slice_10"
  input: "Valid/Model/RNN/MultiRNNCell_9/Cell0/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Valid/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/add"
  op: "Add"
  input: "Valid/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Valid/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Valid/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Valid/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/add"
  op: "Add"
  input: "Valid/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\013\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\014\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/strided_slice_11"
  op: "StridedSlice"
  input: "Valid/ValidInput/Slice"
  input: "Valid/Model/RNN/strided_slice_11/stack"
  input: "Valid/Model/RNN/strided_slice_11/stack_1"
  input: "Valid/Model/RNN/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Valid/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Valid/Model/RNN/strided_slice_11"
  input: "Valid/Model/RNN/MultiRNNCell_10/Cell0/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Valid/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/add"
  op: "Add"
  input: "Valid/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Valid/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Valid/Model/RNN/MultiRNNCell_11/Cell0/BasicRNNCell/Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Valid/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/add"
  op: "Add"
  input: "Valid/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Valid/Model/concat"
  op: "Concat"
  input: "Valid/Model/concat/concat_dim"
  input: "Valid/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_1/Cell1/BasicRNNCell/Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_2/Cell1/BasicRNNCell/Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_3/Cell1/BasicRNNCell/Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_4/Cell1/BasicRNNCell/Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_5/Cell1/BasicRNNCell/Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_6/Cell1/BasicRNNCell/Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_7/Cell1/BasicRNNCell/Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_8/Cell1/BasicRNNCell/Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_9/Cell1/BasicRNNCell/Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_10/Cell1/BasicRNNCell/Tanh"
  input: "Valid/Model/RNN/MultiRNNCell_11/Cell1/BasicRNNCell/Tanh"
  attr {
    key: "N"
    value {
      i: 12
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 768
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377@\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/Reshape"
  op: "Reshape"
  input: "Valid/Model/concat"
  input: "Valid/Model/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/MatMul"
  op: "MatMul"
  input: "Valid/Model/Reshape"
  input: "Model/softmax_w/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Valid/Model/add"
  op: "Add"
  input: "Valid/Model/MatMul"
  input: "Model/softmax_b/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "<\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "Valid/Model/Reshape_1"
  op: "Reshape"
  input: "Valid/ValidInput/Slice_1"
  input: "Valid/Model/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/SquaredDifference"
  op: "SquaredDifference"
  input: "Valid/Model/add"
  input: "Valid/Model/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 60
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Valid/Model/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Valid/Model/Mean"
  op: "Mean"
  input: "Valid/Model/SquaredDifference"
  input: "Valid/Model/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Valid/Validation_Loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Valid/Validation_Loss"
      }
    }
  }
}
node {
  name: "Valid/Validation_Loss"
  op: "ScalarSummary"
  input: "Valid/Validation_Loss/tags"
  input: "Valid/Model/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Test/TestInput/raw_data"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10000
          }
          dim {
            size: 1
          }
        }
        tensor_content: "\221\2564?x\242T?\350\023\020?\006\366{?sj~=\374\234n>\353\0027?\374\266P?\1774\032?.Eu?\032{$>\235\017\n?\033k~?72\311<8A\304=\272r\261>\234\345g?w\253\256>e)f?\343\327\271>\n\306l?rB\216>\034wM?\206<\"?y\257m?\330\010\210>J\310G?)}/?7\303\\?\332\030\363>\204Y\177?\370\017&<\026a$=M\310\035>zx\005?J\210\177?\322\373\356;\240=\355<\306^\346=\370t\314>O\237u?\343O\037>\316\206\006?\235U\177?$\361)<\343-(=\037F!>\316\337\007?\374\007\177?N\023w<uYs=F\344d>l\2721?l\\Y?o:\003?P\326\177?\272\243&;A7&<\222\207$=\262\353\035>\366\220\005?\021\204\177?\212e\367;`\207\365<}+\356=\340x\322>8\347w?2\347\372=&*\334>\324\373z?N`\235=eH\221>\263\035P?\262\265\033?\256\000t?\"\3666>iE\026?\374?x?j~\360=\301@\324>2\206x?Z=\350=r\347\315>f2v?\376\327\026>\211\237\000?r\376\177?\003\326\30680\321\3069\343\275\306:\276p\306;\030=\305<`}\300=\326e\256>\025\375e?\234\362\272>\307_m?d*\212>\r\303I?\270\374*?h c?\\\357\314>^\320u?\r~\034>\226\223\004?9\254\177?JW\247;\204|\246<V\032\243=\005\035\226>\0054T?J7\021?q^{?\223\203\221=\311,\207>N\371F?\332J1?\013\tZ?\217V\001?\326\370\177?d+\3459\277\021\345:B\253\344;\277\022\343<m\307\334=\201\372\304>xdr?\342%N>\242\245$?\375\003k?W\035\232>^sW?\211\201\010?\227\336~?\252\020\220<\024\210\215=.\300\203>\035\262C?$e8?aNN?\2230 ?H\317o?{\251r>D(9?.\364L?ox#?dWl?.1\221>\234\tP?\370\347\033?\376\324s?,o9>\265\332\027?\343\033w?\002Q\t>\035\316\355>\362\264~?\277\260\244<(a\241=\275\251\224>\307\376R?-_\024?\366\203y?\244?\312=\225F\266>\272\304j?\364\303\233>\010\301X?\343\352\004?F\237\177?\302+\301;<\010\300<\331\207\273=\341[\252>\232Yc?\231\214\313>\352@u?\226\271$>\002:\n?\253]~?\326\324\317<\007\217\312=F\206\266>Z\351j?d\317\232>\234\000X?S\376\006?^<\177?\257\014C<=\272@=\277\2507>\023\270\026?b\357w?p\362\371=?q\333>\212\307z?\231\246\243=\346\222\226>S\225T?\2536\020?|\344{?\243T\201=\254Sr>\031\3738?\274DM?S\266\"?A,m?I\212\213>\034\005K?\006\020(?\364\353f?\000\371\264>\346\002j?\316\314\240>\366\230\\?\234\r\364>Fq\177?\204j\016<\232-\r=\346O\010>MU\354>8}~?\372?\300<\372\274\273=F\207\252>\234vc?f\330\312>\224\366t?\305\371(>\223\027\r?cR}?\031\234)=\"\226\">\213\305\010?<\314~?;)\231<(L\226=~D\213>\211\305J?\322\244(?P0f?\266\253\271>\314\255l?/\347\216>\025\tN?\334\331 ??#o?\253\006|>c\377=?1\361C?t\3377?\3448O?[\357\035?\226\377q?\343\305S>\360\371\'?\224\007g?7G\264>5\232i?\037\201\243>\220\224^?\202t\350>\243\325}?\016k\t=\322\316\004>\254*\347>N\227}?\000\271\030==\007\023>\322\325\373>\250\356\177?\266\271\212: \224\212;\030\376\211<\010\253\207=\233\\}>\220\254>?\327\237B?\305\244:?\263CJ?*\323)?\271\252d?nQ\303>\264\235q?Z6Y>\016#+?\322\354b?\241.\316>.Nv?X=\025>u\372\376>\365\376\177?\360\231\2058\302\227\2059\013\217\205:4l\205;!\341\204<Y\271\202=\201\302t>\253A:?\267\370J?\022-(?\212\307f?\025\343\265>E\213j?\373B\235>\274\352Y?\307\253\001?\325\364\177?\232\2542:m\2152;\344\0202<v!0=\226\216(>\271\317\014?yo}?\356|\"=\311\n\034>\177C\004?I\267\177?\352D\221;\014\240\220<i\022\216=[7\204>\224%D?\017p7?\242\372O?l\r\034??\264s?\006I;>\025\010\031?\2565v?\200\247\026>R}\000?\013\377\177?[eu8\256au9\373Ru:5\030u;\216-t<\362\211p=\303ib>\tZ0?tx[?)\211\372>$\342\177?\254\300\356:WQ\356;\240\225\354<~\300\345=@\372\313>\252mu?<)\">/{\010?G\340~?\260:\217<\233\271\214=*\016\203>\325\004C?\342\3219?t\303K?\222O&?\037\021i?\232\007\247>I\024a?\370|\331>\3274z?\0213\265=\351*\245>z\305_?\267^\341>\315U|?\0341g=\202$Z>\365\253+?!3b?\206\246\322>l\367w?R\001\371=\340\272\332>\362\222z?\237\363\251=-\331\233>\246\321X?\312\274\004?:\246\177?IM\263;\037R\262<lp\256=\314\224\237>l\257[?\211N\371>3\323\177?\016\0233;\312\2252<x\2430=e\005)>]\037\r?3O}?\372c*=kM#>\177B\t?\007\251~?\271\226\252<U\t\247=\257i\231>\337\343V?m\010\n?]m~?\363\024\310<\3551\303=J\227\260>5^g?v\030\262>\346Jh?|\030\254>\017\200d?\243]\304>\302\033r??4R>\316\r\'?)+h?9\347\254>\354\006e?J\014\301>\014\205p?\007\265h>\340\3223?4\tV?CW\014?\320\236}?\224\341\026=\302R\021>\027f\371>m\324\177?\'0.;\242\271-<\020\342+=\224\253$>\2020\n?\263`~?\305U\316<T#\311=Db\265>n@j?\2444\237>\332f[?\300\355\372>H\346\177?\252\251\315:\rW\315;\244\r\314<v\370\306=\315\243\263>!9i?\264\000\246>\177\\`?\374\323\335>Gp{?H]\217=\035T\205>\2707E?\252#5?\333\340S?\263\021\022?\006\346z?i\376\237=\251~\223>\235\002R?N\351\026?H\314w?C\016\376=:\212\336>m\240{?b\216\211=+Q\200>\022Q@?v]??wCA?\260r=?\224\000E?\302\2325?9\032S?\362\027\024?\000\261y?w\346\304=A\370\261>G7h?R\230\254>\233\323d?\375O\302>\246\"q?P\006`>\215\003/?\311v]?\327\003\357>\203\337~?.\234\217<\257\027\215=L_\203>\355SC?\332+9?\306\355L?\326\207#?NFl?\327\244\221>\210mP?p\355\032?\244\253t?\376?->\033\360\017?\357\007|?\"\024z=m\317j>v\3674?#*T?HQ\021?jP{?\0204\223=v\237\210>\033UH?\022@.?\246\223^?\350y\350>\241\326}?\236,\t=\221\224\004>\\\324\346>s\206}?`\333\034=\237\331\026>\257\240\000?m\376\177?A\265\3118I\260\3119m\234\311:\tM\311;u\020\310<\247-\303=\325\223\260>\020\\g?S&\262>USh?~\341\253>\367[d?.@\305>\205\204r?P[L>\346\222#?\003:l?\000\370\221> \265P?19\032?UAu?t\263$>\3315\n?\377^~?\363,\317<\245\357\311=_\006\266>\257\237j?\377\272\234>\216\201Y?\245\322\002? \340\177?~\335\376:\240^\376; e\374<f\236\364=\233f\327>\265\217y?\323\332\310=\376\'\265>i\036j?n\026\240>\320\020\\?J\037\367>/\261\177?\260p\235;\t\257\234<\333\257\231=f\'\216>\020_M?\263v\"?\005qm?}\264\211>MVI?\254\366+?\322\314a?&\031\325>p\317x?\321\233\337=\2661\307>\031es?4\300?>\034\330\033?\316\342s?\033\2478>\362Z\027?!zw?\267\323\003>@\266\345>\360L}?\261\361*=S\317#>\350\232\t?\370\216~?\031z\267<\032^\263=\203\250\243>\000\261^?L\314\347>D\266}?\006 \021=\261\373\013>\275\261\361>Y3\177?\244\003L<MyI=Q\220?>\'\272\033?\322\374s?\034.7>_i\026?\341&x?\336p\363=\357\200\326>\rFy?\205\226\321=\241#\274>\351\002n?\377\313\205>e\252E?\321*4?PzU?1\326\r?/\002}?\2017==\321y4>\357\252\024?bSy?C\002\320=\315\341\272>\265Vm?ch\212>\021\374I?\030y*?+\320c?\253\252\310>9\nt?\274k6>e\354\025?u}x?\237D\351=\337\262\316>b\201v?\201G\022>1\304\372>\234\344\177?\376\010\333:J\253\332;\2725\331<Ys\323=n\236\275>\213\311n?lq\200>:q@?\304\034??Q\303A?\356l<?\007\363F?\305X1?\230\363Y?\343\222\001?\030\366\177?h}\036:\340d\036;\340\002\036<\301|\034==\202\026>\004c\000?g\377\177?\2041\0318\0260\0319[*\031:r\023\031;\352\267\030<~K\027=\334\264\021>\207\362\371>^\333\177?\203t\022;\272 \022<\025\323\020=2\264\013>\316I\361>\221\'\177?-\270W<\021\341T=\271\320I>^\n\"?\373\344m?\255\231\206>\035nF?d~2?\213)X?\250\215\006?7T\177?\262U+<\003\213)=v\206\">\331\272\010?(\317~?]\266\227<\030\347\224=\227\023\212>\016\256I?\027-+?J\337b?F\202\316>\241nv?>]\023>`P\374>j\362\177?OXY:-*Y;\365qX<\363\225U=\305rJ>pl\"?\021|m?\353h\211>`\020I?\242\226,?\177\357`?\005\\\332>0wz?\313E\255=\336\234\236>\272\363Z?\311}\375>\265\371\177?\306]\3119\371I\311:\327\372\310;E\277\307<n\340\302=PU\260>65g?\036!\263>\350\352h?b\002\250>\243\301a?}]\325>F\346x?\353\351\334=\217\025\305>\356pr?\244sM>\n;$?^}k?\255\357\226>\233\341T?\256l\017?VH|?\020vj=O\n]>\234S-?\377\345_?\357\233\340>\235&|?\222\244r=\331Dd>,b1?\026\345Y?\246\273\001?\375\363\177?\307,@:\267\010@;\251x?<\324;==\276}4>z\255\024?\276Qy?\0234\320=~\t\273>\035lm?\n\326\211>KuI?\227\257+?,.b?\361\304\322>/\002x?|\276\367=X\306\331>\325Jz?\342\222\262=\317\000\243>\2267^?\014\231\352>\3635~?\356l\343<\234\034\335=O=\305>4\203r?.nL><\236#?h-l?DM\222>O\376P?H\200\031?\307\326u?\237\037\034>\374Q\004?X\265\177?r%\225;\251w\224<\324\306\221=yf\207>\266/G?\001\3220?M\302Z?r\226\376>\001\376\177?iO\3778tG\3779\242\'\377:{\250\376;\325\255\374<\237\342\364=\206\232\327>\"\240y?}\347\306= \226\263>\3670i?]6\246>.\202`?\331\360\334>\3332{?\375\302\226=\333\251\213>\321!K?\254\314\'?\000@g?\177\333\262>\005\301h?\323\024\251>&}b?\220\337\320>\023Sw?\230\032\006>C\025\351>\320\362}?\224>\002=\2654\374=\273%\335>LA{?\030\006\225=\025.\212>s\306I?\342\364*?\356*c?#\256\314>H\266u?\n\376\035>\245\235\005?\332\201\177?\303\317\373;a\340\371</A\362=E\231\325>\"\372x?\205\221\332=\000>\303>}\224q?:\271Y>Xn+?\374\206b?\377\242\320>\270<w?\355g\007>w\000\353>\023G~?\213\372\332<\r \325=B\362\276>\005xo?:kw>4\243;?xmH?\367\010.?\033\343^?u\243\346>\313|}?%9\037=\244\010\031>\317)\002?H\355\177?\t\267\225:A\213\225;\212\334\224<\r(\222=\326\271\207>%~G?$#0?6\313[?3\257\370>{\312\177?3\346U;z3U<?mR=\311\235G>\035\264 ?\350Io?4\355y>a\355<?y\377E?(q3?\341\246V?\321\255\n?\3277~?P~\342<6;\334={\214\304>\2151r?P\375P>)V&?;\ti?h;\247>A8a?\224\242\330>g\362y?\244\036\275=\334\247\253>\n6d?\347-\306>\304\360r?\354JF>\356\344\037?\007\033p?p\205n>X\3666?\230\314P?\366\375\031?\250qu?\234\356!>\034S\010?\315\352~?i\003\212<,\260\207=\205e}>\021\261>?\006\227B? \267:?\n\"J?8!*?UDd?X\324\305>0\310r?\206\221H>\231H!?\320\260n?\234\034\201>`\033A?Z\304=?YcD?H\3546?\337\335P?R\322\031?\375\224u?\243\347\037>?\357\006?\246?\177?\272\311?<\377\212==\227\3054>\371\333\024?\2203y?\360\306\323=\277\340\275>\336\353n?8\007\177>_\203??N\370@?\240\013>?x\331C?\311\0218?\333\340N?\323\310\036?D1q?\2137_>\027\217.?\017!^?\246\035\353>\332K~?\226\237\330<(\345\322=\220-\275>\321\216n?\244\007\202>\205\003B?\275\350;?\225\353G?\352-/?o8]?\227o\360>\302\r\177?\207Xq<h\312m=b\374_>\367\375.?\375~]?\347\323\356>\035\331~?\232\307\222<W&\220=\362\000\206>\347\334E?\263\2743?\026-V?\266\366\013?z\303}?Q\341\r=2\367\010>\232J\355>\375\241~?0\022\256<J_\252=\3642\234>\305\027Y?\334\371\003?\304\300\177?\021\262|;\242\270{<\224\332w=\034\333h>\244\3473?\214\347U?\257\261\014?q{}?\372\215\037=\340V\031>\242`\002?d\351\177?\201\320\264:\246\220\264;\357\221\263<C\242\257=\\\222\240>qm\\?@\t\365>\313\207\177?\306\370\357;\3416\356<\220I\347=\325*\315>\n\350u?J!\033>\365\240\003?T\313\177?\332\203R;\275\326Q<\274&O=\301\254D>\202\346\036?\250\024q?#\314`>\253r/?\310\322\\?\230\276\362>KP\177?\271</<\351\\-=~\006&>c\033\013?\212\022~?B\337\364<o\215\355=\211\377\321>\325\273w?\273\372\377=\014\374\337>\003\377{?D=|=\271\264l>L\3755?\220tR?{\304\025?\264\230x?\213\017\346=\2157\314>\205\206u?9\274 >E\201\007?\264\036\177?\316\205`<$r]=@yQ>s\237&?\032\261h?\002}\251>\272\303b?\177,\317>\001\260v?f\224\017><\345\366>\033\255\177?\212\223\245;[\275\244<Bm\241=\356\263\224>S\007S?\001I\024?\014\222y?\250\223\310=\306\356\264>\347\374i?\205\364\240>z\266\\?\262b\363>\340`\177?\014\275\036<U3\035=\325*\027>\361\331\000?\032\375\177?\223\21099+\2009:\221^9;W\3308<x\3026=\347\232.>+\325\020?\245\222{?<8\213=y\301\201>d\276A?\017w<?\346\337F?+\2031?\032\262Y?\270J\002?\375\352\177?\000\010\250:\333\320\247;\327\364\246<\303\215\243=\t~\226>!\204T?\031d\020?W\315{?2!\204=\3245w>\231\207;?\336\240H?w\224-?\340\211_?\017\303\342>#\251|?\242\355R=\367\020H>V\372 ?\327\001o?|\326}>\023\352>?#\'B?0\237;?\364tH?\005\370-?x\373^?\345\022\346>\325_}?\200Q&=\244\220\037>d\263\006?fL\177?\253\0333<l&1=\n})>uo\r?\367-}?@\2052=g\275*>aE\016?[\321|?D!I=\360@?>s\210\033?\274\'t?q\2774>\000\330\024?\'6y?mx\323=v\242\275>\242\313n?\363b\200>\315b@?\3159??\000\212A?\207\342<?!\024F?\362C3?n\357V?\007\351\t?%w~?\333?\303<\211\230\276=\260\333\254>o\377d?\224;\301>E\234p?Bng>8 3?\227(W?\213M\t?\323\245~?\205,\254<&\216\250=\312\256\232>\321\346W?6E\007?\221,\177?\036\300R<\037\nP=\030yE>2d\037?S\232p?\250\211g>:/3?\230\020W?\336\216\t?\223\222~?\347\261\265<>\252\261=\243@\242>g\253]?!\320\355><\265~?v\214\244<T>\241=e\214\224>)\346R?\374\236\024?\027[y?p\030\317=_\'\272>\202\361l?\264\032\215>\373nL?\253\267$?Q\357j?\214\247\232>\026\341W?\365T\007?\372(\177?\262QV<\377\203S=\321\227H>mL!?\324\254n?\'8\201>\2526A?\310\214=?n\316D?\275\0066?\240dR?\210\355\025?\255|x?\037\\\351=\005\305\316>^\210v?\010\340\021>J0\372>:\336\177?\272\004\007;\204\275\006<\331\241\005=\300E\001>\320\347\341>Rv|?ZJ_=0\036S>~\227\'?\370\201g?F1\261>_\275g?\211\260\257>=\316f?\014\270\265>Srj?\003\351\235>ejZ?\024D\000?\270\377\177?\t\326\2207e\325\2208\326\322\2209\230\310\220:\247\237\220;?\374\217<at\215=4\257\203>\241\241C?\000\2108?\337\020N?\333\306 ?\2736o?\336\367z>\233u=?\371\372D?\327\2465?\371\005S?\202L\024?\323\217y?,\327\310=\017%\265>\261\034j?\321!\240>X\031\\?2\356\366>\276\255\177?\227N\244;\255{\243<w8\240=\243\257\223>\030,R?\343~\026?\310\027x?=6\365=!\332\327>%\264y?\315\206\304=\367\252\261>\022\010h?\207\313\255>X\232e?\316f\275>\247\254n?c9\201>\3447A?I\212=?:\323D?k\3745?\013vR?\253\300\025?L\233x?_\301\345=\356\372\313>\361mu?+%\">gx\010?\004\341~?Q\335\216<\177_\214=l\300\202>\332\270B?\251p:?\007\243J?`\365(?\234\311e?c:\274>\367\016n?\023y\205>\037[E?\002\3274?\312_T?\377\303\020?\250\233{?\271!\212=\255\320\200>\003\320@?V]>?\242:C?\007a9?\231\216L?\030l$?\256Ek?ie\230>>\022V?\365>\014?&\250}?\032\227\024=)3\017>9Y\366>\331\242\177?l\t\272;\t\373\270<\272\315\264=|\327\244>,\212_?H\301\342>\273\250|?\357\006S=\250\'H>)\010!?\225\363n?D\234~>\246M??\302bA?\3152=?\002{E?\330\2214?\265\321T?\327\226\017?\3503|?8ko=\242la>\231\314/?\361L\\?\335\304\365>T\227\177?<\003\321;\360\255\317<\032j\312=\246h\266>U\330j?\024A\233>IZX?7\007\006?\245n\177?\224\010\021<\352\277\017=j\264\n>T\325\357>\243\372~?\353(\202<~\027\200=\035)p>\326\3257?\256IO?\305\305\035?c&r?\246\234Q>\\\264&?\326\227h??\"\252>\3762c?-|\314>6\242u??%\037>mi\006?\216[\177?k\010$<\000d\"=\325\363\033>\2123\004?e\271\177?\206\016\215;\024s\214<\243\n\212=\264\274\200>)\274@?\204\205>?9\354B?b\005:?=fK?\275+\'?\223\006h?B\325\255>\227\240e?!?\275>\374\227n?K\310\201>\036\305A?<i<?\002\372F?KI1?q\013Z?\321O\001?\036\371\177?\t=\3349Z%\334:\262\306\333;WM\332<\030|\324=`p\276>\3005o?\202\005{>\217|=?\235\355D?\240\3035?\252\325R?\264\311\024?t?y?\231^\322=\256\302\274>\331Vn?\003\212\203>|}C?M\3248?\270\211M?t\017\"?\221\337m?\333\276\206>[\221F?\27702?\260\243X?:<\005?^\222\177?\243\345\332;Ko\331<\334\251\323=\256\311\275>\362\337n?~\254\177>8\326??tS@?\253X??\365LA?Q_=?\300%E?\204J5??\240S?\314\272\022?\314\204z?\021\245\253=SB\235>;\352Y?2\255\001?\302\364\177?&\3343:\217\2743;]>3<\\H1=\n\234)>1\204\r?;%}?\273\2474=\366\257,>\273\220\017?\3416|?\225\262n=\214\311`>7q/?\357\324\\?\033\262\362>\377N\177?\234\2060<\267\237.=\337-\'>\247\342\013?\364\312}?1\013\014=mA\007>\322\307\352>\274=~?\375\225\337<\310{\331=ec\302>\377+q?\034\202_> \271.?\312\343]?\243\205\354>\234\204~?\n\231\274<\201A\270=\272\255\247>U\207a?N\301\326>\334Zy?\201\037\317=\003-\272>\225\364l?\302\005\215>,\\L?\223\344$?\252\273j?n\000\234>V\360X?\215g\004?g\262\177?)\003\233;oG\232<\237_\227=a/\214>\347\232K?{\257&?\274\235h?\257\373\251>\031\031c?\240\034\315>e\342u?}t\033>\354\332\003?\215\304\177?\267\224m;:\270l<\251Li=\337\002\\>\243\275,?\016\271`?\200\245\333>l\326z?\256\335\241=\234\022\225>\215VS?\016{\023?\003\022z?xZ\271=\374\223\250>g%b?\273\372\322>&\025x?`\205\365=N\026\330>\366\306y?\017J\302=\205\333\257>.\351f?\331\n\265>[\rj?\202\207\240>Ze\\?\3717\365>\303\213\177?\013\020\350;Qk\346<)\360\337=\240s\307>I\202s?\002\033>>\374\317\032?`\304t?+\327+>\341\000\017?\227{|?\240\002^=\030\372Q>\204\353&?\361Th?\002\327\253>\022Ud?jk\305>V\230r?\215?K>\027\350\"?\036\366l?P\373\214>\312RL?\366\372$?\324\241j?\263\254\234>xvY?\250\361\002?U\335\177?\006\231\n;\375M\n<\034#\t=\263\213\004>7\307\346>\334\203}?\310}\035=\217o\027>\\\n\001?\253\373\177?\253\217\2129K\206\212:\320`\212;7\313\211<\336y\207=L\007}>q\201>?0\364B?\272\3649?l\204K?\220\344&?e]h?\340\237\253>\3070d?\334N\306>\244\377r?1uE>\314a\037?\255\234p?\215hg>\027\0353?\227-W?\356?\t?\305\251~?\2268\252<\034\257\246=*\036\231>B\247V?\311\254\n?/8~?\324R\342<!\022\334=<l\304>\216\"r?K\323Q>\237\324&?\300ph?\220!\253>E\335c?\350X\310>\307\346s?\227m8>)6\027?\345\224w?\316C\002>%c\343>P\315|?v\035J=N$@>\257\026\034?\036\254s?\217\276;>\222R\031?\023\373u?\245\010\032>\013\335\002?4\337\177?\323\037\003;\251\334\002<\026\321\001=\237g\373=\024\213\334>\322\026{?\007\"\232=h\210\216>4\265M?\372\245!?(On?\010\277\203>\377\260C?\201g8?7JN?\304: ?\006\305o?\3238s>\230s9?ImL?\270\273$?\253\352j?\233\306\232>\252\371W?m\021\007?+8\177?\2418G<|\314D=\340W;>\200\021\031?O.v?m\024\027>&\312\000?\201\375\177?\267\236\0379~\230\037:\236\177\037;?\034\037<\256\220\035=\002\201\027>\245\026\001?C\373\177?\037\243\2279\345\227\227:\003k\227;\344\267\226<\004\362\223=\tB\211>S\354H?\334\350,?\203|`?\014\023\335>4<{?\375\242\225=\031\264\212>\210AJ?2\330)?%\244d?\314z\303>J\261q?\034 X>\217\202*?\232\303c?\r\371\310>\003,t?T\2014>\314\257\024?=Py?\231a\320=\301-\273>\242\177m?\205P\211>\302\371H?=\312,?m\247`?\006\020\334>\201\364z?|A\236=\337\006\222>\350\301P?\361\030\032?\262[u?\3440#>\021/\t?\241\256~?^\321\247<Ga\244=\256/\227>\024\026U?T\341\016?R\212|?smZ=\211\307N>\032\006%?\361\224j?\215\002\235>\371\270Y?u7\002?Y\354\177?\353.\235:\252\376\234;\033>\234<=C\231=\017\313\215>\317\014M?,=#?\335\230l?Pu\217>[\206N?h\247\037?\035Xp?\207,k>\325)5?\234\326S?\213,\022?\323\326z?b\321\241=A\010\225>\346MS?\224\221\023?E\004z?\305\375\272=\r\353\251>\353\rc?\332a\315>\330\375u?\325\337\031>\201\300\002?\265\341\177?\002<\362:g\311\361;\256\000\360<\243\370\350=0x\316>\272jv?\372\226\023>\227\242\374>\255\364\177?\343 5:\331\0005;\337\2004<\311\2032=\021\274*>|D\016?\300\321|?z\010I=\225*?>qz\033?\3073t?\226\0204>\301f\024?#\177y?F\322\312=6\274\266>E\010k?\262\000\232>\216\\W?\330\277\010?\313\315~?uc\230<\303\215\225=\371\241\212>\3530J?\274\376)?\252qd?\007\270\304>\277Er?\361\334O>.\253%?I\324i?_\001\242>\002}]?}\337\356>\252\332~?\265\002\222<}h\217=\300]\205>\364@E?\260\0175?\001\002T?\274\272\021?\253\026{?\264&\232=b\214\216>\272\270M?k\235!?&Xn?\007\201\203>\300tC?\271\3468?\374hM?\265^\"?\324\212m?\341\003\211>\233\262H?0l-?%\303_?\256l\341>$Y|?\212af=SlY>\037B+?\343\302b?\2621\317>\374\261v?\371v\017>\341\272\366>\021\252\177?\356\243\253;\306\275\252<\301.\247=\000\211\231>\365\374V?G\304\t?r\202~?\241\252\275<vF\271=\231\203\250>5\032b?d?\323>:-x?C\262\362=\223\357\325>\233\026y?\3563\327=\346\226\300>\032Kp?4\343k>y\2145?#2S?\316\331\023?\310\327y?\326I\300=\373;\256>_\342e?\307\234\273>#\273m?\333\270\207>9}G?3%0?\035\310[?\367\300\370>~\313\177?\022\335Q;\0071Q<C\205N=\227\033D>\006\215\036?\223jq?\333\013\\>\303\302,?\343\261`?\320\320\333>\262\342z?\266d\240=\365\324\223>\247KR?\312-\026?dPx?\037\221\356=\332\306\322>\334\002x?:\252\367=\374\266\331>>Fz?2\037\263=\236t\243>\205\213^?\360\251\350>l\337}?U\003\007=\r\220\002>\313\324\343>\205\346|?\343\367C=\252\227:>{\227\030?\375\214v?\214\233\021>O\316\371>\242\331\177?\334`\031;\367\004\031<\033\227\027=\341\372\021>\256V\372>\363\337\177?\264$\000;\037\311\377;\373\311\375<4\355\365=8e\330>y\337y?\204_\277=\217}\255>-he?\020\245\276>\262Po?\310\216y>\004\275<?k[F?\204\2472?\213\350W?x@\007?\245-\177?n\256Q<u\377N=s\211D>\303\320\036?\241)q?\227\243_>\374\313.?;\310]?E\'\355>\316\234~?}\242\260<\177\323\254=\342=\236>R\253Z?\273\030\377>/\377\177?\330\354P8.\352P9\206\337P:\353\264P;\304\nP<~fM=\252\031C>\243\355\035?2\001r?\366\256S>~\354\'?]\030g?\027\333\263>\020Zi?\366\'\245>c\303_?;k\341>\313X|?\005wf=d\177Y>\026M+?\r\264b?:\215\317>\302\324v?\303r\r>\270\321\363>\241k\177?+\t\024<\301\262\022=\273q\r>8\320\363>|k\177?{-\024<i\326\022=\324\222\r> \000\364>\003p\177?\010\254\017<\201i\016=\356u\t>$\004\356>\225\274~?7\351\240<\024\300\235=o\231\221>\262cP?\'\006\033?\316\226t?\303o.>\274\270\020?\215\241{?\222k\211=\0103\200>\3762@?\334\231??\245\313@?.f>?d)C?;\2059?\231ML?U\007%?\204\223j?\013\014\235>P\300Y?\340\"\002?\277\355\177?^\375\221:\276\323\221;\232-\221<\365\232\216=\354\254\204>\020\227D?\231}6?\027\233Q?\366\361\027?\204\nw?\213S\n>\377G\357>|\350~?\230)\213<g\314\210=YR\177>\017\251??k\255@?S\243>?\356\261B?\027\177:?\252\210J?\3232)?\271ze?{/\276>s\024o?/\324|>\224g>?\252&C?\366\2129?MCL?\343\037%?\022wj?q\311\235>/RZ?s\210\000?\335\376\177?ct\2218\315q\2219yg\221:.>\221;_\231\220<\370\013\216=\3171\204>7 D?|{7?\325\346O?\341>\034?\276\210s?\310\275=>W\225\032?M\365t?p\014)>\025$\r?CM}?I\335*=\237\274#>/\216\t?\307\222~?\027\230\265<\224\221\261=@,\242>w\234]?\216\'\356>\212\301~?\004u\236<_d\233=\010\232\217>\237\246N?+X\037?\035\246p?\263\343f>7\3242?\252\241W?\341\002\010?H\377~?\352\266\177<2\271{=\350@l>\371\2765?z\335R?x\265\024?\222Ly?\333\320\320=Y\206\273>&\257m?\021\013\210>`\312G?|x/?\'\312\\?\240\360\362>oU\177?\004\037*<\317Z(=Zo!>\n\374\007?\375\000\177?\300\004~<\212\024z=\310\317j>\250\3674?\321)T?\037R\021?\366O{?\025B\223=w\253\210>L`H?\303&.?0\270^?\301\241\347>1\256}?O\033\023=\311\322\r>\242\\\364>\216x\177?\241*\007<)\r\006=\r\252\001>\261}\342>8\231|?\222\315V=\315\211K>\327\024#?.\305l?MH\216>P|M?\355/\"?\360\274m?\201\254\207>\236qG?!?0?\021\241[?\305\240\371>f\327\177?\365N\";\r\350!<vN =T\010\032>\322\334\002?9\337\177?t\013\003;_\310\002<\037\275\001=9B\373=\334n\334>\376\016{?\352\022\233=\355T\217>\335iN?G\355\037?\263\022p?\032\372n>\23347?jaP?\342\013\033?\367\221t?I\266.>6\347\020?\"\211{?\006^\214=\'\277\202>\233\267B?As:?J\236J?m\000)?u\273e?f\224\274>\200>n?\3261\204>> D?l{7?\360\346O?\237>\034?\370\210s?\205\272=>I\223\032?\002\367t?\203\363(>b\023\r?\032T}?\2640)=\2373\">G\202\010?e\336~?\251)\220<2\240\215=\366\324\203>G\306C?t:8?\177\231N?jx\037?w\206p?\031\241h>\000\3103?\317\032V?\351\'\014?\360\260}?\340n\022=\2652\r>\367t\363>\254b\177?\237\363\034<\270r\033=v\214\025>\205j\377>\251\377\177?`\221\2567r\220\2568\272\214\2569\332}\256:bB\256;%U\255<D\252\251=\374\233\233>\266\241X?\263A\005?y\221\177?\210\257\334;\0143\333<\211U\325=\232\034\277>\203\215o?\240?v>\n\010;?-\215I?\273x+?\341xb?\323\371\320>\273\\w?\205\212\005>n@\350>\004\314}?F\310\013=\024\003\007>\tl\352>d.~?\234&\347<\347\240\340=\247\375\307>\371\276s?\332\255:>\224\245\030?%\202v?C<\022> \264\372>\363\343\177?8Q\340:\361\356\337;-g\336<t]\330=\271\201\301>\227\276p?\331\212e>l\0262?\357\314X?\335\311\004?H\244\177?\376.\267;\325(\266<\345\033\262=\213\236\242>\014\360]?\262=\354>\225y~?\310\013\302<\031s\275=\264\354\253>Ucd?\371\021\305>Gor?B\213M>-I$?Ymk?E[\227>\2769U?l\202\016?\347\265|?\276\321O=pFE>\021E\037?\315\270p?u\334e>kC2?a\206X?Z\215\005?\262\204\177?\321%\366;xL\364<i\003\355=\177\225\321>\215\225w?\3659\002>uT\343>\007\312|?\206\352J=\026\335@>\376\211\034?\030Fs?5\177A>\361\356\034?q\353r?r\227F>\312\023 ?/\354o?O\025q>\007S8?HnN?s\342\037?\177\035p?\322bn>\331\3436?W\354P?\275\255\031?m\262u?\3066\036>\334\304\005?\340z\177?\264\332\004<\353\306\003=0\023\377=IN\337>\027\323{?@o\203=\274\377u>\335\346:?O\312I?\375\353*?\3366c?\"d\314>\207\230u?\241\263\037>y\313\006?RG\177?j(8<\202\0266=A\376->\331m\020?W\310{?\370\273\204=XCx>\265\022<?\347\234G?^\336/?a2\\?\002^\366>6\243\177?vQ\271;)E\270<\r \264=jH\244>\370#_?H\"\345>7.}?\221u2=\026\257*>\326;\016?\233\325|?\001\030H=\251Q>>U\362\032?\205\247t?\027|->\332\027\020?\n\364{?p\345~=\257\010o>a<7?\000TP?\222-\033?mut?\375U0>g\370\021?E\364z?\233H\236=\345\014\222>\024\307P?\343\013\032?Ufu?\320\224\">\245\304\010?{\314~?\372\t\231<\023.\226=\322*\213>\035\256J?\203\333(?\253\352e?\360g\273>\335\236m?\247z\210>\3022H?\244\215.?+#^?=\021\353>\323I~?\222\237\331<\223\327\323=\361\355\275>\257\362n?\272\250~>\352S??^VA?\035L=?\215JE?\350\3724?o$T?I`\021?IH{?\272.\224=\370u\211>v\034I?\005{,?\354\025a?\ts\331>\3311z?n\216\265=\027v\245>\276\372_?\215\037\340>\337\007|?\331\027z=\260\322j>:\3714?7\'T?\370X\021?AL{?c\264\223=N\r\211>^\273H?IX-?`\337_?\236\303\340>R0|?\332Ip=11b>x:0?\026\250[?\216x\371>_\325\177?\234g*;.\366)<\3232(=\247J!>\350\342\007?9\007\177?n\325w<\270\025t=\"\212e>\007\0262?\216\315X?&\310\004?\211\244\177?$\254\266;r\247\265<@\240\261=`8\242>Z\245]?\214\363\355>?\272~?.\021\242<`\334\236=\310\211\222>\0362Q?\376\374\030?Z>v?d\'\026>\330\"\000?\355\377\177?!\303\2276\364\302\2277@\302\2278p\277\22791\264\227:>\207\227;\335\323\226<\365\014\224=\026Y\211>\263\001I?\037\270,?\303\300`?\344v\333>\'\311z?!u\243=Vi\226>\020sT?(\221\020?#\266{?&\357\206=~\026|>k\007>?\237\341C?\177\0008?!\377N?&~\036?\304xq?\237B[>\333O,?\317Qa?:\007\330>B\302y?L\331\302=\212O\260>\2361g?M8\263>\322\370h?\035\247\247>\305\202a?\035\335\326>\316cy?\374\017\316=ET\271>\243}l?\t.\220>@(O?\211\030\036?\366\330q?\351\353U>N;)?\315oe?\276t\276>\3757o?h\346z>\263l=?\021\014E?\370\2015?\265CS?\034\254\023?\001\364y?\332\355\274=\024\200\253>\315\033d?\'\322\306>\215:s?\177%B>HV\035?Z\215r?\332\334K>\332F#?3\216l?\260\275\217>\351\305N?4\013\037?$\361p?\333\301b>%\2130?\032.[?\2071\374>\203\361\177?\177\310g:\010\224g;\214\302f<\203\202c=x\337V>\340\310)?+\270d?\322\374\302>|uq?+q[>wj,?\353,a?m\347\330>\201\007z?\034\233\272=c\232\251>\223\327b?\362\261\316>\007\201v?\311L\022>\273\313\372>\353\344\177?\356\223\330:Q8\330;\023\313\326<R)\321=\302\314\273>\275\324m?3\t\207>\261\327F?U\2251?\372\225Y?\202\231\002?\370\344\177?\340+\330:\233\320\327;\273d\326<W\310\320=\221\177\273>\205\253m?\360#\210>\254\341G?/D/?\223\027]?\351.\361>w$\177?\n\315Z<\002\341W=G\200L>\033\251#?L!l?\034\237\222>YDQ?\266\316\030?\\bv?\323\022\024>\303R\375>\326\370\177?H?\3459\237%\345:\021\277\344;G&\343<\340\331\334=\371\010\305>#kr?\206\306M>\243l$?\021Ek?\213i\230>\226\025V?\3675\014?\226\253}? \277\023=\317j\016>I8\365>\312\213\177?\305\002\350;;^\346<\317\343\337=\371i\307>\005~s?\226X>>\257\366\032?\333\243t?\205\261->*;\020?4\342{?C\233\201=\020\317r>\010<9?\332\320L?P\315#?\336\370k?%\260\223>\207,R?\310}\026?\217\030x?\360\036\365=h\310\327>\225\256y?\0200\305=\2603\262>u[h?\204\254\253>\0339d?\260\032\306>\025\350r?\260\307F>P1 ?\212\316o?\331\263r>\270-9?p\352L?\334\217#?d=l?\'\341\221>z\241P?\270j\032?\230\030u?&\010\'>=\311\013?Z\324}?\362\273\t=G\032\005>f\232\347>\313\254}?Ss\023=y$\016>\264\322\364>\023\203\177?9_\371;dy\367<\211\377\357=\245\337\323>\335dx?1)\354=\262\355\320>FXw?\007\315\005>\270\242\350>\033\336}?9V\007=x\335\002>\032H\344>\261\377|?8\323==\037\0075>[\006\025?\324\027y?\355\016\327=\253y\300>\233<p?\232\256l>\001\3725?\035zR?,\266\025?m\242x?c\352\344=\030T\313>\267)u?\206\r&># \013?\344\020~?_\257\365<\026Q\356=\272\225\322>w\361w?\352\263\371=\373A\333>\001\272z?\357E\245=\210\357\227>\235\262U?\234?\r?\352A}?>\244-=\307G&>}G\013?\035\003~?\216w\374<\262\257\364=\305s\327>\341\223y?\001\\\310=\005\302\264>\240\342i?\202\242\241>57]?\273v\360>\240\016\177? |p<|\364l=A?_>p\223.?\273\032^?\337B\353>\347Q~? \243\325<\331\020\320=m\355\272>\373\\m?\202=\212>\245\324I?$\324*?\321Vc?\350\235\313>\000Hu?\265Q$>\203\363\t?\345s~?*\333\304<\' \300= \032\256>\272\314e?\217&\274>v\004n?S\301\205>4\240E?\000A4?\037VU?\3136\016?\330\327|?\027\214G=f\323=>\361\242\032?\375\351t?\312\261)>\274\222\r?\023\037}?\342(6=\377\016.>\346x\020?\250\302{?\305k\205=@uy>\355\257<?@tF?\341p2?\331>X?\355R\006?\010`\177?\364\223\037<\020\006\036=X\355\027>\342b\001?P\370\177?\372\362\3659q\325\365:g_\365;\010\211\363<\234K\354=-\010\321>\000bw?\346;\005>&\314\347>=\266}?\301!\021=M\375\013>\024\264\361>\2343\177?.\301K<~8I=\342U?>\221\225\033?p\034t?tc5>\002B\025?k\360x?F\267\333=\343$\304>E\001r?\344\255S>\335\353\'?%\031g?\r\326\263>\021Wi?\264;\245>d\321_?f\027\341>\250D|?\231Zk=\242\324]>n\306-?\216B_?Il\344>\202\007}?\251\352;=\236K3>\351\346\023?\245\317y?\272A\301=5\005\257>Kbf?2l\270>\256\374k?f\226\223>\273\026R?\272\265\026?\014\361w?x\300\371=yK\333>\273\274z?^\362\244=p\251\227>\216yU?9\330\r?O\001}?Sn==\222\2534>$\313\024?\205>y?\347z\322=+\331\274>\247bn?\2268\203>6.C?\036{9?\306_L?\373\333$?\221\305j?Z\276\233>\246\274X?\r\367\004?e\235\177?}\352\304;\215\273\303<S\016\277=\207;\255>\214=e?\t\263\277>m\331o?\252\033r>\226\3358?;yM?e7\"?\365\264m?>\343\207>\007\245G?0\314/?\216M\\?S\301\365>\013\227\177?\233\223\321;v<\320<d\361\312=)\325\266>\212\026k?4\241\231>R\020W?\234\217\t?Z\222~?\352\315\265<\004\305\261=\303V\242>\232\273]?Gq\355>\236\247~?%I\253<N\264\247=\267\370\231>1VW?6\321\010?\007\311~?\316\277\232<t\323\227=\020\222\214>\013\364K?d\334%?5\232i?\032\201\243>\214\224^?\231t\350>\250\325}?\001j\t=\327\315\004>8)\347>\006\227}?\254\312\030=\227\027\023>!\355\373>h\357\177?F\272\204:\336\227\204;\204\016\204<\214\355\201=\307^s>\203\2079?\200IL?\033\021%?4\210j?dW\235>y\372Y?\212\177\001?\006\367\177?\272\242\017:\225\216\017;\024>\017<z\375\r=g\021\t>\375p\355>\224\247~?oN\253<`\271\247=\364\374\231>\222YW?\375\307\010?\220\313~?:~\231<\371\235\226=I\212\213>\034\005K?\006\020(?\365\353f?\375\370\264>\344\002j?\332\314\240>\377\230\\?i\r\364>Aq\177?Jo\016<K2\r=DT\010>\266[\354>4~~?z\303\277<PF\273=V&\252>\2745c?*k\314>\\\233u?\370\211\037>\315\256\006?\\M\177?7\'2<M70=\213\242(>\034\335\014?\032j}?\277\315#=\305@\035>\244\032\005?\313\227\177?\265\024\320;q\302\316<\205\212\311=+\265\265>\247pj? \364\235>\350rZ?\005,\000?\342\377\177?\0104\3626\2253\3627\3131\3628\242*\3629\377\r\362:\220\233\361;\203\323\357<\037\316\350=WW\316>\000^v?VS\024>p\256\375>\240\372\177?\272\003\2549G\365\253:\206\273\253;\036\325\252< E\247=\270\233\231>\357\013W?\213\233\t?\307\216~?Z\222\267<Fu\263=\237\273\243>\310\276^?\266z\347>\275\246}?\301\357\024=`\205\017>\234\317\366>\220\253\177?\246\250\250;j\312\247<\234Z\244=\025*\227>\177\021U?\203\355\016?\245\204|?\306\316[=\017\003P>\321\301%?\234\271i?\276\261\242>\014\376]?z\353\353>\311l~?\303]\310<.w\303=U\317\260>\355\200g?\0038\261>\205\301g?\243\225\257>Z\275f?\204$\266>\027\261j?\364F\234>[\'Y?t\316\003?\013\306\177?\321\236g;A\315f<\353\214c=\270\350V>>\316)?(\261d?\362(\303>}\212q?-GZ>\332\277+?\364\027b?5M\323>\r2x?8!\362=\336\200\325>\n\362x?C\206\333=c\376\303>>\357q?\264\256T>@\202(?\'\\f?{\223\270>\240\022l?:\002\223>\346\230Q?\216\367\027?U\006w?\321\221\n>\336\242\357>:\364~?\377V\205<c+\203=j\211u>W\251:?S;J?\231\346)?M\221d?I\361\303>\031\351q?5\006U>`\265(?F\033f?\0142\272>U\367l?\014\363\214>\\KL?\255\014%?U\215j?=5\235>\"\340Y?\221\311\001?9\363\177?\305kL:\366BL;\373\237K<\037\030I=\2618?>H\203\033?.,t?\347~4>:\256\024?BQy?\310B\320=5\025\273>mrm?\340\252\211>jMI?\010\013,?\323\260a?.\304\325>Q\010y?c\344\330=\035\354\301>\\\362p?\234\260b>\211\2010?\255<[?w\336\373>\357\356\177?>|\210:\334W\210;\241\306\207<\210\206\205=\314\243y>\311\307<?\367FF?u\3242?H\241W?\355\003\010?\004\377~?\213\371\177<\277\371{=\204yl>s\3355?<\252R?\001:\025?\273\365x?\251\026\333=\260\246\303>\003\306q?}\371V>\371\327)?p\244d?\364x\303>k\260q?z,X>\265\211*?\032\272c?B4\311>jEt?V\0203>`\300\023?\205\347y?`j\276=\036\266\254>\002\347d?\260\325\301>z\347p?9Jc>\013\3270?\235\272Z?\017\302\376>u\376\177?\036n\3058\\i\3059TV\305:E\n\305;\364\332\303<9,\277=\331S\255>CMe?\216O\277>M\247o?\330\327t>\316L:?o\344J?\220\\(?\306\213f?\216b\267>\017gk?\177\205\227><\\U?{&\016?\023\337|?\322\310E=\347;<>\345\241\031?\354\273u?\006\253\035>8d\005?\272\213\177?\316!\350;\323|\346<\257\000\340=\211\200\307>\374\207s?\261\310=>4\234\032?\230\357t?\331_)>\355[\r?$6}?m\2050=\362\351(>\371\014\r?\270V}?\254\214(=\035\235!>]\033\010?\035\371~?\201\352\202<\351\322\200=\355pq>y\2038?\336\030N?Y\263 ?\261Jo?Q\342y>\317\347<?\025\nF?\361Y3?)\314V?\305H\n?\360X~?\244*\322<T\306\314=\276L\270>\024\353k?,\r\224>\034{R?\233\263\025?*\244x?\352\265\344=X+\313>\353\030u?i\003\'>\014\306\013?\207\325}?\001r\t=N\325\004>G4\347>+\231}?\020D\030=\001\233\022>m;\373>D\351\177?&\314\265:\230\213\265;\033\212\264<\207\217\260=\322V\241>R\377\\?\362\273\361>|4\177?\332\341J<\265^H=s\221>>e\032\033?\260\205t?,i/>\356\\\021?\032J{?\247\366\223=\001F\211>\002\360H?x\340,?G\210`?\017\314\334>\302({?\356\371\227=\325\262\214>\224\021L?<\226%?\351\354i?j^\241>\360\004]?L\233\361>\3250\177?\257\203N<N\351K=\221\302A>\324\030\035?v\305r?\251\270H>f`!?\006\230n?\004\310\201>\330\304A?\314i<?\362\370F?\246K1?\320\007Z?\006Z\001?\261\370\177?A\323\3519\217\270\351:\336M\351;\240\244\347<\314\027\341=qZ\310>r\347s?\353c8>\371/\027?a\231w?\274\000\002>\031\377\342>\314\266|?\021\232O=i\024E>N&\037?\315\326p?\2005d>\252Y1?5\362Y?\307\226\001?\347\365\177?\205\220!:\010w!;1\021!<\326{\037=%F\031>\352T\002?A\352\177?\266\353\255:\242\260\255;\362\304\254<( \251=\271(\233>\033GX?&<\006?\200d\177?@!\033<;\251\031=\177\345\023>O\022\375>m\367\177?\2212\t:/ \t;\274\326\010<(\262\007=R3\003>\334\307\344>\034\033}?\353 7=\351\360.>\321\r\021?\246t{?q\326\216=\036\340\204>Y\310D?\320\0236?\213NR?\\&\026?\212Ux?>\366\355=\003P\322>\250\330w?\217\233\374=;s\335>NV{?t~\222=\345\003\210>\247\303G?\220\207/?\305\263\\?cr\363>kb\177?\0324\035<\366\261\033=\346\306\025>;\275\377>\357\377\177?\230O\2136rO\2137\332N\2138|L\2139\002C\213:!\035\213;\360\205\212<K.\210=G@~>`\037??,\276A?\202w<?\r\337F?\013\2051?3\257Y?\332R\002?g\352\177?\233\270\254:W~\254;\343\225\253<\326\375\247=16\232>$\207W?zK\010?\311\354~?\302\007\211<\370\274\206=X\277{>&\333=?P7D?EJ7?\003<P?\301i\033?\026Bt?\257@3>\316\337\023?\017\324y?B\273\300=\024\230\256>\023\035f?\216&\272>\020\361l?\275\035\215>\264qL?*\261$?\306\366j?\262u\232>\224\271W?[\301\007?l\017\177?\032\262o<b0l=\316\221^>\2011.?\260\250^?z\375\347>\207\277}?\277\331\016=Z\336\t>\326\234\356>\256\321~?\203v\226<\n\263\223=\'\014\211>K\272H?\270Z-?\355\333_?K\330\340>\\5|?\353\020o=\341\034a>\360\237/?\210\217\\?,D\364>Rv\177?\005d\t<\024=\010=\005\265\003>\250\210\345>\212C}??>-=l\352%>k\010\013?\032\031~?\336\243\361</\203\352=\254\250\317>#\337v?\227\330\014>_\362\362>\235U\177?\241\361)<].(=\217F!>\032\340\007?\352\007\177?\006&w<\235ks=E\364d>D\3031?\254NY?\321`\003?Z\322\177?zw6;l\3655<\030\3603=~\010,>\244!\017?*l|?\201\302a=\tQU>\014\341(?\231\343e?\366\224\273>\366\266m?\177\325\207> \230G?\020\351/?_\"\\?6\272\366>\005\252\177?\255\274\253;B\326\252<8F\247=\242\234\231>\252\014W?\216\231\t?`\217~?\325F\267<\"-\263=\036\200\243>\325\223^?\320x\350>n\326}?B9\t=\\\240\004>\327\345\346>\341\211}?\357\003\034=\242\022\026>,\024\000?\372\377\177?Lz\31358z\3136\347y\3137\244x\3138\226s\3139`_\313:\230\016\313;x\314\311<\342\323\304=>\351\261> .h?\360\323\254>f\372d?Z[\301>\325\253p?\036\223f>\362\2472?\335\347W?XB\007?8-\177?j\032R<\254hO=\005\350D>\377\n\037?W\361p?\377\276b>\215\2110?\2050[?\301#\374>\031\361\177?Xan:\332)n;HLm<o\334i=?\202\\>7\006-?BS`?\236\013\336>\025\177{?I\224\215=\263\312\203>R\274C?\212O8?ltN?d\323\037?},p?\263\220m>ds6?w\254Q?\241\305\027?\222+w?ng\010>\325w\354>\201\202~?$\243\275<Q?\271=\277}\250>6\026b?\351W\323>\3125x?\366\260\361=!+\325>v\325x?\367\345\336=\202\243\306>\256%s?\375QC>|\020\036?\207\340q?<\200U>\223\374(?d\300e?\005u\274>\365-n?\310\243\204>A\216D?y\2206?\356zQ?\352C\030?\311\314v?3\351\r>\n}\364>|{\177?\212?\004<D.\003=|\365\375=\227w\336>\214\233{?\025%\212=\225\323\200>\346\322@?~W>?\005FC?\030I9?y\271L?g\005$?\353\271k?rX\225>\321\220S?\032\343\022?\033mz?lz\256=\030\235\237>\254\265[?\271*\371>O\321\177?\372\241:;\352\031:<\303\3747=\016\271/>l\221\021?t-{?Ii\227=\2357\214>[\242K?\340\235&?\001\263h?\223p\251>R\273b?``\317>\301\303v?Mo\016>\305>\365>U\214\177?{\354\346;\340K\345<\331\340\336=\201\237\306>\343#s?\314kC>s \036?\204\321q?\340UV>\364x)?\" e?\007m\300>U6p?\243\006m>P)6?.*R?\317\203\026?R\024x?3\236\365=-)\330>\327\314y?\016\227\301=jJ\257>\002\216f?@T\267>\361^k?\375\273\227>\253\210U?\325\257\r?\256\022}?\03409=\263\3200>\313H\022?\273\306z?p\277\243=\305\247\226>\201\246T?<\t\020?`\373{?\236\036}=Ezm>^g6?\353\300Q?g\221\027?4Rw?\232\'\006>v(\351>?\366}?qf\001=\325\237\372=C\364\333>\262\354z?d1\237=\227\321\222>roQ?$a\030?\221\266v?\3742\017>\371X\366>\325\242\177?-\023\272;\255\004\271<\357\326\264=\020\337\244>\221\217_?\014\241\342>Z\241|?\340\322T=\001\304I>\251\002\"?-\355m?ca\206>\2558F?\323\3632?eoW?c\214\010?\263\333~?\211\177\221<\373\351\216=\356\360\204>\204\330D?\013\3615?:\211R?5\217\025?\305\274x?\220\317\341=\277\351\310>n%t?\351\3404>\246\355\024?\006(y?\200$\325=\310\365\276>\317yo?FRw>O\226;?~\205H?\216\322-?41_?\221\323\344>\231\035}?T\2056=7c.>u\260\020?\337\245{?\020\346\210=\320~\177>X\277??\017\201@?\335\374>?,\002B?\205\353;?`\346G?\2369/?-\']?\034\324\360>\324\031\177?E]e<E\'b=\257\252U>Q\025)?\251\240e?\256>\275>\277\227n?\354\311\201>\271\306A?\360e<?<\000G?z;1?\266 Z?\360\023\001?Z\373\177?\277\263\2249\363\250\224:\311}\224;\205\321\223<\263&\221=\030\335\206>\373\255F?\221\3611?\212\006Y?\316)\004?\253\272\177?\260\204\212;\311\356\211<>\234\207=\361B}>\231\237>?:\271B?\340o:?v\244J?\010\362(?\342\315e?0\037\274>\216\000n?3\334\205>\334\271E?#\t4?&\261U?\210C\r?I@}?\006\n.=\354\244&>Y\206\013?\270\354}?y\276\003=b\003\377=jB\337>\016\320{?*\315\203=l\243v>\315;;?\206-I?\006T,?\tLa?S*\330>3\315y?/\214\301=\232A\257>s\210f?\340w\267>&sk?V4\227>\344\031U?1\327\016?\007\217|?FHY=\214\301M>\251i$?sHk?\330R\230>5\003V?ag\014?\225\230}?\000i\030=2\275\022>8l\373>\014\353\177?\345\216\247:\017X\247;G}\246<\021\033\243=\242\035\226>\2074T?\3635\021?)_{?\\m\221=\272\031\207>O\347F?\277r1?~\313Y?\203\003\002?\310\357\177?\315\272\201:\356\231\201;\265\026\201<\353\033~=5Xn>-\3366?\021\366P?\"\225\031?\"\306u?\275\024\035>!\374\004?\233\234\177?\215}\306;\301I\305<l\211\300=\236o\256>Q\003f?\335\312\272>PJm?\023\275\212>\302IJ?\032\305)?\030\275d?\320\335\302>\260fq?\362B\\>)\342,?\350\205`?a\332\334>\261,{?\310\200\227=\242K\214>u\264K?\022s&?\214\346h?\366\036\250>F\325a?}\345\324>\025\276x?\334\247\341=\314\312\310>\031\030t?x\2425>\257j\025?K\325x?\362\352\336=h\247\306>n\'s?\3278C>\356\000\036?!\357q?\\\260T>7\203(?\356Zf?S\233\270>\000\027l?\255\344\222>\270\177Q?\2677\030?\006\326v?\364_\r>|\266\363>\007i\177?m\240\026<\354=\025=\332\315\017>\3447\367>\342\262\177?\343\r\232;yT\231<\311u\226=\001h\213>\347\345J?!Y(?\033\220f?\314F\267>MWk?@\357\227>c\262U?8@\r?\251A}?\022\264-=DV&>DQ\013?\251\377}?\257*\376<\352G\366= \252\330>\271\364y?\343\327\274=*n\253>\370\017d?(\034\307>\207[s?FJ@>f.\034?E\227s?\356\353<>\026\021\032?\031bu?\363\322\">\t\357\010?\301\300~?o\330\236<\360\303\233=\025\353\217>\260\355N?/\251\036?\245Oq?\177\211]>\323\233-?d\177_?\244\001\343>_\267|? vO=\034\364D>o\022\037?\037\352p?\351$c>J\3020?C\332Z?y\016\376>9\374\177?\263\267q9p\251q:hpq;\263\214p<\222\004m={M_>v\233.?\r\017^?\216\207\353>\366\\~?I.\320<\357\343\312=_\312\266>_\020k?}\312\231>P1W?\3075\t?\263\254~?\301\305\250<\240K\245=N\364\227>\177\266U?75\r?5F}?(\227,=qQ%>\353\240\n?\"<~?M`\340<\010;\332=\365\371\302>\036tq?\207\204[>\206u,?\220\035a?\254D\331>\332#z?\3539\267=o\325\246>`\361`?\241P\332>\327sz?d\254\255=\026\362\236>t4[?X\r\374>j\360\177?\320Oy:\035\023y;\307 x<\311^t=|\312e>\20392?\357\225X?Ob\005?\r\214\177?\305}\347;\035\333\345<\017h\337=@\t\307>\036Ss?}\303@>\tz\034?PTs?J\262@>Oo\034?\331]s?\305(@>z\031\034?\253\251s?\370\341;>\376h\031?M\351u?\254\016\033>\373\223\003?\312\314\177?\311\255L;$\nL<\243\177I=\010\226?>\272\275\033?\270\371s?\014[7>9\206\026?\237\022x?0\321\365=\356O\330>\341\330y?f(\300=\322 \256>\002\321e?M\013\274>\001\366m?\271$\206>\373\376E?;r3?&\245V?\177\262\n?F6~?\241C\343<\231\365\334=\267\036\305>%ur?Z7M>\355\026$?-\246k?V\335\225>F\377S?\347\301\021?\262\022{?\375\240\232=:\364\216>\233\024N?\300\275 ?\016@o?@vz>u3=?\300yE?\223\2244?8\315T?\274\242\017?\032.|?\236\323p=\307\252b>I~0?\232A[?^\302\373>\004\356\177?#\325\217:\273\254\217;v\013\217<\010\214\214=\331\346\202>n\336B?9\":?\3471K?\344\246\'?\346ng?\224\254\261>\017\th?\033\305\255>8\226e?\375\200\275>D\272n?3\333\200>x\332@?\'H>?\344cC??\n9?\276)M?t\367\"?X\345l?\203m\215>5\271L?\013\006$?3\271k?K]\225>\333\224S?\217\330\022?Ssz?\035\274\255=#\377\236>Y>[?\355\324\373>\240\356\177?@\365\212:\211\317\212;\0009\212<\364\343\207=[\277}>i\336>?\020>B?\303o;?.\315H?\307/-?\255\030`?\341k\337>\243\332{?\243\205\202=Fht>\212\022:?aNK?\356c\'?\232\301g?\033\225\257>\004\275f?\247&\266>S\262j?\272>\234>\362 Y?O\340\003?\346\303\177?\241-p;LLo<\215\315k=]:^>\013\000.?\360\357^?YW\346>\240m}?\242\360\"=Ku\034>\201\215\004?\027\255\177?B\234\245;\375\305\244<\212u\241=\351\272\224>,\rS?\3239\024?\250\233y?\236o\307=\307\003\264>>ri?\262\210\244>\367Q_?\203\020\344>\234\363|?`\306@=\275\2637> \277\026?`\352w?\222\210\372=\261\342\333>\276\347z?\225\311\237=\024R\223>\313\334Q?$J\027?`\206w?\305\034\003>P\246\344>\365\023}?1\3408=\000\2100>.\031\022?\314\341z?G\200\240=4\354\223>J_R?C\373\025?Asx?\333w\352=\360\237\317>\326\333v?\236\t\r>p9\363>\310\\\177?}\317\"<P1!=_\331\032>\317n\003?\335\320\177?mj<;\300\337;<>\2709=\201L1>\311\231\022?\016\230z?\025W\251=\222V\233>2kX?\203\330\005?Ow\177?\346g\010<,E\007=\213\315\002>d0\344>\215\372|?\243\024?=\246*6>{\302\025?\020\232x?\205\346\345=\276\027\314>\243yu?vy!>\366\002\010?B\377~?2\274\177<Q\276{=eEl>d\3015?k\331R?\374\277\024?\303Ey?^\237\321=\253*\274>\244\006n?[\262\205>\347\221E?\032`4?F#U?<\276\016?\221\232|?\253yV=\261>K>\222\347\"?\257\366l?t\367\214>ROL?<\003%?C\230j?q\354\234>\336\247Y?gg\002?\342\350\177?\214\333\270:\316\230\270;\226\216\267<\254q\263=\247\270\243>\244\274^?b\207\347>*\251}?eW\024=\022\370\016>\022\004\366>Q\234\177?\253\017\307;\030\332\305<\315\022\301=\"\337\256>/Jf?h\006\271>\215Rl?\362Q\221>\365%P?\004\241\033?\217\022t?\317\3625>\177\236\025?t\262x?\334\006\343=6\334\311>\342\214t?[\000/>\374\027\021?9o{?\326}\217=\034p\205>\212RE?\235\3514?\014AT?\375\024\021?\323p{?}L\217=\253E\205>\340)E?\232A5?\025\257S?\002\224\022?i\233z?7\360\250=\262\000\233>\214\'X?&\223\006?\027S\177?\242t,<\356\243*=\014\210#>jj\t?a\235~?\311Y\260<\354\215\254=\014\004\236>\031\177Z?\216\t\000?\377\377\177?\r\217\2664\t\217\2665\371\216\2666\270\216\2667\263\215\2668\242\211\2669]y\266:T8\266;\3544\265<\3152\261=\344\335\241>\357b]?\302w\357>\260\356~?6\026\210<y\323\205=\230)z>G\014=?\226\304E?\301\3613?$\327U?\265\335\014?\334i}?\330\334#=\251N\035>D$\005?A\226\177?\365&\323;\243\312\321<?k\314=\334\003\270>,\302k?\343 \225>ybS?\376[\023?\335$z?\377\032\267=\014\274\246>\256\337`?\317\273\332>8\223z?F\353\251=6\322\233>2\314X?\352\313\004?\371\243\177?\337\313\267;\365\303\266<\033\260\262=\357\030\243>\033I^?\3301\352>\207$~?\277\002\354<\0266\345=\334\216\313>\330Au?\001\254$>\3140\n?\233`~?ga\316<`.\311=$k\265>\232Ej?I\022\237>\332L[?/\202\373>\324\353\177?FV\241:o#\241;\224X\240<\0355\235=\327#\221>\020\376O?\331\004\034?\302\273s?f\334:>%\303\030?Qkv?F\216\023>2\226\374>Y\364\177?B`::V>:;\327\2669<\360\2337=\353`/>\202W\021?\014M{?\367\233\223=h\370\210>\360\247H?k\204-?\270\240_?\225:\342>\256\211|?t\225Z=F\353N>g\033%?F|j?\320\246\235>\2307Z?t\323\000?E\375\177?\237\246.9,\237.:e\201.;q\n.<(1,=\007\364$>\242a\n?\350P~?\342 \326<\n\210\320=_L\273>\025\220m?\353\337\210>(\221H?\034\270-?\007W_?W\362\343>\002\355|?\226bB=\375(9>\354\255\027?&=w?\206a\007>\013\367\352>\210E~?\335\275\333<\352\330\325=\224\204\277>\017\302o?Ebs>X\2119?5FL?\364\030%?\034\177j?\360\223\235>\026)Z?W\374\000?\035\374\177?g\267x9M\250x:\353kx;\332zw<\341\275s=\300<e>Q\3531?K\020Y?\253\016\004?\'\276\177?\207\217\203;O\010\203<\303\357\200=\\\243q>\035\2368?\306\351M?&&!?\223\324n?\014%\200>\007%@?\334\265??\361\223@?\307\326>?\rMB?\271P;?\306\006I?\214\254,?\356\320`?\031\025\333>\030\255z?\021\322\246=n;\231>\305\276V?\027m\n?/M~?A\367\327<\267E\322=\351\256\274>tLn?\252\321\203>\025\303C?:A8?\230\215N?\245\225\037?\252ip?\3665j>J\2444?c\263T?&\347\017?c\014|?\307\377x=\276\334i>\332s4?\354\002U?<\024\017?}r|?\3368`=\245\362S>,\024(?\302\346f?i\032\265>w\026j?\035K\240>@8\\?.<\366>\245\240\177?\030n\276;\311R\275<\256\362\270=\366>\250>:\353a?2_\324>\226\220x?>\004\347=)\365\314>\256\322u?\372[\034>\354{\004?\223\257\177?J\250\240;\245\336\237<\362\277\234=\242\300\220>\375\247O?\216\333\034?\362\374r?\342\233E>\220y\037?V\205p?\365\260h>\250\3203?\315\014V?\227M\014?\211\242}?\264\367\025=\017z\020>Y/\370>\355\302\177?\227\022t;\344)s<\002\216o=Z\213a>\312\335/??3\\?\006Y\366>\326\242\177?\"\021\272;\251\002\271<\002\325\264=z\335\244>p\216_?\313\247\342>\346\242|?~rT=\241mI>K\316!?\251$n?\311\343\204>\340\313D?:\0146?\\[R?a\005\026?Mlx?=I\353=LA\320>l\030w?\227\204\t>\227\031\356>\227\277~?\036l\237<\342Q\234=fc\220>\322VO?3\245\035?\237Dr?\373\354O>\265\264%?\021\311i?\223K\242>i\263]?=\241\355>\212\256~?\317\334\247<Al\244=\3458\227>\237\035U?D\315\016?\240\223|?\375)X=\217\301L>K\320#?\210\365k?\251\306\223>\222?R?\334L\026?\315:x?Q\032\361=\377\267\324>\273\256x? w\343=\2213\312>\267\261t?p\347,>|\265\017?\353$|?\256\rs=~\241d>z\2251?\277\225Y?%\232\002?\352\344\177?\323\225\330:4:\330;\360\314\326<\026+\321=*\316\273>|\325m?\020\004\207>\327\322F?\022\2401?T\205Y?\031\310\002?\r\341\177?W{\367:\267\003\367;\007\'\365<\351\320\355=Z3\322>j\316w?a\316\375=/Z\336>\325\223{?\213\023\213=\304\241\201>\032\237A?H\267<?LfF?\226\2172?d\016X?i\330\006?\221D\177?D\346:<v\3048=\306n0>\246\010\022?!\353z?\204a\237=<\372\222>\027\222Q?\351\010\030?P\371v?|S\013>\026\275\360>\027\027\177?\370\024h<`\313d=\262\003X>#r*?g\331c?\016q\310>D\361s?\227\3257>\323\324\026?\353\332w?\300W\374=$@\335>zH{?\316(\224=\350p\211>\306\027I?\275\205,?\005\007a?n\315\331>\363Lz?/R\262=b\313\242>\273\020^?\256}\353>a[~?\376\365\320<x\241\313=Ib\267>\350fk?\206\206\227>\023]U?=$\016?\021\340|?\346\212E=\365\003<>\201~\031?1\330u?\307\n\034>~C\004?I\267\177?\212D\221;\255\237\220<\014\022\216=\0137\204>G%D?\263p7?\206\371O?0\020\034?\322\261s?\032l;>S\036\031?A$v?\365\250\027>\3052\001?B\372\177?\306\311\2679H\271\267:[w\267;cp\266<C`\262=\003\327\242>2\031^?\351K\353>^S~?W\352\324<\257a\317=\313a\272>V\021m?\337A\214>\241\253K?\363\207&?o\315h?\211\303\250>\331Eb?\2253\322>\177\316w?\342\313\375=NX\336>V\223{?\311\"\213=\360\256\201>\033\254A?\233\234<?\336\230F?. 2?\250\275X?A\364\004?\324\235\177?H\r\304;\377\340\302<1>\276=%\222\254>\225\317d?\\i\302>\335.q?\202Y_>>\242.?,\005^?\237\301\353>2f~?+\237\313<|\217\306=3O\263>\214\006i?\005M\247>vDa?aX\330>\200\333y?\242\330\277=\002\340\255>~\247e?K\023\275>\030\201n?uf\202>\263`B?\376\';?+RI?$\000,?\317\277a?\256h\325>\000\352x?Oy\334=8\275\304>&Hr?\231\272O>\306\226%?H\354i?\227b\241>\006\010]?Z\211\361>\317.\177?(\206P<\277\336M=\327\205C>\2140\036?X\302q?\255-W>=\366)?\316|d?\017r\304>D%r?\237\254Q>\313\275&?l\214h?\333l\252>\365dc?\025F\313>\362#u?\002b&>2Y\013?\333\374}?a\214\377<\231\223\367=\324\245\331>\033Az?0\274\263=\031\366\243>\342\350^?2\201\346>\375u}?\"\344 =B\222\032>/=\003?\t\326\177?A\300\';UR\'<\343\234%=\251\352\036>\tA\006?\214c\177?,\024\034<\212\227\032=\337\301\024>_K\376>\027\375\177?\251*:93\"::]\000:;9y9<\267_7=\027*/>s3\021?\202`{?\335C\221=\036\366\206>\250\305F?=\2751?\nXY?\252F\003?\022\325\177?\377\232+;\366\'+<<^)=d]\">\317\236\010?\302\326~?I\362\223<HF\221=2\370\206>\237\307F?\346\2701?\311^Y?\3233\003?\372\326\177?\337\374#;\323\223#<\275\361!=\236\212\033>T\352\003?\256\302\177?\242\014u;\021\"t<\315~p=\355_b>\215T0?\275\200[?\305Y\372>\026\340\177?F2\377:\023\263\376;D\270\374<i\354\364=\371\241\327>{\242y?\n\240\306=\214\\\263>\213\016i?\213\030\247>\016 a?\2115\331>E\037z?\332\305\267=KH\247>0Aa?Jl\330>\251\341y?\344\034\277=`G\255>4Ee?\220\202\277>\013\301o?rps>\310\2209?\3258L?\3248%?\031Zj?\036\212\236>t\345Z?\345\316\375>2\373\177?\002\270\2319y\254\231:Y~\231;H\306\230<\350\354\225=4\363\212>M{J?\361Q)?\232Re?\300-\277>3\226o?w\306u>\031\311:?\013\001J?\226m*?p\337c?eK\310>\346\340s?\273\3028>\233l\027?9mw?m\224\004>\'\324\346>h\206}?\356\335\034=\373\333\026>Y\242\000?d\376\177?8\350\3158\013\343\3159X\316\315:\236{\315;\2771\314<\305\032\307=q\277\263>\233Ii?P\224\245>\033\020`?W\237\337>\261\347{??\361\200=\366\245q>}\2378?X\347M?\020,!?q\316n?\201O\200>hO@?\315`??\333<A?*\200=?\260\346D?\213\3225?\225\274R?\227\n\025?\013\025y?4c\327=;\274\300>\223]p?\321\337j>V\0005?r\033T?\351w\021?k;{?\037\273\225=\264\310\212>hTJ?`\254)?U\335d?\260\022\302>\014\005q?\267\250a>7\356/?\251\032\\?\240\346\366>5\255\177?\365`\245;I\213\244<3=\241=r\213\224>\\\345R?\016\241\024?\302Yy?\336@\317=\237G\272>\027\003m?\365\242\214>F\003L?9\270%?\353\304i?\373f\242>w\307]?\300+\355>w\235~?\376N\260<\231\203\254=v\373\235>\206xZ?$\034\000?\364\377\177?\340\372E6\272\372E7!\372E8\275\367E9+\356E:\351\307E;\034/E<\226\317B=\241\2139>\332\354\027?V\016w?\255\032\n>\367\364\356>\210\335~?\023\227\220<\300\t\216=\346/\204>^\036D?j\1777?\003\340O?\347O\034?\262ys?\006\227>>\344\035\033?\271\202t?U\224/>My\021?\251:{?z\322\225=\244\334\212>\251fJ?\364\201)?w\024e?\304\266\300>\337Zp?\303\005k>\336\0245?i\371S?K\321\021?$\n{?/\250\233=\214\323\217>\023\331N?\003\334\036?\311\036q?\353<`>@\"/?\237I]?i\013\360>m\001\177?7\226}<n\251y=\276qj>\265\3044?\375}T?Qt\020?\004\305{?\317\"\205=R\366x>\307n<?\213\357F?\200`1?\252\347Y?h\264\001?`\364\177?\t\3649:D\3229;bK9<\35227=M\001/>\233\030\021?\344n{?\031\210\217=\356x\205>\374ZE?P\3274?J_T?O\305\020?\370\232{?\3636\212=\t\343\200>@\342@?`8>?\224\202C?\217\3118?\314\234M?6\341!?\250\020n?vm\205>\000PE?\033\3574?\3677T?\350,\021?\005d{?w\327\220=\023\231\206>\213mF?\244\1772?\221\'X?\032\223\006?\031S\177?(r,<\201\241*=\323\205#>\347h\t?\323\235~?q!\260<\001X\254=5\327\235>\276\\Z?\242j\000?N\377\177?\376\25118\020\25019\\\2401:\214\2011;x\0061<\320\034/=I\240\'>\250/\014?\375\255}?\024(\023=\243\336\r>\306m\364>\033z\177?|\236\005<\204\207\004=\303=\000>\235\\\340>\006\027|?\022lv=\324\230g>\21173?M\003W?\007\263\t?\261\207~?\307\022\273<$\315\266=\031|\246>\006\263`?\364\311\333>\301\340z?P\240\240=7\007\224>\026vR?\215\300\025?`\233x?\350\276\345=\005\371\313>*mu?\2260\">4\200\010?\362\336~?\275\343\217<\274\\\215=\323\232\203>\324\215C?\322\2618?\343\306M?\003{!?8|n?\034\210\202>\263\201B?x\343:?\217\320I?\223\335*?0Jc?I\354\313>\374gu?\222|\">\031\264\010?\377\320~?.\315\226<\206\006\224=\224S\211>\231\374H?\303\303,?|\260`?H\331\333>\026\345z?4\033\240=\363\226\223>2\027R?\207\264\026?\346\361w?\376\246\371=58\333>3\267z?\t\234\245=\2717\230>:\355U?n\242\014?z\201}?:\023\036=~\371\027>mk\001?\360\367\177?W\367\000:\031\347\000;1\246\000<-G\377<\266R\367=\237t\331>S2z?\326\177\265=\026j\245>@\362_?}R\340>\205\024|?z\007w=\204!h>S\2023?C\213V?\216\370\n?\216\036~?\035\364\356<\307\373\347=\274\264\315>\203\036v?\267\375\027>en\001?\316\367\177?\312\024\003:\002\004\003;\365\300\002<\323\265\001=\2164\373=\213d\334> \014{?!k\233=\304\237\217>\247\253N?\314K\037?9\262p?%9f>vv2?\0146X?2k\006?3[\177?\305b$<\213\274\"=XE\034>2l\004?\303\261\177?\233J\234;\305\213\233<\261\227\230=!9\215>G\212L?lv$?\3549k?@\264\230>\365QV?T\223\013?\010\350}?z\345\004=\243\225\000>I\340\340>N7|?1\230n=;\262`>\"d/?Q\350\\?\231A\362>\034C\177?\263X<<j.:=\362\2671>\372\337\022?\364nz?\370A\256=@n\237>]\222[?\360\364\371>{\333\177?\005\000\022;\301\254\021<,a\020=UJ\013>\303\257\360>\200\025\177?\205\251i<mTf=\260`Y>l;+?\357\313b?\322\371\316>\242\234v?\252\263\020>\005\202\370>\336\307\177?\236U`;\010\221_<\020\204\\=\334\244P>\310!&?\321Gi?\025\240\245>k\030`?km\337>\007\333{?\177y\202=\027St>w\007:?wbK?\2414\'?\260\373g?\004\034\256>\360\315e?\332\036\274>`\000n?l\335\205>\007\273E?\227\0064?I\265U?s8\r?\337D}?\330\352,=\021\236%>\310\324\n?\276*~?\365\362\350<*S\342=LP\311>hQt?\004b2>\347N\023?\305,z?\203)\266=\241\365\245>\265T`?\342\002\336>\304|{?\336\333\215=`\010\204>\035\370C?\302\3207?\212RO?\321\257\035?\310:r?\210yP>\032\010&?`fi?\345\326\244>\300\211_?\311\303\342>M\251|?C\343R=\251\007H>\253\364 ?\256\007o?s\205}>0\301>?kwB?\325\370:?7\251I?:8+?@\320b?-\337\316>k\222v?\033K\021>![\371>\333\323\177?!t0;\201\372/<\237\026.=s\260&> \216\013?\352\351}?\014o\004=\341&\000>N:\340>\206\016|?I{x=Whi>\22144?ijU?\247\000\016?\267\357|?\221\271A=\374\2178>)L\027?\350\204w?\2712\003>\370\306\344>\354\032}?\301,7=\261\373.>\352\024\021?\335p{?@K\217=\233D\205>\333(E?\317C5?j\253S?\232\235\022?\325\225z?\032\233\251=U\217\233>\311\227X?/]\005?\351\214\177?\216\306\345;\024*\344<<\317\335=N\311\305>+\303r?\210\331H>at!?)\203n?0X\202>\261RB?\010E;?n\034I?\031{,?\321\025a?\253s\331>\n2z?\232\210\265=Lq\245>Z\367_?\3433\340>\356\014|?!\336x=/\277i>\312c4?<\035U?L\316\016?&\223|?\266GX=$\334L>?\340#?\252\343k?,?\224>>\245R?\347F\025?*\355x?\241\031\334=\037r\304>L%r?0\254Q>\211\275&?\274\214h?\322j\252>\231cc?\211N\313>m\'u?\t/&>\3076\013?\375\010~?z\223\371<\370\370\361=!b\325>\322\347x?4\273\334=\353\360\304>\013`r?\036eN>e\313$?\250\330j?\356>\233>\230XX?\343\013\006?\303m\177?Q\351\021<\250\234\020=\236\201\013>;\000\361>\007\037\177?`3`<\370!]=\2761Q>-u&?\004\344h?\220/\250>\252\340a?\317\237\324>\213\246x?\035n\344=\223\363\312>\332\001u?\352T(>\006\251\014?\337~}?\302\266\036=`\220\030>o\325\001?\215\362\177?\312(W:\225\373V;\013GV<\240yS=\204\216H>\305F!?\267\262n?q\017\201>Q\016A?\347\336=?\0170D?\275Y7?F!P?\300\254\033?l\010t?\335\2056>6\375\025?\353qx?!\240\352=\375\276\317>\216\347v?w[\014>\331<\362>\231B\177?\247\332<<_\255:=Y+2>E+\023?2Bz?\362\232\263=\261\332\243>*\325^? \366\346>\022\215}?\265;\033=\237Y\025>\205\"\377>@\377\177?{\235?8=\233?9F\222?:pn?;J\337><\t\246<=\304\3653>]U\024?4\212y?\n\202\311=[\256\265>\263lj?n\016\236>\013\207Z?&\346\377>\375\377\177?v\031\'5o\031\'6T\031\'7\347\030\'83\027\'9b\020\': \365&;=\210&<\351\326$=\2504\036>f\303\005?${\177?\201\227\004<\316\204\003=w\227\376=Z\361\336>8\273{?\340Q\206=K\005{>s|=?\323\355D?,\3035?l\326R?\274\307\024?\273@y?\3267\322=\341\243\274>\247Fn?\251\371\203>\334\351C?\005\3577?\263\035O?\2412\036?a\300q?\230IW>k\006*?\223gd?\\\367\304>\004cr?\241:N>\007\262$?\311\365j?L|\232>\320\276W?\000\263\007?\343\022\177?\035Al<\375\330h=]\234[>#\203,?\243\na?\201\267\331>fFz?x\032\263=\270p\243>\264\210^?\230\272\350>u\342}?yD\006=\275\335\001>\335\312\342>\353\252|?\211~R=K\255G>\223\275 ?;@o?\312sz>32=?\'|E?Z\2174?\314\325T?\377\213\017?.9|?\223#n=0K`>F*/?\316=]?KP\360>\360\t\177?D#u<Rxq=\026<c>.\3170?\234\306Z?\004~\376>\272\375\177?\224|\0219iw\021:\277b\021;.\020\021<`\307\017=[\273\n>r\337\357>\352\373~?\321\206\201<\020\365~=]\026o>\254C7?iGP?*M\033?\210Zt?P\3351>^\370\022?\207`z?P\373\257=\036\334\240>Y\244\\?\261\313\363>\016k\177?e\233\024<UB\023=\001\367\r>\377\220\364>F}\177?mw\002<wm\001=\376\254\372=3\376\333>~\357z?o\333\236=\373\210\222>o1Q?\271\376\030?\377<v?d;\026>\3720\000?\333\377\177?\r\355\0257\266\354\0258V\353\0259\332\345\025:\350\317\025;=x\025<(\033\024=1\300\016>\177\263\365>\357\225\177?\362\311\323;\205k\322<\340\003\315=\372}\270>\236\006l?QS\223>\330\335Q?uG\027?T\210w?\216\377\002>\327z\344>\244\n}?\331&;=\274\2312>3s\023?\313\026z?\236\310\270=~\034\250>\223\323a?\334\357\324>\223\301x?}>\341=\240x\310>\215\364s?\371\2457>L\266\026?\245\360w?\227\314\371=\243T\333>[\277z?\302\241\244=\315e\227>ZBU?}k\016?E\300|?JKM=0\001C>|\336\035?Z\017r?-\345R>\372u\'?^\253g?@%\260>C\027g?3\342\263>K^i? \014\245>\236\257_?\203\341\341>\327t|?\227\246_=\\pS>\302\307\'?\034Fg?\021\264\262><\251h?{\260\251>z\346b?\331U\316>l]v?\351[\024>\236\272\375>\330\372\177?;\007\2459\357\371\244:\306\304\244;\255\360\243<\312\250\240=\\\016\224>\035|R?\005\261\025?\353\245x?\003\201\344=A\002\313>\357\007u?\364\373\'>Hm\014?J\226}?\307\370\030=AB\023>\356)\374>I\361\177?Bik:#3k;\014[j<\342\000g=\270\371Y>e\223+?\235Tb?\336\330\321>\352\255w?\246\315\000>\'4\341>\227K|?\352\253i=DW\\>\275\355,?\251u`?Z<\335>rG{?\202H\224=\005\214\211>\3400I?\\L,?\246Va?\306\351\327>\014\271y?\232\361\303=[2\261>\013\276g?4\254\257>\205\313f?\203\311\265>t|j?\232\245\235>\2526Z?\024\326\000?4\375\177?h\00339\225\3732:L\3342;U_2<2n0=\267\324(>\277\376\014?\203\\}?\310!\'=\366O >\3636\007?\314/\177?\014\213O<\003\352L=\247\251B>B\250\035?\312Ar?z\025P>\300\314%?\263\254i?\004\007\243>\030<^?\177~\352>\1771~?\205\236\345<\335.\337=\207\334\306>/?s?\276\342A>\323,\035?A\263r?\311\275I>\344\376!?-\361m?\342E\206>\210\036F?(-3?\350\023W?\332\205\t?C\225~?\264]\264<\025e\260=\2603\241>R\345\\?\374R\362>\371D\177?\264~:<B_8=\261\0220>D\314\021?\360\014{?\026R\233=\206\212\217>\377\230N?\244y\037?B\205p?\021\262h>B\3213?\322\013V?9P\014?\206\241}?M7\026=\377\264\020>\357\203\370>\373\307\177?A\343_;s\037_<\224\025\\=BBP>S\347%?D\215i?\204\326\243>(\322^?\357\007\347>\215\220}?Ja\032=\267\217\024>0\004\376>\021\374\177?\357\320{9s\301{:\216\203{;s\214z<\231\267v=C\333g>\347[3?\004\311V?OQ\n?0V~?\336\205\323<\257\017\316=\007T\271>\200}l?\362.\220>\013)O?\222\026\036?\317\332q?\242\321U>\001,)?\200\203e?\313\367\275>\305\367n?3b~>r0??z\234A?\251\274<?\026\\F?\013\2462?\340\352W?\020:\007?\030/\177?\316=P<<\230M=iFC>S\t\036?A\347q?\201 U>\272\304(?\272\007f?\272\256\272>\027;m?\010%\213>\324\250J?\330\347(?\353\332e?=\314\273>v\324m?\032\013\207>~\331F?Y\2211?&\234Y?8\210\002?[\346\177?\016\027\315:\347\304\314;R}\313<So\306=F5\263>\001\367h?\007\263\247>\375\212a?\004\253\326>\253Sy?\241\371\317=\354\332\272>\376Rm?\307\201\212>b\023J?(C*?\226\027d?\210\354\306>SFs?\337{A>\337\354\034?P\355r?\206|F>O\003 ?\261\374o?U.p>\233\3307?\330DO?\300\321\035?:\033r?\320;R>D\022\'?\270%h?\253\n\255>\352\035e?\r{\300>K=p?\366\244l>\322\3645?\334\202R?\242\237\025?\260\261x?\373\035\343=6\356\311>}\224t?\204\221.>\374\316\020?\345\225{?\315\323\212=\254j\201>\252hA?\274&=?\023\222E?\272_4?\343#U?\230\274\016?R\233|?\241JV=\223\024K>*\316\"?[\022m?\353:\214>W\245K?\320\226&?\205\273h?\3238\251>\223\225b? I\320>W\033w? Y\t>\377\331\355>\242\266~?\n\333\243<\005\224\240=\332\374\223>XmR?\025\327\025?\010\214x?\211\215\347=q_\315>\344\374u?\343\355\031>U\312\002?\333\340\177?\240\t\371:~\220\370;\316\255\366<:@\357=\032M\323>\0042x?N\"\362=\262\201\325>P\362x?\364}\333=\335\367\303>/\354q?G\332T>\267\233(?\340;f?\333a\271>\"\205l?0\373\217>\312\373N?f\206\036?\346pq?.\262[>\230\217,?M\371`?\235 \332>\253ez?#^\257=\350Y\240>OC\\?o\374\365>\271\233\177?D@\310;\373\006\307<\0341\302=M\307\257>\204\334f?I\\\265>\362<j?\313K\237>Yx[?\277\211\372>+\342\177?\222\215\356:l\036\356;sc\354<7\221\345=\223\325\313>\275^u?H\004#>\253\020\t?L\267~?1\207\243<\206C\240=\367\270\223>\3743R?\237j\026?\001&x?/\213\363=\376\224\326>\215Ly?\204\321\320=\340\206\273>n\257m?$\t\210>\221\310G?\211|/?%\304\\?y\023\363>\371X\177?1\232&<\177\350$=\324D\036>\222\316\005?\036y\177?|\232\006<d\177\005=\212%\001>\247\267\341>\367j|?\030\rb=f\223U>\277\007)?\023\262e?\014\320\274>\335]n?\234Y\203>cNC?\20279?\361\330L?\344\271#?\222\016l?\235\035\223>4\260Q?\026\274\027?\2472w?\350\375\007>\354\334\353>\200j~?\314~\311<\t\212\304=\224\255\261>\254\th?\"\301\255>\252\223e?3\221\275>\256\302n?\362\240\200>\215\240@?T\275>?\375~B?\033\351:?/\306I?\200\365*?\032*c?F\263\314>W\270u?\277\337\035>\262\210\005?\200\205\177?T\212\364;$\267\362<.\206\353=:p\320>\345)w?i\200\010>z\234\354>\023\210~?C\342\272<\327\236\266=\017V\246>f\230`?\307j\334>\333\r{?\3165\233=\210r\217>\350\203N?j\255\037?,Rp?\364\177k>\351V5?\227\213S?\277\360\022?\013ez?2q\257=\263i\240>\033O\\?c\270\365>T\226\177?W\001\323;\201\245\321<\004H\314=\250\347\267>L\262k?\300\213\225>\206\273S?ws\022?<\256z?\370\256\246=\014\036\231>*\247V?\n\255\n?\0318~?\204]\342<:\034\334=)t\304>?&r?\251\236Q>\215\265&?f\226h?\247+\252>L9c?\020U\314>r\222u?\372\014 >\354\010\007?\013:\177?\275[E<$\373B=\n\2639>\372\005\030?\204\373v?\2572\013>U\215\360>]\021\177?\000\305m<\246Qj=\020\352\\>HA-?\360\377_?]\000\340>\027\000|?[\372{=\rzl>\274\3355?\300\251R?B;\025?\346\364x?\312/\333=q\272\303>R\317q?\035uV>\035\213)?\225\010e?\322\001\301>\345\177p?z\375h>`\3723?$\311U?A\003\r?\256Z}?\234\224\'=i\271 >V\177\007?(\037\177?\314\022`<I\002]=y\025Q>ud&?\027\370h?\344\253\247>\021\206a?\006\311\326>X]y?\021\324\316=\321\360\271>\262\323l?\231\345\215>z$M?&\004#?v\327l?\373\313\215>\241\rM?3;#?\n\233l?\216f\217>ayN?>\307\037?\2208p?^\347l>\204\0306?\227FR?\317:\026?\\Gx?\310\240\357=\025\227\323>\304Kx?8\034\357=\2011\323>^(x?4D\363=\343^\326>\377:y?\246\345\322=\364-\275>\005\217n?=\006\202>$\002B?\227\353;??\346G?\3509/?\277&]?\233\326\360> \032\177?\021\022e<+\336a=\247iU>h\357(?>\321e?\316\t\274>5\365m?0*\206>.\004F?\332f3?o\267V?\370\200\n?\257F~?E,\333<\037O\325=\207\027\277>\360\212o?\205cv>\252\032;?\313jI?\257\307+?>\rb?\334\216\323>\352Hx?\006r\357=Cs\323>R?x?}\222\360=\035P\324>q\213x?G\237\347=,m\315>Q\002v?\323\235\031>Q\222\002?\214\345\177?\234\206\323:9/\323;\313\322\321<\374r\314=\r\n\270>\247\305k?n\t\225>\342NS?\006\217\023?\325\005z?\036\316\272=\031\304\251>\262\363b?\033\004\316>\232=v?m2\026>\245*\000?\344\377\177?\034N\3436\267M\3437$L\3438\325E\3439\234,\343:\320\307\342;\0066\341<\006\005\333=\323\230\303>y\277q?~VW>\344\r*?\301]d?\3674\305>_\177r?\005\245L>*\277#?\257\010l?bE\223>\003\322Q?\267e\027?Crw?0I\004>\230d\346>Gp}?BJ\"=!\334\033>\016#\004?\213\273\177?)\305\210;\0053\210<S\357\205=\003Zz>\010%=?T\225E?\246X4?x/U?\307\235\016?t\251|?\352\331R=F\377G>\216\357 ?\361\014o?h<}>K\234>?\261\277B?eb:?\022\275J?\230\270(?-\027f?.L\272>\223\005m?\007\222\214>\003\364K?v\334%? \232i?\245\201\243>\360\224^?Fr\350>:\325}?\352\204\t=\362\346\004>gN\347>8\236}?\333\006\027=Iu\021>\211\227\371>\360\326\177?d&$;#\275#<9\032\"=\346\257\033>H\004\004?w\277\177?\364\361\200;\017p\200<\031\331|=W=m>\257F6?k\370Q?m\003\027?\212\271w?\270\037\000>\222/\340>\334\013|?\247 y=\236\371i>\211\2034?3\351T?\207X\017?\006R|?\363\033h=\310\364Z>T#,?Y\217a?u\220\326>\025Ky?\010\376\320=O\252\273>]\302m?I\207\207>\233NG?7\2150?\366*[?pC\374>\n\362\177?GX_:\221\'_;\013e^<=`[=`\240O>0\207%?\223\376i?t\351\240>B\256\\?O\222\363>\210e\177?c\032\032<T\247\030=\342\366\022>\200\276\373>\343\355\177?\332\333\220:\336\262\220;J\017\220<\301\206\215=\n\277\203>\001\261C?}g8??JN?\261: ?\031\305o?\3137s>\rs9?BnL?f\271$?T\355j?\321\264\232>\227\353W?\0328\007?\211/\177?3\315O<}*M=\254\343B>5\314\035?d r?-\362Q>\330\346&?\237Zh?\367\261\253>\262<d?1\004\306>\346\335r?\351YG>\257\212 ?%to?8\241w>\030\277;?q9H?\217~.?\0309^?+\220\352>v4~?y(\344<\270\315\335=\035\310\305>\241\302r?I\341H>\027y!?;~n?8z\202>\024tB?\303\377:?p\234I?\243U+?{\250b?\232\324\317>\262\357v?q\342\013>\013\215\361>:/\177?2\034P<zwM=\361(C>\030\367\035?X\370q?\020-T>e6(?\323\273f?O.\266>\276\266j?E!\234>\371\tY?A \004?\350\273\177?o\014\210;\325{\207<6>\205=\377%y>C\207<?D\301F?\364\3061?\360HY?\320p\003?\246\320\177?mF=;|\272<<\362\215:=\311\0162>\245\030\023?UMz?\203F\262=\277\301\242>\266\t^?\363\246\353>\367a~?\271\265\315<T\213\310=\024\350\264>\372\370i?\210\016\241>\310\311\\?\307\362\362>\250U\177?\024\347)<\t$(=\024=!>\233\331\007?\202\t\177?\212\220u<R\342q=\223\231c>&\0031?.wZ?\360\037\000?\360\377\177? \373~6\340\372~7\342\371~8\352\365~9\014\346~:\230\246~;I\251}<\351\273y=\370\201j>\201\3154?zoT?\234\232\020?<\261{?\251\206\207=\177\035}>\253\214>?@\336B?\231\":?81K?\177\250\'?\351lg?o\271\261>\354\020h?\370\221\255>Sue?\263Q\276>\006&o?\020\340{>\307\353=?(\027D?\302\2167?d\305O?P\222\034?\253>s?.\352A>r1\035?\n\257r?2\372I>|#\"?8\312m?bQ\207>\325\033G?4\3760?\300~Z?\212\n\000?\376\377\177?T\027\3364N\027\33656\027\3366\325\026\3367T\025\3368O\017\3369;\367\335:\001\227\335;d\027\334<\243-\326=\230\307\277>\300\343o?R\213q>k\2218?:\000N?r\357 ?\016\ro?\327:}>\201\233>?=\301B?+_:?\365\302J?\327\252(?\253(f?\212\334\271>\227\310l?\0361\216>\265gM?\314a\"?\202\207m?\234\032\211>\272\307H?.<-?\'\007`?\025\325\337>>\365{?\330\232~=^\307n>\212\0317?\020\220P?\224\226\032?E\364t?\201\033)>,.\r?\035I}??\341+=\324\252$>\377/\n?\334`~?KA\316<\342\017\311=\244R\265>Q7j?%q\237>\214\224[?q\350\371>\343\332\177?\342]\024;\346\007\024<\201\261\022=\222p\r>\213\316\363>Sk\177?.V\024<_\376\022=\355\267\r>\3135\364>\000u\177?\322\264\n<4\210\t=\003\352\004>\361R\347>\030\237}?\333\317\026=XB\021>\223N\371>4\323\177?\367\0203;\266\2232<o\2410=\211\003)>\036\036\r?\265O}?\376C*=\0300#>\206.\t?\310\256~?\254\275\247<cN\244=\323\037\227>\027\tU?\332\003\017?1z|?rY^=~GR>&\031\'?O\035h?aA\255>TAe?\030\233\277>d\315o?\342\303r>\'69?^\333L?\022\264#?\022\025l?\272\361\222>\327\212Q?b\033\030?k\353v?\022\"\014>\200\351\361>\2109\177?\022\336E<TzC=\033&:>BO\030?-\304v?\007i\016>\2675\365>\222\213\177?7q\350;\035\313\346<\220J\340=>\272\307>h\241s?nY<>\220\264\031?\362\254u?Y\207\036>\203\374\005?\247p\177?e\010\017<\273\310\r=P\340\010>\023)\355>\022\235~?\334\200\260<Q\263\254=\"#\236>\342\226Z?\204\214\377>\314\377\177?\333aP71aP8\213^P9\361SP:\217)P;K\200O<\211\337L=8\240B>j\242\035?4Gr? \310O>\320\236%?\326\342i?\035\241\241>.6]?\267|\360>Z\017\177?\237\303o<dAl=\332\240^>\002:.?i\234^?\035F\350>\022\315}?\367\205\013=K\305\006>\005\021\352>\354\036~?\034\306\356<u\320\347=9\223\315>T\021v?U\300\030>\030\367\001?\215\360\177?\206\034w:\344\340v;\317\362u<\244Ar=\241\355c>\31711?\224/Z?\r\352\000?\250\374\177? \370U9\362\354U:A\300U;\310\rU<\210HR=\327|G>\002\240 ?n^o?\240\317x>\344Z<?\023\025G?7\r1?\301gZ?\212K\000?\247\377\177?\316Q\2627\326P\2628\364L\2629n=\262:a\377\261;\333\007\261<|4\255=}\216\236>\310\350Z?\374\273\375>\336\372\177?\306@\2449\2323\244:\361\376\243;\324,\243<\303\354\237=\304o\223>\374\365Q?\250\t\027?\016\265w?\321b\000>\'\224\340>\264$|?\024\033s=M\255d>\004\2341?\236\213Y?\200\266\002?\220\342\177?\334g\353:\240\373\352;>L\351<_\247\342=\341\221\311>\\mt?d\3130>QE\022?\267\310z?\177\202\243=\221t\226>S|T?\265x\020?\302\302{?\257h\205=\341oy>,\255<?yyF?ae2?\370PX?\360 \006?\302i\177?\324\345\025<\277\206\024=\376#\017>^C\366>2\241\177?\201V\275;o>\274<\021\353\267=\324f\247>VVa?\256\353\327>\245\271y?x\337\303=\262#\261>\003\265g?\276\346\257>4\360f?\247\335\264>\333\362i?\0177\241>\321\347\\?~D\362>kC\177?\247\t<<.\3419=\272q1>\035\262\022?\340\211z?\204\t\253=\315\300\234>\017\206Y?\016\306\002?:\341\177?Z\020\366:\030\232\365;\327\302\363<\374\201\354=\3761\321>Rqw??W\004>sy\346>rt}?\375D!=\200\353\032>t{\003?\177\317\177?\\\337A;\211LA<\267\004?=7\0346>.\271\025?b\240x?\376\'\345=\353\203\313>\\=u?\272\355$>]]\n?KR~?\tr\325<Q\342\317=X\310\272>\363Hm?_\306\212>FRJ?T\261)?\341\326d?];\302>\263\030q?\365\222`>\225R/?K\002]?\254\252\361>\2162\177?\316\314L<r=J=\"A@>\261(\034?K\234s?N\243<>>\343\031?Q\207u?\206\260 >=y\007?\225 \177?!\250^<\201\241[=\245\332O>\321\251%?\344\325i?\301\366\241>6u]?\013\r\357>\273\340~?e\001\217<Q\202\214=x\336\202><\326B?V3:?\312\022K?\360\357\'?\020\024g?\315\366\263>\212ji?v\273\244>3v_?z8\343>\277\303|?DrL=\337=B>je\035?x\177r?\240\243L>T\276#?\236\tl?\023?\223>\246\314Q?ms\027?:hw?\375\336\004>\236B\347>\362\233}?\313\225\027=\252\371\021>\361T\372>\337\337\177?{s\000;\0103\000<wd\376<\032~\366=G\323\330>X\001z?\006W\273=\3763\252>\344>c?b2\314>n\204u?\362\332 >X\226\007?\274\031\177?;ue<\217>b=g\277U>c!)?(\221e?\"\241\275>\363\312n?\265g\200>\213g@?B0??\332\234A?\346\273<?\212]F?\332\2422?\355\357W?1,\007?72\177?\304#M<:\222J=\211\215@>bX\034?0rs?]\003?>\334a\033?\331Ht?l\3362>\350\237\023?\177\373y?b\t\274=\251\305\252>5\240c?\226\325\311>\024\212t?0)/>\3332\021?\323`{?\007:\221=\256\355\206>\255\275F?\343\3161?\227<Y?C\223\003?\337\314\177?o[L;M\270K<\326/I=\024N?>\255\220\033?\247 t?L&5>\200\032\025?\221\ny?X\240\330=y\266\301>M\330p?X d>\360M1?J\004Z?\361c\001?D\370\177?)k\3679EM\367:\322\325\366;\322\371\364<i\246\355=\270\022\322>\271\302w?\207,\377=Pa\337>\362\327{?\370\330\202=\252\371t>r^:?F\304J?\305\247(?\222,f?\242\303\271>\356\272l?\363\215\216>\036\272M?\n\232!?\263[n?\216h\203>\360\\C?\343\0309?\242\017M?^6#?[\240l?xB\217>\235YN?\025\025 ?\345\352o?e\'q>\230\\8?o]N?\271\013 ?E\364o?.\244p>\036\0278?\203\327N?\333\337\036?\023\033q?bq`>\273?/?\'\036]?\244\010\361>\003 \177?#9_<\221.\\=\217XP>\216\364%?\226}i?\354=\244>r\034_?\000O\345>\2227}?\362+0=*\230(>&\326\014?\345l}?u\036#=x\237\034>\311\252\004?\337\250\177?i\006\256;\317\031\255<pq\251=\221l\233>||X?\270\250\005?\347\177\177?\264\262\377;\351\263\375<\200\330\365=}U\330>\232\332y?\353\363\277=.\366\255>\265\265e?\357\270\274>\271Qn?U\255\203>\317\237C?\327\2138?\026\nN?i\327 ?\302%o?\275\343{>\245\355=?\212\023D?t\2267?\006\270O?\237\263\034?\334 s?[\227C>_;\036?\037\270q?\375\276W>fJ*?\004\016d?b(\307>\365`s?\355\373?>t\375\033?:\302s?\302~:>\246\207\030?$\231v?o\347\020>F\314\370>!\314\177?ZPO;w\250N<)\rL=\331\342A>\344,\035?2\263r?\244\276I>i\377!?\240\360m?\255I\206>#\"F?@%3?\214 W?sc\t?m\237~?\262V\257<\365\225\253=\2775\235>\207\340Y?u\310\001?H\363\177?}nK:\023FK;\253\244J<\n#H=\235[>>\226\370\032?A\242t?\347\310->\235J\020?Z\332{?a\216\202=\207wt>\203\032:?\350?K?\371\205\'?\240\227g?\031\245\260>\305fg?\"\341\261>-)h?(\364\254>Q\017e?G\327\300>\357jp?*$j>\241\2324?D\303T?\032\275\017?-!|?\363\365s=&ne>\226\0062?\265\345X?\026\205\004?I\256\177?\301:\243;\231j\242<A2\237=R\322\222>\022pQ?\217_\030?\306\267v?\030!\017>2?\366>\340\240\177?\275\370\275;\312\336\274<\n\204\270=H\344\247>\357\254a?\364\333\325>\'\020y?I\367\327= 1\301>$\227p?s\266g>\302G3?S\351V?\237\371\t?\376q~?\263\313\305<\032\005\301=\004\324\256>#Cf?v3\271>\201kl?\360\250\220>c\223O?\321\016\035?\220\316r?\0306H>\363\020!?\200\352n?-\032\177>\343\214??k\345@?\3641>?\021\217C?5\2578?\203\313M?\305o!?\372\207n?\3536\202>\0032B?\262\210;?\324\236H?\031\231-?F\203_?u\352\342>\035\262|?\026\276P=\277\032F>f\307\037?h8p?\215\351l>\261\0316?\234DR?\347?\026?\321Cx??\013\360=\234\350\323>\364gx?0\314\353= \246\320>\340=w?\254V\007>\025\347\352>\347B~?\212\t\335<\276\022\327=\257|\300>\033>p?\232\231l>\266\3565?(\215R?\021\205\025?\230\303x?~\001\341=\nI\310>\337\337s?\227\3218>\032v\027?Dfw?F\374\004>\374m\347>L\244}?\036\211\025=\217\023\020>\035\234\367>\233\271\177?\224\243\214;\r\t\214<>\244\211=\030d\200>\360c@?\2037??\206\216A?C\331<?\301%F?T\0353?4-W?\372@\t?x\251~?\370^\252<\346\323\246=\366<\231>\000\300V?\300i\n?EN~?\006n\327<\266\303\321=\221G\274>\361\025n?\027I\205>(-E?\203:5?\342\272S?%u\022?E\255z?\236\314\246=\3366\231>\033\273V?\005w\n?\361I~?\247\220\331<s\311\323=\275\342\275>\346\354n?\362\370~>6|??\206\006A?\300\356=?g\021D?\000\2337?!\260O?K\307\034?2\017s?\201\225D>0\330\036?y\"q?\312\010`>\361\004/?\275t]?\313\017\357>\030\341~?B\323\216<\312U\214=\014\270\202>\247\260B?\300\201:?\315\203J?&>)?$le?\362\213\276>\334Co?PAz>h\030=?q\255E?.$4?!\205U?J\271\r?\241\016}?a-:=\002\2671>]\337\022?Poz?\3456\256=\020e\237>n\213[?\236\034\372>T\335\177?o\234\n;bQ\n<s&\t=\320\216\004>\325\313\346>\305\204}?\263D\035=\336:\027>>\345\000?\313\374\177?0EM9\346:M:\304\021M;\177mL<\204\340I=_\355?>[\364\033?.\312s?\254\013:>n>\030?\360\320v?\200\253\r>\321#\364>Ws\177?*\\\014<V(\013=\tn\006>a\220\351>\240\010~?\027\301\371<\316#\362=\327\202\325>\261\362x?ur\333=\324\356\303>\362\347q?\236\026U>\365\276(?\025\017f?\325\177\272>\251!m?\216\322\213>\310FK?\314u\'?\227\253g?\316#\260>\\\026g?\002\350\263>\277ai?a\365\244>s\237_?,B\342>q\213|?\222\'Z=\033\211N>\337\340$?\357\277j?\362\343\233>\022\332X?h\245\004?\247\251\177?\315v\254;m\216\253<\260\366\247=70\232>c\202W?yX\010?g\351~?\251\264\212<o[\210=\215\216~>\301F??fpA?\354\026=?E\260E?\005\0364?)\217U?z\236\r?\026\032}?\351`7=.+/>*4\021?\037`{?\277O\221=Q\000\207>M\317F?\350\2471?,yY?\031\352\002?\006\336\177?N\325\007;<\215\007<#n\006=\253\004\002>\367\004\343> \270|?.GO=\353\311D>w\370\036?L\003q?t\301a>\014\374/?\356\005\\?\347]\367>x\265\177?\365\344\224;\3027\224<>\211\221=\2461\207>\345\375F?\254@1?\270\030Z?r*\001?\220\372\177?\271\362\2559\363\343\255:\344\250\255;H\275\254<\321\030\251=\230\"\233>HBX?vI\006?\345a\177?\343\270\035<24\034=7?\026>\2563\000?\326\377\177?Q\356&7\344\355&81\354&9c\345&:0\312&;\205]&<\017\255$=,\016\036>\314\250\005?\343\177\177?\023\272\377;*\273\375<N\337\365=\250Z\330>5\334y?\035\303\277=\206\316\255>D\234e?\226Z\275>J\246n?`e\201>mcA?p1=?\235}E?0\2144?\377\332T?5~\017?\336?|?.\204l=\356\333^>c[.? l^?Yc\351>\263\000~?\270\247\375<\020\315\365=\314L\330>\351\327y?\000F\300=\3368\256>a\340e?t\251\273>\350\301m?j\212\207>\216QG?\245\2060?\3544[?\247\n\374>U\360\177?\016\244z:\265fz;\310qy<\216\245u=)\352f>\303\3272?\010\234W?O\022\010?g\373~?\323\307\201<\366r\177=\222\204o>_~7?\323\341O?aK\034?\262}s?G]>>\241\371\032?_\241t?\276\325->\030S\020?\010\326{?/\024\203=\363`u>F\224:?\352aJ?\374\214)?&\006e?/\021\301>t\207p?,\223h>g\3003?\031\'V?\324\006\014?p\275}?#]\017=\220X\n>SO\357>p\351~?7\260\212<#W\210=\032\207~>\002C??\316wA?\306\007=?.\315E?\002\3373?\213\365U?\030\214\014?D\212}?\243\353\033=0\374\025>N\004\000?\000\000\200?t1\2243s1\2244p1\2245e1\2246;1\2247\2170\2248\341-\2249(#\224:L\370\223;>M\223</\247\220=\237o\206>3FF?$\3262?\233\236W?@\013\010?.\375~?4\346\200<\367\275}=\346\005n>(\2626?lAQ?$\326\030?\231\\v?\032h\024>\360\313\375>%\373\177?\330W\2339\020L\233:\365\034\233;\375`\232<6x\227=UD\214>\333\255K?\257\202&?\306\323h?\000\232\250>\204)b?\204\341\322>E\014x?\333\217\366=\302\340\330>w\005z?E\331\272=7\315\251>\327\371b?\035\336\315>\277.v?\373\r\027>\233\305\000?\236\375\177?\215\206\0309\337\200\030:(j\030;j\017\030<!\246\026=\257\033\021>/\027\371>B\320\177?\214\322>;OD><\251\016<=Pl3>\'\374\023?h\302y?\316\324\302=\346K\260>Z/g?\351F\263>\225\001i?\237m\247>\n[a?\021\317\327>\254\260y?m\360\304=L\000\262>.<h?bx\254>\307\276d?0\323\302>\235aq?\340\212\\>!\013-?XL`?;5\336>\031\212{?=@\214=r\245\202>r\236B?\255\247:?_>J?\210\337)?\215\232d?%\267\303>\305\315q?0\213V>\360\227)?\353\367d?\000k\301>}\263p?J\'f>\242l2?\212EX?x@\006?\251c\177?\342\367\033<\312{\032=7\250\024>\367&\376>\226\374\177?o\201Z9\307uZ:,GZ;\017\215Y<\215\251V=\216iK>j\001#?t\332l?\233\267\215>q\373L?\367f#?\274jl?(\256\220>\355\227O?\207\003\035?\315\330r?\030\243G>Z\267 ?\230Fo?G\033z>\365\004=?\215\322E?L\3233?\206\010V?\027Y\014?\034\236}?\337\r\027=\311{\021>\327\240\371>g\327\177?fK\";\202\344!<\376J = \005\032>\226\332\002?l\337\177?\002?\002;\276\374\001<\273\364\000=\302\312\371=@S\333>\365\276z?\363\255\244=\tp\227>\266JU?5U\016?G\312|?\317\332J=\356\316@>+\201\034?\366Ms?\331\rA>a\250\034?\360*s?N\006C>\247\341\035?e\014r?]\017S>\310\216\'?\276\214g?\216\353\260>`\222g?\031\307\260>\324{g?\371X\261>\313\325g?#\022\257>yjf?\3357\270>`\337k?\030\\\224>\223\275R?\006\010\025?\273\026y?+0\327=\355\223\300>\241Ip?\336\367k>\236\2275?|\037S?G\n\024?\222\271y?\261\341\303=~%\261>\036\266g?\222\337\257>\267\353f?\210\372\264>\313\003j?\334\306\240>\213\224\\?2\'\364>\247s\177?_\014\014<\351\331\n=\357$\006>\206$\351>\213\365}?\274\222\001=\321\362\372=\3552\334>H\376z?\315\024\235=}\010\221>\\\346O?\020@\034?\262\207s?\346\314=>\332\236\032?e\355t?\013\200)>xq\r?\036-}?#\2722=\255\355*>\213e\016?\362\302|?P\244L=\353jB>]\201\035?\276er?\241\023N>\273\232$?w\020k?\331\311\231>\3160W?,7\t?L\254~?\225\370\250<\\|\245=*\035\230>\257\327U?@\334\014?rj}?\035\270#=\335,\035>\331\014\005?\373\231\177?\302\267\313;\210s\312<\264r\305=}i\262>\034|h?f\327\252>\003\254c?\021\214\311>\343jt?_\3570>\336\\\022?<\273z?7 \245=\346\317\227>\342\230U?{\204\r?\034%}?c\2574=\362\266,>\\\225\017?\2404|?r>o=\030Ea>v\266/?\372m\\?\'\006\365>\207\207\177?#\200\360;B\274\356<.\307\347=\014\214\315>\200\016v?\021\352\030>_\024\002?\264\356\177?\345Y\212:\2024\212;I\237\211<jO\207=\236\275|>\'\\>?\360<C?0\\9?F\227L?TW$?K]k?\r\307\227>\256\221U?\277\227\r?\363\034}?\354\2556=0\210.>\326\310\020?\037\231{?\025p\212=t\024\201>I\023A?\315\324=?\225CD?\03407?+iP?h\370\032?g\242t?\264\306->*I\020?\027\333{?\200w\202=\232Ot>\245\005:?\305eK?\330,\'?9\005h?\013\336\255>:\246e?P\033\275>I\205n?~I\202>CDB?\355b;?\002\345H?\207\371,?\031e`?)\240\335>gb{?d\t\221=\357\303\206>*\226F?$&2?Q\264X?%\016\005?\307\231\177?\016 \314;\210\332\312<\233\324\305=~\270\262>\350\253h?\001\237\251>\260\332b?\263\236\316>\233yv?\257\272\022>\243h\373>\354\352\177?w\225\250:\365]\250;~\200\247<\267\023\244=\216\356\226>\260\340T?\036o\017?)G|?*\277j=\nK]>`x-?\326\261_?=\324\341>\267q|?\024i`=\223\035T>S-(?8\307f?#\345\265>v\214j?\r;\235>\236\344Y?\367\274\001?\352\363\177?\375PA:~,A;\272\232@<\031W>=\302~5>\243S\025?\260\344x?\333\031\335=&;\305>6\202r?Z|L>\277\246#?\355#l?[\215\222>,5Q?=\365\030?gDv?\363\315\025>4\307\377>\363\377\177?\271\235I6\221\235I7\362\234I8w\232I9\213\220I:\336hI;h\312H<tTF=\010\272<>\230\361\031?\262{u?>[!>E\356\007?j\004\177?\332\236z<o\311v=\363\352g>|d3?<\273V?\253v\n?\016J~?1\202\331<\301\273\323=\340\327\275>I\347n?\301F\177>?\243??\373\270@?\363\213>?\250\337B?\250\037:?\2206K?\360\233\'?w|g?\336T\261>E\323g?\202\"\257>\322tf?\234\365\267>\'\272k?\337V\225>\201\217S?\207\346\022?\026kz?R\270\256=p\320\237>K\334[?)M\370>\273\304\177?\356\333l;\310\000l<\202\232h=\374d[>\200c,?\2256a?\272\254\330>\205\365y?\214\277\274=OZ\253>\331\002d?6n\307>\344\177s?\215=>>\262\345\032?\'\262t?\r\341,>A\261\017?\376&|?\350\214r=\375/d>\234V1?\354\366Y?\210\211\001?\214\366\177?\3636\027:\237 \027;g\307\026<.d\025=R\361\017>\345j\367>W\266\177?\260&\223;\205}\222<\352\336\217=\220\303\205>W\242E?X<4?\271]U?\204\"\016?\323\340|?n[E=\020\331;>[c\031?\307\355u?\270\314\032>\374e\003?\316\321\177?\032\2478;\351!8<&\0206=w\370->\006j\020?M\312{?<\177\204=\233\331w>3\334;?\r\003H?#\371.?\024\206]?w\252\356>\207\323~?\006\214\225<#\321\222=\275J\210>\373\005H?\213\362.?\301\217]?\346q\356>\322\313~?\244]\231<\233~\226=\210o\213>\302\354J?\025I(?S\244f?%\305\266>a\rk?~\336\231>HAW?A\n\t?\034\271~?6\241\242<\262f\237=\233\376\222>\320\225Q?k\377\027?p\000w?\205\351\n>\276\"\360>S\004\177?\204\265z<h\337v=F\376g>\016o3?A\252V?\255\244\n?\342:~?\342\375\340<\370\317\332=\035o\303>\303\253q?\245nX>\353\257*?8\207c?\033q\312>\206\313t?\323n+>\204\273\016?\321\233|?\250+V=\330\370J>n\275\"?\212$m?\350\276\213>\3614K?\277\237\'?\301wg?Vs\261>\373\345g?\013\251\256>\333\'f?\270\341\271>m\313l?\322\035\216>\213VM?K\213\"?\321Zm?PL\212>C\342I?\267\264*?\322\200c?\351\230\312>\'\334t?\370{*>\300\031\016?\262\344|?\336iD=\272\376:>\361\330\030?lZv?J\210\024>\245\371\375>\346\373\177?I0\2039\342\'\203:I\006\203;*\200\202<\367k\200=\345\274p>7$8?\214\300N?h\030\037?R\344p?\307vc>\320\3570?\306\224Z?u\230\377>\326\377\177?\034\204\'7\256\203\'8\370\201\'9\036{\':\271_\';K\362&<\317>%=/\224\036>_\005\006?\376n\177?\022\260\020<\370h\017=\221c\n>c_\357>\210\353~?\360\246\211<\317V\207=s\312|>\246b>?E0C?\312v9?\213gL?n\311$?\352\332j?\327/\233>\267LX?\255,\006?\200g\177?\300$\030<\022\273\026=\026/\021>\3742\371>\300\321\177?$\3408;\241Z8<\230G6=\372*.>]\213\020?\"\271{?o\222\206=vu{>\223\265=?\334\177D?L\2576?OFQ?\273\311\030?8fv?\266\331\023>\214\001\375>\t\367\177?\300f\017:\253R\017;n\002\017<\337\302\r=\333\332\010>\024!\355>\345\233~?\374\025\261<\001B\255=\270\231\236>U\361Z?h\213\375>\371\371\177?p\352\3009D\330\300:\241\217\300;\362m\277<\310\364\272=\264\343\251>\372\010c?s\200\315>\355\tv?\216-\031>\257C\002?}\353\177?0\007\244:\244\322\243;\370\000\243<\246\302\237=:L\223>\323\327Q?\332V\027?\035}w?\030\247\003>\370s\345>B?}?\206J.=\360\337&>$\256\013?J\336}?\276J\007=\300\322\002>#8\344>;\374|?z\253>=J\3135>\004\205\025?\241\303x?v\000\341=<H\310>\206\337s?\253\3268>Xy\027?\342cw?\310\037\005>\213\242\347>X\256}?\324\021\023=\374\311\r>\351O\364>ew\177?>R\010<\341/\007=\250\271\002>\305\022\344>\032\364|?\217\247@=\323\2277>9\255\026?\024\367w?\227\013\371=\246\302\332>5\225z?L\256\251=Y\237\233>Y\244X?e:\005?\253\222\177?\242L\332;U\330\330<\347\032\323=;X\275>\021\245n?\332m\201>\317kA?N =?Z\236E?\006E4?\214OU?QH\016?\013\320|?\033sI=\273\212?>\250\266\033?\331\377s?3\0027>*M\026?\226:x?\265 \361=\342\274\324>b\260x?HE\343=\312\014\312>d\241t?s\325->\347R\020?!\326{?%\021\203=\246[u>\203\221:?\370fJ?>\201)?d\025e?\353\260\300>\373Wp?].k>\323*5?\365\324S?\3400\022?]\324z?\351\034\242=\326G\225>\371\202S??\007\023?\262Wz?\217\t\261=\310\273\241>\325I]?0\n\360>F\001\177?\363\274}<\367\316y=\262\222j>\222\3264?\204`T?\025\302\020?\251\234{?\266\002\212=\330\265\200>W\265@?P\223>?C\321B?\272=:?\343\377J?E\034(?\236\334f?\242[\265>\220<j?QN\237>Az[?\331~\372>\263\341\177?\245H\362:\376\325\361;\025\r\360<Q\004\351=5\201\316>8nv?Uc\023>\rY\374>\251\362\177?\370]U:\2031U;\370\177T<g\276Q=\340\000G>IT ?H\253o?L\240t>\317/:?6\031K?\341\340\'?\330&g?\302}\263>i\"i?\n\226\246>\'\305`?U\\\333>\217\301z?%^\244=\r-\227>\355\023U?\016\347\016?\250\207|?]\023[=\273[O>\\^%?Z.j?\250\254\237>c\301[?\214\347\370>\247\315\177?#;I;\365\234H<\037(F=\375\221<>M\330\031?(\220u?\235. >\n \007?\3564\177?\035qJ<\302\360G=?.>>\024\334\032?;\272t?-k,>!c\017?\357L|?JXi=-\r\\>\204\303,?\326\260`?+\327\333>~\344z?\210-\240=i\246\223>J$R?\357\222\026?\252\tx?\376\335\366=\021\034\331>\212\027z?\305\261\270=\304\t\250>\266\306a?|>\325>\356\333x?o\"\336=w\n\306>\276\340r?\0361G>\304q ?q\215o?\227@v>\212\010;?@\214I?\334z+?\375ub?\240\013\321>Dcw?\002)\005>3\260\347>\361\260}?\250n\022=\2012\r>\254t\363>\244b\177?\366\372\034<\352y\033=\035\223\025>\357s\377>\263\377\177?\367C\2317?C\2318a@\2319\3514\231:\021\007\231;\036P\230<${\225=\022\222\212>U\"J?\210 *?<Ed?\261\316\305>\237\305r?c\266H>\004_!?w\231n?\017\276\201>\006\273A?\371}<?\325\322F?\031\2401?J\205Y?5\310\002?\n\341\177?\302\216\367:\017\027\367;\024:\365<\322\342\355=\032A\322>U\323w?\026;\375=[\353\335>\203v{?\364\234\216=\244\256\204>\270\230D?\rz6?\"\241Q?\215\342\027?\t\026w?#\250\t>\224M\356>\321\306~?\306\327\233<\316\340\230=Ww\215>\001\302L?\363\360#?\354\320k?\205\275\224>\\\017S?&4\024?>\237y?\230\002\307=\367\253\263>\377=i?\256\340\245>\366E`?\241[\336>6\224{?\311\007\213=\233\227\201>\022\225A?\331\313<?@?F?e\3452?\\\206W?\233M\010?;\354~?\330M\211<\265\000\207=\3724|>\344\026>?\236\303C?\027@8?\227\217N?\275\220\037?\201np?\366\361i>`\1774?\006\360T?kF\017?\260Z|?I\001f=\344\026Y>\360\020+?9\005c?\260\227\315>\026\023v?d\246\030>\343\344\001?\246\361\177?\034\216e:\246Ze;+\215d<\374\\a=\262\366T>Q\254(?\313&f?\205\350\271>\'\317l?}\004\216>\377?M?\302\301\"?\330\037m?\363\336\213>\010RK?T[\'?/\314g?|P\257>\325\221f?\270;\267>\001Qk?}\031\230>\263\324U?B\344\014?9g}?)\202$=\270\346\035>\205\215\005?\252\204\177?}4\366;\353Z\364<\000\021\355=\360\237\321>V\231w?_\001\002>\014\000\343>\003\267|?\251\214O=\\\010E>\345\036\037?\004\336p?\306\317c>=!1?\tIZ?D\242\000?e\376\177?\223\262\3158h\255\3159\301\230\315:2F\315;\377\374\313<\245\350\306=\017\227\263>\2061i?\2662\246>\236\177`?N\000\335>\0257{?\266@\226=\271:\213>\240\274J?\242\271(?\333\025f?\235T\272>*\nm?\301r\214>\313\327K?d\037&?\251Ji?Z\215\245>0\013`?\334\274\337>%\357{?V\n\200=\027\022p>\234\3117?\001_O?\350\220\035?fWr?\267\340N>\034\025%?\221\203j?Dv\235>B\022Z?\242<\001?\341\371\177?\301\313\3039\t\271\303:8n\303;\325C\302<~\250\275=7\030\254>\342\177d?\275^\304>F\034r?\360,R>\177\t\'?k0h?\375\304\254>\256\360d?\253\230\301>\311\311p?\r\355d>G\2771?\340TY?\177O\003?)\324\177?\273</;\306\304.<\206\347,=\007\233%>\272\322\n?p+~?*\233\350<]\000\342=\311\017\311>\3075t?\203\3633>\347S\024?\"\213y?\314e\311=\253\227\265>\205_j?\024f\236>\377\311Z?\313j\376>\177\375\177?\356V 9\247P :\2167 ;I\323\037<(D\036=\245&\030>*\213\001?x\366\177?^y\030:\251b\030;\364\007\030<\316\236\026=\347\024\021>v\r\371>\274\317\177?\255\354@;I[@<%\031>=\220F5>Y/\025?\312\374x?\021A\332=\265\376\302>bvq?id[>,c,?\n7a?\370\251\330>\255\364y?b\331\274=bo\253>\306\020d?\037\027\307>JYs?\211j@>\213B\034?\201\205s?\201\354=>\275\262\032?\324\334t?\035r*>,\023\016?\227\347|?\027\265C=A[:>\022q\030?k\252v?B\347\017>m\\\367>^\265\177?\325\027\225;,j\224<\324\271\221=S[\207>4%G?_\3510?\236\236Z?\264`\377>\235\377\177?\247>\3067t=\3068\2508\3069y%\306:\312\330\305;\373\246\304<z\356\277=\303\361\255>\340\262e?\361\312\274>/[n?\030l\203>a`C?\243\0219?\221\034M?6\027#?\225\302l?\366Y\216>\377\213M?\357\t\"?p\345m?\206\226\206>\037kF?\370\2042?(\037X?D\252\006?NN\177?U61<\244K/=\034\313\'>tL\014?\371\242}?<\334\025=\232`\020>\314\n\370>\254\300\177?6\020};\r\026|<\0375x=\260*i>\001\0234?\031\241U?\200n\r?].}?/l2=\205\246*> 6\016?$\330|?\231yG=\265\302=>p\230\032?\272\362t?\0262)>K=\r?\337B}?Gh-=\345\020&>j\"\013?\031\020~?;\023\366<\363\256\356=\273\335\322>\357\nx?\353\267\366=,\377\330>\277\016z?\033\276\271=\221\345\250>\006]b?.\245\321><\233w?\377\344\001>\264\325\342>d\255|?~\344Q=\020#G>.i ?%\226o?9\307u>~\311:?R\000J?Bo*?8\335c??Y\310>\355\346s?sk8>\3124\027?\343\225w?\3624\002>\374L\343>Z\310|?\002SK=6;A>\241\304\034?\227\021s?\021sD>\367\302\036?\3466q?\320\347^>\030b.?gb^?\264\234\351>\310\n~?#\261\370<e$\361=\264\277\324>V\261x?\211(\343=l\366\311>\365\227t?\372^.>\252\255\020?T\247{?\005\271\210=\3030\177>8\230??\350\316@?\222_>?F6C?0j9?+~L?a\223$?\340\030k?\226\221\231>\324\003W?\231\261\t? \210~?\356\333\272<\314\230\266=\030Q\246>\353\224`?\307\177\334>\260\023{?c\202\232=?\332\216>\246\375M?\273\365 ?\225\006o?\246\224}>\335\310>?^hB?\024\030;?\223oI?\267\274+?>\034b?\3522\323>\334(x?_5\363=\223S\326>Q7y?.U\323=}\206\275>\037\275n?m\307\200>\322\306@?\363o>?U\026C?6\2559?\243\005L?\234\262%?\211\313i?>;\242>t\247]?D\347\355>\203\270~?\353\354\242<e\257\237=\372;\223>\005\312Q?&z\027?Lcw?\217(\005>\210\257\347>\320\260}?\240v\022=\3479\r>d\177\363>\261c\177?\323\357\033<\342s\032=\350\240\024>\227\034\376>o\374\177?\2661d9\377$d:+\362c;3\'c<\371\000`=\336\300S>\376\366\'?A\013g?\212/\264>1\214i?\231\335\243>A\327^?\270\351\346>\244\212}?0\324\033=\206\346\025>\370\351\377>\376\377\177?\277\245\3624\270\245\3625\234\245\3626)\245\3627]\243\3628-\234\3629o\177\362:\225\014\362;\335B\360<\3626\351=P\250\316>P}v?\310\203\022>F\032\373>\004\350\177?\336\315\277:\004\206\277;qg\276<\203\372\271=\003\027\251>\242~b?m\326\320>\265Ow?\314L\006>Z_\351>\377\377}?\243\000\376<y \366=+\214\330>\201\353y?\364\360\275=?S\254>\206\246d?\330k\303>7\252q?\240\204X>\233\274*?Hvc?k\332\312>k\367t?\202\355(>\\\017\r?\277U}?\276\311(=(\325!>\264A\010?O\357~?\t\307\207<\355\206\205={\244y>#\310<?MFF?\353\3252?\366\236W?I\n\010?l\375~?`\307\200<@\202}=\224\321m>&\2266??qQ?\220\\\030?\016\272v?:\377\016>b\016\366>\037\235\177?\353u\305;NE\304<|\221\277=/\246\255>V\202e?+\377\275>\222\373n?p-~>\343\025??\341\320A?\rQ<?\242\'G?\371\3430?\336\246Z?\3701\377>Z\377\177?*\321%8}\317%9\306\310%:\357\255%;\266B%<\371\227#=K\017\035>Z\370\004?1\235\177?\322Q\305;\244!\304<\210o\277=\224\212\255>\221pe?\341o\276>\1775o?\013\t{>\\~=?\'\352D?\024\3135?\"\311R? \352\024?S*y?\307\336\324=\217\276\276>\264]o?\271\331x>\025`<?H\013G?\366\"1?dFZ?\270\251\000?>\376\177?\023\010\3418\345\001\3419,\351\340:`\206\340;\211\374\336<\261\352\330=\025\361\301>\305\364p?\225\216b>\221n0?gY[?\215:\373><\351\177?\371\016\266:<\316\265;\001\314\264<\205\316\260=\362\212\241>\324%]?\364\333\360>\302\032\177?5qd<\316Aa=\202\336T>0\236(?\2758f?\344u\271>.\220l?=\260\217>\035\272N?=(\037?\353\324p?\017Pd>bh1?\177\333Y?\225\326\001?|\362\177?\2556X:\006\tX;\267RW<F~T=0xI>\263\324!?\344\035n?b\022\205>\251\370D?\322\2535?\237\375R?-b\024?\r\202y?\246y\312=\037u\266>\200\337j?4\021\233>\2224X?Do\006?bZ\177?\0333%<\257\210#=:\001\035>\231\356\004?\263\236\177?sO\302;z(\301<\212\232\274=\037<\253>\336\356c?\t\353\307>\322\266s?\311#;>v\360\030? Hv?\343\226\025>Gy\377>\271\377\177?k\314\2157\316\313\2158Y\311\2159\210\277\215:J\230\215;\250\373\214<\206\216\212=\307.\201>a-A?\263\237=?\005\252D?\362T6?7\340Q?bA\027?\277\214w?\230\275\002>\242\030\344>a\365|?\255W@=sO7>\307~\026?\334\027x?\3613\365=b\330\327>\231\263y?{\227\304=q\270\261>Q\020h?\353\225\255>\336we?\223A\276>\277\035o?\014S|>%&>?\001\246C?\300~8?5!N?\375\236 ?x_o?\037\301x>pS<?\"#G?\371\3550?\225\227Z?\214\210\377>\310\377\177?\000\364^7=\363^85\360^9\022\344^:\216\263^;\322\361]<%\360Z=G<O>\245K%?0Dj?\257\033\237>\367S[?\224Y\373>`\352\177?\307\355\254:^\263\254;[\312\253<\0340\250=6`\232>\207\250W?\026\360\007?\367\003\177?9\021{<M8w=rLh>\311\2313?veV?\261^\013?\347\372}?\033A\000=\020z\370=yT\332>\370tz?\305\211\255=U\325\236>\243\036[?\242\211\374>\003\364\177?\325\305?:\353\241?;x\022?<\006\330<=&#4>\311r\024?twy?\212\273\313=+w\267>\277rk?\0077\227>\030\034U?U\321\016?\276\221|?;\237X=i*M>,\017$?\352\256k?\205\242\225>t\316S?\352A\022?\251\312z?\335F\243=sB\226>\366RT?\317\345\020?\337\211{?\"G\214=f\253\202>E\244B?\213\233:?\231TJ?\356\253)?\351\335d?\013\017\302>I\003q?\236\301a>$\374/?\312\005\\?\263^\367>\206\265\177?\212\311\224;\226\034\224<\016o\221=.\033\207>\257\350F?\264o1?2\320Y?Q\366\001?\231\360\177?\220Yv:L\036v;\2561u<M\206q=kHc>\013\3260?$\274Z?a\271\376>_\376\177?*[\3208\335U\3209\253@\320:\367\353\317;8\232\316<Td\311=}\226\265>\325^j?\244j\236>y\315Z?\rW\376>?\375\177?4W09\234O0:A10;\375\267/<\211\325-=\344t&>\361e\013?S\370}?\212\343\000=\211\252\371=\343:\333>\370\267z?n\204\245=\357#\230>-\335U?\204\315\014?Zp}?\233E\"=\330\327\033>\023 \004?\356\273\177?\237\000\210;\036p\207<\3422\205=J\022y>%}<?f\324F?\240\2341?\254\212Y?%\271\002?V\342\177?\2103\355:\243\305\354;\251\017\353<\373P\344=\360\334\312>w\370t?5\336(>\034\005\r?\354Y}?\346\303\'=\323\344 >\036\235\007? \030\177?6\016g<\014\314c=\324 W>\312\356)?\222\206d?\2674\304>\253\010r?zDS>\375\255\'?\033fg?n\345\261>\314+h?\026\343\254>=\004e?@\035\301>b\215p?\277?h>\331\2223?\246pV?|@\013?\224\005~?\341@\373<\037\214\363=\265\225\326>\310Ly?\202\312\320=K\201\273>q\254m?\233\035\210>\276\333G?\200Q/?\344\003]?_\241\361>\2031\177?\375\325M<\374?K=\023*A>\365\271\034?-\033s?)\351C>\347m\036?;\210q?9gZ>;\322+?\316\376a?U\347\323>\203gx?t\331\353=V\260\320>\247Aw?c\036\007>>\224\352>%5~?c\322\343<m|\335=k\210\305>\231\245r?\217\201J>au\"?qrm?\304\252\211>PMI?D\013,?\200\260a?(\306\325>\370\010y?\243\320\330=\213\334\301>\317\352p??\033c>\352\2740?t\342Z?\363\337\375>|\373\177?W\204\2209%z\220:`Q\220;\251\256\217<\204)\215=\254n\203>\344bC?Z\0149?\374%M?\202\000#?r\333l?\336\260\215>m\365L?ou#?\267Zl?\255\032\221> \366O?\260\030\034?]\252s?\363\327;>\246b\031?V\356u?t\304\032>7`\003?j\322\177?\30666;\024\2655<.\2613=\032\317+>\205\373\016?\031~|?Uf]=\267nQ>:\231&?\235\270h?\334K\251>y\242b?\241\371\317>\234\375v?\214\023\013>\372_\360>\333\013\177?\354;s<\201\237o=\316\232a>o\346/?O&\\?\211\243\366>^\250\177?\201\007\257;+\030\256<\004e\252=\2727\234>}\033Y?\200\357\003?\014\302\177?;\225w;\312\245v<=\357r=\252\206d>\241\2061?\277\254Y?\274Y\002?\346\351\177?\033\275\260:\030\200\260;\270\214\257<\252\311\253=\311`\235>\267\001Z?.k\001?\363\367\177?y\312\000:F\272\000;\214y\000<I\357\376<K\000\367=\0316\331>p\037z?\246\300\267=\006D\247>:>a?F~\330>8\347y?\225s\276=\234\275\254>\342\353d?\361\266\301>\210\330p? \035d>\'L1?\n\007Z?3\\\001?\232\370\177?\340\306\3549\200\253\354:\031>\354;\024\212\352<\016\323\343=\017{\312>\257\317t?\0132+>\022\223\016?V\256|?j\251Q=\t\356F>\304H ?\351\266o?\363\375s>\355\3329?\035\263K??v&?\272\342h?\3767\250>r\346a?q|\324>\212\232x? \330\345=\224\014\314>\033uu?\365\273!>x0\010?\275\363~?\321\224\205<1g\203=\261\361u>\221\337:?\275\327I?\002\315*?]`c?\240b\313>\260/u?\000\266%>\371\344\n??%~?6\250\353<\304\340\344=\240L\313>\243&u?\217:&>\217>\013?B\006~?\236\353\372<\026<\363=\262X\326>\3748y?\260\"\323=j^\275>I\250n?\230W\201>\313UA?IM=?PHE?\301\3774?h\034T?au\021?\315<{?\216\220\225=\\\244\212>\0333J?\251\371)?Qxd??\216\304>^2r?\240\361P>>O&?\204\021i?\001\005\247>{\022a?\355\207\331>\"8z?i\316\264=\014\330\244>\222\212_?\344\276\342>/\250|?\372(S=1FH>\301\032!?^\340n?\255\246\177>O\323??CY@?\376L??\020dA?#0=?\031\200E?\313\2064?\333\343T?\266f\017?6K|?l\303i=\027l\\>\232\371,?\377d`?\306\240\335>\221b{?Q\004\221=\224\277\206>\n\222F?=/2?\016\246X?\2535\005?p\223\177?\204\303\330;oT\327<w\253\321=J4\274>\275\013n?K\217\205>bpE?\347\2504?\313\253T??\373\017?`\002|?\251l{=\305\375k>\314\2325?\'\032S?\037\030\024?\343\260y?\331\351\304=\374\372\261>\3618h?{\215\254>\213\314d?\203|\302>\0238q?2\327^>\266X.?\000p^?zL\351>\247\374}?\273\245\377<^\253\367=\332\267\331>\200Fz?F\027\263=\024n\243>\314\206^?\334\305\350>\200\344}?\252\303\005=[e\001>\020\027\342>f\201|?\016\231\\=\227\267P>\341,&?\226:i?\036\367\245>\301U`?\224\374\335>\027{{?\216\017\216=\3464\204>3#D?\037u7?\334\361O?W#\034?\000\241s?K_<>E\270\031?\370\251u?+\263\036>\301\032\006?\361j\177?\247\270\024<\017_\023=\252\021\016>\207\267\364>\261\200\177?*\037\376;\246&\374<\305c\364=\3739\327>\205\201y?\324\211\312=\033\202\266>\365\346j?d\337\232>A\rX?\213\333\006?\345C\177?\336\220;<*k9=i\0061>\362k\022?\222\262z?\016*\246=\274\256\230>\201MV?W\237\013?\255\343}?\221\367\005=\336\225\001>\213_\342>A\222|?b\177X=\357\rM>\033\376#?\"\302k?#!\225>\257bS?q[\023?2%z?\336\020\267=\273\263\246>\341\331`?\357\336\332>m\235z?r\262\250=\034\315\232>\316\376W?J\003\007?H;\177?\025!D<\n\310A=\026\2358>\212T\027?\315~w?\352\215\003>\216N\345>z7}?\27710=x\235(>\264\331\014?xk}?\363w#=\324\361\034>\354\343\004?W\240\177?\345\n\277;\302\355\275<{\206\271=\006\270\250>\000>b?\307c\322>\265\337w?U\310\373=\006\324\334>\362*{?\203\266\227="
      }
    }
  }
}
node {
  name: "Test/TestInput/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Test/TestInput/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\'\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Test/TestInput/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Test/TestInput/strided_slice"
  op: "StridedSlice"
  input: "Test/TestInput/raw_data"
  input: "Test/TestInput/strided_slice/stack"
  input: "Test/TestInput/strided_slice/stack_1"
  input: "Test/TestInput/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "Test/TestInput/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\020\'\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "Test/TestInput/Reshape"
  op: "Reshape"
  input: "Test/TestInput/strided_slice"
  input: "Test/TestInput/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 10000
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Test/TestInput/assert_positive/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 9999
      }
    }
  }
}
node {
  name: "Test/TestInput/assert_positive/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Test/TestInput/assert_positive/assert_less/Less"
  op: "Less"
  input: "Test/TestInput/assert_positive/Const"
  input: "Test/TestInput/assert_positive/x"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Test/TestInput/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Test/TestInput/assert_positive/assert_less/All"
  op: "All"
  input: "Test/TestInput/assert_positive/assert_less/Less"
  input: "Test/TestInput/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Test/TestInput/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "epoch_size == 0, decrease batch_size or num_steps"
      }
    }
  }
}
node {
  name: "Test/TestInput/assert_positive/assert_less/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x > 0 did not hold element-wise: x = "
      }
    }
  }
}
node {
  name: "Test/TestInput/assert_positive/assert_less/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Test/TestInput/assert_positive/x:0"
      }
    }
  }
}
node {
  name: "Test/TestInput/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "epoch_size == 0, decrease batch_size or num_steps"
      }
    }
  }
}
node {
  name: "Test/TestInput/assert_positive/assert_less/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x > 0 did not hold element-wise: x = "
      }
    }
  }
}
node {
  name: "Test/TestInput/assert_positive/assert_less/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Test/TestInput/assert_positive/x:0"
      }
    }
  }
}
node {
  name: "Test/TestInput/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "Test/TestInput/assert_positive/assert_less/All"
  input: "Test/TestInput/assert_positive/assert_less/Assert/Assert/data_0"
  input: "Test/TestInput/assert_positive/assert_less/Assert/Assert/data_1"
  input: "Test/TestInput/assert_positive/assert_less/Assert/Assert/data_2"
  input: "Test/TestInput/assert_positive/x"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "Test/TestInput/epoch_size/input"
  op: "Const"
  input: "^Test/TestInput/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 9999
      }
    }
  }
}
node {
  name: "Test/TestInput/epoch_size"
  op: "Identity"
  input: "Test/TestInput/epoch_size/input"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Test/TestInput/input_producer/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Test/TestInput/input_producer/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Test/TestInput/input_producer/range"
  op: "Range"
  input: "Test/TestInput/input_producer/range/start"
  input: "Test/TestInput/epoch_size"
  input: "Test/TestInput/input_producer/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Test/TestInput/input_producer/fraction_of_32_full/fraction_of_32_full"
  op: "FIFOQueue"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "capacity"
    value {
      i: 32
    }
  }
  attr {
    key: "component_types"
    value {
      list {
        type: DT_INT32
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Test/TestInput/input_producer/fraction_of_32_full/fraction_of_32_full_EnqueueMany"
  op: "QueueEnqueueMany"
  input: "Test/TestInput/input_producer/fraction_of_32_full/fraction_of_32_full"
  input: "Test/TestInput/input_producer/range"
  attr {
    key: "Tcomponents"
    value {
      list {
        type: DT_INT32
      }
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Test/TestInput/input_producer/fraction_of_32_full/fraction_of_32_full"
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "Test/TestInput/input_producer/fraction_of_32_full/fraction_of_32_full_Close"
  op: "QueueClose"
  input: "Test/TestInput/input_producer/fraction_of_32_full/fraction_of_32_full"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Test/TestInput/input_producer/fraction_of_32_full/fraction_of_32_full"
      }
    }
  }
  attr {
    key: "cancel_pending_enqueues"
    value {
      b: false
    }
  }
}
node {
  name: "Test/TestInput/input_producer/fraction_of_32_full/fraction_of_32_full_Close_1"
  op: "QueueClose"
  input: "Test/TestInput/input_producer/fraction_of_32_full/fraction_of_32_full"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Test/TestInput/input_producer/fraction_of_32_full/fraction_of_32_full"
      }
    }
  }
  attr {
    key: "cancel_pending_enqueues"
    value {
      b: true
    }
  }
}
node {
  name: "Test/TestInput/input_producer/fraction_of_32_full/fraction_of_32_full_Size"
  op: "QueueSize"
  input: "Test/TestInput/input_producer/fraction_of_32_full/fraction_of_32_full"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Test/TestInput/input_producer/fraction_of_32_full/fraction_of_32_full"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Test/TestInput/input_producer/fraction_of_32_full/Cast"
  op: "Cast"
  input: "Test/TestInput/input_producer/fraction_of_32_full/fraction_of_32_full_Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Test/TestInput/input_producer/fraction_of_32_full/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03125
      }
    }
  }
}
node {
  name: "Test/TestInput/input_producer/fraction_of_32_full/mul"
  op: "Mul"
  input: "Test/TestInput/input_producer/fraction_of_32_full/Cast"
  input: "Test/TestInput/input_producer/fraction_of_32_full/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "queue/Test/TestInput/input_producer/fraction_of_32_full/fraction_of_32_full/Test/TestInput/input_producer/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "queue/Test/TestInput/input_producer/fraction_of_32_full/fraction_of_32_full/Test/TestInput/input_producer"
      }
    }
  }
}
node {
  name: "queue/Test/TestInput/input_producer/fraction_of_32_full/fraction_of_32_full/Test/TestInput/input_producer"
  op: "ScalarSummary"
  input: "queue/Test/TestInput/input_producer/fraction_of_32_full/fraction_of_32_full/Test/TestInput/input_producer/tags"
  input: "Test/TestInput/input_producer/fraction_of_32_full/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Test/TestInput/fraction_of_32_full_Dequeue"
  op: "QueueDequeue"
  input: "Test/TestInput/input_producer/fraction_of_32_full/fraction_of_32_full"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Test/TestInput/input_producer/fraction_of_32_full/fraction_of_32_full"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "component_types"
    value {
      list {
        type: DT_INT32
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "Test/TestInput/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Test/TestInput/mul"
  op: "Mul"
  input: "Test/TestInput/fraction_of_32_full_Dequeue"
  input: "Test/TestInput/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Test/TestInput/Slice/begin/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Test/TestInput/Slice/begin/2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Test/TestInput/Slice/begin"
  op: "Pack"
  input: "Test/TestInput/Slice/begin/0"
  input: "Test/TestInput/mul"
  input: "Test/TestInput/Slice/begin/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Test/TestInput/Slice/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Test/TestInput/Slice"
  op: "Slice"
  input: "Test/TestInput/Reshape"
  input: "Test/TestInput/Slice/begin"
  input: "Test/TestInput/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Test/TestInput/mul_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Test/TestInput/mul_1"
  op: "Mul"
  input: "Test/TestInput/fraction_of_32_full_Dequeue"
  input: "Test/TestInput/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Test/TestInput/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Test/TestInput/add"
  op: "Add"
  input: "Test/TestInput/mul_1"
  input: "Test/TestInput/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Test/TestInput/Slice_1/begin/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Test/TestInput/Slice_1/begin/2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Test/TestInput/Slice_1/begin"
  op: "Pack"
  input: "Test/TestInput/Slice_1/begin/0"
  input: "Test/TestInput/add"
  input: "Test/TestInput/Slice_1/begin/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Test/TestInput/Slice_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Test/TestInput/Slice_1"
  op: "Slice"
  input: "Test/TestInput/Reshape"
  input: "Test/TestInput/Slice_1/begin"
  input: "Test/TestInput/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Test/Model/pack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Test/Model/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Test/Model/zeros"
  op: "Fill"
  input: "Test/Model/pack"
  input: "Test/Model/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Test/Model/pack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Test/Model/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Test/Model/zeros_1"
  op: "Fill"
  input: "Test/Model/pack_1"
  input: "Test/Model/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Test/Model/RNN/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Test/Model/RNN/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Test/Model/RNN/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Test/Model/RNN/strided_slice"
  op: "StridedSlice"
  input: "Test/TestInput/Slice"
  input: "Test/Model/RNN/strided_slice/stack"
  input: "Test/Model/RNN/strided_slice/stack_1"
  input: "Test/Model/RNN/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "Test/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Test/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Test/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/concat/concat_dim"
  input: "Test/Model/RNN/strided_slice"
  input: "Test/Model/zeros"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 65
          }
        }
      }
    }
  }
}
node {
  name: "Test/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Test/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Test/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/add"
  op: "Add"
  input: "Test/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Test/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Test/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Test/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Test/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/concat"
  op: "Concat"
  input: "Test/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/concat/concat_dim"
  input: "Test/Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Tanh"
  input: "Test/Model/zeros_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Test/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/MatMul"
  op: "MatMul"
  input: "Test/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/concat"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Test/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/add"
  op: "Add"
  input: "Test/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/MatMul"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Test/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Tanh"
  op: "Tanh"
  input: "Test/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Test/Model/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Test/Model/concat"
  op: "Identity"
  input: "Test/Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Test/Model/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377@\000\000\000"
      }
    }
  }
}
node {
  name: "Test/Model/Reshape"
  op: "Reshape"
  input: "Test/Model/concat"
  input: "Test/Model/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "Test/Model/MatMul"
  op: "MatMul"
  input: "Test/Model/Reshape"
  input: "Model/softmax_w/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Test/Model/add"
  op: "Add"
  input: "Test/Model/MatMul"
  input: "Model/softmax_b/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Test/Model/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "Test/Model/Reshape_1"
  op: "Reshape"
  input: "Test/TestInput/Slice_1"
  input: "Test/Model/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Test/Model/SquaredDifference"
  op: "SquaredDifference"
  input: "Test/Model/add"
  input: "Test/Model/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Test/Model/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Test/Model/Mean"
  op: "Mean"
  input: "Test/Model/SquaredDifference"
  input: "Test/Model/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "Model/softmax_w"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/softmax_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "Model/softmax_b"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/softmax_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "Train/Model/Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/Variable"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "Model/global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/pack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  attr {
    key: "N"
    value {
      i: 8
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/pack"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 8
          }
        }
        string_val: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix"
        string_val: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias"
        string_val: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix"
        string_val: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias"
        string_val: "Model/softmax_w"
        string_val: "Model/softmax_b"
        string_val: "Train/Model/Variable"
        string_val: "Model/global_step"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "Concat"
  input: "report_uninitialized_variables/boolean_mask/concat/concat_dim"
  input: "report_uninitialized_variables/boolean_mask/concat/values_0"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Gather"
  op: "Gather"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix/Assign"
  input: "^Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias/Assign"
  input: "^Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix/Assign"
  input: "^Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias/Assign"
  input: "^Model/softmax_w/Assign"
  input: "^Model/softmax_b/Assign"
  input: "^Train/Model/Variable/Assign"
  input: "^Model/global_step/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init_1"
  input: "^init_all_tables"
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 8
          }
        }
        string_val: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias"
        string_val: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix"
        string_val: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias"
        string_val: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix"
        string_val: "Model/global_step"
        string_val: "Model/softmax_b"
        string_val: "Model/softmax_w"
        string_val: "Train/Model/Variable"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 8
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/Const"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix"
  input: "Model/global_step"
  input: "Model/softmax_b"
  input: "Model/softmax_w"
  input: "Train/Model/Variable"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_1/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_1"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_1/tensor_names"
  input: "save/RestoreV2_1/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix"
  input: "save/RestoreV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell0/BasicRNNCell/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 65
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_2/tensor_names"
  input: "save/RestoreV2_2/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias"
  input: "save/RestoreV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_3/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix"
      }
    }
  }
}
node {
  name: "save/RestoreV2_3/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_3"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_3/tensor_names"
  input: "save/RestoreV2_3/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix"
  input: "save/RestoreV2_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/RNN/MultiRNNCell/Cell1/BasicRNNCell/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_4/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "Model/global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2_4/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_4"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_4/tensor_names"
  input: "save/RestoreV2_4/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "Model/global_step"
  input: "save/RestoreV2_4"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_5/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "Model/softmax_b"
      }
    }
  }
}
node {
  name: "save/RestoreV2_5/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_5"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_5/tensor_names"
  input: "save/RestoreV2_5/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "Model/softmax_b"
  input: "save/RestoreV2_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/softmax_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_6/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "Model/softmax_w"
      }
    }
  }
}
node {
  name: "save/RestoreV2_6/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_6"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_6/tensor_names"
  input: "save/RestoreV2_6/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "Model/softmax_w"
  input: "save/RestoreV2_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Model/softmax_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_7/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "Train/Model/Variable"
      }
    }
  }
}
node {
  name: "save/RestoreV2_7/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_7"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_7/tensor_names"
  input: "save/RestoreV2_7/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "Train/Model/Variable"
  input: "save/RestoreV2_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Train/Model/Variable"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "queue/Train/TrainInput/input_producer/fraction_of_32_full/fraction_of_32_full/Train/TrainInput/input_producer"
  input: "Train/Training_Loss"
  input: "Train/Learning_Rate"
  input: "queue/Valid/ValidInput/input_producer/fraction_of_32_full/fraction_of_32_full/Valid/ValidInput/input_producer"
  input: "Valid/Validation_Loss"
  input: "queue/Test/TestInput/input_producer/fraction_of_32_full/fraction_of_32_full/Test/TestInput/input_producer"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
versions {
  producer: 17
}
